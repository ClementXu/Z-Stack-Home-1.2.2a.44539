###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                28/Aug/2016  10:30:53
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\mt\MT_ZDO.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D ZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\MT_ZDO.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\MT_ZDO.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
      4            Revision:       $Revision: 42371 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          #ifdef MT_ZDO_FUNC
     40          
     41          /**************************************************************************************************
     42           * INCLUDES
     43           **************************************************************************************************/
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Nv.h"
     47          #include "MT.h"
     48          #include "MT_ZDO.h"
     49          #include "AddrMgr.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          
     58          #if defined ( MT_ZDO_EXTENSIONS )
     59            #include "rtg.h"
     60          #endif
     61          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     62            #include "ZDSecMgr.h"
     63          #endif
     64          
     65          #include "nwk_util.h"
     66          
     67          /**************************************************************************************************
     68           * CONSTANTS
     69           **************************************************************************************************/
     70          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     71          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     72          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     73          #define MT_ZDO_BEACON_IND_LEN             21
     74          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     75          #define MT_ZDO_JOIN_CNF_LEN               5
     76          
     77          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     78          // sizeof(zdoConcentratorInd_t) is not usable.
     79          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     80          
     81          #define MTZDO_RESPONSE_BUFFER_LEN   100
     82          
     83          #define MTZDO_MAX_MATCH_CLUSTERS    16
     84          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     85          
     86          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     87          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     88          
     89          #define MT_ZDO_STATUS_LEN   1
     90          
     91          #if defined ( MT_ZDO_EXTENSIONS )
     92          typedef struct
     93          {
     94            uint16            ami;
     95            uint16            keyNvId;   // index to the Link Key table in NV
     96            ZDSecMgr_Authentication_Option authenticateOption;
     97          } ZDSecMgrEntry_t;
     98          #endif  // MT_ZDO_EXTENSIONS
     99          
    100          /**************************************************************************************************
    101           * GLOBAL VARIABLES
    102           **************************************************************************************************/
    103          uint32 _zdoCallbackSub;
    104          uint8 *pBeaconIndBuf = NULL;
    105          
    106          /**************************************************************************************************
    107           * LOCAL VARIABLES
    108           **************************************************************************************************/
    109          bool ignoreIndication = FALSE;
    110          
    111          /**************************************************************************************************
    112           * LOCAL FUNCTIONS
    113           **************************************************************************************************/
    114          #if defined (MT_ZDO_FUNC)
    115          static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    116          static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    117          static void MT_ZdoNodeDescRequest(uint8 *pBuf);
    118          static void MT_ZdoPowerDescRequest(uint8 *pBuf);
    119          static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    120          static void MT_ZdoActiveEpRequest(uint8 *pBuf);
    121          static void MT_ZdoMatchDescRequest(uint8 *pBuf);
    122          static void MT_ZdoComplexDescRequest(uint8 *pBuf);
    123          static void MT_ZdoUserDescRequest(uint8 *pBuf);
    124          static void MT_ZdoEndDevAnnce(uint8 *pBuf);
    125          static void MT_ZdoUserDescSet(uint8 *pBuf);
    126          static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    127          static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    128          static void MT_ZdoBindRequest(uint8 *pBuf);
    129          static void MT_ZdoUnbindRequest(uint8 *pBuf);
    130          #if defined ( MT_SYS_KEY_MANAGEMENT )
    131          static void MT_ZdoSetLinkKey(uint8 *pBuf);
    132          static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    133          static void MT_ZdoGetLinkKey(uint8 *pBuf);
    134          #endif /* MT_SYS_KEY_MANAGEMENT */
    135          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    136          static void MT_ZdoJoinReq(uint8 *pBuf);
    137          /* Call back function */
    138          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    139          void *MT_ZdoBeaconIndCB ( void *pStr );
    140          void *MT_ZdoJoinCnfCB ( void *pStr );
    141          #if defined (MT_ZDO_MGMT)
    142          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    143          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    144          static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    145          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    146          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    147          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    148          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    149          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    150          #endif /* MT_ZDO_MGMT */
    151          static void MT_ZdoSendData( uint8 *pBuf );
    152          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    153          static void MT_ZdoStartupFromApp(uint8 *pBuf);
    154          static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    155          static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    156          static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
    157          #endif /* MT_ZDO_FUNC */
    158          
    159          #if defined (MT_ZDO_CB_FUNC)
    160          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    161          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    162          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    163          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    164          void* MT_ZdoSrcRtgCB( void *pStr );
    165          static void *MT_ZdoConcentratorIndCB(void *pStr);
    166          static void *MT_ZdoLeaveInd(void *vPtr);
    167          void *MT_ZdoTcDeviceInd( void *params );
    168          void *MT_ZdoPermitJoinInd( void *duration );
    169          #endif /* MT_ZDO_CB_FUNC */
    170          
    171          #if defined ( MT_ZDO_EXTENSIONS )
    172          #if ( ZG_BUILD_COORDINATOR_TYPE )
    173          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    174          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    175          #endif // ZDO_COORDINATOR
    176          static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    177          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    178          static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    179          static void MT_ZdoExtRouteDisc( uint8 *pBuf );
    180          static void MT_ZdoExtRouteCheck( uint8 *pBuf );
    181          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    183          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    184          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    185          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    186          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    187          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    188          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    189          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    190          static void MT_ZdoExtSetParams( uint8 *pBuf );
    191          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    192          #endif // MT_ZDO_EXTENSIONS
    193          
    194          #if defined (MT_ZDO_FUNC)
    195          /***************************************************************************************************
    196           * @fn      MT_ZdoInit
    197           *
    198           * @brief   MT ZDO initialization
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           ***************************************************************************************************/
    204          void MT_ZdoInit(void)
    205          {
    206          #ifdef MT_ZDO_CB_FUNC
    207            /* Register with ZDO for indication callbacks */
    208            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    209            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
    210            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
    211            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
    212            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
    213          #endif
    214          }
    215          
    216          /***************************************************************************************************
    217           * @fn      MT_ZdoCommandProcessing
    218           *
    219           * @brief
    220           *
    221           *   Process all the ZDO commands that are issued by test tool
    222           *
    223           * @param   pBuf - pointer to the msg buffer
    224           *
    225           *          | LEN  | CMD0  | CMD1  |  DATA  |
    226           *          |  1   |   1   |   1   |  0-255 |
    227           *
    228           * @return  status
    229           ***************************************************************************************************/
    230          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
    231          {
    232            uint8 status = MT_RPC_SUCCESS;
    233          
    234            switch (pBuf[MT_RPC_POS_CMD1])
    235            {
    236          #if defined ( ZDO_NWKADDR_REQUEST )
    237              case MT_ZDO_NWK_ADDR_REQ:
    238                MT_ZdoNWKAddressRequest(pBuf);
    239                break;
    240          #endif
    241          
    242          #if defined ( ZDO_IEEEADDR_REQUEST )
    243              case MT_ZDO_IEEE_ADDR_REQ:
    244                MT_ZdoIEEEAddrRequest(pBuf);
    245                break;
    246          #endif
    247          
    248          #if defined ( ZDO_NODEDESC_REQUEST )
    249              case MT_ZDO_NODE_DESC_REQ:
    250                MT_ZdoNodeDescRequest(pBuf);
    251                break;
    252          #endif
    253          
    254          #if defined ( ZDO_POWERDESC_REQUEST )
    255              case MT_ZDO_POWER_DESC_REQ:
    256                MT_ZdoPowerDescRequest(pBuf);
    257                break;
    258          #endif
    259          
    260          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    261              case MT_ZDO_SIMPLE_DESC_REQ:
    262                MT_ZdoSimpleDescRequest(pBuf);
    263                break;
    264          #endif
    265          
    266          #if defined ( ZDO_ACTIVEEP_REQUEST )
    267              case MT_ZDO_ACTIVE_EP_REQ:
    268                MT_ZdoActiveEpRequest(pBuf);
    269                break;
    270          #endif
    271          
    272          #if defined ( ZDO_MATCH_REQUEST )
    273              case MT_ZDO_MATCH_DESC_REQ:
    274                MT_ZdoMatchDescRequest(pBuf);
    275                break;
    276          #endif
    277          
    278          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    279              case MT_ZDO_COMPLEX_DESC_REQ:
    280                MT_ZdoComplexDescRequest(pBuf);
    281                break;
    282          #endif
    283          
    284          #if defined ( ZDO_USERDESC_REQUEST )
    285              case MT_ZDO_USER_DESC_REQ:
    286                MT_ZdoUserDescRequest(pBuf);
    287                break;
    288          #endif
    289          
    290          #if defined ( ZDO_ENDDEVICE_ANNCE )
    291              case MT_ZDO_END_DEV_ANNCE:
    292                MT_ZdoEndDevAnnce(pBuf);
    293                break;
    294          #endif
    295          
    296          #if defined ( ZDO_USERDESCSET_REQUEST )
    297              case MT_ZDO_USER_DESC_SET:
    298                MT_ZdoUserDescSet(pBuf);
    299                break;
    300          #endif
    301          
    302          #if defined ( ZDO_SERVERDISC_REQUEST )
    303              case MT_ZDO_SERVICE_DISC_REQ:
    304                MT_ZdoServiceDiscRequest(pBuf);
    305                break;
    306          #endif
    307          
    308          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    309              case MT_ZDO_END_DEV_BIND_REQ:
    310                MT_ZdoEndDevBindRequest(pBuf);
    311                break;
    312          #endif
    313          
    314          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    315              case MT_ZDO_BIND_REQ:
    316                MT_ZdoBindRequest(pBuf);
    317                break;
    318          #endif
    319          
    320          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    321              case MT_ZDO_UNBIND_REQ:
    322                MT_ZdoUnbindRequest(pBuf);
    323                break;
    324          #endif
    325          
    326          #if defined ( MT_SYS_KEY_MANAGEMENT )
    327              case MT_ZDO_SET_LINK_KEY:
    328                MT_ZdoSetLinkKey(pBuf);
    329                break;
    330          
    331              case MT_ZDO_REMOVE_LINK_KEY:
    332                MT_ZdoRemoveLinkKey(pBuf);
    333                break;
    334          
    335              case MT_ZDO_GET_LINK_KEY:
    336                MT_ZdoGetLinkKey(pBuf);
    337                break;
    338          #endif // MT_SYS_KEY_MANAGEMENT
    339          
    340          #if defined ( ZDO_MANUAL_JOIN )
    341              case MT_ZDO_NWK_DISCOVERY_REQ:
    342                MT_ZdoNetworkDiscoveryReq(pBuf);
    343                break;
    344          
    345              case MT_ZDO_JOIN_REQ:
    346                MT_ZdoJoinReq(pBuf);
    347                break;
    348          #endif
    349          
    350          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    351              case MT_ZDO_MGMT_NWKDISC_REQ:
    352                MT_ZdoMgmtNwkDiscRequest(pBuf);
    353                break;
    354          #endif
    355          
    356          #if defined ( ZDO_MGMT_LQI_REQUEST )
    357              case MT_ZDO_MGMT_LQI_REQ:
    358                MT_ZdoMgmtLqiRequest(pBuf);
    359                break;
    360          #endif
    361          
    362          #if defined ( ZDO_MGMT_RTG_REQUEST )
    363              case MT_ZDO_MGMT_RTG_REQ:
    364                MT_ZdoMgmtRtgRequest(pBuf);
    365                break;
    366          #endif
    367          
    368          #if defined ( ZDO_MGMT_BIND_REQUEST )
    369              case MT_ZDO_MGMT_BIND_REQ:
    370                MT_ZdoMgmtBindRequest(pBuf);
    371                break;
    372          #endif
    373          
    374          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    375              case MT_ZDO_MGMT_LEAVE_REQ:
    376                MT_ZdoMgmtLeaveRequest(pBuf);
    377                break;
    378          #endif
    379          
    380          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    381              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    382                MT_ZdoMgmtDirectJoinRequest(pBuf);
    383                break;
    384          #endif
    385          
    386          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    387              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    388                MT_ZdoMgmtPermitJoinRequest(pBuf);
    389                break;
    390          #endif
    391          
    392          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    393              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    394                MT_ZdoMgmtNwkUpdateRequest(pBuf);
    395                break;
    396          #endif
    397          
    398          #if defined ( ZDO_NETWORKSTART_REQUEST )
    399              case MT_ZDO_STARTUP_FROM_APP:
    400                MT_ZdoStartupFromApp(pBuf);
    401                break;
    402          #endif
    403          
    404              case MT_ZDO_SEND_DATA:
    405                MT_ZdoSendData( pBuf );
    406                break;
    407          
    408              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    409                MT_ZdoNwkAddrOfInterestReq( pBuf );
    410                break;
    411          
    412              case MT_ZDO_MSG_CB_REGISTER:
    413                MT_ZdoRegisterForZDOMsg(pBuf);
    414                break;
    415          
    416              case MT_ZDO_MSG_CB_REMOVE:
    417                MT_ZdoRemoveRegisteredCB(pBuf);
    418                break;
    419          
    420              case MT_ZDO_SET_REJOIN_PARAMS:
    421                MT_ZdoSetRejoinParameters(pBuf);
    422                break;
    423          
    424          #if defined ( MT_ZDO_EXTENSIONS )
    425          #if ( ZG_BUILD_COORDINATOR_TYPE )
    426              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    427                MT_ZdoSecUpdateNwkKey( pBuf );
    428                break;
    429          
    430              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    431                MT_ZdoSecSwitchNwkKey( pBuf );
    432                break;
    433          #endif // ZDO_COORDINATOR
    434              case MT_ZDO_SEC_ADD_LINK_KEY:
    435                MT_ZdoSecAddLinkKey( pBuf );
    436                break;
    437          
    438              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    439                MT_ZdoSecEntryLookupExt( pBuf );
    440                break;
    441          
    442              case MT_ZDO_SEC_DEVICE_REMOVE:
    443                 MT_ZdoSecDeviceRemove( pBuf );
    444                 break;
    445          
    446              case MT_ZDO_EXT_ROUTE_DISC:
    447                 MT_ZdoExtRouteDisc( pBuf );
    448                 break;
    449          
    450              case MT_ZDO_EXT_ROUTE_CHECK:
    451                 MT_ZdoExtRouteCheck( pBuf );
    452                 break;
    453          
    454              case MT_ZDO_EXT_REMOVE_GROUP:
    455                MT_ZdoExtRemoveGroup( pBuf );
    456                break;
    457          
    458              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    459                MT_ZdoExtRemoveAllGroup( pBuf );
    460                break;
    461          
    462              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    463                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
    464                break;
    465          
    466              case MT_ZDO_EXT_FIND_GROUP:
    467                MT_ZdoExtFindGroup( pBuf );
    468                break;
    469          
    470              case MT_ZDO_EXT_ADD_GROUP:
    471                MT_ZdoExtAddGroup( pBuf );
    472                break;
    473          
    474              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    475                MT_ZdoExtCountAllGroups( pBuf );
    476                break;
    477          
    478              case MT_ZDO_EXT_RX_IDLE:
    479                MT_ZdoExtRxIdle( pBuf );
    480                break;
    481          
    482              case MT_ZDO_EXT_NWK_INFO:
    483                MT_ZdoExtNwkInfo( pBuf );
    484                break;
    485          
    486              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    487                MT_ZdoExtSecApsRemoveReq( pBuf );
    488                break;
    489          
    490              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    491                ZDApp_ForceConcentratorChange();
    492                break;
    493          
    494              case MT_ZDO_EXT_SET_PARAMS:
    495                MT_ZdoExtSetParams( pBuf );
    496                break;
    497          #endif  // MT_ZDO_EXTENSIONS
    498          
    499              default:
    500                status = MT_RPC_ERR_COMMAND_ID;
    501                break;
    502            }
    503          
    504            return status;
    505          }
    506          
    507          /***************************************************************************************************
    508           * @fn      MT_ZdoNwkAddrReq
    509           *
    510           * @brief   Handle a nwk address request.
    511           *
    512           * @param   pData  - MT message data
    513           *
    514           * @return  void
    515           ***************************************************************************************************/
    516          static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
    517          {
    518            uint8 cmdId;
    519            uint8 retValue;
    520            uint8 reqType;
    521            uint8 startIndex;
    522            uint8 *pExtAddr;
    523          
    524            /* parse header */
    525            cmdId = pBuf[MT_RPC_POS_CMD1];
    526            pBuf += MT_RPC_FRAME_HDR_SZ;
    527          
    528            /* parse parameters */
    529            pExtAddr = pBuf;
    530            pBuf += Z_EXTADDR_LEN;
    531          
    532            /* Request type */
    533            reqType = *pBuf++;
    534          
    535            /* Start index */
    536            startIndex = *pBuf;
    537          
    538            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
    539          
    540            /* Build and send back the response */
    541            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    542          
    543          #if defined ( MT_ZDO_EXTENSIONS )
    544            {
    545              // Force a response message if the ext address matches a child of this device
    546              associated_devices_t *pAssoc;
    547              uint8 buf[21];
    548              uint8 *pBuf = buf;
    549          
    550              if ( (ZSTACK_ROUTER_BUILD)
    551                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    552                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    553              {
    554                uint16 nwkAddr = NLME_GetShortAddr();
    555          
    556                *pBuf++ = LO_UINT16(nwkAddr);
    557                *pBuf++ = HI_UINT16(nwkAddr);
    558                *pBuf++ = 0;
    559                *pBuf++ = LO_UINT16(NWK_addr_rsp);
    560                *pBuf++ = HI_UINT16(NWK_addr_rsp);
    561                *pBuf++ = 0;
    562                *pBuf++ = 0;
    563                *pBuf++ = LO_UINT16(nwkAddr);
    564                *pBuf++ = HI_UINT16(nwkAddr);
    565          
    566                *pBuf++ = ZSuccess;
    567          
    568                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
    569          
    570                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
    571                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
    572                *pBuf = 0;
    573          
    574                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
    575                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
    576              }
    577            }
    578          #endif
    579          }
    580          
    581          /***************************************************************************************************
    582           * @fn      MT_ZdoIEEEAddrRequest
    583           *
    584           * @brief   Handle a IEEE address request.
    585           *
    586           * @param   pData  - MT message data
    587           *
    588           * @return  void
    589           ***************************************************************************************************/
    590          static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
    591          {
    592            uint8 cmdId;
    593            uint8 retValue;
    594            uint16 shortAddr;
    595            uint8 reqType;
    596            uint8 startIndex;
    597          
    598            /* parse header */
    599            cmdId = pBuf[MT_RPC_POS_CMD1];
    600            pBuf += MT_RPC_FRAME_HDR_SZ;
    601          
    602            /* Dev address */
    603            shortAddr = osal_build_uint16( pBuf );
    604            pBuf += 2;
    605          
    606            /* request type */
    607            reqType = *pBuf++;
    608          
    609            /* start index */
    610            startIndex = *pBuf;
    611          
    612            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
    613          
    614            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    615          }
    616          
    617          /***************************************************************************************************
    618           * @fn      MT_ZdoNodeDescRequest
    619           *
    620           * @brief   Handle a Node Descriptor request.
    621           *
    622           * @param   pData  - MT message data
    623           *
    624           * @return  void
    625           ***************************************************************************************************/
    626          static void MT_ZdoNodeDescRequest (uint8 *pBuf)
    627          {
    628            uint8 cmdId;
    629            uint8 retValue;
    630            zAddrType_t destAddr;
    631            uint16 shortAddr;
    632          
    633            /* parse header */
    634            cmdId = pBuf[MT_RPC_POS_CMD1];
    635            pBuf += MT_RPC_FRAME_HDR_SZ;
    636          
    637            /* Destination address */
    638            destAddr.addrMode = Addr16Bit;
    639            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    640            pBuf += 2;
    641          
    642            /* Network address of interest */
    643            shortAddr = osal_build_uint16( pBuf );
    644          
    645            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
    646          
    647            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    648          }
    649          
    650          /***************************************************************************************************
    651           * @fn      MT_ZdoPowerDescRequest
    652           *
    653           * @brief   Handle a Power Descriptor request.
    654           *
    655           * @param   pData  - MT message data
    656           *
    657           * @return  void
    658           ***************************************************************************************************/
    659          static void MT_ZdoPowerDescRequest(uint8 *pBuf)
    660          {
    661            uint8 cmdId;
    662            uint8 retValue;
    663            zAddrType_t destAddr;
    664            uint16 shortAddr;
    665          
    666            /* parse header */
    667            cmdId = pBuf[MT_RPC_POS_CMD1];
    668            pBuf += MT_RPC_FRAME_HDR_SZ;
    669          
    670            /* Dev address */
    671            destAddr.addrMode = Addr16Bit;
    672            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    673            pBuf += 2;
    674          
    675            /* Network address of interest */
    676            shortAddr = osal_build_uint16( pBuf );
    677          
    678            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
    679          
    680            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    681          }
    682          
    683          /***************************************************************************************************
    684           * @fn      MT_ZdoSimpleDescRequest
    685           *
    686           * @brief   Handle a Simple Descriptor request.
    687           *
    688           * @param   pBuf  - MT message data
    689           *
    690           * @return  void
    691           ***************************************************************************************************/
    692          static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
    693          {
    694            uint8 cmdId;
    695            uint8 retValue;
    696            uint8 epInt;
    697            zAddrType_t destAddr;
    698            uint16 shortAddr;
    699          
    700            /* parse header */
    701            cmdId = pBuf[MT_RPC_POS_CMD1];
    702            pBuf += MT_RPC_FRAME_HDR_SZ;
    703          
    704            /* Dev address */
    705            destAddr.addrMode = Addr16Bit;
    706            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    707            pBuf += 2;
    708          
    709            /* Network address of interest */
    710            shortAddr = osal_build_uint16( pBuf );
    711            pBuf += 2;
    712          
    713            /* endpoint/interface */
    714            epInt = *pBuf;
    715          
    716            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
    717          
    718            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    719          }
    720          
    721          /***************************************************************************************************
    722           * @fn      MT_ZdoActiveEpRequest
    723           *
    724           * @brief   Handle a Active EP request.
    725           *
    726           * @param   pBuf  - MT message data
    727           *
    728           * @return  void
    729           ***************************************************************************************************/
    730          static void MT_ZdoActiveEpRequest(uint8 *pBuf)
    731          {
    732            uint8 cmdId;
    733            uint8 retValue;
    734            zAddrType_t destAddr;
    735            uint16 shortAddr;
    736          
    737            /* parse header */
    738            cmdId = pBuf[MT_RPC_POS_CMD1];
    739            pBuf += MT_RPC_FRAME_HDR_SZ;
    740          
    741            /* Dev address */
    742            destAddr.addrMode = Addr16Bit;
    743            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    744            pBuf += 2;
    745          
    746            /* Network address of interest */
    747            shortAddr = osal_build_uint16( pBuf );
    748          
    749            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
    750          
    751            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    752          }
    753          
    754          /***************************************************************************************************
    755           * @fn      MT_ZdoMatchDescRequest
    756           *
    757           * @brief   Handle a Match Descriptor request.
    758           *
    759           * @param   pBuf  - MT message data
    760           *
    761           * @return  void
    762           ***************************************************************************************************/
    763          static void MT_ZdoMatchDescRequest(uint8 *pBuf)
    764          {
    765            uint8 cmdId;
    766            uint8 retValue = 0;
    767            uint8 i, numInClusters, numOutClusters;
    768            uint16 profileId;
    769            zAddrType_t destAddr;
    770            uint16 shortAddr;
    771            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    772          
    773            /* parse header */
    774            cmdId = pBuf[MT_RPC_POS_CMD1];
    775            pBuf += MT_RPC_FRAME_HDR_SZ;
    776          
    777            /* Dev address */
    778            destAddr.addrMode = Addr16Bit;
    779            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    780            pBuf += 2;
    781          
    782            /* Network address of interest */
    783            shortAddr = osal_build_uint16( pBuf );
    784            pBuf += 2;
    785          
    786            /* Profile ID */
    787            profileId = osal_build_uint16( pBuf );
    788            pBuf += 2;
    789          
    790            /* NumInClusters */
    791            numInClusters = *pBuf++;
    792            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
    793            {
    794              /* IN clusters */
    795              for ( i = 0; i < numInClusters; i++ )
    796              {
    797                inClusters[i] = osal_build_uint16( pBuf );
    798                pBuf += 2;
    799              }
    800            }
    801            else
    802            {
    803              retValue = ZDP_INVALID_REQTYPE;
    804            }
    805          
    806            /* NumOutClusters */
    807            numOutClusters = *pBuf++;
    808            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
    809            {
    810              /* OUT Clusters */
    811              for ( i = 0; i < numOutClusters; i++ )
    812              {
    813                outClusters[i] = osal_build_uint16( pBuf );
    814                pBuf += 2;
    815              }
    816            }
    817            else
    818            {
    819              retValue = ZDP_INVALID_REQTYPE;
    820            }
    821          
    822            if ( retValue == 0 )
    823            {
    824              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    825                                                 inClusters, numOutClusters, outClusters, 0);
    826            }
    827          
    828            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    829          }
    830          
    831          /***************************************************************************************************
    832           * @fn      MT_ZdoComplexDescRequest
    833           *
    834           * @brief   Handle a Complex Descriptor request.
    835           *
    836           * @param   pBuf  - MT message data
    837           *
    838           * @return  void
    839           ***************************************************************************************************/
    840          static void MT_ZdoComplexDescRequest(uint8 *pBuf)
    841          {
    842            uint8 cmdId;
    843            uint8 retValue;
    844            zAddrType_t destAddr;
    845            uint16 shortAddr;
    846          
    847            /* parse header */
    848            cmdId = pBuf[MT_RPC_POS_CMD1];
    849            pBuf += MT_RPC_FRAME_HDR_SZ;
    850          
    851            /* Dev address */
    852            destAddr.addrMode = Addr16Bit;
    853            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    854            pBuf += 2;
    855          
    856            /* Network address of interest */
    857            shortAddr = osal_build_uint16( pBuf );
    858          
    859            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
    860          
    861            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    862          }
    863          
    864          /***************************************************************************************************
    865           * @fn      MT_ZdoUserDescRequest
    866           *
    867           * @brief   Handle a User Descriptor request.
    868           *
    869           * @param   pBuf  - MT message data
    870           *
    871           * @return  void
    872           ***************************************************************************************************/
    873          static void MT_ZdoUserDescRequest(uint8 *pBuf)
    874          {
    875            uint8 cmdId;
    876            uint8 retValue;
    877            zAddrType_t destAddr;
    878            uint16 shortAddr;
    879          
    880            /* parse header */
    881            cmdId = pBuf[MT_RPC_POS_CMD1];
    882            pBuf += MT_RPC_FRAME_HDR_SZ;
    883          
    884            /* Dev address */
    885            destAddr.addrMode = Addr16Bit;
    886            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    887            pBuf += 2;
    888          
    889            /* Network address of interest */
    890            shortAddr = osal_build_uint16( pBuf );
    891          
    892            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
    893          
    894            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    895          }
    896          
    897          /***************************************************************************************************
    898           * @fn      MT_ZdoEndDevAnnce
    899           *
    900           * @brief   Handle a End Device Announce Descriptor request.
    901           *
    902           * @param   pBuf  - MT message data
    903           *
    904           * @return  void
    905           ***************************************************************************************************/
    906          static void MT_ZdoEndDevAnnce(uint8 *pBuf)
    907          {
    908            uint8 cmdId;
    909            uint8 retValue;
    910            uint16 shortAddr;
    911            uint8 *pIEEEAddr;
    912          
    913            /* parse header */
    914            cmdId = pBuf[MT_RPC_POS_CMD1];
    915            pBuf += MT_RPC_FRAME_HDR_SZ;
    916          
    917            /* network address */
    918            shortAddr = osal_build_uint16( pBuf );
    919            pBuf += 2;
    920          
    921            /* extended address */
    922            pIEEEAddr = pBuf;
    923            pBuf += Z_EXTADDR_LEN;
    924          
    925            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
    926          
    927            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    928          }
    929          
    930          /***************************************************************************************************
    931           * @fn      MT_ZdoUserDescSet
    932           *
    933           * @brief   Handle a User Descriptor Set.
    934           *
    935           * @param   pBuf  - MT message data
    936           *
    937           * @return  void
    938           ***************************************************************************************************/
    939          static void MT_ZdoUserDescSet(uint8 *pBuf)
    940          {
    941            uint8 cmdId;
    942            uint8 retValue;
    943            zAddrType_t destAddr;
    944            uint16 shortAddr;
    945            UserDescriptorFormat_t userDesc;
    946          
    947            /* parse header */
    948            cmdId = pBuf[MT_RPC_POS_CMD1];
    949            pBuf += MT_RPC_FRAME_HDR_SZ;
    950          
    951            /* Dev address */
    952            destAddr.addrMode = Addr16Bit;
    953            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    954            pBuf += 2;
    955          
    956            /* Network address of interest */
    957            shortAddr = osal_build_uint16( pBuf );
    958            pBuf += 2;
    959          
    960            /* User descriptor */
    961            userDesc.len = *pBuf++;
    962            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
    963          
    964            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
    965          
    966            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    967          }
    968          
    969          /***************************************************************************************************
    970           * @fn      MT_ZdoServiceDiscRequest
    971           *
    972           * @brief   Handle a Server Discovery request.
    973           *
    974           * @param   pBuf  - MT message data
    975           *
    976           * @return  void
    977           ***************************************************************************************************/
    978          static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
    979          {
    980            uint8 cmdId;
    981            uint8 retValue;
    982            uint16 serviceMask;
    983          
    984            /* parse header */
    985            cmdId = pBuf[MT_RPC_POS_CMD1];
    986            pBuf += MT_RPC_FRAME_HDR_SZ;
    987          
    988            /* Service Mask */
    989            serviceMask = osal_build_uint16( pBuf );
    990          
    991            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
    992          
    993            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    994          }
    995          
    996          /***************************************************************************************************
    997           * @fn      MT_ZdoEndDevBindRequest
    998           *
    999           * @brief   Handle a End Device Bind request.
   1000           *
   1001           * @param   pBuf  - MT message data
   1002           *
   1003           * @return  void
   1004           ***************************************************************************************************/
   1005          static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   1006          {
   1007            uint8 cmdId;
   1008            uint8 retValue = 0;
   1009            uint8 i, epInt, numInClusters, numOutClusters;
   1010            zAddrType_t destAddr;
   1011            uint16 shortAddr;
   1012            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1013          
   1014            /* parse header */
   1015            cmdId = pBuf[MT_RPC_POS_CMD1];
   1016            pBuf += MT_RPC_FRAME_HDR_SZ;
   1017          
   1018            /* Dev address */
   1019            destAddr.addrMode = Addr16Bit;
   1020            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1021            pBuf += 2;
   1022          
   1023            /* Local coordinator of the binding */
   1024            shortAddr = osal_build_uint16( pBuf );
   1025            pBuf += 2;
   1026          
   1027            /* For now, skip past the extended address */
   1028            pBuf += Z_EXTADDR_LEN;
   1029          
   1030            /* Endpoint */
   1031            epInt = *pBuf++;
   1032          
   1033            /* Profile ID */
   1034            profileID = osal_build_uint16( pBuf );
   1035            pBuf += 2;
   1036          
   1037            /* NumInClusters */
   1038            numInClusters = *pBuf++;
   1039            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   1040            {
   1041              for ( i = 0; i < numInClusters; i++ )
   1042              {
   1043                inClusters[i] = osal_build_uint16( pBuf );
   1044                pBuf += 2;
   1045              }
   1046            }
   1047            else
   1048            {
   1049              retValue = ZDP_INVALID_REQTYPE;
   1050            }
   1051          
   1052            /* NumOutClusters */
   1053            numOutClusters = *pBuf++;
   1054            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   1055            {
   1056              for ( i = 0; i < numOutClusters; i++ )
   1057              {
   1058                outClusters[i] = osal_build_uint16( pBuf );
   1059                pBuf += 2;
   1060              }
   1061            }
   1062            else
   1063            {
   1064              retValue = ZDP_INVALID_REQTYPE;
   1065            }
   1066          
   1067            if ( retValue == 0 )
   1068            {
   1069              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1070                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   1071            }
   1072          
   1073            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1074          }
   1075          
   1076          /***************************************************************************************************
   1077           * @fn      MT_ZdoBindRequest
   1078           *
   1079           * @brief   Handle a Bind request.
   1080           *
   1081           * @param   pBuf  - MT message data
   1082           *
   1083           * @return  void
   1084           ***************************************************************************************************/
   1085          static void MT_ZdoBindRequest(uint8 *pBuf)
   1086          {
   1087            uint8 cmdId;
   1088            uint8 retValue;
   1089            zAddrType_t destAddr, devAddr;
   1090            uint8 *pSrcAddr, *ptr;
   1091            uint8 srcEPInt, dstEPInt;
   1092            uint16 clusterID;
   1093          
   1094            /* parse header */
   1095            cmdId = pBuf[MT_RPC_POS_CMD1];
   1096            pBuf += MT_RPC_FRAME_HDR_SZ;
   1097          
   1098            /* Dev address */
   1099            destAddr.addrMode = Addr16Bit;
   1100            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1101            pBuf += 2;
   1102          
   1103            /* SrcAddress */
   1104            pSrcAddr = pBuf;
   1105            pBuf += Z_EXTADDR_LEN;
   1106          
   1107            /* SrcEPInt */
   1108            srcEPInt = *pBuf++;
   1109          
   1110            /* ClusterID */
   1111            clusterID = osal_build_uint16( pBuf );
   1112            pBuf += 2;
   1113          
   1114            /* Destination Address mode */
   1115            devAddr.addrMode = *pBuf++;
   1116          
   1117            /* Destination Address */
   1118            if ( devAddr.addrMode == Addr64Bit )
   1119            {
   1120              ptr = pBuf;
   1121              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   1122            }
   1123            else
   1124            {
   1125              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1126            }
   1127            /* The short address occupies LSB two bytes */
   1128            pBuf += Z_EXTADDR_LEN;
   1129          
   1130            /* DstEPInt */
   1131            dstEPInt = *pBuf;
   1132          
   1133            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   1134          
   1135            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1136          }
   1137          
   1138          /***************************************************************************************************
   1139           * @fn      MT_ZdoUnbindRequest
   1140           *
   1141           * @brief   Handle a Unbind request.
   1142           *
   1143           * @param   pBuf  - MT message data
   1144           *
   1145           * @return  void
   1146           ***************************************************************************************************/
   1147          static void MT_ZdoUnbindRequest(uint8 *pBuf)
   1148          {
   1149            uint8 cmdId;
   1150            uint8 retValue;
   1151            zAddrType_t destAddr, devAddr;
   1152            uint8 *pSrcAddr, *ptr;
   1153            uint8 srcEPInt, dstEPInt;
   1154            uint16 clusterID;
   1155          
   1156            /* parse header */
   1157            cmdId = pBuf[MT_RPC_POS_CMD1];
   1158            pBuf += MT_RPC_FRAME_HDR_SZ;
   1159          
   1160            /* dev address */
   1161            destAddr.addrMode = Addr16Bit;
   1162            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1163            pBuf += 2;
   1164          
   1165            /* SrcAddress */
   1166            pSrcAddr = pBuf;
   1167            pBuf += Z_EXTADDR_LEN;
   1168          
   1169            /* SrcEPInt */
   1170            srcEPInt = *pBuf++;
   1171          
   1172            /* ClusterID */
   1173            clusterID = osal_build_uint16( pBuf );
   1174            pBuf += 2;
   1175          
   1176            /* Destination Address mode */
   1177            devAddr.addrMode = *pBuf++;
   1178          
   1179            /* Destination Address */
   1180            if ( devAddr.addrMode == Addr64Bit )
   1181            {
   1182              ptr = pBuf;
   1183              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   1184            }
   1185            else
   1186            {
   1187              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1188            }
   1189            /* The short address occupies LSB two bytes */
   1190            pBuf += Z_EXTADDR_LEN;
   1191          
   1192            /* dstEPInt */
   1193            dstEPInt = *pBuf;
   1194          
   1195            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   1196          
   1197            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1198          }
   1199          
   1200          #if defined (MT_SYS_KEY_MANAGEMENT)
   1201          /***************************************************************************************************
   1202           * @fn      MT_ZdoSetLinkKey
   1203           *
   1204           * @brief   Set an application or trust center link key.
   1205           *
   1206           * @param   pBuf  - MT message data
   1207           *
   1208           * @return  void
   1209           ***************************************************************************************************/
   1210          static void MT_ZdoSetLinkKey(uint8 *pBuf)
   1211          {
   1212            uint8 cmdId;
   1213            uint8 retValue;
   1214            uint8 *pExtAddr;
   1215            uint8 *pKey;
   1216            uint16 shortAddr;
   1217          
   1218            /* parse header */
   1219            cmdId = pBuf[MT_RPC_POS_CMD1];
   1220            pBuf += MT_RPC_FRAME_HDR_SZ;
   1221          
   1222            /* ShortAddr */
   1223            shortAddr = osal_build_uint16( pBuf );
   1224            pBuf += 2;
   1225          
   1226            /* Extended Addr */
   1227            pExtAddr = pBuf;
   1228            pBuf += Z_EXTADDR_LEN;
   1229          
   1230            /* Key data */
   1231            pKey = pBuf;
   1232          
   1233            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1234          
   1235            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1236          }
   1237          
   1238          /***************************************************************************************************
   1239           * @fn      MT_ZdoRemoveLinkKey
   1240           *
   1241           * @brief   Remove an application or trust center link key.
   1242           *
   1243           * @param   pBuf  - MT message data
   1244           *
   1245           * @return  void
   1246           ***************************************************************************************************/
   1247          static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1248          {
   1249            uint8 cmdId;
   1250            uint8 retValue;
   1251            uint8 *pExtAddr;
   1252          
   1253            /* parse header */
   1254            cmdId = pBuf[MT_RPC_POS_CMD1];
   1255            pBuf += MT_RPC_FRAME_HDR_SZ;
   1256          
   1257            /* ShortAddr */
   1258            pExtAddr = pBuf;
   1259          
   1260            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1261          
   1262            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1263          }
   1264          
   1265          /***************************************************************************************************
   1266           * @fn      MT_ZdoGetLinkKey
   1267           *
   1268           * @brief   Get the application link key.
   1269           *
   1270           * @param   pBuf  - MT message data
   1271           *
   1272           * @return  void
   1273           ***************************************************************************************************/
   1274          static void MT_ZdoGetLinkKey(uint8 *pBuf)
   1275          {
   1276            uint8 cmdId;
   1277            uint8 retValue;
   1278            uint8 *pExtAddr;
   1279            uint8 *retBuf = NULL;
   1280            uint8 len;
   1281            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1282            uint16 apsLinkKeyNvId;
   1283          
   1284            // parse header
   1285            len = pBuf[MT_RPC_POS_LEN];
   1286            cmdId = pBuf[MT_RPC_POS_CMD1];
   1287            pBuf += MT_RPC_FRAME_HDR_SZ;
   1288          
   1289            // Extended Address
   1290            pExtAddr = pBuf;
   1291          
   1292            // Check for illegal extended address -- indicating network address lookup
   1293            if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
   1294                 ( len >= Z_EXTADDR_LEN )            )
   1295            {
   1296              uint16 nwkAddr;
   1297              nwkAddr = osal_build_uint16( pExtAddr );
   1298              (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
   1299            }
   1300          
   1301            // Fetch the key NV ID
   1302            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1303          
   1304            if (retValue == ZSuccess)
   1305            {
   1306              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1307              {
   1308                // retrieve key from NV
   1309                if (osal_nv_read( apsLinkKeyNvId, 0,
   1310                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1311                {
   1312                  retValue = ZNwkUnknownDevice;
   1313                }
   1314              }
   1315              else
   1316              {
   1317                retValue = ZNwkUnknownDevice;
   1318              }
   1319            }
   1320          
   1321            // Construct the response message
   1322            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1323            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1324            {
   1325              if (retValue == ZSuccess)
   1326              {
   1327                // Extended Address
   1328                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1329          
   1330                // Key data
   1331                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1332              }
   1333              else
   1334              {
   1335                // Failed case - set the rest fields to all FF
   1336                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1337              }
   1338          
   1339              retBuf[0] = retValue;  // Status
   1340          
   1341              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1342          
   1343              // clear retBuf because it contains key data and free allocated memory
   1344              osal_memset(retBuf, 0x00, len);
   1345          
   1346              osal_mem_free(retBuf);
   1347            }
   1348          
   1349            // clear copy of key in RAM
   1350            if (pApsLinkKey != NULL)
   1351            {
   1352              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1353          
   1354              osal_mem_free(pApsLinkKey);
   1355            }
   1356          
   1357            return;
   1358          }
   1359          #endif // MT_SYS_KEY_MANAGEMENT
   1360          
   1361          #if defined (MT_ZDO_MGMT)
   1362          /***************************************************************************************************
   1363           * @fn      MT_ZdoMgmtNwkDiscRequest
   1364           *
   1365           * @brief   Handle a Mgmt Nwk Discovery request.
   1366           *
   1367           * @param   pBuf  - MT message data
   1368           *
   1369           * @return  void
   1370           ***************************************************************************************************/
   1371          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1372          {
   1373            uint8 cmdId;
   1374            uint8 retValue;
   1375            zAddrType_t destAddr;
   1376            uint32 scanChannels;
   1377            uint8 scanDuration, startIndex;
   1378          
   1379            /* parse header */
   1380            cmdId = pBuf[MT_RPC_POS_CMD1];
   1381            pBuf += MT_RPC_FRAME_HDR_SZ;
   1382          
   1383            /* Dev address */
   1384            destAddr.addrMode = Addr16Bit;
   1385            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1386            pBuf += 2;
   1387          
   1388            /* Scan Channels */
   1389            scanChannels = osal_build_uint32(pBuf, 4);
   1390            pBuf += 4;
   1391          
   1392            /* Scan Duration */
   1393            scanDuration = *pBuf++;
   1394          
   1395            /* Start Index */
   1396            startIndex = *pBuf;
   1397          
   1398            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1399          
   1400            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1401          }
   1402          
   1403          /***************************************************************************************************
   1404           * @fn      MT_ZdoMgmtLqiRequest
   1405           *
   1406           * @brief   Handle a Mgmt Lqi request.
   1407           *
   1408           * @param   pBuf  - MT message data
   1409           *
   1410           * @return  void
   1411           ***************************************************************************************************/
   1412          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1413          {
   1414            uint8 cmdId;
   1415            uint8 retValue;
   1416            zAddrType_t destAddr;
   1417            uint8 startIndex;
   1418          
   1419            /* parse header */
   1420            cmdId = pBuf[MT_RPC_POS_CMD1];
   1421            pBuf += MT_RPC_FRAME_HDR_SZ;
   1422          
   1423            /* Dev address */
   1424            destAddr.addrMode = Addr16Bit;
   1425            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1426            pBuf += 2;
   1427          
   1428            /* Start Index */
   1429            startIndex = *pBuf;
   1430          
   1431            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1432          
   1433            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1434          }
   1435          
   1436          /***************************************************************************************************
   1437           * @fn      MT_ZdoMgmtRtgRequest
   1438           *
   1439           * @brief   Handle a Mgmt Rtg request.
   1440           *
   1441           * @param   pBuf  - MT message data
   1442           *
   1443           * @return  void
   1444           ***************************************************************************************************/
   1445          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1446          {
   1447            uint8 cmdId;
   1448            uint8 retValue;
   1449            zAddrType_t destAddr;
   1450            uint8 startIndex;
   1451          
   1452            /* parse header */
   1453            cmdId = pBuf[MT_RPC_POS_CMD1];
   1454            pBuf += MT_RPC_FRAME_HDR_SZ;
   1455          
   1456            /* Dev Address */
   1457            destAddr.addrMode = Addr16Bit;
   1458            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1459            pBuf += 2;
   1460          
   1461            /* Start Index */
   1462            startIndex = *pBuf;
   1463          
   1464            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1465          
   1466            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1467          }
   1468          
   1469          /***************************************************************************************************
   1470           * @fn      MT_ZdoMgmtBindRequest
   1471           *
   1472           * @brief   Handle a Mgmt Bind request.
   1473           *
   1474           * @param   pBuf  - MT message data
   1475           *
   1476           * @return  void
   1477           ***************************************************************************************************/
   1478          static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1479          {
   1480            uint8 cmdId;
   1481            uint8 retValue;
   1482            zAddrType_t destAddr;
   1483            uint8 startIndex;
   1484          
   1485            /* parse header */
   1486            cmdId = pBuf[MT_RPC_POS_CMD1];
   1487            pBuf += MT_RPC_FRAME_HDR_SZ;
   1488          
   1489            /* Dev Address */
   1490            destAddr.addrMode = Addr16Bit;
   1491            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1492            pBuf += 2;
   1493          
   1494            /* Start Index */
   1495            startIndex = *pBuf;
   1496          
   1497            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1498          
   1499            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1500          }
   1501          
   1502          /***************************************************************************************************
   1503           * @fn      MT_ZdoMgmtLeaveRequest
   1504           *
   1505           * @brief   Handle a Mgmt Leave request.
   1506           *
   1507           * @param   pBuf  - MT message data
   1508           *
   1509           * @return  void
   1510           ***************************************************************************************************/
   1511          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1512          {
   1513            uint8 cmdId;
   1514            uint8 retValue;
   1515            zAddrType_t destAddr;
   1516            uint8 *pIEEEAddr;
   1517            uint8 removeChildren;
   1518            uint8 rejoin;
   1519          
   1520            /* parse header */
   1521            cmdId = pBuf[MT_RPC_POS_CMD1];
   1522            pBuf += MT_RPC_FRAME_HDR_SZ;
   1523          
   1524            /* Destination Address */
   1525            destAddr.addrMode = Addr16Bit;
   1526            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1527            pBuf += 2;
   1528          
   1529            /* IEEE address */
   1530            pIEEEAddr = pBuf;
   1531            pBuf += Z_EXTADDR_LEN;
   1532          
   1533            /* Rejoin if bit0 is set */
   1534            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1535          
   1536            /* Remove Children if bit1 is set */
   1537            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1538          
   1539            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1540          
   1541            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1542          }
   1543          
   1544          /***************************************************************************************************
   1545           * @fn      MT_ZdoMgmtDirectJoinRequest
   1546           *
   1547           * @brief   Handle a Mgmt Direct Join request.
   1548           *
   1549           * @param   pBuf  - MT message data
   1550           *
   1551           * @return  void
   1552           ***************************************************************************************************/
   1553          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1554          {
   1555            uint8 cmdId;
   1556            uint8 retValue;
   1557            zAddrType_t destAddr;
   1558            uint8 *deviceAddr;
   1559            uint8 capInfo;
   1560          
   1561            /* parse header */
   1562            cmdId = pBuf[MT_RPC_POS_CMD1];
   1563            pBuf += MT_RPC_FRAME_HDR_SZ;
   1564          
   1565            /* Destination Address */
   1566            destAddr.addrMode = Addr16Bit;
   1567            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1568            pBuf += 2;
   1569          
   1570            /* Device Address */
   1571            deviceAddr = pBuf;
   1572            pBuf += Z_EXTADDR_LEN;
   1573          
   1574            /* Capability information */
   1575            capInfo = *pBuf;
   1576          
   1577            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1578          
   1579            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1580          }
   1581          
   1582          /***************************************************************************************************
   1583           * @fn      MT_ZdoMgmtPermitJoinRequest
   1584           *
   1585           * @brief   Handle a Mgmt Permit Join request.
   1586           *
   1587           * @param   pBuf  - MT message data
   1588           *
   1589           * @return  void
   1590           ***************************************************************************************************/
   1591          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1592          {
   1593            uint8 cmdId;
   1594            uint8 dataLn;
   1595            uint8 retValue;
   1596            uint8 duration;
   1597            uint8 tcSignificance;
   1598            zAddrType_t destAddr;
   1599          
   1600            /* parse header */
   1601            dataLn = pBuf[MT_RPC_POS_LEN];
   1602            cmdId = pBuf[MT_RPC_POS_CMD1];
   1603            pBuf += MT_RPC_FRAME_HDR_SZ;
   1604          
   1605            if ( 4 == dataLn )
   1606            {
   1607              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1608              destAddr.addrMode = afAddr16Bit;
   1609            }
   1610            else
   1611            {
   1612              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1613              destAddr.addrMode = *pBuf++;
   1614            }
   1615          
   1616            /* Destination Address */
   1617            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1618            pBuf += 2;
   1619          
   1620            /* Duration */
   1621            duration = *pBuf++;
   1622          
   1623            /* Trust center significance */
   1624            tcSignificance = *pBuf;
   1625          
   1626            ignoreIndication = TRUE;
   1627            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1628            ignoreIndication = FALSE;
   1629          
   1630            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1631          }
   1632          
   1633          /***************************************************************************************************
   1634           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1635           *
   1636           * @brief   Handle a Mgmt Nwk Update request.
   1637           *
   1638           * @param   pBuf  - MT message data
   1639           *
   1640           * @return  void
   1641           ***************************************************************************************************/
   1642          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   1643          {
   1644            uint8 cmdId;
   1645            uint8 retValue;
   1646            zAddrType_t destAddr;
   1647            uint32 channelMask;
   1648            uint8 scanDuration, scanCount;
   1649            uint16 nwkManagerAddr;
   1650          
   1651              /* parse header */
   1652            cmdId = pBuf[MT_RPC_POS_CMD1];
   1653            pBuf += MT_RPC_FRAME_HDR_SZ;
   1654          
   1655            /* Destination address */
   1656            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1657            pBuf += 2;
   1658          
   1659            /* Destination address mode */
   1660            destAddr.addrMode = *pBuf++;
   1661          
   1662            channelMask = osal_build_uint32(pBuf, 4);
   1663            pBuf += 4;
   1664          
   1665            /* Scan duration */
   1666            scanDuration = *pBuf++;
   1667          
   1668            /* Scan count */
   1669            scanCount = *pBuf++;
   1670          
   1671            /* NWK manager address */
   1672            nwkManagerAddr = osal_build_uint16( pBuf );
   1673          
   1674            /* Send the Management Network Update request */
   1675            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1676                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1677          
   1678            /*
   1679              Since we don't recevied our own broadcast messages, we should
   1680              send a unicast copy of the message to ourself.
   1681            */
   1682            if ( destAddr.addrMode == AddrBroadcast )
   1683            {
   1684              destAddr.addrMode = Addr16Bit;
   1685              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1686              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1687                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   1688            }
   1689          
   1690            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1691          }
   1692          #endif /* MT_ZDO_MGMT */
   1693          
   1694          /***************************************************************************************************
   1695           * @fn      MT_ZdoSendData
   1696           *
   1697           * @brief   Handle a ZDO Send Data request.
   1698           *
   1699           * @param   pBuf  - MT message data
   1700           *
   1701           * @return  void
   1702           ***************************************************************************************************/
   1703          static void MT_ZdoSendData( uint8 *pBuf )
   1704          {
   1705            uint8 cmdId;
   1706            uint8 retValue;
   1707            zAddrType_t destAddr;
   1708            uint8 transSeq;
   1709            uint8 len;
   1710            uint16 cmd;
   1711          
   1712              /* parse header */
   1713            cmdId = pBuf[MT_RPC_POS_CMD1];
   1714            pBuf += MT_RPC_FRAME_HDR_SZ;
   1715          
   1716            /* Destination address */
   1717            destAddr.addrMode = Addr16Bit;
   1718            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1719            pBuf += 2;
   1720          
   1721            /* Destination address mode */
   1722            transSeq = *pBuf++;
   1723          
   1724            /* cmd */
   1725            cmd = osal_build_uint16( pBuf );
   1726            pBuf += 2;
   1727            len = *pBuf++;
   1728          
   1729            /* Send the Generic ZDO message request */
   1730            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   1731            /*
   1732              Since we don't recevied our own broadcast messages, we should
   1733              send a unicast copy of the message to ourself.
   1734            */
   1735            if ( destAddr.addrMode == AddrBroadcast )
   1736            {
   1737              destAddr.addrMode = Addr16Bit;
   1738              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1739              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   1740            }
   1741          
   1742            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1743          }
   1744          
   1745          /***************************************************************************************************
   1746           * @fn      MT_ZdoNwkAddrOfInterestReq
   1747           *
   1748           * @brief   Handle a ZDO Network Address of Interest request.
   1749           *
   1750           * @param   pBuf  - MT message data
   1751           *
   1752           * @return  void
   1753           ***************************************************************************************************/
   1754          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   1755          {
   1756            uint8 cmdId;
   1757            uint8 retValue;
   1758            zAddrType_t destAddr;
   1759            uint16 nwkAddr;
   1760            uint8 cmd;
   1761          
   1762              /* parse header */
   1763            cmdId = pBuf[MT_RPC_POS_CMD1];
   1764            pBuf += MT_RPC_FRAME_HDR_SZ;
   1765          
   1766            /* Destination address */
   1767            destAddr.addrMode = Addr16Bit;
   1768            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1769            pBuf += 2;
   1770          
   1771            /* Network Address of Interest */
   1772            nwkAddr = osal_build_uint16( pBuf );
   1773            pBuf += 2;
   1774          
   1775            cmd = *pBuf++;
   1776          
   1777            /* Send the Generic ZDO message request */
   1778            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   1779          
   1780          
   1781            /*
   1782              Since we don't recevied our own broadcast messages, we should
   1783              send a unicast copy of the message to ourself.
   1784            */
   1785            if ( destAddr.addrMode == AddrBroadcast )
   1786            {
   1787              destAddr.addrMode = Addr16Bit;
   1788              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   1789              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   1790            }
   1791          
   1792            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1793          }
   1794          
   1795          /***************************************************************************************************
   1796           * @fn      MT_ZdoStartupFromApp
   1797           *
   1798           * @brief   Handle a Startup from App request.
   1799           *
   1800           * @param   pBuf  - MT message data
   1801           *
   1802           * @return  void
   1803           ***************************************************************************************************/
   1804          static void MT_ZdoStartupFromApp(uint8 *pBuf)
   1805          {
   1806            uint8 cmd0, cmd1, retValue;
   1807          
   1808            /* parse header */
   1809            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1810            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1811            pBuf += MT_RPC_FRAME_HDR_SZ;
   1812          
   1813            retValue = ZDOInitDevice(100);
   1814          
   1815            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1816            {
   1817              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   1818            }
   1819          }
   1820          
   1821          
   1822          /***************************************************************************************************
   1823           * @fn      MT_ZdoNetworkDiscoveryReq
   1824           *
   1825           * @brief   Handle a ZDO Network Discovery request.
   1826           *
   1827           * @param   pBuf  - MT message data
   1828           *
   1829           * @return  void
   1830           ***************************************************************************************************/
   1831          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   1832          {
   1833            uint8  retValue = ZFailure;
   1834            uint8  cmdId;
   1835            uint32 scanChannels;
   1836          
   1837            /* parse header */
   1838            cmdId = pBuf[MT_RPC_POS_CMD1];
   1839            pBuf += MT_RPC_FRAME_HDR_SZ;
   1840          
   1841            /* Packet format */
   1842            /* scan channels (4) | scan duration (1) */
   1843          
   1844            /* Scan channels */
   1845            scanChannels = osal_build_uint32(pBuf, 4);
   1846            pBuf += 4;
   1847          
   1848            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   1849          
   1850            // Register ZDO callback for MT to handle the network discovery confirm
   1851            // and beacon notification confirm
   1852            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   1853            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   1854          
   1855            /* Build and send back the response */
   1856            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1857          }
   1858          
   1859          
   1860          /***************************************************************************************************
   1861           * @fn      MT_ZdoJoinReq
   1862           *
   1863           * @brief   Handle a ZDO Join request.
   1864           *
   1865           * @param   pBuf  - MT message data
   1866           *
   1867           * @return  void
   1868           ***************************************************************************************************/
   1869          static void MT_ZdoJoinReq(uint8 *pBuf)
   1870          {
   1871            uint8  retValue = ZFailure;
   1872            uint8  cmdId;
   1873            uint16 panId;
   1874            uint16 chosenParent;
   1875          
   1876            /* parse header */
   1877            cmdId = pBuf[MT_RPC_POS_CMD1];
   1878            pBuf += MT_RPC_FRAME_HDR_SZ;
   1879          
   1880            /* Packet format */
   1881            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1882             * parentDepth (1) | stackProfile  (1)
   1883             */
   1884          
   1885            panId        = osal_build_uint16( &pBuf[1] );
   1886            chosenParent = osal_build_uint16( &pBuf[11] );
   1887          
   1888            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   1889          
   1890            /* Register for MT to receive Join Confirm */
   1891            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   1892          
   1893            /* Build and send back the response */
   1894            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1895          
   1896          }
   1897          
   1898          
   1899          /***************************************************************************************************
   1900           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1901           *
   1902           * @brief       Send an indication to inform host device the completion of
   1903           *              network discovery scan
   1904           *
   1905           * @param       pStr - pointer to a parameter and a structure of parameters
   1906           *
   1907           * @return      void
   1908           ***************************************************************************************************/
   1909          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   1910          {
   1911            /* pStr: status (uint8) */
   1912            /* Packet Format */
   1913            /* Status (1) */
   1914          
   1915            // Scan completed. De-register the callback with ZDO
   1916            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   1917            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   1918          
   1919            // Send the buffered beacon indication
   1920            MT_ZdoBeaconIndCB ( NULL );
   1921          
   1922            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1923                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   1924            return NULL;
   1925          }
   1926          
   1927          /***************************************************************************************************
   1928           * @fn          MT_ZdoBeaconIndCB
   1929           *
   1930           * @brief       Send an indication to host device of a beacon notification
   1931           *
   1932           * @param       pStr -  pointer to a parameter and a structure of parameters
   1933           *
   1934           * @return      void
   1935           ***************************************************************************************************/
   1936          void *MT_ZdoBeaconIndCB ( void *pStr )
   1937          {
   1938            zdoBeaconInd_t *pBeacon = pStr;
   1939            uint8 *pTmp;
   1940          
   1941            /* Packet Format */
   1942            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1943          
   1944            if( pStr != NULL)
   1945            {
   1946              if( pBeaconIndBuf == NULL )
   1947              {
   1948                // If pBeaconIndBuf has not been allocated yet
   1949                // allocate memory now with MAX_UART_TX_BUFF
   1950                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   1951                {
   1952                  // Memory failure
   1953                  return NULL;
   1954                }
   1955                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   1956              }
   1957          
   1958              // Fill in the buffer with the beacon indication
   1959              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   1960              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   1961              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   1962              *pTmp++ = LO_UINT16(pBeacon->panID);
   1963              *pTmp++ = HI_UINT16(pBeacon->panID);
   1964              *pTmp++ = pBeacon->logicalChannel;
   1965              *pTmp++ = pBeacon->permitJoining;
   1966              *pTmp++ = pBeacon->routerCapacity;
   1967              *pTmp++ = pBeacon->deviceCapacity;
   1968              *pTmp++ = pBeacon->protocolVersion;
   1969              *pTmp++ = pBeacon->stackProfile;
   1970              *pTmp++ = pBeacon->LQI;
   1971              *pTmp++ = pBeacon->depth;
   1972              *pTmp++ = pBeacon->updateID;
   1973              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   1974          
   1975              pBeaconIndBuf[0] += 1; // Increment the devCnt
   1976          
   1977              // Check if the buffer can fit in another beacon
   1978              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   1979              {
   1980                // Packet full, send the packet over MT
   1981                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1982                                             MT_ZDO_BEACON_NOTIFY_IND,
   1983                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   1984                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   1985              }
   1986            }
   1987            else
   1988            {
   1989              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   1990              {
   1991                // End of beacon indication, send the packet over MT
   1992                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1993                                             MT_ZDO_BEACON_NOTIFY_IND,
   1994                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   1995              }
   1996              // Free the allocated memory
   1997              if(pBeaconIndBuf != NULL)
   1998              {
   1999                osal_mem_free(pBeaconIndBuf);
   2000                pBeaconIndBuf = NULL;
   2001              }
   2002            }
   2003          
   2004            return NULL;
   2005          }
   2006          
   2007          /***************************************************************************************************
   2008           * @fn          MT_ZdoJoinCnfCB
   2009           *
   2010           * @brief       Handle the ZDO Join Confirm from ZDO
   2011           *
   2012           * @param       pStr - pointer to a parameter and a structure of parameters
   2013           *
   2014           * @return      void
   2015           ***************************************************************************************************/
   2016          void *MT_ZdoJoinCnfCB ( void *pStr )
   2017          {
   2018            /* pStr: zdoJoinCnf_t* */
   2019            /* Packet Format */
   2020            /* Status (1) | device addr (2) | parent addr (2) */
   2021          
   2022            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2023            zdoJoinCnf_t *joinCnf = pStr;
   2024          
   2025            /* Join Complete. De-register the callback with ZDO */
   2026            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   2027          
   2028            buf[0] = joinCnf->status;
   2029            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   2030            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   2031            buf[3] = LO_UINT16( joinCnf->parentAddr );
   2032            buf[4] = HI_UINT16( joinCnf->parentAddr );
   2033          
   2034            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2035                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   2036          
   2037            return NULL;
   2038          }
   2039          
   2040          /*************************************************************************************************
   2041           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2042           *
   2043           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2044           *
   2045           * @param   pBuf  - MT message data
   2046           *
   2047           * @return  void
   2048           *************************************************************************************************/
   2049          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   2050          {
   2051            uint8 cmd0, cmd1, tmp;
   2052            uint16 cId;
   2053          
   2054            /* parse header */
   2055            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2056            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2057            pBuf += MT_RPC_FRAME_HDR_SZ;
   2058          
   2059            cId = osal_build_uint16( pBuf );
   2060            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   2061          
   2062            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2063            {
   2064              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2065            }
   2066          }
   2067          
   2068          /*************************************************************************************************
   2069           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2070           *
   2071           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2072           *
   2073           * @param   pBuf  - MT message data
   2074           *
   2075           * @return  void
   2076           *************************************************************************************************/
   2077          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   2078          {
   2079            uint8 cmd0, cmd1, tmp;
   2080            uint16 cId;
   2081          
   2082            /* parse header */
   2083            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2084            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2085            pBuf += MT_RPC_FRAME_HDR_SZ;
   2086          
   2087            cId = osal_build_uint16( pBuf );
   2088            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   2089          
   2090            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2091            {
   2092              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2093            }
   2094          }
   2095          
   2096          /*************************************************************************************************
   2097           * @fn      MT_ZdoSetRejoinParameters(pBuf);
   2098           *
   2099           * @brief   Set Rejoin backoff and scan duration from MT
   2100           *
   2101           * @param   pBuf  - MT message data
   2102           *
   2103           * @return  void
   2104           *************************************************************************************************/
   2105          static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
   2106          {
   2107            uint8 cmdId;
   2108            uint8 retValue;
   2109            uint32 rejoinBackoffDuration, rejoinScanDuration;
   2110          
   2111            // parse header
   2112            cmdId = pBuf[MT_RPC_POS_CMD1];
   2113            pBuf += MT_RPC_FRAME_HDR_SZ;
   2114          
   2115            //Rejoin Backoff Duration
   2116            rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
   2117            pBuf += 4;
   2118          
   2119            //Rejoin Scan Duration
   2120            rejoinScanDuration = osal_build_uint32(pBuf, 4);
   2121          
   2122            ZDApp_SetRejoinScanDuration(rejoinScanDuration);
   2123            ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
   2124          
   2125            retValue = ZSuccess;
   2126          
   2127            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   2128          
   2129          }
   2130          
   2131          #endif /* MT_ZDO_FUNC */
   2132          
   2133          
   2134          /***************************************************************************************************
   2135           * Callback handling function
   2136           ***************************************************************************************************/
   2137          
   2138          #if defined (MT_ZDO_CB_FUNC)
   2139          
   2140          /***************************************************************************************************
   2141           * @fn      MT_ZdoStateChangeCB
   2142           *
   2143           * @brief   Handle state change OSAL message from ZDO.
   2144           *
   2145           * @param   pMsg  - Message data
   2146           *
   2147           * @return  void
   2148           */
   2149          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   2150          {
   2151            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2152                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   2153          }
   2154          
   2155          /***************************************************************************************************
   2156           * @fn     MT_ZdoDirectCB()
   2157           *
   2158           * @brief  ZDO direct callback.  Build an MT message directly from the
   2159           *         over-the-air ZDO message.
   2160           *
   2161           * @param  pData - Incoming AF frame.
   2162           *
   2163           * @return  none
   2164           ***************************************************************************************************/
   2165          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2166          {
   2167            uint8 len, *pBuf;
   2168            uint16 origClusterId;
   2169          
   2170            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2171            origClusterId = pData->clusterId;
   2172          
   2173            // Is the message an exception or not a response?
   2174            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   2175            {
   2176              return;  // Handled somewhere else or not needed.
   2177            }
   2178          
   2179            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2180             * two bytes for srcAddr.
   2181             */
   2182            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   2183          
   2184            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2185            {
   2186              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   2187          
   2188              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   2189              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   2190          
   2191              /* copy ZDO data, skipping one-byte sequence number */
   2192              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   2193          
   2194              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2195              osal_mem_free(pBuf);
   2196            }
   2197          }
   2198          
   2199          /***************************************************************************************************
   2200           * @fn     MT_ZdoHandleExceptions()
   2201           *
   2202           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2203           *
   2204           * @param  pData - Incoming AF frame.
   2205           *
   2206           * @return  TRUE if handled by this function, FALSE if not
   2207           ***************************************************************************************************/
   2208          static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2209          {
   2210            uint8 ret = TRUE;
   2211            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2212            ZDO_DeviceAnnce_t devAnnce;
   2213            uint8 doDefault = FALSE;
   2214          
   2215            switch ( inMsg->clusterID )
   2216            {
   2217              case NWK_addr_rsp:
   2218              case IEEE_addr_rsp:
   2219                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   2220                {
   2221                  if ( nwkRsp->status == ZDO_SUCCESS )
   2222                  {
   2223                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   2224                  }
   2225                  osal_mem_free( nwkRsp );
   2226                }
   2227                break;
   2228          
   2229              case Device_annce:
   2230                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   2231                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   2232                break;
   2233          
   2234              case Simple_Desc_rsp:
   2235                if ( pData->cmd.DataLength > 5 )
   2236                {
   2237                  ret = FALSE;
   2238                }
   2239                else
   2240                {
   2241                  doDefault = TRUE;
   2242                }
   2243                break;
   2244          
   2245              default:
   2246                ret = FALSE;
   2247                break;
   2248            }
   2249          
   2250            if ( doDefault )
   2251            {
   2252              ret = FALSE;
   2253              pData->clusterId = MtZdoDef_rsp;
   2254              pData->cmd.DataLength = 2;
   2255            }
   2256          
   2257            return ( ret );
   2258          }
   2259          
   2260          /***************************************************************************************************
   2261           * @fn      MT_ZdoAddrRspCB
   2262           *
   2263           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2264           *
   2265           * @param   pMsg  - Message data
   2266           *
   2267           * @return  void
   2268           */
   2269          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   2270          {
   2271            uint8   listLen, len, *pBuf;
   2272          
   2273            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2274          
   2275            /* get length, sanity check length */
   2276            listLen = pMsg->numAssocDevs;
   2277          
   2278            /* calculate msg length */
   2279            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   2280          
   2281            /* get buffer */
   2282            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2283            {
   2284              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2285              uint8 *pTmp = pBuf;
   2286          
   2287              *pTmp++ = pMsg->status;
   2288          
   2289              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2290              pTmp += Z_EXTADDR_LEN;
   2291          
   2292              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2293              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2294          
   2295              *pTmp++ = pMsg->startIndex;
   2296              *pTmp++ = listLen;
   2297          
   2298              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   2299          
   2300              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2301              osal_mem_free(pBuf);
   2302            }
   2303          }
   2304          
   2305          /***************************************************************************************************
   2306           * @fn      MT_ZdoEndDevAnnceCB
   2307           *
   2308           * @brief   Handle end device announce OSAL message from ZDO.
   2309           *
   2310           * @param   pMsg  - Message data
   2311           *
   2312           * @return  void
   2313           */
   2314          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   2315          {
   2316            uint8 *pBuf;
   2317          
   2318            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   2319            {
   2320              uint8 *pTmp = pBuf;
   2321          
   2322              *pTmp++ = LO_UINT16(srcAddr);
   2323              *pTmp++ = HI_UINT16(srcAddr);
   2324          
   2325              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2326              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2327          
   2328              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2329              pTmp += Z_EXTADDR_LEN;
   2330          
   2331              *pTmp = pMsg->capabilities;
   2332          
   2333              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2334                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2335                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2336              osal_mem_free(pBuf);
   2337            }
   2338          }
   2339          
   2340          /***************************************************************************************************
   2341           * @fn      MT_ZdoSrcRtgCB
   2342           *
   2343           * @brief   Handle Src Route from ZDO.
   2344           *
   2345           * @param   pStr  - pointer to the data structure for the src route
   2346           *
   2347           * @return  void*
   2348           */
   2349          void* MT_ZdoSrcRtgCB( void *pStr )
   2350          {
   2351            uint8 len, *pBuf;
   2352            zdoSrcRtg_t *pSrcRtg = pStr;
   2353          
   2354            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2355            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2356          
   2357            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2358            {
   2359              uint8 idx, *pTmp = pBuf;
   2360              uint16 *pRelay;
   2361          
   2362              // Packet payload
   2363              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2364              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2365              *pTmp++ = pSrcRtg->relayCnt;
   2366          
   2367              // Relay List
   2368              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2369              {
   2370                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2371                {
   2372                  *pTmp++ = LO_UINT16(*pRelay);
   2373                  *pTmp++ = HI_UINT16(*pRelay);
   2374                  pRelay++;
   2375                }
   2376              }
   2377              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2378                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2379              osal_mem_free(pBuf);
   2380            }
   2381          
   2382            return NULL;
   2383          }
   2384          
   2385          /***************************************************************************************************
   2386           * @fn          MT_ZdoConcentratorIndCB
   2387           *
   2388           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2389           *
   2390           * @param       pStr - pointer to a parameter and a structure of parameters
   2391           *
   2392           * @return      NULL
   2393           ***************************************************************************************************/
   2394          void *MT_ZdoConcentratorIndCB(void *pStr)
   2395          {
   2396            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2397            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2398          
   2399            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2400            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   2401            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2402            *pTmp = pInd->pktCost;
   2403          
   2404            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2405                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   2406            return NULL;
   2407          }
   2408          
   2409          /***************************************************************************************************
   2410           * @fn          MT_ZdoLeaveInd
   2411           *
   2412           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2413           *
   2414           * @param       vPtr - Pointer to the received Leave Indication message.
   2415           *
   2416           * @return      NULL
   2417           ***************************************************************************************************/
   2418          static void *MT_ZdoLeaveInd(void *vPtr)
   2419          {
   2420            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2421            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2422          
   2423            buf[0] = LO_UINT16(pInd->srcAddr);
   2424            buf[1] = HI_UINT16(pInd->srcAddr);
   2425            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   2426            buf[2+Z_EXTADDR_LEN] = pInd->request;
   2427            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   2428            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   2429          
   2430            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2431                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   2432            return NULL;
   2433          }
   2434          
   2435          /***************************************************************************************************
   2436           * @fn          MT_ZdoTcDeviceInd
   2437           *
   2438           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2439           *
   2440           * @param       params - pointer to Trust Center joining device information
   2441           *
   2442           * @return      NULL
   2443           ***************************************************************************************************/
   2444          void *MT_ZdoTcDeviceInd( void *params )
   2445          {
   2446            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2447            uint8 buf[12];
   2448          
   2449            buf[0] = LO_UINT16( pDev->nwkAddr );
   2450            buf[1] = HI_UINT16( pDev->nwkAddr );
   2451            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   2452            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   2453            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   2454          
   2455            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2456                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   2457          
   2458            return ( NULL );
   2459          }
   2460          
   2461          /***************************************************************************************************
   2462           * @fn          MT_ZdoPermitJoinInd
   2463           *
   2464           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2465           *
   2466           * @param       duration - permit join duration
   2467           *
   2468           * @return      NULL
   2469           ***************************************************************************************************/
   2470          void *MT_ZdoPermitJoinInd( void *duration )
   2471          {
   2472            if ( ignoreIndication == FALSE )
   2473            {
   2474              MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2475                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   2476            }
   2477          
   2478            return ( NULL );
   2479          }
   2480          #endif // MT_ZDO_CB_FUNC
   2481          
   2482          /***************************************************************************************************
   2483           * @fn      MT_ZdoSendMsgCB
   2484           *
   2485           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2486           *
   2487           * @param   pMsg  - Message data
   2488           *
   2489           * @return  void
   2490           */
   2491          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   2492          {
   2493            uint8 len = pMsg->asduLen + 9;
   2494            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   2495          
   2496            if (pBuf != NULL)
   2497            {
   2498              uint8 *pTmp = pBuf;
   2499          
   2500              // Assuming exclusive use of network short addresses.
   2501              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   2502              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   2503              *pTmp++ = pMsg->wasBroadcast;
   2504              *pTmp++ = LO_UINT16(pMsg->clusterID);
   2505              *pTmp++ = HI_UINT16(pMsg->clusterID);
   2506              *pTmp++ = pMsg->SecurityUse;
   2507              *pTmp++ = pMsg->TransSeq;
   2508              // Skipping asduLen since it can be deduced from the RPC packet length.
   2509              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   2510              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   2511              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   2512          
   2513              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2514                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   2515          
   2516              osal_mem_free(pBuf);
   2517            }
   2518          }
   2519          
   2520          
   2521          #if defined ( MT_ZDO_EXTENSIONS )
   2522          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2523          /***************************************************************************************************
   2524           * @fn          MT_ZdoSecUpdateNwkKey
   2525           *
   2526           * @brief       Handle the ZDO Security Update Network Key extension message
   2527           *
   2528           * @param       pBuf - Pointer to the received message data.
   2529           *
   2530           * @return      NULL
   2531           ***************************************************************************************************/
   2532          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2533          {
   2534            uint16 dstAddr;
   2535            uint8 keySeqNum;
   2536            uint8 status;
   2537          
   2538            pBuf += MT_RPC_FRAME_HDR_SZ;
   2539          
   2540            dstAddr = osal_build_uint16( pBuf );
   2541            pBuf += 2;
   2542            keySeqNum = *pBuf++;
   2543          
   2544            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2545          
   2546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2547                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2548          }
   2549          
   2550          /***************************************************************************************************
   2551           * @fn          MT_ZdoSecSwitchNwkKey
   2552           *
   2553           * @brief       Handle the ZDO Security Switch Network Key extension message
   2554           *
   2555           * @param       pBuf - Pointer to the received message data.
   2556           *
   2557           * @return      NULL
   2558           ***************************************************************************************************/
   2559          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2560          {
   2561            uint16 dstAddr;
   2562            uint8 keySeqNum;
   2563            uint8 status;
   2564          
   2565            pBuf += MT_RPC_FRAME_HDR_SZ;
   2566          
   2567            dstAddr = osal_build_uint16( pBuf );
   2568            pBuf += 2;
   2569            keySeqNum = *pBuf++;
   2570          
   2571            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2572          
   2573            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2574                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2575          }
   2576          #endif // ZG_BUILD_COORDINATOR_TYPE
   2577          
   2578          /***************************************************************************************************
   2579           * @fn          MT_ZdoSecAddLinkKey
   2580           *
   2581           * @brief       Handle the ZDO Security Add Link Key extension message
   2582           *
   2583           * @param       pBuf - Pointer to the received message data.
   2584           *
   2585           * @return      NULL
   2586           ***************************************************************************************************/
   2587          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2588          {
   2589            uint16 shortAddr;
   2590            uint8 *pExtAddr;
   2591            uint8 status;
   2592          
   2593            pBuf += MT_RPC_FRAME_HDR_SZ;
   2594          
   2595            shortAddr = osal_build_uint16( pBuf );
   2596            pBuf += 2;
   2597            pExtAddr = pBuf;
   2598            pBuf += Z_EXTADDR_LEN;
   2599          
   2600            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2601          
   2602            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2603                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2604          }
   2605          
   2606          /***************************************************************************************************
   2607           * @fn          MT_ZdoSecEntryLookupExt
   2608           *
   2609           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2610           *
   2611           * @param       pBuf - Pointer to the received message data.
   2612           *
   2613           * @return      NULL
   2614           ***************************************************************************************************/
   2615          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2616          {
   2617            ZDSecMgrEntry_t *pEntry = NULL;
   2618            uint8 buf[6] = {0};
   2619          
   2620            pBuf += MT_RPC_FRAME_HDR_SZ;
   2621          
   2622            // lookup entry index for specified EXT address
   2623            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2624            if ( pEntry )
   2625            {
   2626              buf[1] = LO_UINT16( pEntry->ami );
   2627              buf[2] = HI_UINT16( pEntry->ami );
   2628              buf[3] = LO_UINT16( pEntry->keyNvId );
   2629              buf[4] = HI_UINT16( pEntry->keyNvId );
   2630              buf[5] = (uint8)pEntry->authenticateOption;
   2631            }
   2632          
   2633            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2634                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2635          }
   2636          
   2637          /***************************************************************************************************
   2638           * @fn          MT_ZdoSecDeviceRemove
   2639           *
   2640           * @brief       Handle the ZDO Security Remove Device extension message
   2641           *
   2642           * @param       pBuf - Pointer to the received message data.
   2643           *
   2644           * @return      NULL
   2645           ***************************************************************************************************/
   2646          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2647          {
   2648            ZStatus_t status;
   2649          
   2650            pBuf += MT_RPC_FRAME_HDR_SZ;
   2651          
   2652            // lookup entry index for specified EXT address
   2653            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2654          
   2655            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2656                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2657          }
   2658          
   2659          /***************************************************************************************************
   2660           * @fn          MT_ZdoExtRouteDisc
   2661           *
   2662           * @brief       Handle the ZDO Route Discovery extension message
   2663           *
   2664           * @param       pBuf - Pointer to the received message data.
   2665           *
   2666           * @return      NULL
   2667           ***************************************************************************************************/
   2668          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2669          {
   2670            ZStatus_t status;
   2671            uint16 dstAddr;
   2672          
   2673            pBuf += MT_RPC_FRAME_HDR_SZ;
   2674          
   2675            dstAddr = osal_build_uint16( pBuf );
   2676          
   2677            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2678          
   2679          
   2680            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2681                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2682          }
   2683          
   2684          /***************************************************************************************************
   2685           * @fn          MT_ZdoExtRouteCheck
   2686           *
   2687           * @brief       Handle the ZDO Route Check extension message
   2688           *
   2689           * @param       pBuf - Pointer to the received message data.
   2690           *
   2691           * @return      NULL
   2692           ***************************************************************************************************/
   2693          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2694          {
   2695            ZStatus_t status;
   2696            uint16 dstAddr;
   2697          
   2698            pBuf += MT_RPC_FRAME_HDR_SZ;
   2699          
   2700            dstAddr = osal_build_uint16( pBuf );
   2701          
   2702            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2703          
   2704            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2705                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2706          }
   2707          
   2708          /***************************************************************************************************
   2709           * @fn          MT_ZdoExtRemoveGroup
   2710           *
   2711           * @brief       Handle the ZDO extension Remove Group message
   2712           *
   2713           * @param       pBuf - Pointer to the received message data.
   2714           *
   2715           * @return      NULL
   2716           ***************************************************************************************************/
   2717          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2718          {
   2719            ZStatus_t status;
   2720            uint8 endpoint;
   2721            uint16 groupID;
   2722          
   2723            pBuf += MT_RPC_FRAME_HDR_SZ;
   2724          
   2725            endpoint = *pBuf++;
   2726            groupID = osal_build_uint16( pBuf );
   2727          
   2728            if ( aps_RemoveGroup( endpoint, groupID ) )
   2729            {
   2730              status = ZSuccess;
   2731            }
   2732            else
   2733            {
   2734              status = ZFailure;
   2735            }
   2736          
   2737            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2738                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2739          }
   2740          
   2741          /***************************************************************************************************
   2742           * @fn          MT_ZdoExtRemoveAllGroup
   2743           *
   2744           * @brief       Handle the ZDO extension Remove All Groups message
   2745           *
   2746           * @param       pBuf - Pointer to the received message data.
   2747           *
   2748           * @return      NULL
   2749           ***************************************************************************************************/
   2750          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2751          {
   2752            ZStatus_t status = ZSuccess;
   2753          
   2754            pBuf += MT_RPC_FRAME_HDR_SZ;
   2755          
   2756            aps_RemoveAllGroup( *pBuf );
   2757          
   2758            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2759                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2760          }
   2761          
   2762          /***************************************************************************************************
   2763           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2764           *
   2765           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2766           *
   2767           * @param       pBuf - Pointer to the received message data.
   2768           *
   2769           * @return      NULL
   2770           ***************************************************************************************************/
   2771          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   2772          {
   2773            uint16 groupList[ APS_MAX_GROUPS ];
   2774            uint8 groups;
   2775            uint8 msgLen;
   2776            uint8 *pMsg;
   2777          
   2778            pBuf += MT_RPC_FRAME_HDR_SZ;
   2779          
   2780            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   2781          
   2782            msgLen = 1 + (2 * groups);
   2783            pMsg = osal_mem_alloc( msgLen );
   2784            if ( pMsg )
   2785            {
   2786              uint8 x;
   2787              uint8 *pBuf = pMsg;
   2788          
   2789              *pBuf++ = groups;
   2790              for ( x = 0; x < groups; x++ )
   2791              {
   2792                *pBuf++ = LO_UINT16( groupList[x] );
   2793                *pBuf++ = HI_UINT16( groupList[x] );
   2794              }
   2795          
   2796              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2797                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   2798              osal_mem_free( pMsg );
   2799            }
   2800            else
   2801            {
   2802              groups = 0;
   2803              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2804                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2805            }
   2806          }
   2807          
   2808          /***************************************************************************************************
   2809           * @fn          MT_ZdoExtFindGroup
   2810           *
   2811           * @brief       Handle the ZDO extension Find Group message
   2812           *
   2813           * @param       pBuf - Pointer to the received message data.
   2814           *
   2815           * @return      NULL
   2816           ***************************************************************************************************/
   2817          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   2818          {
   2819            uint8 endpoint;
   2820            uint16 groupID;
   2821            aps_Group_t *pGroup;
   2822            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   2823          
   2824            pBuf += MT_RPC_FRAME_HDR_SZ;
   2825          
   2826            endpoint = *pBuf++;
   2827            groupID = osal_build_uint16( pBuf );
   2828          
   2829            pGroup = aps_FindGroup( endpoint, groupID );
   2830            if ( pGroup  )
   2831            {
   2832              buf[0] = ZSuccess;
   2833              buf[1] = LO_UINT16( pGroup->ID );
   2834              buf[2] = HI_UINT16( pGroup->ID );
   2835              buf[3] = pGroup->name[0];
   2836              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2837            }
   2838            else
   2839            {
   2840              buf[0] = ZFailure;
   2841            }
   2842          
   2843            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2844                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   2845          }
   2846          
   2847          /***************************************************************************************************
   2848           * @fn          MT_ZdoExtAddGroup
   2849           *
   2850           * @brief       Handle the ZDO extension Add Group message
   2851           *
   2852           * @param       pBuf - Pointer to the received message data.
   2853           *
   2854           * @return      NULL
   2855           ***************************************************************************************************/
   2856          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2857          {
   2858            ZStatus_t status = ZSuccess;
   2859            aps_Group_t group = {0};
   2860            uint8 endpoint;
   2861          
   2862            pBuf += MT_RPC_FRAME_HDR_SZ;
   2863          
   2864            endpoint = *pBuf++;
   2865            group.ID = osal_build_uint16( pBuf );
   2866            group.name[0] = pBuf[2];
   2867            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2868            {
   2869              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2870            }
   2871          
   2872            if (group.name[0] > 0 )
   2873            {
   2874              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2875            }
   2876          
   2877            status = aps_AddGroup( endpoint, &group );
   2878          
   2879            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2880                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2881          }
   2882          
   2883          /***************************************************************************************************
   2884           * @fn          MT_ZdoExtCountAllGroups
   2885           *
   2886           * @brief       Handle the ZDO extension Count All Groups message
   2887           *
   2888           * @param       pBuf - Pointer to the received message data.
   2889           *
   2890           * @return      NULL
   2891           ***************************************************************************************************/
   2892          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2893          {
   2894            ZStatus_t status = 0;
   2895          
   2896            pBuf += MT_RPC_FRAME_HDR_SZ;
   2897          
   2898            status = (ZStatus_t)aps_CountAllGroups();
   2899          
   2900            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2901                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2902          }
   2903          
   2904          
   2905          /***************************************************************************************************
   2906           * @fn          MT_ZdoExtRxIdle
   2907           *
   2908           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
   2909           *
   2910           * @param       pBuf - Pointer to the received message data.
   2911           *
   2912           * @return      NULL
   2913           ***************************************************************************************************/
   2914          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2915          {
   2916            uint8 setFlag;
   2917            uint8 setValue;
   2918          
   2919            pBuf += MT_RPC_FRAME_HDR_SZ;
   2920          
   2921            setFlag = *pBuf++;
   2922            setValue = *pBuf++;
   2923          
   2924            if ( setFlag )
   2925            {
   2926              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2927            }
   2928            else
   2929            {
   2930              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2931            }
   2932          
   2933            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2934                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   2935          }
   2936          
   2937          /***************************************************************************************************
   2938           * @fn          MT_ZdoExtNwkInfo
   2939           *
   2940           * @brief       Handle the ZDO extension Network Info Request message
   2941           *
   2942           * @param       pBuf - Pointer to the received message data.
   2943           *
   2944           * @return      NULL
   2945           ***************************************************************************************************/
   2946          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   2947          {
   2948            uint8 buf[24];
   2949            uint8 *pMsg;
   2950          
   2951            pMsg = buf;
   2952          
   2953            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   2954            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   2955          
   2956            *pMsg++ = devState;
   2957            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   2958            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   2959            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   2960            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   2961            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   2962            pMsg += 8;
   2963            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   2964            pMsg += 8;
   2965            *pMsg++ = _NIB.nwkLogicalChannel;
   2966          
   2967            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2968                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   2969          }
   2970          
   2971          /***************************************************************************************************
   2972           * @fn          MT_ZdoExtSecApsRemoveReq
   2973           *
   2974           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   2975           *
   2976           * @param       pBuf - Pointer to the received message data.
   2977           *
   2978           * @return      NULL
   2979           ***************************************************************************************************/
   2980          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   2981          {
   2982            ZStatus_t status = 0;
   2983            uint16 parentAddr;
   2984            uint16 nwkAddr;
   2985          
   2986            pBuf += MT_RPC_FRAME_HDR_SZ;
   2987          
   2988            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2989            {
   2990              parentAddr = osal_build_uint16( pBuf );
   2991              pBuf += 2;
   2992          
   2993              nwkAddr = osal_build_uint16( pBuf );
   2994              pBuf += 2;
   2995          
   2996              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   2997            }
   2998            else
   2999            {
   3000              status = ZUnsupportedMode;
   3001            }
   3002          
   3003            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3004                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3005          }
   3006          
   3007          /***************************************************************************************************
   3008           * @fn          MT_ZdoExtSetParams
   3009           *
   3010           * @brief       Set Parameters not settable through NV.
   3011           *
   3012           * @param       pBuf - Pointer to the received message data.
   3013           *
   3014           * @return      NULL
   3015           ***************************************************************************************************/
   3016          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3017          {
   3018            ZStatus_t status = ZSuccess;
   3019            uint8 useMultiCast;
   3020          
   3021            pBuf += MT_RPC_FRAME_HDR_SZ;
   3022          
   3023            // Is the useMulticast in this message
   3024            useMultiCast = *pBuf++;
   3025            if ( useMultiCast & 0x80 )
   3026            {
   3027              if ( useMultiCast & 0x7F )
   3028              {
   3029                _NIB.nwkUseMultiCast = TRUE;
   3030              }
   3031              else
   3032              {
   3033                _NIB.nwkUseMultiCast = FALSE;
   3034              }
   3035            }
   3036          
   3037            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3038                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3039          }
   3040          #endif // MT_ZDO_EXTENSIONS
   3041          
   3042          #endif   /*ZDO Command Processing in MT*/
   3043          /***************************************************************************************************
   3044          ***************************************************************************************************/


 

 


Errors: none
Warnings: none
