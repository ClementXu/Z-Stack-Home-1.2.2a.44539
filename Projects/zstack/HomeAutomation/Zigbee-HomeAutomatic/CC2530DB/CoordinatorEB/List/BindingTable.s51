///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Aug/2016  23:13:46
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Components\stack\nwk\BindingTable.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Components\stack\nwk\BindingTable.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
//        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
//        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\BindingTable.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME BindingTable

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_C_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??BindCopyBackupToNewNV::?relay`,0203H
        PUBLIC `??BindInitNV::?relay`
        FUNCTION `??BindInitNV::?relay`,0203H
        PUBLIC `??BindRestoreFromNV::?relay`
        FUNCTION `??BindRestoreFromNV::?relay`,0203H
        PUBLIC `??BindSetDefaultNV::?relay`
        FUNCTION `??BindSetDefaultNV::?relay`,0203H
        FUNCTION `??BindUpgradeTableInNV::?relay`,0203H
        PUBLIC `??BindWriteNV::?relay`
        FUNCTION `??BindWriteNV::?relay`,0203H
        PUBLIC `??GetBindingTableEntry::?relay`
        FUNCTION `??GetBindingTableEntry::?relay`,0203H
        PUBLIC `??InitBindingTable::?relay`
        FUNCTION `??InitBindingTable::?relay`,0203H
        PUBLIC `??bindAddClusterIdToList::?relay`
        FUNCTION `??bindAddClusterIdToList::?relay`,0203H
        PUBLIC `??bindAddEntry::?relay`
        FUNCTION `??bindAddEntry::?relay`,0203H
        PUBLIC `??bindAddrIndexGet::?relay`
        FUNCTION `??bindAddrIndexGet::?relay`,0203H
        PUBLIC `??bindAddrMgrLocalLoad::?relay`
        FUNCTION `??bindAddrMgrLocalLoad::?relay`,0203H
        PUBLIC `??bindAddressClear::?relay`
        FUNCTION `??bindAddressClear::?relay`,0203H
        PUBLIC `??bindCapacity::?relay`
        FUNCTION `??bindCapacity::?relay`,0203H
        PUBLIC `??bindFind::?relay`
        FUNCTION `??bindFind::?relay`,0203H
        PUBLIC `??bindFindEmpty::?relay`
        FUNCTION `??bindFindEmpty::?relay`,0203H
        PUBLIC `??bindFindExisting::?relay`
        FUNCTION `??bindFindExisting::?relay`,0203H
        PUBLIC `??bindIsClusterIDinList::?relay`
        FUNCTION `??bindIsClusterIDinList::?relay`,0203H
        PUBLIC `??bindNumBoundTo::?relay`
        FUNCTION `??bindNumBoundTo::?relay`,0203H
        PUBLIC `??bindNumOfEntries::?relay`
        FUNCTION `??bindNumOfEntries::?relay`,0203H
        PUBLIC `??bindNumReflections::?relay`
        FUNCTION `??bindNumReflections::?relay`,0203H
        PUBLIC `??bindRemoveClusterIdFromList::?relay`
        FUNCTION `??bindRemoveClusterIdFromList::?relay`,0203H
        PUBLIC `??bindRemoveDev::?relay`
        FUNCTION `??bindRemoveDev::?relay`,0203H
        PUBLIC `??bindRemoveEntry::?relay`
        FUNCTION `??bindRemoveEntry::?relay`,0203H
        PUBLIC `??bindRemoveSrcDev::?relay`
        FUNCTION `??bindRemoveSrcDev::?relay`,0203H
        PUBLIC `??bindUpdateAddr::?relay`
        FUNCTION `??bindUpdateAddr::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvert::?relay`
        FUNCTION `??bindingAddrMgsHelperConvert::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperConvertShort::?relay`
        FUNCTION `??bindingAddrMgsHelperConvertShort::?relay`,0203H
        PUBLIC `??bindingAddrMgsHelperFind::?relay`
        FUNCTION `??bindingAddrMgsHelperFind::?relay`,0203H
        FUNCTION BindCopyBackupToNewNV,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC BindInitNV
        FUNCTION BindInitNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC BindRestoreFromNV
        FUNCTION BindRestoreFromNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC BindSetDefaultNV
        FUNCTION BindSetDefaultNV,0a1603H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION BindUpgradeTableInNV,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC BindWriteNV
        FUNCTION BindWriteNV,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC GetBindingTableEntry
        FUNCTION GetBindingTableEntry,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC InitBindingTable
        FUNCTION InitBindingTable,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindAddClusterIdToList
        FUNCTION bindAddClusterIdToList,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindAddEntry
        FUNCTION bindAddEntry,0a1603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddrIndexGet
        FUNCTION bindAddrIndexGet,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindAddrMgrLocalLoad
        FUNCTION bindAddrMgrLocalLoad,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddressClear
        FUNCTION bindAddressClear,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindCapacity
        FUNCTION bindCapacity,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindFind
        FUNCTION bindFind,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindFindEmpty
        FUNCTION bindFindEmpty,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindFindExisting
        FUNCTION bindFindExisting,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindIsClusterIDinList
        FUNCTION bindIsClusterIDinList,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindNumBoundTo
        FUNCTION bindNumBoundTo,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindNumOfEntries
        FUNCTION bindNumOfEntries,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindNumReflections
        FUNCTION bindNumReflections,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveClusterIdFromList
        FUNCTION bindRemoveClusterIdFromList,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindRemoveDev
        FUNCTION bindRemoveDev,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveEntry
        FUNCTION bindRemoveEntry,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindRemoveSrcDev
        FUNCTION bindRemoveSrcDev,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindUpdateAddr
        FUNCTION bindUpdateAddr,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC bindingAddrMgsHelperConvert
        FUNCTION bindingAddrMgsHelperConvert,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindingAddrMgsHelperConvertShort
        FUNCTION bindingAddrMgsHelperConvertShort,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindingAddrMgsHelperFind
        FUNCTION bindingAddrMgsHelperFind,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC pBindInitNV
        PUBLIC pBindRestoreFromNV
        PUBLIC pBindSetDefaultNV
        PUBLIC pBindWriteNV
        PUBLIC pbindAddEntry
        PUBLIC pbindNumOfEntries
        PUBLIC pbindRemoveDev
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
`??NLME_GetCoordExtAddr::?relay` SYMBOL "?relay", NLME_GetCoordExtAddr
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
nwkCreateDuplicateNV SYMBOL "nwkCreateDuplicateNV"
`??nwkCreateDuplicateNV::?relay` SYMBOL "?relay", nwkCreateDuplicateNV
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
BindInitNV          SYMBOL "BindInitNV"
`??BindInitNV::?relay` SYMBOL "?relay", BindInitNV
BindRestoreFromNV   SYMBOL "BindRestoreFromNV"
`??BindRestoreFromNV::?relay` SYMBOL "?relay", BindRestoreFromNV
BindSetDefaultNV    SYMBOL "BindSetDefaultNV"
`??BindSetDefaultNV::?relay` SYMBOL "?relay", BindSetDefaultNV
BindWriteNV         SYMBOL "BindWriteNV"
`??BindWriteNV::?relay` SYMBOL "?relay", BindWriteNV
GetBindingTableEntry SYMBOL "GetBindingTableEntry"
`??GetBindingTableEntry::?relay` SYMBOL "?relay", GetBindingTableEntry
InitBindingTable    SYMBOL "InitBindingTable"
`??InitBindingTable::?relay` SYMBOL "?relay", InitBindingTable
bindAddClusterIdToList SYMBOL "bindAddClusterIdToList"
`??bindAddClusterIdToList::?relay` SYMBOL "?relay", bindAddClusterIdToList
bindAddEntry        SYMBOL "bindAddEntry"
`??bindAddEntry::?relay` SYMBOL "?relay", bindAddEntry
bindAddrIndexGet    SYMBOL "bindAddrIndexGet"
`??bindAddrIndexGet::?relay` SYMBOL "?relay", bindAddrIndexGet
bindAddrMgrLocalLoad SYMBOL "bindAddrMgrLocalLoad"
`??bindAddrMgrLocalLoad::?relay` SYMBOL "?relay", bindAddrMgrLocalLoad
bindAddressClear    SYMBOL "bindAddressClear"
`??bindAddressClear::?relay` SYMBOL "?relay", bindAddressClear
bindCapacity        SYMBOL "bindCapacity"
`??bindCapacity::?relay` SYMBOL "?relay", bindCapacity
bindFind            SYMBOL "bindFind"
`??bindFind::?relay` SYMBOL "?relay", bindFind
bindFindEmpty       SYMBOL "bindFindEmpty"
`??bindFindEmpty::?relay` SYMBOL "?relay", bindFindEmpty
bindFindExisting    SYMBOL "bindFindExisting"
`??bindFindExisting::?relay` SYMBOL "?relay", bindFindExisting
bindIsClusterIDinList SYMBOL "bindIsClusterIDinList"
`??bindIsClusterIDinList::?relay` SYMBOL "?relay", bindIsClusterIDinList
bindNumBoundTo      SYMBOL "bindNumBoundTo"
`??bindNumBoundTo::?relay` SYMBOL "?relay", bindNumBoundTo
bindNumOfEntries    SYMBOL "bindNumOfEntries"
`??bindNumOfEntries::?relay` SYMBOL "?relay", bindNumOfEntries
bindNumReflections  SYMBOL "bindNumReflections"
`??bindNumReflections::?relay` SYMBOL "?relay", bindNumReflections
bindRemoveClusterIdFromList SYMBOL "bindRemoveClusterIdFromList"
`??bindRemoveClusterIdFromList::?relay` SYMBOL "?relay", bindRemoveClusterIdFromList
bindRemoveDev       SYMBOL "bindRemoveDev"
`??bindRemoveDev::?relay` SYMBOL "?relay", bindRemoveDev
bindRemoveEntry     SYMBOL "bindRemoveEntry"
`??bindRemoveEntry::?relay` SYMBOL "?relay", bindRemoveEntry
bindRemoveSrcDev    SYMBOL "bindRemoveSrcDev"
`??bindRemoveSrcDev::?relay` SYMBOL "?relay", bindRemoveSrcDev
bindUpdateAddr      SYMBOL "bindUpdateAddr"
`??bindUpdateAddr::?relay` SYMBOL "?relay", bindUpdateAddr
bindingAddrMgsHelperConvert SYMBOL "bindingAddrMgsHelperConvert"
`??bindingAddrMgsHelperConvert::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvert
bindingAddrMgsHelperConvertShort SYMBOL "bindingAddrMgsHelperConvertShort"
`??bindingAddrMgsHelperConvertShort::?relay` SYMBOL "?relay", bindingAddrMgsHelperConvertShort
bindingAddrMgsHelperFind SYMBOL "bindingAddrMgsHelperFind"
`??bindingAddrMgsHelperFind::?relay` SYMBOL "?relay", bindingAddrMgsHelperFind

        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??NLME_GetCoordExtAddr::?relay`
        FUNCTION `??NLME_GetCoordExtAddr::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??nwkCreateDuplicateNV::?relay`
        FUNCTION `??nwkCreateDuplicateNV::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN BindingTable
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN gBIND_REC_SIZE
        EXTERN gMAX_BINDING_CLUSTER_IDS
        EXTERN gNWK_MAX_BINDING_ENTRIES
        EXTERN nwkCreateDuplicateNV
        FUNCTION nwkCreateDuplicateNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\nwk\BindingTable.c
//    1 /**************************************************************************************************
//    2   Filename:       BindingTable.c
//    3   Revised:        $Date: 2014-10-08 08:37:03 -0700 (Wed, 08 Oct 2014) $
//    4   Revision:       $Revision: 40512 $
//    5 
//    6   Description:    Device binding table functions.
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "nwk_globals.h"
//   47 #include "AddrMgr.h"
//   48 #include "BindingTable.h"
//   49 #include "nwk_util.h"
//   50 
//   51 /*********************************************************************
//   52  * MACROS
//   53  */
//   54 
//   55 /*********************************************************************
//   56  * CONSTANTS
//   57  */
//   58 #define NV_BIND_EMPTY   0xFF
//   59 #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
//   60 #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
//   61 
//   62 /*********************************************************************
//   63  * TYPEDEFS
//   64  */
//   65 typedef struct
//   66 {
//   67   uint8        srcEP;
//   68   uint16       dstIndex;
//   69   uint8        dstEP;
//   70   uint8        dstAddrMode;
//   71   uint8        clusterIDs;
//   72   uint16*      clusterIDList;
//   73 } bindFields_t;
//   74 
//   75 /*********************************************************************
//   76  * GLOBAL VARIABLES
//   77  */
//   78 
//   79 /*********************************************************************
//   80  * LOCAL FUNCTIONS
//   81  */
//   82 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
//   83                     AddrMgrEntry_t *entryNew );
//   84 BindingEntry_t *bindFindEmpty( void );
//   85 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
//   86 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
//   87 void bindAddrMgrLocalLoad( void );
//   88 
//   89 #if !defined ( BINDINGTABLE_NV_SINGLES )
//   90   #if !defined ( DONT_UPGRADE_BIND )
//   91     static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
//   92     static uint8 BindUpgradeTableInNV( void );
//   93   #endif
//   94 #endif // !BINDINGTABLE_NV_SINGLES
//   95 
//   96 
//   97 /*********************************************************************
//   98  * LOCAL VARIABLES
//   99  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 static uint8 bindAddrMgrLocalLoaded = FALSE;
bindAddrMgrLocalLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  101 
//  102 /*********************************************************************
//  103  * Function Pointers
//  104  */
//  105 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  106 BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
pbindAddEntry:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  107                                   zAddrType_t *dstAddr, byte dstEpInt,
//  108                                   byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  109 uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
pbindNumOfEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  110 void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
pbindRemoveDev:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  111 byte (*pBindInitNV)( void ) = (void*)NULL;
pBindInitNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  112 void (*pBindSetDefaultNV)( void ) = (void*)NULL;
pBindSetDefaultNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  113 uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
pBindRestoreFromNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 void (*pBindWriteNV)( void ) = (void*)NULL;
pBindWriteNV:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  115 
//  116 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  117 /*********************************************************************
//  118  * @fn      BindAddrMgrCB()
//  119  *
//  120  * @brief   Address Manager Callback function
//  121  *
//  122  * @param   update -
//  123  * @param   entry -
//  124  *
//  125  * @return  pointer to
//  126  */
//  127 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
//  128                     AddrMgrEntry_t *entryOld )
//  129 {
//  130   // Check for either deleted items or changed Extended (Duplicate) addresses
//  131 }
//  132 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  133 
//  134 /*********************************************************************
//  135  * @fn      InitBindingTable()
//  136  *
//  137  * @brief
//  138  *
//  139  *   This function is used to initialise the binding table
//  140  *
//  141  * @param   none
//  142  *
//  143  * @return  none
//  144  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 void InitBindingTable( void )
InitBindingTable:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function InitBindingTable
        CODE
//  146 {
        FUNCALL InitBindingTable, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  147   osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
        MOV     A,R4
        MOV     B,?V0
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,?V0
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     R2,#BindingTable & 0xff
        MOV     R3,#(BindingTable >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  148 
//  149   pbindAddEntry = bindAddEntry;
        MOV     DPTR,#pbindAddEntry
        MOV     A,#`??bindAddEntry::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindAddEntry::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  150   pbindNumOfEntries = bindNumOfEntries;
        MOV     DPTR,#pbindNumOfEntries
        MOV     A,#`??bindNumOfEntries::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  151   pbindRemoveDev = bindRemoveDev;
        MOV     DPTR,#pbindRemoveDev
        MOV     A,#`??bindRemoveDev::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  152   pBindInitNV = BindInitNV;
        MOV     DPTR,#pBindInitNV
        MOV     A,#`??BindInitNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindInitNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  153   pBindSetDefaultNV = BindSetDefaultNV;
        MOV     DPTR,#pBindSetDefaultNV
        MOV     A,#`??BindSetDefaultNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  154   pBindRestoreFromNV = BindRestoreFromNV;
        MOV     DPTR,#pBindRestoreFromNV
        MOV     A,#`??BindRestoreFromNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  155   pBindWriteNV = BindWriteNV;
        MOV     DPTR,#pBindWriteNV
        MOV     A,#`??BindWriteNV::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??BindWriteNV::?relay` >> 8) & 0xff
        MOVX    @DPTR,A
//  156 
//  157   bindAddrMgrLocalLoaded = FALSE;
        MOV     DPTR,#bindAddrMgrLocalLoaded
        CLR     A
        MOVX    @DPTR,A
//  158 
//  159 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  160   // Register with the address manager
//  161   AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
//  162 #endif
//  163 }
        SJMP    ??Subroutine29_0
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  164 
//  165 /*********************************************************************
//  166  * @fn      bindFindEmpty()
//  167  *
//  168  * @brief   This function returns a pointer to an empty binding slot
//  169  *
//  170  * @param   none
//  171  *
//  172  * @return  pointer to binding table entry, NULL if not added
//  173  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  174 BindingEntry_t *bindFindEmpty( void )
bindFindEmpty:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bindFindEmpty
        CODE
//  175 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  176   bindTableIndex_t x;
//  177 
//  178   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        SJMP    ??bindFindEmpty_0
??bindFindEmpty_1:
        INC     R2
??bindFindEmpty_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JNC     ??bindFindEmpty_2
//  179   {
//  180     // It's empty if the index is "Not Found"
//  181     if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
        MOV     A,R2
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_41:
        JNZ     ??bindFindEmpty_1
//  182     {
//  183       return ( &BindingTable[x] );
        MOV     R2,DPL
        MOV     R3,DPH
        SJMP    ??bindFindEmpty_3
//  184     }
//  185   }
//  186 
//  187   return ( (BindingEntry_t *)NULL );
??bindFindEmpty_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindEmpty_3:
        LJMP    ??Subroutine34_0 & 0xFFFF
//  188 }
          CFI EndBlock cfiBlock3
//  189 
//  190 /*********************************************************************
//  191  * @fn      bindNumOfEntries()
//  192  *
//  193  * @brief   This function returns the number of binding table entries.
//  194  *          The return for this is the number of clusters in the
//  195  *          table NOT the number of entries.
//  196  *
//  197  * @param   none
//  198  *
//  199  * @return  number of entries
//  200  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  201 uint16 bindNumOfEntries( void )
bindNumOfEntries:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bindNumOfEntries
        CODE
//  202 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  203   bindTableIndex_t x;
//  204   uint16 found;
//  205 
//  206   for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        SJMP    ??bindNumOfEntries_0
//  207   {
//  208     // It's empty if the index is "Not Found"
//  209     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindNumOfEntries_1:
        MOV     A,R4
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_42:
        JZ      ??bindNumOfEntries_2
//  210     {
//  211       found += BindingTable[x].numClusterIds;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,R3
        MOV     R3,A
//  212     }
//  213   }
??bindNumOfEntries_2:
        INC     R4
??bindNumOfEntries_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JC      ??bindNumOfEntries_1
//  214 
//  215   return ( found );
        LJMP    ??Subroutine34_0 & 0xFFFF
//  216 }
          CFI EndBlock cfiBlock4
//  217 
//  218 /*********************************************************************
//  219  * @fn      bindCapacity()
//  220  *
//  221  * @brief   This function returns the number of binding entries
//  222  *          possible and used.
//  223  *
//  224  * @param   maxEntries - pointer to a place to put the max entries
//  225  * @param   usedEntries - pointer to a place to put the number
//  226  *               of used entries
//  227  *
//  228  * @return  none
//  229  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  230 void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
bindCapacity:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bindCapacity
        CODE
//  231 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  232   bindTableIndex_t x;
//  233   bindTableIndex_t used;
//  234 
//  235   for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??bindCapacity_0
//  236   {
//  237     // It's empty if the index is "Not Found"
//  238     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindCapacity_1:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_43:
        JZ      ??bindCapacity_2
//  239     {
//  240       used++;
        INC     R6
//  241     }
//  242   }
??bindCapacity_2:
        INC     R7
??bindCapacity_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JC      ??bindCapacity_1
//  243 
//  244   *maxEntries = gNWK_MAX_BINDING_ENTRIES;
        CLR     A
        MOVC    A,@A+DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  245   *usedEntries = used;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  246 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function bindCapacity
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function GetBindingTableEntry
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV     A,R7
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     ?V0,B
        MOV     R1,?V0
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function bindFindEmpty
          CFI Conditional ??CrossCallReturnLabel_41
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function bindNumOfEntries
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-7
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function bindCapacity
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function GetBindingTableEntry
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_46:
        CPL     A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//  247 
//  248 /*********************************************************************
//  249  * @fn      bindAddEntry()
//  250  *
//  251  * @brief   This function is used to Add an entry to the binding table
//  252  *
//  253  * @param       srcEpInt - source endpoint
//  254  * @param       dstAddr - destination Address
//  255  * @param       dstEpInt - destination endpoint
//  256  * @param       numClusterIds - number of cluster Ids in the list
//  257  * @param       clusterIds - pointer to the Object ID list
//  258  *
//  259  * @return  pointer to binding table entry, NULL if not added
//  260  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  261 BindingEntry_t *bindAddEntry( byte srcEpInt,
bindAddEntry:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bindAddEntry
        CODE
//  262                               zAddrType_t *dstAddr, byte dstEpInt,
//  263                               byte numClusterIds, uint16 *clusterIds )
//  264 {
        FUNCALL bindAddEntry, bindAddrMgrLocalLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrIndexGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddClusterIdToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindFindEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V8,R4
        MOV     ?V0,R5
//  265   uint8            index;
//  266   bindTableIndex_t bindIdx;
//  267   BindingEntry_t*  entry;
//  268   bindFields_t     fields;
//  269 
//  270   // initialize results
//  271   entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  272 
//  273   // make sure local addresses have been loaded
//  274   bindAddrMgrLocalLoad();
        ; Setup parameters for call to function bindAddrMgrLocalLoad
        LCALL   `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
//  275 
//  276   // setup fields
//  277   fields.dstIndex = bindAddrIndexGet( dstAddr );
        ; Setup parameters for call to function bindAddrIndexGet
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
        MOV     ?V4,R2
        MOV     ?V5,R3
//  278   fields.srcEP    = srcEpInt;
//  279 
//  280   if ( dstAddr->addrMode == AddrGroup )
        MOV     DPL,?V6
        MOV     DPH,?V7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindAddEntry_0
//  281   {
//  282     fields.dstAddrMode = DSTGROUPMODE_GROUP;
        MOV     ?V3,#0x1
//  283     fields.dstEP       = 0;
        MOV     ?V1,#0x0
        SJMP    ??bindAddEntry_1
//  284   }
//  285   else
//  286   {
//  287     fields.dstAddrMode = DSTGROUPMODE_ADDR;
??bindAddEntry_0:
        MOV     ?V3,#0x0
//  288     fields.dstEP       = dstEpInt;
        MOV     ?V1,?V8
//  289   }
//  290 
//  291   if ( fields.dstIndex != INVALID_NODE_ADDR  )
??bindAddEntry_1:
        MOV     A,#-0x2
        XRL     A,?V4
        JNZ     ??bindAddEntry_2
        MOV     A,#-0x1
        XRL     A,?V5
??bindAddEntry_2:
        JNZ     $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  292   {
//  293     for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
        MOV     R2,#0x0
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V7,A
        SJMP    ??bindAddEntry_4
??bindAddEntry_5:
        INC     R2
??bindAddEntry_4:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JNC     ??bindAddEntry_6
//  294     {
//  295       if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
//  296            ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
//  297            ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
//  298            ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
        MOV     A,R2
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_7:
        XRL     A,?V2
        JNZ     ??bindAddEntry_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V3
        JNZ     ??bindAddEntry_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V4
        JNZ     ??bindAddEntry_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V5
??bindAddEntry_7:
        JNZ     ??bindAddEntry_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindAddEntry_5
//  299       {
//  300         entry = &BindingTable[bindIdx];
//  301 
//  302         // break from loop
//  303         break;
//  304       }
//  305     }
//  306 
//  307     if ( entry != NULL )
//  308     {
//  309       // Loop through the cluster IDs
//  310       for ( index = 0; index < numClusterIds; index++ )
        MOV     ?V3,#0x0
??bindAddEntry_8:
        MOV     A,?V3
        CLR     C
        SUBB    A,?V0
        JC      $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  311       {
//  312         // Found - is the cluster already defined?
//  313         if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
        MOV     R0,?V3
        MOV     A,R0
        ADD     A,R0
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,?V6
        ADD     A,R0
        MOV     ?V4,A
        MOV     A,?V7
        ADDC    A,R1
        MOV     ?V5,A
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     DPL,?V4
        MOV     DPH,A
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JNZ     ??bindAddEntry_9
//  314         {
//  315           // Nope, add this cluster
//  316           if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
        ; Setup parameters for call to function bindAddClusterIdToList
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
        MOV     A,R1
        JNZ     ??bindAddEntry_9
//  317           {
//  318             // Indicate error if cluster list was full
//  319             entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  320           }
//  321         }
//  322       }
??bindAddEntry_9:
        INC     ?V3
        SJMP    ??bindAddEntry_8
//  323     }
//  324     else
//  325     {
//  326       // Find an empty slot
//  327       entry = bindFindEmpty();
??bindAddEntry_6:
        ; Setup parameters for call to function bindFindEmpty
        LCALL   `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
        MOV     ?V10,R2
        MOV     ?V11,R3
        MOV     R6,?V10
        MOV     R7,?V11
//  328 
//  329       // Check against the maximum number allowed
//  330       if ( entry != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??bindAddEntry_3
//  331       {
//  332         // Add new entry
//  333         entry->srcEP         = fields.srcEP;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V2
        MOVX    @DPTR,A
//  334         entry->dstGroupMode  = fields.dstAddrMode;
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
//  335         entry->dstIdx        = fields.dstIndex;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
//  336         entry->dstEP         = fields.dstEP;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  337 
//  338         if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        CLR     C
        SUBB    A,?V0
        JNC     ??bindAddEntry_10
//  339         {
//  340           numClusterIds = gMAX_BINDING_CLUSTER_IDS;
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
//  341         }
//  342 
//  343         entry->numClusterIds = numClusterIds;
??bindAddEntry_10:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
//  344 
//  345         osal_memcpy( entry->clusterIdList,
//  346                      clusterIds,
//  347                      numClusterIds * sizeof(uint16) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V6
        MOV     ?V5,?V7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,?V0
        MOV     A,R4
        ADD     A,R4
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  348       }
//  349     }
//  350   }
//  351 
//  352   return entry;
??bindAddEntry_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
//  353 }
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function bindAddEntry
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
//  354 
//  355 /*********************************************************************
//  356  * @fn      bindRemoveEntry
//  357  *
//  358  * @brief   Removes a binding table entry.
//  359  *
//  360  * @param   pBind - pointer to binding table entry to delete
//  361  *
//  362  * @return  TRUE if Removed, FALSE if not
//  363  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  364 byte bindRemoveEntry( BindingEntry_t *pBind )
bindRemoveEntry:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function bindRemoveEntry
        CODE
//  365 {
        FUNCALL bindRemoveEntry, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  366   osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     R1,#-0x1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  367   return ( TRUE );
        MOV     R1,#0x1
        LJMP    ??Subroutine34_0 & 0xFFFF
//  368 }
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function InitBindingTable
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function bindRemoveEntry
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond20) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond20) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond20) CFA_SP SP+-7
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function BindWriteNV
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  369 
//  370 /*********************************************************************
//  371  * @fn      bindIsClusterIDinList()
//  372  *
//  373  * @brief   Is the clusterID in the clusterID list?
//  374  *
//  375  * @param   enter - binding table entry
//  376  * @param   clusterId  - Cluster ID to look for
//  377  *
//  378  * @return  TRUE if found, FALSE if not found
//  379  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  380 byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
bindIsClusterIDinList:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function bindIsClusterIDinList
        CODE
//  381 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  382   uint8 x;
//  383 
//  384   if ( entry != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindIsClusterIDinList_0
//  385   {
//  386     for ( x = 0; x < entry->numClusterIds; x++ )
        MOV     R6,#0x0
        SJMP    ??bindIsClusterIDinList_1
??bindIsClusterIDinList_2:
        INC     R6
??bindIsClusterIDinList_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??bindIsClusterIDinList_0
//  387     {
//  388       if ( entry->clusterIdList[x] == clusterId )
        MOV     A,R6
        ADD     A,0xE0 /* A   */
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindIsClusterIDinList_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindIsClusterIDinList_3:
        JNZ     ??bindIsClusterIDinList_2
//  389       {
//  390         return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindIsClusterIDinList_4
//  391       }
//  392     }
//  393   }
//  394 
//  395   return ( FALSE );
??bindIsClusterIDinList_0:
        MOV     R1,#0x0
??bindIsClusterIDinList_4:
        LJMP    ?Subroutine2 & 0xFFFF
//  396 }
          CFI EndBlock cfiBlock23
//  397 
//  398 /*********************************************************************
//  399  * @fn      bindRemoveClusterIdFromList()
//  400  *
//  401  * @brief   Removes a ClusterID from a list of ClusterIDs.
//  402  *
//  403  * @param   enter - binding table entry
//  404  * @param   clusterId  - Cluster ID to look for
//  405  *
//  406  * @return  TRUE if there are at least 1 clusterID left, FALSE if none
//  407  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  408 byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
bindRemoveClusterIdFromList:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
        CODE
//  409 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  410   byte x;
//  411   uint16 *listPtr;
//  412   byte numIds;
//  413 
//  414   if ( entry )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindRemoveClusterIdFromList_0
//  415   {
//  416     if ( entry->numClusterIds > 0 )
        MOV     A,R2
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        JZ      ??bindRemoveClusterIdFromList_0
//  417     {
//  418       listPtr = entry->clusterIdList;
        MOV     A,R2
        ADD     A,#0x6
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
//  419       numIds = entry->numClusterIds;
        MOV     ?V3,R0
//  420 
//  421       // Copy the new list over
//  422       for ( x = 0; x < numIds; x++ )
        MOV     ?V2,#0x0
        SJMP    ??bindRemoveClusterIdFromList_1
//  423       {
//  424         if ( entry->clusterIdList[x] != clusterId )
//  425         {
//  426           *listPtr++ = entry->clusterIdList[x];
//  427         }
//  428         else
//  429         {
//  430           entry->numClusterIds--;
??bindRemoveClusterIdFromList_2:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  431           if ( entry->numClusterIds == 0 )
        JZ      ??bindRemoveClusterIdFromList_0
//  432           {
//  433             break;
//  434           }
//  435         }
??bindRemoveClusterIdFromList_3:
        INC     ?V2
??bindRemoveClusterIdFromList_1:
        MOV     A,?V2
        CLR     C
        SUBB    A,?V3
        JNC     ??bindRemoveClusterIdFromList_4
        MOV     R0,?V2
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,R6
        XRL     A,R0
        JNZ     ??bindRemoveClusterIdFromList_5
        MOV     A,R7
        XRL     A,R1
??bindRemoveClusterIdFromList_5:
        JZ      ??bindRemoveClusterIdFromList_2
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x2
        CLR     A
        ADDC    A,R5
        INC     R4
        INC     R4
        MOV     R5,A
        SJMP    ??bindRemoveClusterIdFromList_3
//  436       }
//  437     }
//  438   }
??bindRemoveClusterIdFromList_4:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JZ      ??bindRemoveClusterIdFromList_0
//  439 
//  440   if ( entry && (entry->numClusterIds > 0) )
//  441   {
//  442     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindRemoveClusterIdFromList_6
//  443   }
//  444   else
//  445   {
//  446     return ( FALSE );
??bindRemoveClusterIdFromList_0:
        MOV     R1,#0x0
//  447   }
??bindRemoveClusterIdFromList_6:
          CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  448 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock25
//  449 
//  450 /*********************************************************************
//  451  * @fn      bindAddClusterIdToList()
//  452  *
//  453  * @brief   Adds a ClusterID to a list of ClusterIDs.
//  454  *
//  455  * @param   enter - binding table entry
//  456  * @param   clusterId  - Cluster ID to Add
//  457  *
//  458  * @return  TRUE if Added, FALSE if not
//  459  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  460 byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
bindAddClusterIdToList:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function bindAddClusterIdToList
        CODE
//  461 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  462   if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindAddClusterIdToList_0
        MOV     A,R2
        ADD     A,#0x5
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     R0,A
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??bindAddClusterIdToList_0
//  463   {
//  464     // Add the new one
//  465     entry->clusterIdList[entry->numClusterIds] = clusterId;
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  466     entry->numClusterIds++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  467     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindAddClusterIdToList_1
//  468   }
//  469   return ( FALSE );
??bindAddClusterIdToList_0:
        MOV     R1,#0x0
??bindAddClusterIdToList_1:
          CFI EndBlock cfiBlock26
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  470 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function bindAddClusterIdToList
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOV     A,R0
        ADD     A,R0
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_38:
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function bindIsClusterIDinList
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function bindRemoveClusterIdFromList
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_4
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-4
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function bindAddClusterIdToList
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_5
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
//  471 
//  472 /*********************************************************************
//  473  * @fn      bindFindExisting
//  474  *
//  475  * @brief   Finds an existing src/epint to dst/epint bind record
//  476  *
//  477  * @param   srcEpInt - Source Endpoint/Interface
//  478  * @param   dstAddr - Destination address
//  479  * @param   dstEpInt - Destination Endpoint/Interface
//  480  *
//  481  * @return  pointer to existing entry or NULL
//  482  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  483 BindingEntry_t *bindFindExisting( byte srcEpInt,
bindFindExisting:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function bindFindExisting
        CODE
//  484                                   zAddrType_t *dstAddr, byte dstEpInt )
//  485 {
        FUNCALL bindFindExisting, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R4
//  486   uint16 dstIdx;
//  487   bindTableIndex_t x;
//  488 
//  489   // Find the records in the assoc list
//  490   if ( dstAddr->addrMode == AddrGroup )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ     ??bindFindExisting_0
//  491   {
//  492     dstIdx = dstAddr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??bindFindExisting_1
//  493   }
//  494   else
//  495   {
//  496     dstIdx = bindingAddrMgsHelperFind( dstAddr );
??bindFindExisting_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
//  497   }
//  498 
//  499   if ( dstIdx == INVALID_NODE_ADDR )
??bindFindExisting_1:
        MOV     A,#-0x2
        XRL     A,R4
        JNZ     ??bindFindExisting_2
        MOV     A,#-0x1
        XRL     A,R5
??bindFindExisting_2:
        JZ      ??bindFindExisting_3
//  500   {
//  501     return ( (BindingEntry_t *)NULL );
//  502   }
//  503 
//  504   // Start at the beginning
//  505   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
        SJMP    ??bindFindExisting_4
//  506   {
//  507     if ( (BindingTable[x].srcEP == srcEpInt) )
??bindFindExisting_5:
        MOV     A,#0x1
        XRL     A,?V3
        JNZ     ??bindFindExisting_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindFindExisting_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_7:
        JZ      ??bindFindExisting_8
??bindFindExisting_6:
        INC     ?V2
??bindFindExisting_4:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_13:
        JNC     ??bindFindExisting_3
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindFindExisting_6
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bindFindExisting_5
        MOV     A,?V3
        JNZ     ??bindFindExisting_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindFindExisting_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_9:
        JNZ     ??bindFindExisting_6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindFindExisting_6
//  508     {
//  509       if ( ((dstAddr->addrMode == AddrGroup)
//  510               && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  511               && (dstIdx == BindingTable[x].dstIdx))
//  512          || ((dstAddr->addrMode != AddrGroup)
//  513              && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  514              && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
//  515       {
//  516         return ( &BindingTable[x] );
        SJMP    ??bindFindExisting_8
//  517       }
//  518     }
//  519   }
//  520 
//  521   return ( (BindingEntry_t *)NULL );
??bindFindExisting_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindExisting_8:
        LJMP    ?Subroutine3 & 0xFFFF
//  522 }
          CFI EndBlock cfiBlock35
//  523 
//  524 /*********************************************************************
//  525  * @fn       bindRemoveDev()
//  526  *
//  527  * @brief
//  528  *
//  529  *   Remove all bind(s) entries associated to a device address (destination).
//  530  *   Updates binding table.
//  531  *
//  532  * @param   Addr - address of device to be removed from Binding Table
//  533  *
//  534  * @return  none
//  535  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  536 void bindRemoveDev( zAddrType_t *Addr )
bindRemoveDev:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function bindRemoveDev
        CODE
//  537 {
        FUNCALL bindRemoveDev, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  538   uint16 idx;
//  539   bindTableIndex_t x;
//  540 
//  541   if ( Addr->addrMode == AddrGroup )
        MOV     A,R2
        ADD     A,#0x8
        MOV     ?V0,A
        CLR     A
        ADDC    A,R3
        MOV     ?V1,A
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_0
//  542   {
//  543     idx = Addr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        SJMP    ??bindRemoveDev_1
//  544   }
//  545   else
//  546   {
//  547     idx = bindingAddrMgsHelperFind( Addr );
??bindRemoveDev_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
//  548   }
//  549 
//  550   if ( idx == INVALID_NODE_ADDR )
??bindRemoveDev_1:
        MOV     A,#-0x2
        XRL     A,R6
        JNZ     ??bindRemoveDev_2
        MOV     A,#-0x1
        XRL     A,R7
??bindRemoveDev_2:
        JZ      ??bindRemoveDev_3
//  551   {
//  552     return;
//  553   }
//  554 
//  555   // Removes all the entries that match the destination Address/Index
//  556   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
        SJMP    ??bindRemoveDev_4
//  557   {
//  558     if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  559                                          && (BindingTable[x].dstIdx == idx) ) ||
//  560          ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  561                                          && (BindingTable[x].dstIdx == idx) ) )
??bindRemoveDev_5:
        MOV     A,R4
        JNZ     ??bindRemoveDev_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindRemoveDev_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindRemoveDev_7:
        JNZ     ??bindRemoveDev_6
//  562     {
//  563       bindRemoveEntry( &BindingTable[x] );
??bindRemoveDev_8:
        ; Setup parameters for call to function bindRemoveEntry
        LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
//  564     }
??bindRemoveDev_6:
        INC     ?V2
??bindRemoveDev_4:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_14:
        JNC     ??bindRemoveDev_9
        LCALL   ?Subroutine11 & 0xFFFF
//  565   }
??CrossCallReturnLabel_9:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_5
        MOV     A,#0x1
        XRL     A,R4
        JNZ     ??bindRemoveDev_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindRemoveDev_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindRemoveDev_10:
        JZ      ??bindRemoveDev_8
        SJMP    ??bindRemoveDev_6
//  566 
//  567   // If this is the last Bind Entry for that idx then clear BINDING
//  568   // user from Address Manager
//  569   bindAddressClear( idx );
??bindRemoveDev_9:
        ; Setup parameters for call to function bindAddressClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  570 }
??bindRemoveDev_3:
          CFI EndBlock cfiBlock36
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function bindRemoveDev
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function bindNumReflections
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V2
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function bindRemoveDev
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV     A,?V2
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
//  571 
//  572 /*********************************************************************
//  573  * @fn       bindRemoveSrcDev()
//  574  *
//  575  * @brief
//  576  *
//  577  *   Remove binds(s) associated to device address (source).
//  578  *   Updates binding table.
//  579  *
//  580  * @param   ep - endpoint to remove, 0xFF is all endpoints
//  581  *
//  582  * @return  none
//  583  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  584 void bindRemoveSrcDev( uint8 ep )
bindRemoveSrcDev:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function bindRemoveSrcDev
        CODE
//  585 {
        FUNCALL bindRemoveSrcDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveSrcDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V1,R1
//  586   bindTableIndex_t x;
//  587 
//  588   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0,#0x0
        SJMP    ??bindRemoveSrcDev_0
//  589   {
//  590     if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
??bindRemoveSrcDev_1:
        MOV     A,?V0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#-0x1
        XRL     A,?V1
        JZ      ??bindRemoveSrcDev_2
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindRemoveSrcDev_3
//  591     {
//  592       uint16 idx = BindingTable[x].dstIdx;
??bindRemoveSrcDev_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  593 
//  594       bindRemoveEntry( &BindingTable[x] );
        ; Setup parameters for call to function bindRemoveEntry
        LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
//  595 
//  596       // If this is the last Bind Entry for that idx then clear BINDING
//  597       // user from Address Manager
//  598       bindAddressClear( idx );
        ; Setup parameters for call to function bindAddressClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
//  599     }
//  600   }
??bindRemoveSrcDev_3:
        INC     ?V0
??bindRemoveSrcDev_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JC      ??bindRemoveSrcDev_1
//  601 }
        LJMP    ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock45
//  602 
//  603 /*********************************************************************
//  604  * @fn          bindNumBoundTo
//  605  *
//  606  * @brief       Calculate the number items this device is bound to.
//  607  *              When srcMode is set to TRUE, discard what value devAddr
//  608  *              has, it returns number count bound to the local dev.
//  609  *
//  610  * @param       devAddr - device Address
//  611  * @param       devEP - endpoint
//  612  * @param       srcMode - TRUE - assume devHandle is a source address
//  613  *                        FALSE - destination address
//  614  *
//  615  * @return      status
//  616  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  617 byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
bindNumBoundTo:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function bindNumBoundTo
        CODE
//  618 {
        FUNCALL bindNumBoundTo, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V1,R1
        MOV     ?V2,R4
//  619   BindingEntry_t *pBind;
//  620   uint16 idx;
//  621   byte   num;
//  622   bindTableIndex_t x;
//  623 
//  624   // Init
//  625   num = 0;
        MOV     ?V0,#0x0
//  626 
//  627   if ( devAddr->addrMode == AddrGroup )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ     ??bindNumBoundTo_0
//  628   {
//  629     idx = devAddr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine39_0 & 0xFFFF
//  630   }
??CrossCallReturnLabel_56:
        SJMP    ??bindNumBoundTo_1
//  631   else
//  632   {
//  633     idx = bindingAddrMgsHelperFind( devAddr );
??bindNumBoundTo_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
//  634   }
//  635 
//  636   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindNumBoundTo_1:
        MOV     R4,#0x0
        SJMP    ??bindNumBoundTo_2
//  637   {
//  638     pBind = &BindingTable[x];
//  639     if ( srcMode )
//  640     {
//  641       if ( pBind->srcEP == devEpInt )
//  642       {
//  643         num++;
//  644       }
//  645     }
//  646     else
//  647     {
//  648       if ( ((devAddr->addrMode == AddrGroup)
//  649               && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
//  650           || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
//  651                                 && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
??bindNumBoundTo_3:
        MOV     A,R5
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindNumBoundTo_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindNumBoundTo_5:
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindNumBoundTo_4
//  652       {
//  653         num++;
??bindNumBoundTo_6:
        INC     ?V0
//  654       }
??bindNumBoundTo_4:
        INC     R4
??bindNumBoundTo_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JNC     ??bindNumBoundTo_7
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,?V2
        MOV     DPL,R0
        MOV     DPH,R1
        JZ      ??bindNumBoundTo_8
        MOVX    A,@DPTR
        XRL     A,?V1
        JNZ     ??bindNumBoundTo_4
        SJMP    ??bindNumBoundTo_6
??bindNumBoundTo_8:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_3
        MOV     A,#0x1
        XRL     A,R5
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindNumBoundTo_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindNumBoundTo_9:
        JZ      ??bindNumBoundTo_6
        SJMP    ??bindNumBoundTo_4
//  655     }
//  656   }
//  657 
//  658   return num;
??bindNumBoundTo_7:
        MOV     R1,?V0
        LJMP    ??Subroutine38_0 & 0xFFFF
//  659 }
          CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function bindNumBoundTo
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV     A,R2
        ADD     A,#0x8
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_40:
        XRL     A,#0x1
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function bindAddClusterIdToList
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function bindFindExisting
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_33
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function bindNumBoundTo
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_34
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function bindNumBoundTo
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function bindAddressClear
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond55) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond55) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond55) CFA_SP SP+-7
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOV     A,R4
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function bindUpdateAddr
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bindNumBoundTo
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function bindAddressClear
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-7
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60
//  660 
//  661 /*********************************************************************
//  662  * @fn          bindNumReflections
//  663  *
//  664  * @brief       Counts the number of reflections needed for a
//  665  *              endpoint and cluster ID combo.
//  666  *
//  667  * @param       ep - source endpoint
//  668  * @param       clusterID - matching clusterID
//  669  *
//  670  * @return      number of reflections needed.
//  671  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  672 uint16 bindNumReflections( uint8 ep, uint16 clusterID )
bindNumReflections:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function bindNumReflections
        CODE
//  673 {
        FUNCALL bindNumReflections, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V3,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
//  674   bindTableIndex_t x;
//  675   BindingEntry_t *pBind;
//  676   uint16 cnt = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  677   uint8 bindEP;
//  678 
//  679   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V2,#0x0
        SJMP    ??bindNumReflections_0
//  680   {
//  681     pBind = &BindingTable[x];
??bindNumReflections_1:
        MOV     A,?V2
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine27 & 0xFFFF
//  682     bindEP = pBind->srcEP;
//  683 
//  684     if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
??CrossCallReturnLabel_45:
        XRL     A,?V3
        JNZ     ??bindNumReflections_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JZ      ??bindNumReflections_2
//  685     {
//  686       cnt++;
        INC     R6
        MOV     A,R6
        JNZ     ??bindNumReflections_2
        INC     R7
//  687     }
//  688   }
??bindNumReflections_2:
        INC     ?V2
??bindNumReflections_0:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_15:
        JC      ??bindNumReflections_1
//  689 
//  690   return ( cnt );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LJMP    ?Subroutine4 & 0xFFFF
//  691 }
          CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function bindCapacity
          CFI Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function GetBindingTableEntry
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_44
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bindFindEmpty
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_41
          CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond64) CFA_SP SP+-9
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function bindNumOfEntries
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_42
          CFI (cfiCond65) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond65) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond65) CFA_SP SP+-9
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function bindNumReflections
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67
//  692 
//  693 /*********************************************************************
//  694  * @fn          bindFind
//  695  *
//  696  * @brief       Finds the binding entry for the source address, endpoint
//  697  *              and cluster ID passed in as a parameter.
//  698  *
//  699  * @param       ep - source endpoint
//  700  * @param       clusterID - matching clusterID
//  701  * @param       skip - number of matches to skip before returning
//  702  *
//  703  * @return      pointer to the binding table entry, NULL if not found
//  704  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  705 BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
bindFind:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function bindFind
        CODE
//  706 {
        FUNCALL bindFind, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V3,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V4,R4
//  707   BindingEntry_t *pBind;
//  708   byte skipped = 0;
        MOV     ?V2,#0x0
//  709   bindTableIndex_t x;
//  710 
//  711   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V5,#0x0
        SJMP    ??bindFind_0
//  712   {
//  713     pBind = &BindingTable[x];
//  714 
//  715     if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
//  716     {
//  717       if ( skipped < skipping )
//  718       {
//  719         skipped++;
??bindFind_1:
        INC     ?V2
//  720       }
??bindFind_2:
        INC     ?V5
??bindFind_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V5
        CLR     C
        SUBB    A,R0
        JNC     ??bindFind_3
        MOV     A,?V5
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_6:
        XRL     A,?V3
        JNZ     ??bindFind_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
        MOV     A,R1
        JZ      ??bindFind_2
        MOV     A,?V2
        CLR     C
        SUBB    A,?V4
        JC      ??bindFind_1
//  721       else
//  722       {
//  723         return ( pBind );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??bindFind_4
//  724       }
//  725     }
//  726   }
//  727 
//  728   return ( (BindingEntry_t *)NULL );
??bindFind_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFind_4:
        LJMP    ??Subroutine38_0 & 0xFFFF
//  729 }
          CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function bindFind
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
//  730 
//  731 /*********************************************************************
//  732  * @fn      bindAddressClear
//  733  *
//  734  * @brief   Lookup a binding entry by specific Idx, if none is found
//  735  *          clears the BINDING user from Address Manager.
//  736  *
//  737  * @param   dstIdx - Source Address Manager Index
//  738  *
//  739  * @return  none
//  740  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  741 void bindAddressClear( uint16 dstIdx )
bindAddressClear:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function bindAddressClear
        CODE
//  742 {
        FUNCALL bindAddressClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  743   bindTableIndex_t i;
//  744 
//  745   if ( dstIdx != INVALID_NODE_ADDR )
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??bindAddressClear_0
        MOV     A,#-0x1
        XRL     A,R3
??bindAddressClear_0:
        JZ      ??bindAddressClear_1
//  746   {
//  747     // Looks for a specific Idx
//  748     for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
        MOV     R4,#0x0
        SJMP    ??bindAddressClear_2
//  749     {
//  750       if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
//  751            ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
//  752            ( BindingTable[i].dstIdx == dstIdx ) )
??bindAddressClear_3:
        LCALL   ?Subroutine14 & 0xFFFF
//  753       {
//  754         break;  // found at least one
//  755       }
//  756     }
??CrossCallReturnLabel_49:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x1
        XRL     A,R5
        JZ      ??bindAddressClear_4
        MOV     A,R5
        JNZ     ??bindAddressClear_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindAddressClear_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindAddressClear_5:
        JZ      ??bindAddressClear_1
??bindAddressClear_4:
        INC     R4
??bindAddressClear_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JC      ??bindAddressClear_3
//  757 
//  758     if ( i == gNWK_MAX_BINDING_ENTRIES )
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,R4
        JNZ     ??bindAddressClear_1
//  759     {
//  760       // No binding entry is associated with dstIdx.
//  761       // Remove user binding bit from the address manager entry corresponding to dstIdx.
//  762       AddrMgrEntry_t addrEntry;
//  763 
//  764       addrEntry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  765       addrEntry.index = dstIdx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  766 
//  767       AddrMgrEntryRelease( &addrEntry );
//  768     }
//  769   }
??CrossCallReturnLabel_16:
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
//  770 }
??bindAddressClear_1:
        SJMP    ??Subroutine33_0
          CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xb
          CFI EndBlock cfiBlock73
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_59:
          CFI EndBlock cfiBlock74
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock75
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock76
//  771 
//  772 /*********************************************************************
//  773  * @fn          bindUpdateAddr
//  774  *
//  775  * @brief       Update the network address in the binding table.
//  776  *
//  777  * @param       oldAddr - old network address
//  778  * @param       newAddr - new network address
//  779  *
//  780  * @return      none
//  781  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  782 void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
bindUpdateAddr:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function bindUpdateAddr
        CODE
//  783 {
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  784   uint16 oldIdx;
//  785   uint16 newIdx;
//  786   zAddrType_t addr;
//  787   bindTableIndex_t x;
//  788   BindingEntry_t *pBind;
//  789 
//  790   addr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  791   addr.addr.shortAddr = oldAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine15 & 0xFFFF
//  792   oldIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_17:
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V0,R2
        MOV     ?V1,R3
//  793   addr.addr.shortAddr = newAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  794   newIdx = bindingAddrMgsHelperFind( &addr );
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
        MOV     ?V2,R2
//  795 
//  796   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        SJMP    ??bindUpdateAddr_0
//  797   {
//  798     pBind = &BindingTable[x];
??bindUpdateAddr_1:
        MOV     A,R2
        LCALL   ??Subroutine31_0 & 0xFFFF
//  799 
//  800     if ( pBind->dstIdx == oldIdx )
??CrossCallReturnLabel_47:
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??bindUpdateAddr_2
        INC     R1
??bindUpdateAddr_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??bindUpdateAddr_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??bindUpdateAddr_3:
        JNZ     ??bindUpdateAddr_4
//  801     {
//  802       pBind->dstIdx = newIdx;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  803     }
//  804   }
??bindUpdateAddr_4:
        INC     R2
??bindUpdateAddr_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JC      ??bindUpdateAddr_1
//  805 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock77
//  806 
//  807 /*********************************************************************
//  808  * @fn      bindingAddrMgsHelperFind
//  809  *
//  810  * @brief   Turns an zAddrType_t to an Addr Manager index
//  811  *
//  812  * @param   addr - zAddrType_t
//  813  *
//  814  * @return  INVALID_NODE_ADDR if not found, otherwise an index
//  815  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  816 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
bindingAddrMgsHelperFind:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
        CODE
//  817 {
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  818   AddrMgrEntry_t entry;
//  819 
//  820   // Resolve addresses with the address manager
//  821   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine16 & 0xFFFF
//  822   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_20:
        XRL     A,#0x2
        JNZ     ??bindingAddrMgsHelperFind_0
//  823   {
//  824     entry.nwkAddr = addr->addr.shortAddr;
        LCALL   ?Subroutine19 & 0xFFFF
//  825     AddrMgrEntryLookupNwk( &entry );
//  826   }
??CrossCallReturnLabel_51:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        SJMP    ??bindingAddrMgsHelperFind_1
//  827   else
//  828   {
//  829     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
??bindingAddrMgsHelperFind_0:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  830     AddrMgrEntryLookupExt( &entry );
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
//  831   }
//  832 
//  833   return ( entry.index );
??bindingAddrMgsHelperFind_1:
        LJMP    ?Subroutine1 & 0xFFFF
//  834 }
          CFI EndBlock cfiBlock78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_51
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function bindAddrIndexGet
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond80) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond80) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond80) CFA_SP SP+-7
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function bindingAddrMgsHelperFind
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond83) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond83) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond83) CFA_SP SP+-7
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function bindAddrIndexGet
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond84) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond84) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond84) CFA_SP SP+-7
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85
//  835 
//  836 /*********************************************************************
//  837  * @fn      bindingAddrMgsHelperConvert
//  838  *
//  839  * @brief   Convert an index into an zAddrType_t
//  840  *
//  841  * @param   idx -
//  842  * @param   addr - zAddrType_t
//  843  *
//  844  * @return  TRUE if found, FALSE if not
//  845  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  846 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
bindingAddrMgsHelperConvert:
          CFI Block cfiBlock86 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvert
        CODE
//  847 {
        FUNCALL bindingAddrMgsHelperConvert, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperConvert, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  848   AddrMgrEntry_t entry;
//  849   uint8 stat;
//  850 
//  851   // Resolve addresses with the address manager
//  852   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  853   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  854   stat = AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_18:
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
        MOV     A,R1
        MOV     ?V0,A
//  855   if ( stat )
        JZ      ??bindingAddrMgsHelperConvert_0
//  856   {
//  857     addr->addrMode = Addr64Bit;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  858     osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  859   }
//  860 
//  861   return ( stat );
??bindingAddrMgsHelperConvert_0:
        MOV     R1,?V0
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine2 & 0xFFFF
//  862 }
          CFI EndBlock cfiBlock86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function bindAddressClear
          CFI Conditional ??CrossCallReturnLabel_16
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function bindUpdateAddr
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function bindingAddrMgsHelperConvert
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond90) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond90) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond90) CFA_SP SP+-7
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryRelease
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
//  863 
//  864 /*********************************************************************
//  865  * @fn      bindingAddrMgsHelperConvertShort
//  866  *
//  867  * @brief   Convert an index into a short address
//  868  *
//  869  * @param   idx -
//  870  *
//  871  * @return  INVALID_NODE_ADDR if not available, otherwise the short address
//  872  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  873 uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
bindingAddrMgsHelperConvertShort:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvertShort
        CODE
//  874 {
        FUNCALL bindingAddrMgsHelperConvertShort, AddrMgrEntryGet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  875   AddrMgrEntry_t entry;
//  876 
//  877   // Resolve addresses with the address manager
//  878   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  879   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  880   AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_19:
        LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
//  881 
//  882   return ( entry.nwkAddr );
        MOV     A,#0x1
        LJMP    ??Subroutine32_0 & 0xFFFF
//  883 }
          CFI EndBlock cfiBlock92
//  884 
//  885 /*********************************************************************
//  886  * @fn      bindAddrMgrLocalLoad
//  887  *
//  888  * @brief   Load local(self and parent) address information into
//  889  *          Address Manager
//  890  *
//  891  * @param   none
//  892  *
//  893  * @return  none
//  894  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  895 void bindAddrMgrLocalLoad( void )
bindAddrMgrLocalLoad:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
        CODE
//  896 {
        FUNCALL bindAddrMgrLocalLoad, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
//  897   AddrMgrEntry_t entry;
//  898   uint16         parent;
//  899 
//  900   // add "local"(self and parent) address informtion into the Address
//  901   // Manager
//  902   if ( bindAddrMgrLocalLoaded == FALSE )
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOVX    A,@DPTR
        JNZ     ??bindAddrMgrLocalLoad_0
//  903   {
//  904     // add the device's address information
//  905     entry.user    = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  906     entry.nwkAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  907     AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  908     AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
//  909 
//  910     // make sure parent address is valid
//  911     parent = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
//  912     if ( ( parent != entry.nwkAddr     ) &&
//  913          ( parent != INVALID_NODE_ADDR )    )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??bindAddrMgrLocalLoad_1:
        JZ      ??bindAddrMgrLocalLoad_2
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_3
        MOV     A,#-0x1
        XRL     A,R1
??bindAddrMgrLocalLoad_3:
        JZ      ??bindAddrMgrLocalLoad_2
//  914     {
//  915       // add the parent's address information
//  916       entry.nwkAddr = parent;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  917       NLME_GetCoordExtAddr( entry.extAddr );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
//  918       AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
//  919     }
//  920 
//  921     bindAddrMgrLocalLoaded = TRUE;
??bindAddrMgrLocalLoad_2:
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOV     A,#0x1
        MOVX    @DPTR,A
//  922   }
//  923 }
??bindAddrMgrLocalLoad_0:
        MOV     A,#0xd
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock93
//  924 
//  925 /*********************************************************************
//  926  * @fn      bindAddrIndexGet
//  927  *
//  928  * @brief   Get bind address index.
//  929  *
//  930  * @param   addr - <zAddrType_t>
//  931  *
//  932  * @return  (uint16) address index
//  933  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  934 uint16 bindAddrIndexGet( zAddrType_t* addr )
bindAddrIndexGet:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function bindAddrIndexGet
        CODE
//  935 {
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  936   AddrMgrEntry_t entry;
//  937   uint8          update;
//  938 
//  939   update = FALSE;
//  940 
//  941   // sync binding addresses with the address manager
//  942   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine16 & 0xFFFF
//  943 
//  944   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_21:
        MOV     R0,A
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_0
//  945   {
//  946     entry.nwkAddr = addr->addr.shortAddr;
        LCALL   ?Subroutine19 & 0xFFFF
//  947 
//  948     if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
//  949     {
//  950       update = TRUE;
//  951     }
//  952   }
??CrossCallReturnLabel_52:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
        SJMP    ??bindAddrIndexGet_2
//  953   else if ( addr->addrMode == Addr64Bit )
??bindAddrIndexGet_0:
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_3
//  954   {
//  955     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  956 
//  957     if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
//  958     {
//  959       update = TRUE;
//  960     }
//  961   }
//  962   else if ( addr->addrMode == AddrGroup )
//  963   {
//  964     entry.index = addr->addr.shortAddr;
//  965   }
//  966   else
//  967   {
//  968     entry.index = INVALID_NODE_ADDR;
//  969   }
//  970 
//  971   if ( update )
//  972   {
//  973     AddrMgrEntryUpdate( &entry );
??bindAddrIndexGet_2:
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        SJMP    ??bindAddrIndexGet_1
//  974   }
??bindAddrIndexGet_3:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_4
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??bindAddrIndexGet_5
??bindAddrIndexGet_4:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
??bindAddrIndexGet_5:
        MOVX    @DPTR,A
//  975 
//  976   return entry.index;
??bindAddrIndexGet_1:
        LJMP    ?Subroutine1 & 0xFFFF
//  977 }
          CFI EndBlock cfiBlock94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_22
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function bindAddrIndexGet
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond96) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond96) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond96) CFA_SP SP+-7
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_20
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function bindAddrIndexGet
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond99) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond99) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond99) CFA_SP SP+-7
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100
//  978 
//  979 /*********************************************************************
//  980  * @fn      GetBindingTableEntry
//  981  *
//  982  * @brief   Get a pointer to the Nth valid binding table entry.
//  983  *
//  984  * @param   Nth valid entry being requested.
//  985  *
//  986  * @return  The Nth valid binding table entry.
//  987  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  988 BindingEntry_t *GetBindingTableEntry( uint16 Nth )
GetBindingTableEntry:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function GetBindingTableEntry
        CODE
//  989 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  990   BindingEntry_t *rtrn = NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  991 
//  992 #if defined ( REFLECTOR )
//  993   bindTableIndex_t idx, cnt = 0;
        MOV     R6,#0x0
//  994 
//  995   for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
        MOV     R7,#0x0
        SJMP    ??GetBindingTableEntry_0
??GetBindingTableEntry_1:
        INC     R7
??GetBindingTableEntry_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JNC     ??GetBindingTableEntry_2
//  996   {
//  997     if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_44:
        JZ      ??GetBindingTableEntry_1
//  998     {
//  999       if ( cnt++ == Nth )
        MOV     ?V0,R6
        MOV     A,#0x1
        ADD     A,R6
        MOV     R6,A
        MOV     R0,?V0
        MOV     A,R4
        XRL     A,R0
        ORL     A,R5
        JNZ     ??GetBindingTableEntry_1
// 1000       {
// 1001         rtrn = BindingTable+idx;
        MOV     R2,DPL
        MOV     R3,DPH
// 1002         break;
// 1003       }
// 1004     }
// 1005   }
// 1006 #else
// 1007   (void)Nth;
// 1008 #endif
// 1009 
// 1010   return rtrn;
??GetBindingTableEntry_2:
        LJMP    ?Subroutine2 & 0xFFFF
// 1011 }
          CFI EndBlock cfiBlock101
// 1012 
// 1013 #if !defined ( BINDINGTABLE_NV_SINGLES )
// 1014 /*********************************************************************
// 1015  * @fn          BindInitNV
// 1016  *
// 1017  * @brief       Initialize the Binding NV Item
// 1018  *
// 1019  * @param       none
// 1020  *
// 1021  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1022  *              exist in NV, NV_OPER_FAILED if failure.
// 1023  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1024 byte BindInitNV( void )
BindInitNV:
          CFI Block cfiBlock102 Using cfiCommon0
          CFI Function BindInitNV
        CODE
// 1025 {
        FUNCALL BindInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindInitNV, BindSetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1026   byte ret;
// 1027 
// 1028   // Initialize the device list
// 1029   ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
// 1030                   (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
// 1031 
// 1032   if ( ret != ZSUCCESS )
        JZ      ??BindInitNV_0
// 1033   {
// 1034     BindSetDefaultNV();
        ; Setup parameters for call to function BindSetDefaultNV
        LCALL   `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
// 1035   }
// 1036 
// 1037   return ( ret );
??BindInitNV_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine29_0 & 0xFFFF
// 1038 }
          CFI EndBlock cfiBlock102
// 1039 
// 1040 /*********************************************************************
// 1041  * @fn          BindSetDefaultNV
// 1042  *
// 1043  * @brief       Write the defaults to NV
// 1044  *
// 1045  * @param       none
// 1046  *
// 1047  * @return      none
// 1048  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1049 void BindSetDefaultNV( void )
BindSetDefaultNV:
          CFI Block cfiBlock103 Using cfiCommon0
          CFI Function BindSetDefaultNV
        CODE
// 1050 {
        FUNCALL BindSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1051   nvBindingHdr_t hdr;
// 1052 
// 1053   // Initialize the header
// 1054   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1055 
// 1056   // Save off the header
// 1057   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1058 }
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock103
// 1059 
// 1060 #if !defined ( DONT_UPGRADE_BIND )
// 1061 /*********************************************************************
// 1062  * @fn          BindCopyBackupToNewNV
// 1063  *
// 1064  * @brief       Creates the New NV item, copies the backup data into
// 1065  *              the New NV ID, and Deletes the duplicate NV item.
// 1066  *
// 1067  * @param       dupLen - NV item length of the old Binding table.
// 1068  * @param       newLen - NV item length of the new Binding table to be created.
// 1069  *
// 1070  * @return      ZSuccess - All the actions were successful.
// 1071  *              ZFailure - Any of the actions failed.
// 1072  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1073 static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
BindCopyBackupToNewNV:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
        CODE
// 1074 {
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindCopyBackupToNewNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 1075   uint8 status = ZSuccess;
        MOV     ?V2,#0x0
// 1076   uint16 bindLen;
// 1077 
// 1078   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R4,?V4
        MOV     R5,?V5
// 1079 
// 1080 
// 1081   if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
        MOV     A,R4
        ORL     A,R5
        JZ      ??BindCopyBackupToNewNV_0
        MOV     A,?V0
        XRL     A,R4
        JNZ     ??BindCopyBackupToNewNV_1
        MOV     A,?V1
        XRL     A,R5
??BindCopyBackupToNewNV_1:
        JZ      ??BindCopyBackupToNewNV_0
// 1082   {
// 1083     // The existing item does not match the New length
// 1084     osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
        ; Setup parameters for call to function osal_nv_delete
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
// 1085   }
// 1086 
// 1087   // Create Binding Table NV item with the NEW legth
// 1088   if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
??BindCopyBackupToNewNV_0:
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V4,A
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        XRL     A,#0xa
        JNZ     $+5
        LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1089   {
// 1090     nvBindingHdr_t hdrBackup;
// 1091 
// 1092     // Copy ONLY the valid records from the duplicate NV table into the new table
// 1093     // at the end of this process the table content will be compacted
// 1094     if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1095     {
// 1096       bindTableIndex_t i;
// 1097       uint16 validBackupRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1098       BindingEntry_t backupRec;
// 1099 
// 1100       // Read in the device list. This loop will stop when:
// 1101       // The total number of valid records has been reached either because:
// 1102       //          The new table is full of valid records OR
// 1103       //          The old table has less valid records than the size of the table
// 1104       for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
        MOV     ?V0,#0x0
        SJMP    ??BindCopyBackupToNewNV_3
// 1105       {
// 1106         if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
// 1107                           (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
// 1108                           NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
??BindCopyBackupToNewNV_4:
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
// 1109         {
// 1110           if ( backupRec.srcEP != NV_BIND_EMPTY )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      ??CrossCallReturnLabel_31
// 1111           {
// 1112             // Save the valid record into the NEW NV table.
// 1113             if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
// 1114                                 (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
// 1115                                 NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     R2,A
        MOV     B,?V4
        MOV     A,R1
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JNZ     ??BindCopyBackupToNewNV_2
// 1116             {
// 1117                status = ZFailure;
// 1118                break; // Terminate the loop as soon as a problem with NV is detected
// 1119             }
// 1120 
// 1121             validBackupRecs++;
        LCALL   ?Subroutine23 & 0xFFFF
// 1122           }
// 1123         }
// 1124         else
// 1125         {
// 1126            status = ZFailure;
// 1127            break; // Terminate the loop as soon as a problem with NV is detected
// 1128         }
// 1129       }
??CrossCallReturnLabel_31:
        INC     ?V0
??BindCopyBackupToNewNV_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JNC     ??BindCopyBackupToNewNV_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_27:
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     $+5
        LJMP    ??BindCopyBackupToNewNV_4 & 0xFFFF
// 1130 
// 1131       // Only save the header and delete the duplicate element if the previous
// 1132       // process was successful
// 1133       if ( status == ZSuccess )
// 1134       {
// 1135         // Save off the header
// 1136         if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
// 1137                             sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
??BindCopyBackupToNewNV_5:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JNZ     ??BindCopyBackupToNewNV_2
// 1138         {
// 1139           // Delete the duplicate NV Item, once the data has been stored in the NEW table
// 1140           if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV     A,R1
        JZ      ??BindCopyBackupToNewNV_6
// 1141           {
// 1142             status = ZFailure;
// 1143           }
// 1144         }
// 1145         else
// 1146         {
// 1147           status = ZFailure;
// 1148         }
// 1149       }
// 1150     }
// 1151     else
// 1152     {
// 1153       status = ZFailure;
// 1154     }
// 1155   }
// 1156   else
// 1157   {
// 1158     status = ZFailure;
??BindCopyBackupToNewNV_2:
        MOV     ?V2,#0x1
// 1159   }
// 1160 
// 1161   return ( status );
??BindCopyBackupToNewNV_6:
        MOV     R1,?V2
        MOV     A,#0x12
        SJMP    ??Subroutine37_0
// 1162 }
          CFI EndBlock cfiBlock104

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function bindAddrIndexGet
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond106) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond106) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond106) CFA_SP SP+-7
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function BindCopyBackupToNewNV
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function BindCopyBackupToNewNV
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function BindRestoreFromNV
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function BindWriteNV
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function BindInitNV
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function BindCopyBackupToNewNV
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function BindWriteNV
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117
// 1163 #endif // !DONT_UPGRADE_BIND
// 1164 
// 1165 #if !defined ( DONT_UPGRADE_BIND )
// 1166 /*********************************************************************
// 1167  * @fn          BindUpgradeTableInNV
// 1168  *
// 1169  * @brief       Verifies if the existing table in NV has different size
// 1170  *              than the table defined by parameters in the current code.
// 1171  *              If different, creates a backup table, deletes the existing
// 1172  *              table and creates the new table with the new size. After
// 1173  *              this process is done ZCD_NV_BINDING_TABLE NV item contains
// 1174  *              only valid records retrieved from the original table, up to
// 1175  *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
// 1176  *
// 1177  * @param       none
// 1178  *
// 1179  * @return      ZSuccess - the Update process was sucessful.
// 1180  *              ZFailure - otherwise.
// 1181  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock118 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
          CFI EndBlock cfiBlock118
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiBlock119 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock119
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock120

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1182 static uint8 BindUpgradeTableInNV( void )
BindUpgradeTableInNV:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
        CODE
// 1183 {
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, nwkCreateDuplicateNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindUpgradeTableInNV, BindCopyBackupToNewNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1184   uint8 status = ZSuccess;
        MOV     ?V2,#0x0
// 1185   nvBindingHdr_t hdr;
// 1186   uint16 dupLen;
// 1187   uint16 bindLen;
// 1188   uint16 newLen;
// 1189   bool duplicateReady = FALSE;
// 1190 
// 1191   // Size of the Binding table based on current paramenters in the code
// 1192   newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
// 1193 
// 1194   // Size of the Binding table NV item, this is the whole size of the item,
// 1195   // it could inculde invalid records also
// 1196   bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 1197 
// 1198   // Get the number of valid records from the Binding table
// 1199   osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V4,#0x2
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1200 
// 1201   // Identify if there is a duplicate NV item, if it is there, that means an
// 1202   // Upgrade process did not finish properly last time
// 1203   // The length function will return 0 if the Backup NV ID does not exist.
// 1204   dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x0
        MOV     R3,#0x3
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
// 1205 
// 1206   // A duplicate of the original Binding item will be done if:
// 1207   // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
// 1208   //    item in NV is different (larger/smaller) than the the length calculated
// 1209   //    from the parameters in the code. If they are the same there is no need
// 1210   //    to do the Upgrade process.
// 1211   // 2) A duplicate NV item exists (probably because the previous upgrade
// 1212   //    process was interrupted) and [the original Binding NV items exists AND
// 1213   //    has valid recods (it is important to make sure that valid records exist
// 1214   //    in the binding table because it is possible that the item was created
// 1215   //    but the data was not copied in the previous upgrade process).
// 1216   if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
// 1217        ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??BindUpgradeTableInNV_0
        MOV     A,?V0
        XRL     A,R6
        JNZ     ??BindUpgradeTableInNV_1
        MOV     A,?V1
        XRL     A,R7
??BindUpgradeTableInNV_1:
        JNZ     ??BindUpgradeTableInNV_2
        SJMP    ??BindUpgradeTableInNV_3
??BindUpgradeTableInNV_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??BindUpgradeTableInNV_4
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,R2
        ORL     A,R3
        JZ      ??BindUpgradeTableInNV_4
// 1218   {
// 1219     // Create a copy from original NV item into a duplicate NV item
// 1220     if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
// 1221                                           ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
??BindUpgradeTableInNV_2:
        ; Setup parameters for call to function nwkCreateDuplicateNV
        MOV     R4,#0x0
        MOV     R5,#0x3
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
        MOV     A,R1
        MOV     R0,A
        MOV     ?V2,R0
        JNZ     ??BindUpgradeTableInNV_3
// 1222     {
// 1223       // Delete the original NV item once the duplicate is ready
// 1224       if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
        ; Setup parameters for call to function osal_nv_delete
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV     A,R1
        JZ      ??BindUpgradeTableInNV_5
// 1225       {
// 1226         status = ZFailure;
        MOV     ?V2,#0x1
        SJMP    ??BindUpgradeTableInNV_3
// 1227       }
// 1228       else
// 1229       {
// 1230         duplicateReady = TRUE;
// 1231       }
// 1232     }
// 1233   }
// 1234   else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
// 1235             ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
// 1236   {
// 1237     // If for some reason a duplicate NV item was left in the system from a
// 1238     // previous upgrade process and:
// 1239     // 1) The original Binding NV item DOES NOT exist OR
// 1240     // 2) The original Binding NV item exist, but has no valid records.
// 1241     // it is necessary to rely in the data in the Duplicate item to create
// 1242     // the Binding table
// 1243     bindLen = dupLen;
??BindUpgradeTableInNV_4:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 1244 
// 1245     duplicateReady = TRUE;
// 1246   }
// 1247 
// 1248   if ( duplicateReady == TRUE )
// 1249   {
// 1250     // Creates the New Binding table, Copy data from backup and Delete backup NV ID
// 1251     status = BindCopyBackupToNewNV( bindLen, newLen );
??BindUpgradeTableInNV_5:
        ; Setup parameters for call to function BindCopyBackupToNewNV
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
        MOV     A,R1
        MOV     ?V2,A
// 1252   }
// 1253   return ( status );
??BindUpgradeTableInNV_3:
        MOV     R1,?V2
        LJMP    ?Subroutine5 & 0xFFFF
// 1254 }
          CFI EndBlock cfiBlock121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function BindUpgradeTableInNV
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function BindRestoreFromNV
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function bindNumBoundTo
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function bindingAddrMgsHelperFind
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond126) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond126) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond126) CFA_SP SP+-7
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function bindAddrIndexGet
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond127) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond127) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond127) CFA_SP SP+-7
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond128) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond128) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond128) CFA_SP SP+-7
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function BindUpgradeTableInNV
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function BindRestoreFromNV
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function BindInitNV
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function BindUpgradeTableInNV
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0,A
        MOV     A,R0
        MOV     B,?V0
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,?V0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        RET
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134
// 1255 #endif // !DONT_UPGRADE_BIND
// 1256 
// 1257 /*********************************************************************
// 1258  * @fn          BindRestoreFromNV
// 1259  *
// 1260  * @brief       Restore the binding table from NV
// 1261  *
// 1262  * @param       none
// 1263  *
// 1264  * @return      Number of entries restored
// 1265  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1266 uint16 BindRestoreFromNV( void )
BindRestoreFromNV:
          CFI Block cfiBlock135 Using cfiCommon0
          CFI Function BindRestoreFromNV
        CODE
// 1267 {
        FUNCALL BindRestoreFromNV, BindUpgradeTableInNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1268   nvBindingHdr_t hdr;
// 1269 
// 1270   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1271 
// 1272 #if !defined ( DONT_UPGRADE_BIND )
// 1273   if ( BindUpgradeTableInNV() == ZSuccess )
        ; Setup parameters for call to function BindUpgradeTableInNV
        LCALL   `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
        MOV     A,R1
        JZ      $+5
        LJMP    ??BindRestoreFromNV_0 & 0xFFFF
// 1274 #endif
// 1275   {
// 1276     if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_0
// 1277     {
// 1278       bindTableIndex_t x;
// 1279       uint16 validRecsCount = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1280 
// 1281       // Read in the device list
// 1282       for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
        MOV     ?V0,#0x0
        SJMP    ??BindRestoreFromNV_1
// 1283       {
// 1284         if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
// 1285                            (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
// 1286                            NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
??BindRestoreFromNV_2:
        MOV     A,?V0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     ?V2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V3,A
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_3
// 1287         {
// 1288           if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        CPL     A
        JZ      ??BindRestoreFromNV_3
// 1289           {
// 1290             validRecsCount++;
        INC     R6
        MOV     A,R6
        JNZ     ??BindRestoreFromNV_3
        INC     R7
// 1291           }
// 1292         }
// 1293       }
??BindRestoreFromNV_3:
        INC     ?V0
??BindRestoreFromNV_1:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JNC     ??BindRestoreFromNV_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine20 & 0xFFFF
// 1294     }
// 1295   }
??CrossCallReturnLabel_28:
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JC      ??BindRestoreFromNV_2
// 1296   return ( hdr.numRecs );
??BindRestoreFromNV_0:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_58:
        LJMP    ?Subroutine5 & 0xFFFF
// 1297 }
          CFI EndBlock cfiBlock135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function BindRestoreFromNV
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        MOV     R0,?V0
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function BindCopyBackupToNewNV
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_2
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function BindRestoreFromNV
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_3
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V5,A
        MOV     A,R0
        MOV     B,?V4
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V5
        MUL     AB
        ADD     A,R2
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142
// 1298 
// 1299 /*********************************************************************
// 1300  * @fn          BindWriteNV
// 1301  *
// 1302  * @brief       Save the Binding Table in NV
// 1303  *
// 1304  * @param       none
// 1305  *
// 1306  * @return      none
// 1307  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1308 void BindWriteNV( void )
BindWriteNV:
          CFI Block cfiBlock143 Using cfiCommon0
          CFI Function BindWriteNV
        CODE
// 1309 {
        FUNCALL BindWriteNV, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1310   BindingEntry_t *pBind;
// 1311   BindingEntry_t bind;
// 1312   nvBindingHdr_t hdr;
// 1313   bindTableIndex_t x;
// 1314 
// 1315   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1316 
// 1317   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,#0x0
        SJMP    ??BindWriteNV_0
// 1318   {
// 1319     pBind = &BindingTable[x];
??BindWriteNV_1:
        MOV     A,R6
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V1,A
// 1320 
// 1321     osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1322 
// 1323     // Save the record to NV
// 1324     osal_nv_write( ZCD_NV_BINDING_TABLE,
// 1325                    (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
// 1326                    NV_BIND_REC_SIZE, &bind );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R6
        MOV     R0,A
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V3,A
        MOV     A,R0
        MOV     B,?V2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V3
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1327 
// 1328     if ( pBind->srcEP != NV_BIND_EMPTY )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        CPL     A
        JZ      ??CrossCallReturnLabel_32
// 1329     {
// 1330       hdr.numRecs++;
        LCALL   ?Subroutine23 & 0xFFFF
// 1331     }
// 1332   }
??CrossCallReturnLabel_32:
        INC     R6
??BindWriteNV_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      ??BindWriteNV_1
// 1333 
// 1334   // Save off the header
// 1335   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1336 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function BindCopyBackupToNewNV
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function BindWriteNV
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??InitBindingTable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    InitBindingTable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindEmpty::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumOfEntries::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumOfEntries

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindCapacity::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindCapacity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindIsClusterIDinList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindIsClusterIDinList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveClusterIdFromList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveClusterIdFromList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddClusterIdToList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddClusterIdToList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFindExisting::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindExisting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindRemoveSrcDev::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveSrcDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumBoundTo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumBoundTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindNumReflections::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumReflections

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddressClear::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddressClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindUpdateAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindUpdateAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperFind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvert::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindingAddrMgsHelperConvertShort::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvertShort

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrMgrLocalLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrMgrLocalLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bindAddrIndexGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrIndexGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GetBindingTableEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetBindingTableEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindInitNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindSetDefaultNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindCopyBackupToNewNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindCopyBackupToNewNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindUpgradeTableInNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindUpgradeTableInNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindRestoreFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BindWriteNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindWriteNV

        END
// 1337 
// 1338 #else // !BINDINGTABLE_NV_SINGLES
// 1339 /*********************************************************************
// 1340  * @fn          BindInitNV
// 1341  *
// 1342  * @brief       Initialize the Binding NV Item
// 1343  *
// 1344  * @param       none
// 1345  *
// 1346  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1347  *              exist in NV, NV_OPER_FAILED if failure.
// 1348  */
// 1349 byte BindInitNV( void )
// 1350 {
// 1351   bindTableIndex_t x;
// 1352 
// 1353   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1354   {
// 1355     // Initialize each binding record
// 1356     osal_nv_item_init_ex( ZCD_NV_EX_BINDING_TABLE, x, NV_BIND_REC_SIZE, NULL );
// 1357   }
// 1358   return ( ZSUCCESS );
// 1359 }
// 1360 
// 1361 /*********************************************************************
// 1362  * @fn          BindSetDefaultNV
// 1363  *
// 1364  * @brief       Write the defaults to NV
// 1365  *
// 1366  * @param       none
// 1367  *
// 1368  * @return      none
// 1369  */
// 1370 void BindSetDefaultNV( void )
// 1371 {
// 1372   BindingEntry_t bind;
// 1373   bindTableIndex_t x;
// 1374 
// 1375   // Initialize a binding record
// 1376   osal_memset( &bind, 0xFF, sizeof ( BindingEntry_t ) );
// 1377 
// 1378   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1379   {
// 1380     // Over write each binding record with an "empty" record
// 1381     osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0, NV_BIND_REC_SIZE, &bind );
// 1382   }
// 1383 }
// 1384 
// 1385 /*********************************************************************
// 1386  * @fn          BindRestoreFromNV
// 1387  *
// 1388  * @brief       Restore the binding table from NV
// 1389  *
// 1390  * @param       none
// 1391  *
// 1392  * @return      Number of entries restored (non-emtpy)
// 1393  */
// 1394 uint16 BindRestoreFromNV( void )
// 1395 {
// 1396   bindTableIndex_t x;
// 1397   uint16 validRecsCount = 0;
// 1398 
// 1399   // Read in the device list
// 1400   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1401   {
// 1402     if ( osal_nv_read_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
// 1403                      (uint16)NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
// 1404     {
// 1405       // Check for non-empty record
// 1406       if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
// 1407       {
// 1408         // Count non-empty records
// 1409         validRecsCount++;
// 1410       }
// 1411     }
// 1412   }
// 1413   return ( validRecsCount );
// 1414 }
// 1415 
// 1416 /*********************************************************************
// 1417  * @fn          BindWriteNV
// 1418  *
// 1419  * @brief       Copy the Binding Table in NV
// 1420  *
// 1421  * @param       none
// 1422  *
// 1423  * @return      none
// 1424  */
// 1425 void BindWriteNV( void )
// 1426 {
// 1427   bindTableIndex_t x;
// 1428 
// 1429   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
// 1430   {
// 1431     // Save the record to NV
// 1432     osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
// 1433                      (uint16)NV_BIND_REC_SIZE, &BindingTable[x] );
// 1434   }
// 1435 }
// 1436 #endif // BINDINGTABLE_NV_SINGLES
// 1437 
// 1438 /*********************************************************************
// 1439 *********************************************************************/
// 
// 3 638 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_Z
// 
// 3 812 bytes of CODE  memory
//    15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
