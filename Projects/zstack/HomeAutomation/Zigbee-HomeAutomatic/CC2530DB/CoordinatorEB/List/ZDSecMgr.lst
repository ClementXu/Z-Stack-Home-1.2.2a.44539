###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Aug/2016  23:14:23
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDSecMgr.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\ZDSecMgr.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\ZDSecMgr.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
      4            Revision:       $Revision: 38833 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61          
     62          /******************************************************************************
     63           * CONSTANTS
     64           */
     65          // maximum number of devices managed by this Security Manager
     66          #if !defined ( ZDSECMGR_DEVICE_MAX )
     67            #define ZDSECMGR_DEVICE_MAX 3
     68          #endif
     69          
     70          // maximum number of LINK keys this device may store
     71          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     72          
     73          // total number of stored devices
     74          #if !defined ( ZDSECMGR_STORED_DEVICES )
     75            #define ZDSECMGR_STORED_DEVICES 3
     76          #endif
     77          
     78          // Total number of preconfigured trust center link key
     79          #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
     80            #define ZDSECMGR_TC_DEVICE_MAX 1
     81          #endif
     82          
     83          #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
     84            #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
     85          #endif
     86          
     87          // APSME Stub Implementations
     88          #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
     89          #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
     90          #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
     91          #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
     92          
     93          /******************************************************************************
     94           * TYPEDEFS
     95           */
     96          typedef struct
     97          {
     98            uint16            ami;
     99            uint16            keyNvId;   // index to the Link Key table in NV
    100            ZDSecMgr_Authentication_Option authenticateOption;
    101          } ZDSecMgrEntry_t;
    102          
    103          typedef struct
    104          {
    105            uint16          nwkAddr;
    106            uint8*          extAddr;
    107            uint16          parentAddr;
    108            uint8           secure;
    109            uint8           devStatus;
    110          } ZDSecMgrDevice_t;
    111          
    112          /******************************************************************************
    113           * EXTERNAL VARIABLES
    114           */
    115          extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
    116          
    117          /******************************************************************************
    118           * LOCAL VARIABLES
    119           */
    120          #if 0 // Taken out because the following functionality is only used for test
    121                // purpose. A more efficient (above) way is used. It can be put
    122                // back in if customers request for a white/black list feature.
    123          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    124          {
    125            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    126            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    127            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    128          };
    129          #endif
    130          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    132            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    137          
    138          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          APSME_TCLinkKey_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    147          
    148          /******************************************************************************
    149           * PRIVATE FUNCTIONS
    150           *
    151           *   ZDSecMgrAddrStore
    152           *   ZDSecMgrExtAddrStore
    153           *   ZDSecMgrExtAddrLookup
    154           *   ZDSecMgrEntryInit
    155           *   ZDSecMgrEntryLookup
    156           *   ZDSecMgrEntryLookupAMI
    157           *   ZDSecMgrEntryLookupExt
    158           *   ZDSecMgrEntryLookupExtGetIndex
    159           *   ZDSecMgrEntryFree
    160           *   ZDSecMgrEntryNew
    161           *   ZDSecMgrAppKeyGet
    162           *   ZDSecMgrAppKeyReq
    163           *   ZDSecMgrSendNwkKey
    164           *   ZDSecMgrDeviceRemove
    165           *   ZDSecMgrDeviceValidateRM
    166           *   ZDSecMgrDeviceValidate
    167           *   ZDSecMgrDeviceJoin
    168           *   ZDSecMgrDeviceJoinDirect
    169           *   ZDSecMgrDeviceJoinFwd
    170           *   ZDSecMgrDeviceNew
    171           *   ZDSecMgrAssocDeviceAuth
    172           *   ZDSecMgrAuthNwkKey
    173           *   APSME_TCLinkKeyInit
    174           *   APSME_IsDefaultTCLK
    175           */
    176          
    177          //-----------------------------------------------------------------------------
    178          // address management
    179          //-----------------------------------------------------------------------------
    180          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    181          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    182          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    183          
    184          //-----------------------------------------------------------------------------
    185          // Trust Center management
    186          //-----------------------------------------------------------------------------
    187          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    188          void ZDSecMgrTCDataLoad( uint8* extAddr );
    189          
    190          //-----------------------------------------------------------------------------
    191          // entry data
    192          //-----------------------------------------------------------------------------
    193          void ZDSecMgrEntryInit(uint8 state);
    194          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    195          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    196          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    197          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    198          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    199          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    200          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    201          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    202          void ZDSecMgrApsLinkKeyInit(void);
    203          #if defined ( NV_RESTORE )
    204          static void ZDSecMgrWriteNV(void);
    205          static void ZDSecMgrRestoreFromNV(void);
    206          static void ZDSecMgrUpdateNV( uint16 index );
    207          #endif
    208          
    209          //-----------------------------------------------------------------------------
    210          // key support
    211          //-----------------------------------------------------------------------------
    212          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    213                                       uint8*  initExtAddr,
    214                                       uint16  partNwkAddr,
    215                                       uint8*  partExtAddr,
    216                                       uint8** key,
    217                                       uint8*  keyType );
    218          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    219          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    220          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    221          
    222          //-----------------------------------------------------------------------------
    223          // device management
    224          //-----------------------------------------------------------------------------
    225          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    226          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    227          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    228          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    229          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    230          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    231          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    232          
    233          //-----------------------------------------------------------------------------
    234          // association management
    235          //-----------------------------------------------------------------------------
    236          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    237          
    238          //-----------------------------------------------------------------------------
    239          // authentication management
    240          //-----------------------------------------------------------------------------
    241          void ZDSecMgrAuthNwkKey( void );
    242          
    243          //-----------------------------------------------------------------------------
    244          // APSME function
    245          //-----------------------------------------------------------------------------
    246          void APSME_TCLinkKeyInit( uint8 setDefault );
    247          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    248          
    249          /******************************************************************************
    250           * @fn          ZDSecMgrAddrStore
    251           *
    252           * @brief       Store device addresses.
    253           *
    254           * @param       nwkAddr - [in] NWK address
    255           * @param       extAddr - [in] EXT address
    256           * @param       ami     - [out] Address Manager index
    257           *
    258           * @return      ZStatus_t
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    261          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    262            ZStatus_t      status;
    263            AddrMgrEntry_t entry;
    264          
    265          
    266            // add entry
    267            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7402         MOV     A,#0x2
   \   000012   F0           MOVX    @DPTR,A
    268            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC     A
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine22 & 0xFFFF
    269            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_15:
   \   00001A                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000026   7416         MOV     A,#0x16
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?Subroutine27 & 0xFFFF
    270          
    271            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_27:
   \   00002E   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000031   E9           MOV     A,R1
   \   000032   6401         XRL     A,#0x1
   \   000034   700A         JNZ     ??ZDSecMgrAddrStore_0
    272            {
    273              // return successful results
    274              *ami   = entry.index;
   \   000036   740B         MOV     A,#0xb
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine12 & 0xFFFF
    275              status = ZSuccess;
    276            }
   \                     ??CrossCallReturnLabel_64:
   \   00003E   8008         SJMP    ??CrossCallReturnLabel_8
    277            else
    278            {
    279              // return failed results
    280              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   000040   740B         MOV     A,#0xb
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine19 & 0xFFFF
    281              status = ZNwkUnknownDevice;
    282            }
    283          
    284            return status;
   \                     ??CrossCallReturnLabel_8:
   \   000048   02....       LJMP    ?Subroutine0 & 0xFFFF
    285          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006   AA..         MOV     R2,?XSP + 0
   \   000008   AB..         MOV     R3,?XSP + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   79C8         MOV     R1,#-0x38
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine46_0
   \   000004                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   F9           MOV     R1,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005                REQUIRE ??Subroutine47_0
   \   000005                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   740D         MOV     A,#0xd
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    286          
    287          /******************************************************************************
    288           * @fn          ZDSecMgrExtAddrStore
    289           *
    290           * @brief       Store EXT address.
    291           *
    292           * @param       extAddr - [in] EXT address
    293           * @param       ami     - [out] Address Manager index
    294           *
    295           * @return      ZStatus_t
    296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    298          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    299            ZStatus_t      status;
    300            AddrMgrEntry_t entry;
    301          
    302          
    303            // add entry
    304            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7402         MOV     A,#0x2
   \   000012   F0           MOVX    @DPTR,A
    305            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC     A
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine22 & 0xFFFF
    306            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_16:
   \   00001A                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000026   7416         MOV     A,#0x16
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?Subroutine27 & 0xFFFF
    307          
    308            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_28:
   \   00002E   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000031   E9           MOV     A,R1
   \   000032   6401         XRL     A,#0x1
   \   000034   700A         JNZ     ??ZDSecMgrExtAddrStore_0
    309            {
    310              // return successful results
    311              *ami   = entry.index;
   \   000036   740B         MOV     A,#0xb
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine12 & 0xFFFF
    312              status = ZSuccess;
    313            }
   \                     ??CrossCallReturnLabel_65:
   \   00003E   8008         SJMP    ??CrossCallReturnLabel_9
    314            else
    315            {
    316              // return failed results
    317              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   000040   740B         MOV     A,#0xb
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine19 & 0xFFFF
    318              status = ZNwkUnknownDevice;
    319            }
    320          
    321            return status;
   \                     ??CrossCallReturnLabel_9:
   \   000048   02....       LJMP    ?Subroutine0 & 0xFFFF
    322          }
    323          
    324          /******************************************************************************
    325           * @fn          ZDSecMgrExtAddrLookup
    326           *
    327           * @brief       Lookup index for specified EXT address.
    328           *
    329           * @param       extAddr - [in] EXT address
    330           * @param       ami     - [out] Address Manager index
    331           *
    332           * @return      ZStatus_t
    333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    335          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    336            ZStatus_t      status;
    337            AddrMgrEntry_t entry;
    338          
    339          
    340            // lookup entry
    341            entry.user = ADDRMGR_USER_SECURITY;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7402         MOV     A,#0x2
   \   000016   F0           MOVX    @DPTR,A
    342            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000017                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000017   EA           MOV     A,R2
   \   000018   FC           MOV     R4,A
   \   000019   EB           MOV     A,R3
   \   00001A   FD           MOV     R5,A
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   AA82         MOV     R2,DPL
   \   000022   AB83         MOV     R3,DPH
   \   000024   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    343          
    344            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000027                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000027   AA..         MOV     R2,?XSP + 0
   \   000029   AB..         MOV     R3,?XSP + 1
   \   00002B   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00002E   E9           MOV     A,R1
   \   00002F   6401         XRL     A,#0x1
   \   000031   700A         JNZ     ??ZDSecMgrExtAddrLookup_0
    345            {
    346              // return successful results
    347              *ami   = entry.index;
   \   000033   740B         MOV     A,#0xb
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   12....       LCALL   ?Subroutine12 & 0xFFFF
    348              status = ZSuccess;
    349            }
   \                     ??CrossCallReturnLabel_66:
   \   00003B   8008         SJMP    ??CrossCallReturnLabel_10
    350            else
    351            {
    352              // return failed results
    353              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   00003D   740B         MOV     A,#0xb
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine19 & 0xFFFF
    354              status = ZNwkUnknownDevice;
    355            }
    356          
    357            return status;
   \                     ??CrossCallReturnLabel_10:
   \   000045   02....       LJMP    ?Subroutine0 & 0xFFFF
    358          }
    359          
    360          /******************************************************************************
    361           * @fn          ZDSecMgrAddrClear
    362           *
    363           * @brief       Clear security bit from Address Manager for specific device.
    364           *
    365           * @param       extAddr - [in] EXT address
    366           *
    367           * @return      ZStatus_t
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    370          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    371            ZStatus_t status;
    372            uint16 entryAmi;
    373          
    374            // get Address Manager Index
    375            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000A                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
    376          
    377            if ( status == ZSuccess )
   \   000013   7028         JNZ     ??ZDSecMgrAddrClear_0
    378            {
    379              AddrMgrEntry_t addrEntry;
    380          
    381              // Clear SECURITY User bit from the address manager
    382              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   7402         MOV     A,#0x2
   \   00001C   F0           MOVX    @DPTR,A
    383              addrEntry.index = entryAmi;
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    384          
    385              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \                     ??CrossCallReturnLabel_113:
   \   00002E                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP101_8
   \   000033   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000036   E9           MOV     A,R1
   \   000037   6401         XRL     A,#0x1
   \   000039   6002         JZ      ??ZDSecMgrAddrClear_0
    386              {
    387                // return failure results
    388                status = ZFailure;
   \   00003B   7E01         MOV     R6,#0x1
    389              }
    390            }
    391          
    392            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   00003D   EE           MOV     A,R6
   \   00003E   F9           MOV     R1,A
   \   00003F   740F         MOV     A,#0xf
   \   000041   02....       LJMP    ??Subroutine58_0 & 0xFFFF
    393          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    394          
    395          /******************************************************************************
    396           * @fn          ZDSecMgrEntryInit
    397           *
    398           * @brief       Initialize entry sub module
    399           *
    400           * @param       state - device initialization state
    401           *
    402           * @return      none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    405          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    406            if (ZDSecMgrEntries == NULL)
   \   000004   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000007   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00000A   7032         JNZ     ??ZDSecMgrEntryInit_0
    407            {
    408              uint16 index;
    409          
    410              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C   7A0F         MOV     R2,#0xf
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000013   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000016   EA           MOV     A,R2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EB           MOV     A,R3
   \   00001A   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00001D   601F         JZ      ??ZDSecMgrEntryInit_0
    411              {
    412                return;
    413              }
    414          
    415              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   00001F   7800         MOV     R0,#0x0
   \   000021   7900         MOV     R1,#0x0
    416              {
    417                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryInit_1:
   \   000023   12....       LCALL   ?Subroutine31 & 0xFFFF
    418          
    419                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
    420              }
   \                     ??CrossCallReturnLabel_35:
   \   000026   74FE         MOV     A,#-0x2
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   04           INC     A
   \   00002B   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
   \   000034   08           INC     R0
   \   000035   E8           MOV     A,R0
   \   000036   7001         JNZ     ??ZDSecMgrEntryInit_2
   \   000038   09           INC     R1
   \                     ??ZDSecMgrEntryInit_2:
   \   000039   12....       LCALL   ?Subroutine34 & 0xFFFF
    421            }
   \                     ??CrossCallReturnLabel_72:
   \   00003C   40E5         JC      ??ZDSecMgrEntryInit_1
    422          
    423          #if defined NV_RESTORE
    424            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
    425            {
    426              ZDSecMgrRestoreFromNV();
    427            }
    428          #else
    429            (void)state;
    430          #endif
    431          }
   \                     ??ZDSecMgrEntryInit_0:
   \   00003E   02....       LJMP    ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   C3           CLR     C
   \   000001                REQUIRE ??Subroutine48_0
   \   000001                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   9403         SUBB    A,#0x3
   \   000002   E9           MOV     A,R1
   \   000003   9400         SUBB    A,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000004   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000007   49           ORL     A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E8           MOV     A,R0
   \   000001   FA           MOV     R2,A
   \   000002   E9           MOV     A,R1
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   75F005       MOV     B,#0x5
   \   000008   A4           MUL     AB
   \   000009   FA           MOV     R2,A
   \   00000A   ACF0         MOV     R4,B
   \   00000C   75F005       MOV     B,#0x5
   \   00000F   EB           MOV     A,R3
   \   000010   A4           MUL     AB
   \   000011   2C           ADD     A,R4
   \   000012   FB           MOV     R3,A
   \   000013   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000016   E0           MOVX    A,@DPTR
   \   000017   2A           ADD     A,R2
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   3B           ADDC    A,R3
   \   00001C   FB           MOV     R3,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AssocGetWithShort
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   49           ORL     A,R1
   \   000004   22           RET
    432          
    433          /******************************************************************************
    434           * @fn          ZDSecMgrEntryLookup
    435           *
    436           * @brief       Lookup entry index using specified NWK address.
    437           *
    438           * @param       nwkAddr - [in] NWK address
    439           * @param       entry   - [out] valid entry
    440           *
    441           * @return      ZStatus_t
    442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    443          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    444          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    445            uint16         index;
    446            AddrMgrEntry_t addrMgrEntry;
    447          
    448            // initialize results
    449            *entry = NULL;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   12....       LCALL   ?Subroutine10 & 0xFFFF
    450          
    451            // verify data is available
    452            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_77:
   \   000015   6046         JZ      ??ZDSecMgrEntryLookup_0
    453            {
    454              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   7402         MOV     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
    455              addrMgrEntry.nwkAddr = nwkAddr;
   \   000020   14           DEC     A
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ?Subroutine13 & 0xFFFF
    456          
    457              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \                     ??CrossCallReturnLabel_146:
   \   000027   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00002A   E9           MOV     A,R1
   \   00002B   6401         XRL     A,#0x1
   \   00002D   702E         JNZ     ??ZDSecMgrEntryLookup_0
    458              {
    459                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00002F   7800         MOV     R0,#0x0
   \   000031   7900         MOV     R1,#0x0
    460                {
    461                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \                     ??ZDSecMgrEntryLookup_1:
   \   000033   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000036   740B         MOV     A,#0xb
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6C           XRL     A,R4
   \   000044   7003         JNZ     ??ZDSecMgrEntryLookup_2
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6D           XRL     A,R5
   \                     ??ZDSecMgrEntryLookup_2:
   \   000049   7008         JNZ     ??ZDSecMgrEntryLookup_3
    462                  {
    463                    // return successful results
    464                    *entry = &ZDSecMgrEntries[index];
   \   00004B   EA           MOV     A,R2
   \   00004C   F8           MOV     R0,A
   \   00004D   EB           MOV     A,R3
   \   00004E   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    465          
    466                    // break from loop
    467                    return ZSuccess;
    468                  }
    469                }
   \                     ??CrossCallReturnLabel_67:
   \   000051   800C         SJMP    ??ZDSecMgrEntryLookup_4
   \                     ??ZDSecMgrEntryLookup_3:
   \   000053   08           INC     R0
   \   000054   E8           MOV     A,R0
   \   000055   7001         JNZ     ??ZDSecMgrEntryLookup_5
   \   000057   09           INC     R1
   \                     ??ZDSecMgrEntryLookup_5:
   \   000058   12....       LCALL   ?Subroutine34 & 0xFFFF
    470              }
    471            }
   \                     ??CrossCallReturnLabel_73:
   \   00005B   40D6         JC      ??ZDSecMgrEntryLookup_1
    472          
    473            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   00005D   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   00005F   02....       LJMP    ?Subroutine0 & 0xFFFF
    474          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine60_0
   \   000004                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000001                ; Setup parameters for call to function NLME_LeaveReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000001                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000001                ; Setup parameters for call to function APSME_SwitchKeyReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   22           RET
    475          
    476          /******************************************************************************
    477           * @fn          ZDSecMgrEntryLookupAMI
    478           *
    479           * @brief       Lookup entry using specified address index
    480           *
    481           * @param       ami   - [in] Address Manager index
    482           * @param       entry - [out] valid entry
    483           *
    484           * @return      ZStatus_t
    485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    487          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    488            uint16 index;
    489          
    490            // initialize results
    491            *entry = NULL;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine10 & 0xFFFF
    492          
    493            // verify data is available
    494            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_78:
   \   00000C   6030         JZ      ??ZDSecMgrEntryLookupAMI_0
    495            {
    496              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7800         MOV     R0,#0x0
   \   000010   7900         MOV     R1,#0x0
    497              {
    498                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000012   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000015   FE           MOV     R6,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   3F           ADDC    A,R7
   \   000019   FF           MOV     R7,A
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6A           XRL     A,R2
   \   000020   7003         JNZ     ??ZDSecMgrEntryLookupAMI_2
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000025   700D         JNZ     ??ZDSecMgrEntryLookupAMI_3
    499                {
    500                  // return successful results
    501                  *entry = &ZDSecMgrEntries[index];
   \   000027   EE           MOV     A,R6
   \   000028   F8           MOV     R0,A
   \   000029   EF           MOV     A,R7
   \   00002A   F9           MOV     R1,A
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   12....       LCALL   ??Subroutine47_0 & 0xFFFF
    502          
    503                  // break from loop
    504                  return ZSuccess;
    505                }
    506              }
   \                     ??CrossCallReturnLabel_68:
   \   000032   800C         SJMP    ??ZDSecMgrEntryLookupAMI_4
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000034   08           INC     R0
   \   000035   E8           MOV     A,R0
   \   000036   7001         JNZ     ??ZDSecMgrEntryLookupAMI_5
   \   000038   09           INC     R1
   \                     ??ZDSecMgrEntryLookupAMI_5:
   \   000039   12....       LCALL   ?Subroutine34 & 0xFFFF
    507            }
   \                     ??CrossCallReturnLabel_74:
   \   00003C   40D4         JC      ??ZDSecMgrEntryLookupAMI_1
    508          
    509            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   00003E   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   000040   02....       LJMP    ??Subroutine59_0 & 0xFFFF
    510          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E8           MOV     A,R0
   \   000001   FE           MOV     R6,A
   \   000002   E9           MOV     A,R1
   \   000003   FF           MOV     R7,A
   \   000004   EE           MOV     A,R6
   \   000005   75F005       MOV     B,#0x5
   \   000008   A4           MUL     AB
   \   000009   FE           MOV     R6,A
   \   00000A   85F0..       MOV     ?V0,B
   \   00000D   75F005       MOV     B,#0x5
   \   000010   EF           MOV     A,R7
   \   000011   A4           MUL     AB
   \   000012   25..         ADD     A,?V0
   \   000014   FF           MOV     R7,A
   \   000015   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000018   E0           MOVX    A,@DPTR
   \   000019   2E           ADD     A,R6
   \   00001A   22           RET
    511          
    512          /******************************************************************************
    513           * @fn          ZDSecMgrEntryLookupExt
    514           *
    515           * @brief       Lookup entry index using specified EXT address.
    516           *
    517           * @param       extAddr - [in] EXT address
    518           * @param       entry   - [out] valid entry
    519           *
    520           * @return      ZStatus_t
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    523          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    524            ZStatus_t status;
    525            uint16    ami;
    526          
    527            // initialize results
    528            *entry = NULL;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    529            status = ZNwkUnknownDevice;
   \   000016   75..C8       MOV     ?V0,#-0x38
    530          
    531            // lookup address index
    532            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000019                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000019   AC..         MOV     R4,?XSP + 0
   \   00001B   AD..         MOV     R5,?XSP + 1
   \   00001D   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000020   E9           MOV     A,R1
   \   000021   7013         JNZ     ??ZDSecMgrEntryLookupExt_0
    533            {
    534              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   000023                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000023   EE           MOV     A,R6
   \   000024   FC           MOV     R4,A
   \   000025   EF           MOV     A,R7
   \   000026   FD           MOV     R5,A
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   12....       LCALL   ??Subroutine52_0 & 0xFFFF
    535            }
   \                     ??CrossCallReturnLabel_93:
   \   000030   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000033   E9           MOV     A,R1
   \   000034   F5..         MOV     ?V0,A
    536          
    537            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000036   A9..         MOV     R1,?V0
   \   000038   02....       LJMP    ?Subroutine7 & 0xFFFF
    538          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine58_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    539          
    540          /******************************************************************************
    541           * @fn          ZDSecMgrEntryLookupExtGetIndex
    542           *
    543           * @brief       Lookup entry index using specified EXT address.
    544           *
    545           * @param       extAddr - [in] EXT address
    546           * @param       entryIndex - [out] valid index to the entry table
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    551          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    552            uint16 ami;
    553            uint16 index;
    554          
    555            // lookup address index
    556            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000015   E9           MOV     A,R1
   \   000016   703F         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_0
    557            {
    558              // verify data is available
    559              if ( ZDSecMgrEntries != NULL )
   \   000018   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00001B   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00001E   6037         JZ      ??ZDSecMgrEntryLookupExtGetIndex_0
    560              {
    561                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000020   7800         MOV     R0,#0x0
   \   000022   7900         MOV     R1,#0x0
    562                {
    563                  if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000024   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000027   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6C           XRL     A,R4
   \   000032   7003         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_2
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6D           XRL     A,R5
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   000037   7014         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
    564                  {
    565                    // return successful results
    566                    *entry = &ZDSecMgrEntries[index];
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   12....       LCALL   ?Subroutine22 & 0xFFFF
    567                    *entryIndex = index;
   \                     ??CrossCallReturnLabel_17:
   \   000040   740B         MOV     A,#0xb
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine33 & 0xFFFF
    568          
    569                    // break from loop
    570                    return ZSuccess;
    571                  }
    572                }
   \                     ??CrossCallReturnLabel_41:
   \   000048   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00004B   800C         SJMP    ??ZDSecMgrEntryLookupExtGetIndex_4
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   00004D   08           INC     R0
   \   00004E   E8           MOV     A,R0
   \   00004F   7001         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_5
   \   000051   09           INC     R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_5:
   \   000052   12....       LCALL   ?Subroutine34 & 0xFFFF
    573              }
    574            }
   \                     ??CrossCallReturnLabel_75:
   \   000055   40CD         JC      ??ZDSecMgrEntryLookupExtGetIndex_1
    575          
    576            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   000057   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   000059   02....       LJMP    ?Subroutine7 & 0xFFFF
    577          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   22           RET
    578          
    579          /******************************************************************************
    580           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    581           *
    582           * @brief       Lookup entry using specified address index
    583           *
    584           * @param       ami   - [in] Address Manager index
    585           * @param       entryIndex - [out] valid index to the entry table
    586           *
    587           * @return      ZStatus_t
    588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    589          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    590          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    591            uint16 index;
    592          
    593            // verify data is available
    594            if ( ZDSecMgrEntries != NULL )
   \   000005   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000008   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00000B   602D         JZ      ??ZDSecMgrEntryLookupAMIGetIndex_0
    595            {
    596              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   7900         MOV     R1,#0x0
    597              {
    598                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   000011   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000014   F5..         MOV     ?V0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   3F           ADDC    A,R7
   \   000019   85..82       MOV     DPL,?V0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6A           XRL     A,R2
   \   000020   7003         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_2
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000025   7009         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_3
    599                {
    600                  // return successful results
    601                  *entryIndex = index;
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   12....       LCALL   ??Subroutine47_0 & 0xFFFF
    602          
    603                  // break from loop
    604                  return ZSuccess;
    605                }
    606              }
   \                     ??CrossCallReturnLabel_70:
   \   00002E   800C         SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_4
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000030   08           INC     R0
   \   000031   E8           MOV     A,R0
   \   000032   7001         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_5
   \   000034   09           INC     R1
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_5:
   \   000035   12....       LCALL   ?Subroutine34 & 0xFFFF
    607            }
   \                     ??CrossCallReturnLabel_76:
   \   000038   40D7         JC      ??ZDSecMgrEntryLookupAMIGetIndex_1
    608          
    609            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   00003A   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   00003C   02....       LJMP    ??Subroutine59_0 & 0xFFFF
    610          }
    611          
    612          /******************************************************************************
    613           * @fn          ZDSecMgrEntryFree
    614           *
    615           * @brief       Free entry.
    616           *
    617           * @param       entry - [in] valid entry
    618           *
    619           * @return      ZStatus_t
    620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    622          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    623            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
    624          
    625          #if defined ( NV_RESTORE )
    626            ZStatus_t status;
    627            uint16 entryIndex;
    628          
    629            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
    630          #endif
    631          
    632            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A18         MOV     R2,#0x18
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
    633          
    634            if (pApsLinkKey != NULL)
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V3
   \   000017   6041         JZ      ??ZDSecMgrEntryFree_0
    635            {
    636              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   000019                ; Setup parameters for call to function osal_memset
   \   000019   7C18         MOV     R4,#0x18
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    637          
    638              // Clear the APS Link key in NV
    639              osal_nv_write( entry->keyNvId, 0,
    640                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   000022   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000025                ; Setup parameters for call to function osal_nv_write
   \   000025   78..         MOV     R0,#?V2
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..18       MOV     ?V4,#0x18
   \   00002D   75..00       MOV     ?V5,#0x0
   \   000030   78..         MOV     R0,#?V4
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000041   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000044   7404         MOV     A,#0x4
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
    641          
    642              // set entry to invalid Key
    643              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   000049   85..82       MOV     DPL,?V0
   \   00004C   85..83       MOV     DPH,?V1
   \   00004F   E4           CLR     A
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   F0           MOVX    @DPTR,A
    644          
    645              osal_mem_free(pApsLinkKey);
   \   000053                ; Setup parameters for call to function osal_mem_free
   \   000053   AA..         MOV     R2,?V2
   \   000055   AB..         MOV     R3,?V3
   \   000057   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    646            }
    647          
    648            // marking the entry as INVALID_NODE_ADDR
    649            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   74FE         MOV     A,#-0x2
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   04           INC     A
   \   000063   12....       LCALL   ?Subroutine21 & 0xFFFF
    650          
    651            // set to default value
    652            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \                     ??CrossCallReturnLabel_11:
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
    653          
    654          #if defined ( NV_RESTORE )
    655            if ( status == ZSuccess )
    656            {
    657              ZDSecMgrUpdateNV(entryIndex);
    658            }
    659          #endif
    660          }
   \   00006C                REQUIRE ?Subroutine2
   \   00006C                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F9           MOV     R1,A
   \   000007   88..         MOV     ?V0,R0
   \   000009   89..         MOV     ?V1,R1
   \   00000B   22           RET
    661          
    662          /******************************************************************************
    663           * @fn          ZDSecMgrEntryNew
    664           *
    665           * @brief       Get a new entry.
    666           *
    667           * @param       entry - [out] valid entry
    668           *
    669           * @return      ZStatus_t
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    672          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    673            uint16 index;
    674          
    675            // initialize results
    676            *entry = NULL;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ?Subroutine10 & 0xFFFF
    677          
    678            // verify data is available
    679            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_79:
   \   00000C   605F         JZ      ??ZDSecMgrEntryNew_0
    680            {
    681              // find available entry
    682              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7D00         MOV     R5,#0x0
    683              {
    684                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \                     ??ZDSecMgrEntryNew_1:
   \   000012   EC           MOV     A,R4
   \   000013   F8           MOV     R0,A
   \   000014   ED           MOV     A,R5
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   75F005       MOV     B,#0x5
   \   00001A   A4           MUL     AB
   \   00001B   F8           MOV     R0,A
   \   00001C   AEF0         MOV     R6,B
   \   00001E   75F005       MOV     B,#0x5
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2E           ADD     A,R6
   \   000024   F9           MOV     R1,A
   \   000025   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX    A,@DPTR
   \   000029   28           ADD     A,R0
   \   00002A   FE           MOV     R6,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   39           ADDC    A,R1
   \   00002E   FF           MOV     R7,A
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   64FE         XRL     A,#0xfe
   \   000036   7003         JNZ     ??ZDSecMgrEntryNew_2
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F4           CPL     A
   \                     ??ZDSecMgrEntryNew_2:
   \   00003B   7023         JNZ     ??ZDSecMgrEntryNew_3
    685                {
    686                  // return successful result
    687                  *entry = &ZDSecMgrEntries[index];
   \   00003D   EE           MOV     A,R6
   \   00003E   FC           MOV     R4,A
   \   00003F   EF           MOV     A,R7
   \   000040   FD           MOV     R5,A
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   EC           MOV     A,R4
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   ED           MOV     A,R5
   \   000049   F0           MOVX    @DPTR,A
    688          
    689                  // Set the authentication option to default
    690                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   00004A   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   28           ADD     A,R0
   \   00004F   FA           MOV     R2,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   39           ADDC    A,R1
   \   000053   8A82         MOV     DPL,R2
   \   000055   F583         MOV     DPH,A
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
    691          
    692                  // break from loop
    693                  return ZSuccess;
   \   00005D   F9           MOV     R1,A
   \   00005E   800F         SJMP    ??ZDSecMgrEntryNew_4
    694                }
    695              }
   \                     ??ZDSecMgrEntryNew_3:
   \   000060   0C           INC     R4
   \   000061   EC           MOV     A,R4
   \   000062   7001         JNZ     ??ZDSecMgrEntryNew_5
   \   000064   0D           INC     R5
   \                     ??ZDSecMgrEntryNew_5:
   \   000065   C3           CLR     C
   \   000066   9403         SUBB    A,#0x3
   \   000068   ED           MOV     A,R5
   \   000069   9400         SUBB    A,#0x0
   \   00006B   40A5         JC      ??ZDSecMgrEntryNew_1
    696            }
    697          
    698            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   00006D   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   00006F   02....       LJMP    ??Subroutine59_0 & 0xFFFF
    699          }
    700          
    701          /******************************************************************************
    702           * @fn          ZDSecMgrAppKeyGet
    703           *
    704           * @brief       get an APP key - option APP(MASTER or LINK) key
    705           *
    706           * @param       initNwkAddr - [in] NWK address of initiator device
    707           * @param       initExtAddr - [in] EXT address of initiator device
    708           * @param       partNwkAddr - [in] NWK address of partner device
    709           * @param       partExtAddr - [in] EXT address of partner device
    710           * @param       key         - [out] APP(MASTER or LINK) key
    711           * @param       keyType     - [out] APP(MASTER or LINK) key type
    712           *
    713           * @return      ZStatus_t
    714           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    715          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    716                                                           // to KEY_TYPE_APP_LINK since
    717                                                           // only specific requirement
    718                                                           // right now comes from SE profile
    719          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
    721                                       uint8*  initExtAddr,
    722                                       uint16  partNwkAddr,
    723                                       uint8*  partExtAddr,
    724                                       uint8** key,
    725                                       uint8*  keyType )
    726          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    727            // Intentionally unreferenced parameters
    728            (void)initNwkAddr;
    729            (void)initExtAddr;
    730            (void)partNwkAddr;
    731            (void)partExtAddr;
    732          
    733            //---------------------------------------------------------------------------
    734            // note:
    735            // should use a robust mechanism to generate keys, for example
    736            // combine EXT addresses and call a hash function
    737            //---------------------------------------------------------------------------
    738            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000004                ; Setup parameters for call to function SSP_GetTrueRand
   \   000004   7404         MOV     A,#0x4
   \   000006   12....       LCALL   ?XSTACK_DISP0_8
   \   000009   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00000C   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00000F   7910         MOV     R1,#0x10
   \   000011   12....       LCALL   `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
    739          
    740            *keyType = ZDSecMgrAppKeyType;
   \   000014   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   7406         MOV     A,#0x6
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000022   D0E0         POP     A
   \   000024                REQUIRE ?Subroutine9
   \   000024                ; // Fall through to label ?Subroutine9
    741          
    742            return ZSuccess;
    743          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   7900         MOV     R1,#0x0
   \   000003   02....       LJMP    ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    744          
    745          /******************************************************************************
    746           * @fn          ZDSecMgrAppKeyReq
    747           *
    748           * @brief       Process request for APP key between two devices.
    749           *
    750           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    751           *
    752           * @return      none
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
    755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV     A,#-0x27
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    756            APSME_TransportKeyReq_t req;
    757            uint8                   initExtAddr[Z_EXTADDR_LEN];
    758            uint16                  partNwkAddr;
    759            uint8                   key[SEC_KEY_LEN];
    760          
    761          
    762            // validate initiator and partner
    763            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
    764                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E   EE           MOV     A,R6
   \   00000F   2405         ADD     A,#0x5
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F5..         MOV     ?V1,A
   \   000017                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000017   AC..         MOV     R4,?XSP + 0
   \   000019   AD..         MOV     R5,?XSP + 1
   \   00001B   AA..         MOV     R2,?V0
   \   00001D   FB           MOV     R3,A
   \   00001E   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000021   E9           MOV     A,R1
   \   000022   6401         XRL     A,#0x1
   \   000024   6003         JZ      $+5
   \   000026   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000029   EE           MOV     A,R6
   \   00002A   2402         ADD     A,#0x2
   \   00002C   E4           CLR     A
   \   00002D   3F           ADDC    A,R7
   \   00002E   0E           INC     R6
   \   00002F   0E           INC     R6
   \   000030   FF           MOV     R7,A
   \   000031                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000031   740F         MOV     A,#0xf
   \   000033   12....       LCALL   ?XSTACK_DISP102_8
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00003D   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000040   E9           MOV     A,R1
   \   000041   6401         XRL     A,#0x1
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    765            {
    766              // point the key to some memory
    767              req.key = key;
   \   000048   7417         MOV     A,#0x17
   \   00004A   12....       LCALL   ?XSTACK_DISP100_8
   \   00004D   7406         MOV     A,#0x6
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    768          
    769              // get an APP key - option APP (MASTER or LINK) key
    770              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
    771                                      initExtAddr,
    772                                      partNwkAddr,
    773                                      ind->partExtAddr,
    774                                      &req.key,
    775                                      &req.keyType ) == ZSuccess )
   \                     ??CrossCallReturnLabel_114:
   \   000055                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   8582..       MOV     ?V2,DPL
   \   00005D   8583..       MOV     ?V3,DPH
   \   000060   78..         MOV     R0,#?V2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7408         MOV     A,#0x8
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   8582..       MOV     ?V2,DPL
   \   00006D   8583..       MOV     ?V3,DPH
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7406         MOV     A,#0x6
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000082   7417         MOV     A,#0x17
   \   000084   12....       LCALL   ?XSTACK_DISP102_8
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00008E   12....       LCALL   `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000091   7408         MOV     A,#0x8
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   E9           MOV     A,R1
   \   000097   7078         JNZ     ??ZDSecMgrAppKeyReq_0
    776              {
    777                // always secure
    778                req.nwkSecure = TRUE;
   \   000099   740C         MOV     A,#0xc
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   F0           MOVX    @DPTR,A
    779                req.apsSecure = TRUE;
   \   0000A1   740B         MOV     A,#0xb
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   F0           MOVX    @DPTR,A
    780                req.tunnel    = NULL;
   \   0000A9   740D         MOV     A,#0xd
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   12....       LCALL   ?Subroutine21 & 0xFFFF
    781          
    782                // send key to initiator device
    783                req.dstAddr   = ind->srcAddr;
   \                     ??CrossCallReturnLabel_12:
   \   0000B4   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    784                req.extAddr   = ind->partExtAddr;
   \                     ??CrossCallReturnLabel_115:
   \   0000BD   7408         MOV     A,#0x8
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E5..         MOV     A,?V0
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E5..         MOV     A,?V1
   \   0000C8   F0           MOVX    @DPTR,A
    785                req.initiator = TRUE;
   \   0000C9   740A         MOV     A,#0xa
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   F0           MOVX    @DPTR,A
    786                APSME_TransportKeyReq( &req );
   \   0000D1                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000D1   04           INC     A
   \   0000D2   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D5   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    787          
    788                // send key to partner device
    789                req.dstAddr   = partNwkAddr;
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    790                req.extAddr   = initExtAddr;
   \                     ??CrossCallReturnLabel_116:
   \   0000E7   740F         MOV     A,#0xf
   \   0000E9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000EC   7408         MOV     A,#0x8
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    791                req.initiator = FALSE;
   \                     ??CrossCallReturnLabel_117:
   \   0000F4   740A         MOV     A,#0xa
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   E4           CLR     A
   \   0000FA   F0           MOVX    @DPTR,A
    792          
    793                APSME_TransportKeyReq( &req );
   \   0000FB                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   12....       LCALL   ?XSTACK_DISP101_8
   \   000100   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    794          
    795                // clear copy of key in RAM
    796                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   000103                ; Setup parameters for call to function osal_memset
   \   000103   7C10         MOV     R4,#0x10
   \   000105   7D00         MOV     R5,#0x0
   \   000107   7900         MOV     R1,#0x0
   \   000109   7417         MOV     A,#0x17
   \   00010B   12....       LCALL   ?XSTACK_DISP101_8
   \   00010E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    797          
    798              }
    799            }
    800          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   000111   7427         MOV     A,#0x27
   \   000113   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine56_0
   \   000003                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    801          
    802          /******************************************************************************
    803           * @fn          ZDSecMgrSendNwkKey
    804           *
    805           * @brief       Send NWK key to device joining network.
    806           *
    807           * @param       device - [in] ZDSecMgrDevice_t, device info
    808           *
    809           * @return      ZStatus_t
    810           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    811          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
    812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    813            ZStatus_t status;
    814            APSME_TransportKeyReq_t req;
    815            APSDE_FrameTunnel_t tunnel;
    816            nwkKeyDesc tmpKey;
    817          
    818            req.dstAddr   = device->nwkAddr;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000015   7404         MOV     A,#0x4
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    819            req.extAddr   = device->extAddr;
   \                     ??CrossCallReturnLabel_118:
   \   00001D   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000020   8882         MOV     DPL,R0
   \   000022   F583         MOV     DPH,A
   \   000024   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000027   740A         MOV     A,#0xa
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    820          
    821            req.keyType   = KEY_TYPE_NWK;
   \                     ??CrossCallReturnLabel_119:
   \   00002F   7406         MOV     A,#0x6
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   7401         MOV     A,#0x1
   \   000036   F0           MOVX    @DPTR,A
    822          
    823            // get the Active Key into a local variable
    824            if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
    825                                     ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   000037                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   000037   75..3A       MOV     ?V2,#0x3a
   \   00003A   75..00       MOV     ?V3,#0x0
   \   00003D   78..         MOV     R0,#?V2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7413         MOV     A,#0x13
   \   000044   12....       LCALL   ?XSTACK_DISP100_8
   \   000047   88..         MOV     ?V2,R0
   \   000049   89..         MOV     ?V3,R1
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7C11         MOV     R4,#0x11
   \   000052   7D00         MOV     R5,#0x0
   \   000054   7A00         MOV     R2,#0x0
   \   000056   7B00         MOV     R3,#0x0
   \   000058   12....       LCALL   `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   E9           MOV     A,R1
   \   000061   600D         JZ      ??ZDSecMgrSendNwkKey_0
    826            {
    827              // set key data to all 0s if NV read fails
    828              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   000063                ; Setup parameters for call to function osal_memset
   \   000063   7C11         MOV     R4,#0x11
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7900         MOV     R1,#0x0
   \   000069   EC           MOV     A,R4
   \   00006A   12....       LCALL   ?XSTACK_DISP101_8
   \   00006D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    829            }
    830          
    831            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    832            {
    833              // set values
    834              req.keySeqNum = tmpKey.keySeqNum;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000070   7411         MOV     A,#0x11
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   C0E0         PUSH    A
   \   000078   7407         MOV     A,#0x7
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
    835              req.key       = tmpKey.key;
   \   000080   7412         MOV     A,#0x12
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   A882         MOV     R0,DPL
   \   000087   A983         MOV     R1,DPH
   \   000089   7408         MOV     A,#0x8
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    836          
    837              //devtag.pro.security.todo - make sure that if there is no link key the NWK
    838              //key isn't used to secure the frame at the APS layer -- since the receiving
    839              //device may not have a NWK key yet
    840              req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_120:
   \   000091   740D         MOV     A,#0xd
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   7401         MOV     A,#0x1
   \   000098   F0           MOVX    @DPTR,A
    841          
    842              // check if using secure hop to parent
    843              if ( device->parentAddr == NLME_GetShortAddr() )
   \   000099                ; Setup parameters for call to function NLME_GetShortAddr
   \   000099   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00009C   EE           MOV     A,R6
   \   00009D   2404         ADD     A,#0x4
   \   00009F   F8           MOV     R0,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F9           MOV     R1,A
   \   0000A3   8882         MOV     DPL,R0
   \   0000A5   8983         MOV     DPH,R1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   6A           XRL     A,R2
   \   0000A9   7003         JNZ     ??ZDSecMgrSendNwkKey_1
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6B           XRL     A,R3
   \                     ??ZDSecMgrSendNwkKey_1:
   \   0000AE   7011         JNZ     ??ZDSecMgrSendNwkKey_2
    844              {
    845                req.nwkSecure = FALSE;
   \   0000B0   740E         MOV     A,#0xe
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E4           CLR     A
   \   0000B6   F0           MOVX    @DPTR,A
    846                req.tunnel    = NULL;
   \   0000B7   740F         MOV     A,#0xf
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E4           CLR     A
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   802C         SJMP    ??ZDSecMgrSendNwkKey_3
    847              }
    848              else
    849              {
    850                req.nwkSecure   = TRUE;
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000C1   740E         MOV     A,#0xe
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   F0           MOVX    @DPTR,A
    851                req.tunnel      = &tunnel;
   \   0000C9   740F         MOV     A,#0xf
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E5..         MOV     A,?XSP + 0
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E5..         MOV     A,?XSP + 1
   \   0000D4   12....       LCALL   ?Subroutine18 & 0xFFFF
    852                req.tunnel->tna = device->parentAddr;
    853                req.tunnel->dea = device->extAddr;
    854              }
    855            }
   \                     ??CrossCallReturnLabel_6:
   \   0000D7   85..82       MOV     DPL,?XSP + 0
   \   0000DA   85..83       MOV     DPH,?XSP + 1
   \   0000DD   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000E0   F8           MOV     R0,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F9           MOV     R1,A
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E8           MOV     A,R0
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E9           MOV     A,R1
   \                     ??ZDSecMgrSendNwkKey_3:
   \   0000ED   F0           MOVX    @DPTR,A
    856            else
    857            {
    858              // default values
    859              //devtag.0604.verify
    860              req.nwkSecure = TRUE;
    861              req.apsSecure = FALSE;
    862              req.tunnel    = NULL;
    863          
    864              if ( device->parentAddr != NLME_GetShortAddr() )
    865              {
    866                req.dstAddr = device->parentAddr;
    867              }
    868          
    869              // send the real key
    870              if ( zgPreConfigKeys == FALSE )
    871              {
    872                req.keySeqNum = tmpKey.keySeqNum;
    873                req.key       = tmpKey.key;
    874          
    875                // check if using secure hop to to parent
    876                if ( device->parentAddr == NLME_GetShortAddr() )
    877                {
    878                  req.nwkSecure = FALSE;
    879                }
    880              }
    881              else
    882              {
    883                // this is to send the all zero key when the NWK key has been preconfigured
    884                req.key       = NULL;
    885                req.keySeqNum = 0;
    886              }
    887            }
    888          
    889            status = APSME_TransportKeyReq( &req );
   \   0000EE                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000EE   7404         MOV     A,#0x4
   \   0000F0   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F3   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000F6   E9           MOV     A,R1
   \   0000F7   FE           MOV     R6,A
    890          
    891            // clear copy of key in RAM before return
    892            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   0000F8                ; Setup parameters for call to function osal_memset
   \   0000F8   7C11         MOV     R4,#0x11
   \   0000FA   7D00         MOV     R5,#0x0
   \   0000FC   7900         MOV     R1,#0x0
   \   0000FE   EC           MOV     A,R4
   \   0000FF   12....       LCALL   ?XSTACK_DISP101_8
   \   000102   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    893          
    894            return status;
   \   000105   EE           MOV     A,R6
   \   000106   F9           MOV     R1,A
   \   000107   7422         MOV     A,#0x22
   \   000109   02....       LJMP    ?Subroutine3 & 0xFFFF
    895          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   85..82       MOV     DPL,?V0
   \   000008   85..83       MOV     DPH,?V1
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET
    896          
    897          /******************************************************************************
    898           * @fn          ZDSecMgrDeviceRemoveByExtAddr
    899           *
    900           * @brief       Remove device entry by its ext address.
    901           *
    902           * @param       pAddr - pointer to the extended address
    903           *
    904           * @return      ZStatus_t
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
    907          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    908            ZDSecMgrEntry_t *pEntry;
    909            uint8           retValue;
    910          
    911            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000A                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
    912          
    913            if( retValue == ZSuccess )
   \   000013   700C         JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
    914            {
    915              // remove device from entry data
    916              ZDSecMgrEntryFree( pEntry );
   \   000015                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   12....       LCALL   ??Subroutine52_0 & 0xFFFF
    917            }
   \                     ??CrossCallReturnLabel_98:
   \   00001E   12....       LCALL   `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
    918          
    919            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   000021   EE           MOV     A,R6
   \   000022   F9           MOV     R1,A
   \   000023                REQUIRE ?Subroutine7
   \   000023                ; // Fall through to label ?Subroutine7
    920          }
    921          
    922          /******************************************************************************
    923           * @fn          ZDSecMgrDeviceRemove
    924           *
    925           * @brief       Remove device from network.
    926           *
    927           * @param       device - [in] ZDSecMgrDevice_t, device info
    928           *
    929           * @return      none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
    932          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    933            APSME_RemoveDeviceReq_t remDevReq;
    934            NLME_LeaveReq_t         leaveReq;
    935            associated_devices_t*   assoc;
    936          
    937            // check if parent, remove the device
    938            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00001E   EE           MOV     A,R6
   \   00001F   2402         ADD     A,#0x2
   \   000021   F8           MOV     R0,A
   \   000022   E4           CLR     A
   \   000023   3F           ADDC    A,R7
   \   000024   F9           MOV     R1,A
   \   000025   E5..         MOV     A,?V0
   \   000027   6A           XRL     A,R2
   \   000028   7003         JNZ     ??ZDSecMgrDeviceRemove_0
   \   00002A   E5..         MOV     A,?V1
   \   00002C   6B           XRL     A,R3
   \                     ??ZDSecMgrDeviceRemove_0:
   \   00002D   6003         JZ      $+5
   \   00002F   02....       LJMP    ??ZDSecMgrDeviceRemove_1 & 0xFFFF
    939            {
    940              // this is the parent of the device
    941              leaveReq.extAddr        = device->extAddr;
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000039   12....       LCALL   ?Subroutine16 & 0xFFFF
    942              leaveReq.removeChildren = FALSE;
   \                     ??CrossCallReturnLabel_156:
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
    943              leaveReq.rejoin         = FALSE;
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    944          
    945              // find child association
    946              assoc = AssocGetWithExt( device->extAddr );
   \   000048                ; Setup parameters for call to function AssocGetWithExt
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00004F   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000052   8A..         MOV     ?V0,R2
   \   000054   8B..         MOV     ?V1,R3
   \   000056   A8..         MOV     R0,?V0
   \   000058   A9..         MOV     R1,?V1
    947          
    948              if ( ( assoc != NULL                            ) &&
    949                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
    950                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   00005A   E8           MOV     A,R0
   \   00005B   49           ORL     A,R1
   \   00005C   6027         JZ      ??ZDSecMgrDeviceRemove_2
   \   00005E   8882         MOV     DPL,R0
   \   000060   8983         MOV     DPH,R1
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   601C         JZ      ??ZDSecMgrDeviceRemove_2
   \   000069   C3           CLR     C
   \   00006A   9405         SUBB    A,#0x5
   \   00006C   5017         JNC     ??ZDSecMgrDeviceRemove_2
    951              {
    952                // check if associated device is authenticated
    953                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   A2E3         MOV     C,0xE0 /* A   */.3
   \   00007A   7404         MOV     A,#0x4
   \   00007C   402B         JC      ??ZDSecMgrDeviceRemove_3
    954                {
    955                  leaveReq.silent = FALSE;
    956                }
    957                else
    958                {
    959                  leaveReq.silent = TRUE;
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   7401         MOV     A,#0x1
   \   000083   8028         SJMP    ??ZDSecMgrDeviceRemove_4
   \   000085                ; Setup parameters for call to function NLME_LeaveReq
    960                }
    961          
    962                NLME_LeaveReq( &leaveReq );
    963              }
    964              else if ( device->nwkAddr == NLME_GetShortAddr() )
   \                     ??ZDSecMgrDeviceRemove_2:
   \   000085                ; Setup parameters for call to function NLME_GetShortAddr
   \   000085   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000088   8A..         MOV     ?V0,R2
   \   00008A   8B..         MOV     ?V1,R3
   \   00008C   A8..         MOV     R0,?V0
   \   00008E   A9..         MOV     R1,?V1
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   E0           MOVX    A,@DPTR
   \   000095   68           XRL     A,R0
   \   000096   7003         JNZ     ??ZDSecMgrDeviceRemove_5
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   69           XRL     A,R1
   \                     ??ZDSecMgrDeviceRemove_5:
   \   00009B   7053         JNZ     ??ZDSecMgrDeviceRemove_6
    965              {
    966                // this is when ZC wants that ZR removes itself from the network
    967                leaveReq.extAddr = NULL;
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   E4           CLR     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   F0           MOVX    @DPTR,A
    968                leaveReq.silent = FALSE;
   \   0000A7   7404         MOV     A,#0x4
   \                     ??ZDSecMgrDeviceRemove_3:
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E4           CLR     A
    969          
    970                NLME_LeaveReq( &leaveReq );
    971              }
    972            }
   \                     ??ZDSecMgrDeviceRemove_4:
   \   0000AD   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000B0   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000B3   803B         SJMP    ??ZDSecMgrDeviceRemove_6
    973            else
    974            {
    975              // this is not the parent of the device
    976              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   EA           MOV     A,R2
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   EB           MOV     A,R3
   \   0000BE   12....       LCALL   ?Subroutine18 & 0xFFFF
    977              remDevReq.childExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_7:
   \   0000C1   7407         MOV     A,#0x7
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    978          
    979          #if defined ( APP_TP2_TEST_MODE )
    980              if ( guTxApsSecON == TRUE )
    981              {
    982                remDevReq.apsSecure = TRUE;
    983              }
    984              else
    985              {
    986                remDevReq.apsSecure = FALSE;
    987              }
    988          
    989              APSME_RemoveDeviceReq( &remDevReq );
    990          
    991          #else
    992              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    993              {
    994                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
    995                // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
    996                // with legacy Coordinator devices which can only handle one or the other.
    997                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   \                     ??CrossCallReturnLabel_121:
   \   0000C9   90....       MOV     DPTR,#zgApsLinkKeyType
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6401         XRL     A,#0x1
   \   0000CF   700F         JNZ     ??ZDSecMgrDeviceRemove_7
    998                {
    999                  remDevReq.apsSecure = FALSE;
   \   0000D1   7409         MOV     A,#0x9
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E4           CLR     A
   \   0000D7   F0           MOVX    @DPTR,A
   1000          
   1001                  APSME_RemoveDeviceReq( &remDevReq );
   \   0000D8                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   0000D8   7405         MOV     A,#0x5
   \   0000DA   12....       LCALL   ?XSTACK_DISP101_8
   \   0000DD   12....       LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1002                }
   1003          
   1004                remDevReq.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceRemove_7:
   \   0000E0   7409         MOV     A,#0x9
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   7401         MOV     A,#0x1
   \   0000E7   F0           MOVX    @DPTR,A
   1005          
   1006                APSME_RemoveDeviceReq( &remDevReq );
   \   0000E8                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   0000E8   7405         MOV     A,#0x5
   \   0000EA   12....       LCALL   ?XSTACK_DISP101_8
   \   0000ED   12....       LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1007              }
   1008              else
   1009              {
   1010                remDevReq.apsSecure = FALSE;
   1011          
   1012                APSME_RemoveDeviceReq( &remDevReq );
   1013              }
   1014          #endif
   1015            }
   1016          }
   \                     ??ZDSecMgrDeviceRemove_6:
   \   0000F0   740A         MOV     A,#0xa
   \   0000F2   02....       LJMP    ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine61_0
   \   000006                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7402         MOV     A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine65_0
   \   000003                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1017          
   1018          /******************************************************************************
   1019           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1020           *
   1021           * @brief       Decide whether device is allowed.
   1022           *
   1023           * @param       device - [in] ZDSecMgrDevice_t, device info
   1024           *
   1025           * @return      ZStatus_t
   1026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1028          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1029            ZStatus_t status;
   1030          
   1031            status = ZSuccess;
   \   000004   7900         MOV     R1,#0x0
   1032          
   1033            (void)device;  // Intentionally unreferenced parameter
   1034          
   1035            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1036            // the trust center to reject any newly joining devices by sending
   1037            // Remove-device to the parents.
   1038            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV     DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   7002         JNZ     ??ZDSecMgrDeviceValidateRM_0
   1039            {
   1040              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV     R1,#-0x38
   1041            }
   1042          
   1043          
   1044          
   1045          #if 0  // Taken out because the following functionality is only used for test
   1046                 // purpose. A more efficient (above) way is used. It can be put
   1047                 // back in if customers request for a white/black list feature.
   1048                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1049          
   1050            // The following code processes the device black list (stored device list)
   1051            // If the joining device is not part of the forbidden device list
   1052            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1053            // will send Remove-device and ban the device from joining.
   1054          
   1055            uint8     index;
   1056            uint8*    restricted;
   1057          
   1058            // Look through the stored device list - used for restricted devices
   1059            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1060            {
   1061              restricted = ZDSecMgrStoredDeviceList[index];
   1062          
   1063              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1064              {
   1065                // return as unknown device in regards to validation
   1066                status = ZNwkUnknownDevice;
   1067          
   1068                // break from loop
   1069                index = ZDSECMGR_STORED_DEVICES;
   1070              }
   1071            }
   1072          
   1073          #endif
   1074          
   1075            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1076          }
   1077          
   1078          /******************************************************************************
   1079           * @fn          ZDSecMgrDeviceValidate
   1080           *
   1081           * @brief       Decide whether device is allowed.
   1082           *
   1083           * @param       device - [in] ZDSecMgrDevice_t, device info
   1084           *
   1085           * @return      ZStatus_t
   1086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1087          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1088          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1089            ZStatus_t status;
   1090          
   1091            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7007         JNZ     ??ZDSecMgrDeviceValidate_0
   1092            {
   1093              status = ZDSecMgrDeviceValidateRM( device );
   \   00000C                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   00000C   12....       LCALL   `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   00000F   E9           MOV     A,R1
   \   000010   F9           MOV     R1,A
   \   000011   8002         SJMP    ??ZDSecMgrDeviceValidate_1
   1094            }
   1095            else
   1096            {
   1097              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   000013   79C8         MOV     R1,#-0x38
   1098            }
   1099          
   1100            return status;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000015   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1101          }
   1102          
   1103          /******************************************************************************
   1104           * @fn          ZDSecMgrDeviceJoin
   1105           *
   1106           * @brief       Try to join this device.
   1107           *
   1108           * @param       device - [in] ZDSecMgrDevice_t, device info
   1109           *
   1110           * @return      ZStatus_t
   1111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1112          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   1113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1114            ZStatus_t status = ZSuccess;
   \   00000E   75..00       MOV     ?V4,#0x0
   1115            uint16    ami;
   1116          
   1117            // attempt to validate device that joined/rejoined without security
   1118            if ( device->secure == FALSE )
   \   000011   EE           MOV     A,R6
   \   000012   2402         ADD     A,#0x2
   \   000014   F5..         MOV     ?V0,A
   \   000016   E4           CLR     A
   \   000017   3F           ADDC    A,R7
   \   000018   F5..         MOV     ?V1,A
   \   00001A   EE           MOV     A,R6
   \   00001B   2406         ADD     A,#0x6
   \   00001D   F8           MOV     R0,A
   \   00001E   E4           CLR     A
   \   00001F   3F           ADDC    A,R7
   \   000020   F9           MOV     R1,A
   \   000021   88..         MOV     ?V2,R0
   \   000023   89..         MOV     ?V3,R1
   \   000025   8882         MOV     DPL,R0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   7008         JNZ     ??ZDSecMgrDeviceJoin_0
   1119            {
   1120              status = ZDSecMgrDeviceValidate( device );
   \   00002C                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00002C   12....       LCALL   `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   00002F   E9           MOV     A,R1
   \   000030   F5..         MOV     ?V4,A
   1121            }
   1122          
   1123            if ( status == ZSuccess )
   \   000032   7058         JNZ     ??ZDSecMgrDeviceJoin_1
   1124            {
   1125              // Add the device to the address manager
   1126              ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000034                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000034   A8..         MOV     R0,?XSP + 0
   \   000036   A9..         MOV     R1,?XSP + 1
   \   000038   88..         MOV     ?V6,R0
   \   00003A   89..         MOV     ?V7,R1
   \   00003C   78..         MOV     R0,#?V6
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   85..82       MOV     DPL,?V0
   \   000044   85..83       MOV     DPH,?V1
   \   000047   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000051   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   1127          
   1128              // Only send the key to devices that have not been authenticated
   1129              if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
   1130                   ( device->secure == FALSE ) )
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   A2E2         MOV     C,0xE0 /* A   */.2
   \   000067   5023         JNC     ??ZDSecMgrDeviceJoin_1
   \   000069   85..82       MOV     DPL,?V2
   \   00006C   85..83       MOV     DPH,?V3
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   701A         JNZ     ??ZDSecMgrDeviceJoin_1
   1131              {
   1132                //send the nwk key data to the joining device
   1133                status = ZDSecMgrSendNwkKey( device );
   \   000072                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000072   EE           MOV     A,R6
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   000079   E9           MOV     A,R1
   \   00007A   F5..         MOV     ?V4,A
   1134              }
   1135          
   1136              if ( status != ZSuccess )
   \   00007C   601B         JZ      ??ZDSecMgrDeviceJoin_2
   1137              {
   1138                ZDSecMgrAddrClear( device->extAddr );
   \   00007E                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   1139              }
   1140            }
   \                     ??CrossCallReturnLabel_102:
   \   000087   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   00008A   8004         SJMP    ??ZDSecMgrDeviceJoin_3
   1141          
   1142            if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_1:
   \   00008C   E5..         MOV     A,?V4
   \   00008E   6009         JZ      ??ZDSecMgrDeviceJoin_2
   1143            {
   1144              // not allowed or transport key failed, remove the device
   1145              ZDSecMgrDeviceRemove( device );
   \                     ??ZDSecMgrDeviceJoin_3:
   \   000090                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000090   EE           MOV     A,R6
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   000097   8057         SJMP    ??ZDSecMgrDeviceJoin_4
   1146            }
   1147            else
   1148            {
   1149              // Pass the Trust Center Device Indication to higher layer if callback registered
   1150              if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
   \                     ??ZDSecMgrDeviceJoin_2:
   \   000099   90....       MOV     DPTR,#zdoCBFunc + 16
   \   00009C   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00009F   604F         JZ      ??ZDSecMgrDeviceJoin_4
   1151              {
   1152                ZDO_TC_Device_t dev;
   1153          
   1154                dev.nwkAddr = device->nwkAddr;
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL   ?Subroutine17 & 0xFFFF
   1155                osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_5:
   \   0000AE   F5..         MOV     ?V0,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V1,A
   \   0000B4   75..00       MOV     ?V2,#0x0
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BC   7C08         MOV     R4,#0x8
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   7407         MOV     A,#0x7
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   AA82         MOV     R2,DPL
   \   0000C7   AB83         MOV     R3,DPH
   \   0000C9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   1156                dev.parentAddr = device->parentAddr;
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000DA   740C         MOV     A,#0xc
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1157          
   1158                zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
   \                     ??CrossCallReturnLabel_122:
   \   0000E2                ; Setup parameters for indirect call
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E7   90....       MOV     DPTR,#zdoCBFunc + 16
   \   0000EA   12....       LCALL   ?Subroutine30 & 0xFFFF
   1159              }
   1160            }
   \                     ??CrossCallReturnLabel_33:
   \   0000ED   12....       LCALL   ?CALL_IND
   1161          
   1162            return status;
   \                     ??ZDSecMgrDeviceJoin_4:
   \   0000F0   A9..         MOV     R1,?V4
   \   0000F2   740E         MOV     A,#0xe
   \   0000F4                REQUIRE ?Subroutine5
   \   0000F4                ; // Fall through to label ?Subroutine5
   1163          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0
   1164          
   1165          /******************************************************************************
   1166           * @fn          ZDSecMgrDeviceJoinDirect
   1167           *
   1168           * @brief       Try to join this device as a direct child.
   1169           *
   1170           * @param       device - [in] ZDSecMgrDevice_t, device info
   1171           *
   1172           * @return      ZStatus_t
   1173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1174          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   1175          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1176            ZStatus_t status;
   1177          
   1178            status = ZDSecMgrDeviceJoin( device );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000009   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   00000C   E9           MOV     A,R1
   \   00000D   F5..         MOV     ?V0,A
   1179          
   1180            if ( status == ZSuccess )
   \   00000F   700D         JNZ     ??ZDSecMgrDeviceJoinDirect_0
   1181            {
   1182              // set association status to authenticated
   1183              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   000011                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000011                ; Setup parameters for call to function AssocGetWithShort
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   1184            }
   \                     ??CrossCallReturnLabel_103:
   \   000018   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   00001B   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1185          
   1186            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   00001E   A9..         MOV     R1,?V0
   \   000020   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   1187          }
   1188          
   1189          /******************************************************************************
   1190           * @fn          ZDSecMgrDeviceJoinFwd
   1191           *
   1192           * @brief       Forward join to Trust Center.
   1193           *
   1194           * @param       device - [in] ZDSecMgrDevice_t, device info
   1195           *
   1196           * @return      ZStatus_t
   1197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1198          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   1199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1200            ZStatus_t               status;
   1201            APSME_UpdateDeviceReq_t req;
   1202          
   1203            // forward any joining device to the Trust Center -- the Trust Center will
   1204            // decide if the device is allowed to join
   1205            status = ZSuccess;
   1206          
   1207            // forward authorization to the Trust Center
   1208            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine39 & 0xFFFF
   1209            req.devAddr    = device->nwkAddr;
   \                     ??CrossCallReturnLabel_52:
   \   000016   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine14 & 0xFFFF
   1210            req.devExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_0:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1211          
   1212            // set security status, option for router to reject if policy set
   1213            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \                     ??CrossCallReturnLabel_123:
   \   000025   EA           MOV     A,R2
   \   000026   2407         ADD     A,#0x7
   \   000028   F582         MOV     DPL,A
   \   00002A   E4           CLR     A
   \   00002B   3B           ADDC    A,R3
   \   00002C   F583         MOV     DPH,A
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000031   502E         JNC     ??ZDSecMgrDeviceJoinFwd_0
   1214            {
   1215              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000033   A2E6         MOV     C,0xE0 /* A   */.6
   \   000035   5021         JNC     ??ZDSecMgrDeviceJoinFwd_1
   1216              {
   1217                if ( device->secure == TRUE )
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6401         XRL     A,#0x1
   \   000044   7009         JNZ     ??ZDSecMgrDeviceJoinFwd_2
   1218                {
   1219                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000046   7406         MOV     A,#0x6
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   7404         MOV     A,#0x4
   \   00004D   803D         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1220                }
   1221                else
   1222                {
   1223                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00004F   7406         MOV     A,#0x6
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7407         MOV     A,#0x7
   \   000056   8034         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1224                }
   1225              }
   1226              else
   1227              {
   1228                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000058   7406         MOV     A,#0x6
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7405         MOV     A,#0x5
   \   00005F   802B         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1229              }
   1230            }
   1231            else
   1232            {
   1233              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   000061   A2E6         MOV     C,0xE0 /* A   */.6
   \   000063   5020         JNC     ??ZDSecMgrDeviceJoinFwd_4
   1234              {
   1235                if ( device->secure == TRUE )
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6401         XRL     A,#0x1
   \   000072   7008         JNZ     ??ZDSecMgrDeviceJoinFwd_5
   1236                {
   1237                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   000074   7406         MOV     A,#0x6
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E4           CLR     A
   \   00007A   8010         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1238                }
   1239                else
   1240                {
   1241                  req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   00007C   7406         MOV     A,#0x6
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   7403         MOV     A,#0x3
   \   000083   8007         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1242                }
   1243              }
   1244              else
   1245              {
   1246                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   000085   7406         MOV     A,#0x6
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   7401         MOV     A,#0x1
   1247              }
   1248            }
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   00008C   12....       LCALL   ?Subroutine39 & 0xFFFF
   1249          
   1250            // set association status to authenticated
   1251            ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \                     ??CrossCallReturnLabel_53:
   \   00008F   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000092   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000095                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000095   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1252          
   1253          #if defined ( APP_TP2_TEST_MODE )
   1254            if ( guTxApsSecON == TRUE )
   1255            {
   1256              req.apsSecure = TRUE;
   1257            }
   1258            else
   1259            {
   1260              req.apsSecure = FALSE;
   1261            }
   1262          
   1263            // send and APSME_UPDATE_DEVICE request to the trust center
   1264            status = APSME_UpdateDeviceReq( &req );
   1265          
   1266          #else
   1267            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1268            {
   1269              // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1270              // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1271              // with legacy Coordinator devices which can only handle one or the other.
   1272              if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   \   000098   90....       MOV     DPTR,#zgApsLinkKeyType
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6401         XRL     A,#0x1
   \   00009E   700C         JNZ     ??ZDSecMgrDeviceJoinFwd_6
   1273              {
   1274                req.apsSecure = FALSE;
   \   0000A0   7407         MOV     A,#0x7
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   E4           CLR     A
   \   0000A6   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   1275          
   1276                // send and APSME_UPDATE_DEVICE request to the trust center
   1277                status = APSME_UpdateDeviceReq( &req );
   1278              }
   \                     ??CrossCallReturnLabel_149:
   \   0000A9   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   1279          
   1280              // send the message APS encrypted
   1281              req.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceJoinFwd_6:
   \   0000AC   7407         MOV     A,#0x7
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   1282          
   1283              // send and APSME_UPDATE_DEVICE request to the trust center
   1284              status = APSME_UpdateDeviceReq( &req );
   1285            }
   1286            else
   1287            {
   1288              req.apsSecure = FALSE;
   1289          
   1290              // send and APSME_UPDATE_DEVICE request to the trust center
   1291              status = APSME_UpdateDeviceReq( &req );
   1292            }
   1293          #endif
   1294          
   1295            return status;
   \                     ??CrossCallReturnLabel_150:
   \   0000B6   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000B9   02....       LJMP    ?Subroutine4 & 0xFFFF
   1296          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00000C   7404         MOV     A,#0x4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7408         MOV     A,#0x8
   \   000002                REQUIRE ??Subroutine64_0
   \   000002                ; // Fall through to label ??Subroutine64_0
   1297          
   1298          /******************************************************************************
   1299           * @fn          ZDSecMgrDeviceNew
   1300           *
   1301           * @brief       Process a new device.
   1302           *
   1303           * @param       device - [in] ZDSecMgrDevice_t, device info
   1304           *
   1305           * @return      ZStatus_t
   1306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1307          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   1308          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1309            ZStatus_t status;
   1310          
   1311            if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1312                || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1313            {
   1314              // try to join this device
   1315              status = ZDSecMgrDeviceJoinDirect( joiner );
   1316            }
   1317            else
   1318            {
   1319              status = ZDSecMgrDeviceJoinFwd( joiner );
   1320            }
   1321          
   1322            return status;
   \   000004                ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
   \   000004   12....       LCALL   `??ZDSecMgrDeviceJoinDirect::?relay`; Banked call to: ZDSecMgrDeviceJoinDirect
   \   000007   80..         SJMP    ??Subroutine54_0
   1323          }
   1324          
   1325          /******************************************************************************
   1326           * @fn          ZDSecMgrAssocDeviceAuth
   1327           *
   1328           * @brief       Set associated device status to authenticated
   1329           *
   1330           * @param       assoc - [in, out] associated_devices_t
   1331           *
   1332           * @return      none
   1333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1334          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   1335          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1336            if ( assoc != NULL )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600D         JZ      ??ZDSecMgrAssocDeviceAuth_0
   1337            {
   1338              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   D2E3         SETB    0xE0 /* A   */.3
   \   000014   F0           MOVX    @DPTR,A
   1339            }
   1340          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   80..         SJMP    ??Subroutine54_0
   1341          
   1342          /******************************************************************************
   1343           * @fn          ZDSecMgrAuthNwkKey
   1344           *
   1345           * @brief       Handle next step in authentication process
   1346           *
   1347           * @param       none
   1348           *
   1349           * @return      none
   1350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1351          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   1352          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1353            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   700C         JNZ     ??ZDSecMgrAuthNwkKey_0
   1354            {
   1355              // inform ZDO that device has been authenticated
   1356              osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV     R2,#-0x80
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1357            }
   1358          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000018   80..         SJMP    ??Subroutine54_0
   1359          
   1360          /******************************************************************************
   1361           * PUBLIC FUNCTIONS
   1362           */
   1363          /******************************************************************************
   1364           * @fn          ZDSecMgrInit
   1365           *
   1366           * @brief       Initialize ZigBee Device Security Manager.
   1367           *
   1368           * @param       state - device initialization state
   1369           *
   1370           * @return      none
   1371           */
   1372          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1373          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   1374          void ZDSecMgrAddrMgrCB( uint8           update,
   1375                                  AddrMgrEntry_t* newEntry,
   1376                                  AddrMgrEntry_t* oldEntry )
   1377          {
   1378            (void)update;
   1379            (void)newEntry;
   1380            (void)oldEntry;
   1381          }
   1382          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1384          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   1385          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1386            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1387            {
   1388              // initialize sub modules
   1389              ZDSecMgrEntryInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrEntryInit
   \   000005   12....       LCALL   `??ZDSecMgrEntryInit::?relay`; Banked call to: ZDSecMgrEntryInit
   1390          
   1391              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1392              {
   1393                APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
   \   000008                ; Setup parameters for call to function NLME_GetExtAddr
   \   000008   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000B   8A..         MOV     ?V0,R2
   \   00000D   8B..         MOV     ?V1,R3
   \   00000F   AC..         MOV     R4,?V0
   \   000011   AD..         MOV     R5,?V1
   \   000013                ; Setup parameters for call to function APSME_SetRequest
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   79AB         MOV     R1,#-0x55
   \   000019   12....       LCALL   `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   1394              }
   1395          
   1396              // register with Address Manager
   1397          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1398              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   1399          #endif
   1400            }
   1401          
   1402            if ( ZG_SECURE_ENABLED )
   1403            {
   1404              if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1405                   || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1406              {
   1407                // setup joining permissions
   1408                ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00001C   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00001F   7401         MOV     A,#0x1
   \   000021   F0           MOVX    @DPTR,A
   1409                ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000022   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
   1410              }
   1411            }
   1412          
   1413            // configure security based on security mode and type of device
   1414            ZDSecMgrConfig();
   \   000027                ; Setup parameters for call to function SSP_Init
   \   000027   12....       LCALL   `??SSP_Init::?relay` ; Banked call to: SSP_Init
   \   00002A                ; Setup parameters for call to function APSME_SecurityCM_CD
   \   00002A   12....       LCALL   `??APSME_SecurityCM_CD::?relay`; Banked call to: APSME_SecurityCM_CD
   1415          }
   \   00002D   02....       LJMP    ??Subroutine65_0 & 0xFFFF
   1416          
   1417          /******************************************************************************
   1418           * @fn          ZDSecMgrConfig
   1419           *
   1420           * @brief       Configure ZigBee Device Security Manager.
   1421           *
   1422           * @param       none
   1423           *
   1424           * @return      none
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   1427          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1428            if ( ZG_SECURE_ENABLED )
   1429            {
   1430              SSP_Init();
   \   000004                ; Setup parameters for call to function SSP_Init
   \   000004   12....       LCALL   `??SSP_Init::?relay` ; Banked call to: SSP_Init
   1431          
   1432              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1433              {
   1434                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1435                {
   1436                  // COMMERCIAL MODE - COORDINATOR DEVICE
   1437                  APSME_SecurityCM_CD();
   \   000007                ; Setup parameters for call to function APSME_SecurityCM_CD
   \   000007   12....       LCALL   `??APSME_SecurityCM_CD::?relay`; Banked call to: APSME_SecurityCM_CD
   1438                }
   1439                else if ( ZSTACK_ROUTER_BUILD )
   1440                {
   1441                  // COMMERCIAL MODE - ROUTER DEVICE
   1442                  APSME_SecurityCM_RD();
   1443                }
   1444                else
   1445                {
   1446                  // COMMERCIAL MODE - END DEVICE
   1447                  APSME_SecurityCM_ED();
   1448                }
   1449              }
   1450              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1451              {
   1452                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1453                {
   1454                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   1455                  APSME_SecurityRM_CD();
   1456                }
   1457                else if ( ZSTACK_ROUTER_BUILD )
   1458                {
   1459                  // RESIDENTIAL MODE - ROUTER DEVICE
   1460                  APSME_SecurityRM_RD();
   1461                }
   1462                else
   1463                {
   1464                  // RESIDENTIAL MODE - END DEVICE
   1465                  APSME_SecurityRM_ED();
   1466                }
   1467              }
   1468            }
   1469            else
   1470            {
   1471              // NO SECURITY
   1472              APSME_SecurityNM();
   1473            }
   1474          }
   \   00000A   80..         SJMP    ??Subroutine54_0
   1475          
   1476          /******************************************************************************
   1477           * @fn          ZDSecMgrPermitJoining
   1478           *
   1479           * @brief       Process request to change joining permissions.
   1480           *
   1481           * @param       duration - [in] timed duration for join in seconds
   1482           *                         - 0x00 not allowed
   1483           *                         - 0xFF allowed without timeout
   1484           *
   1485           * @return      uint8 - success(TRUE:FALSE)
   1486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1487          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   1488          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   1489            uint8 accept;
   1490          
   1491            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000006   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   1492          
   1493            if ( duration > 0 )
   \   00000B   E8           MOV     A,R0
   \   00000C   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   600F         JZ      ??ZDSecMgrPermitJoining_0
   1494            {
   1495              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
   1496          
   1497              if ( duration != 0xFF )
   \   000014   74FF         MOV     A,#-0x1
   \   000016   68           XRL     A,R0
   \   000017   6009         JZ      ??ZDSecMgrPermitJoining_1
   1498              {
   1499                ZDSecMgrPermitJoiningTimed = TRUE;
   \   000019   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   00001C   7401         MOV     A,#0x1
   \   00001E   8001         SJMP    ??ZDSecMgrPermitJoining_2
   1500              }
   1501            }
   1502            else
   1503            {
   1504              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   000020   E4           CLR     A
   \                     ??ZDSecMgrPermitJoining_2:
   \   000021   F0           MOVX    @DPTR,A
   1505            }
   1506          
   1507            accept = TRUE;
   1508          
   1509            return accept;
   \                     ??ZDSecMgrPermitJoining_1:
   \   000022   7901         MOV     R1,#0x1
   \   000024   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1510          }
   1511          
   1512          /******************************************************************************
   1513           * @fn          ZDSecMgrPermitJoiningTimeout
   1514           *
   1515           * @brief       Process permit joining timeout
   1516           *
   1517           * @param       none
   1518           *
   1519           * @return      none
   1520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1521          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   1522          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1523            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7009         JNZ     ??ZDSecMgrPermitJoiningTimeout_0
   1524            {
   1525              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1526              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000011   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000014   F0           MOVX    @DPTR,A
   1527            }
   1528          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000015   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1529          
   1530          /******************************************************************************
   1531           * @fn          ZDSecMgrNewDeviceEvent
   1532           *
   1533           * @brief       Process a the new device event, if found reset new device
   1534           *              event/timer.
   1535           *
   1536           * @param       ShortAddr - of New Device to process
   1537           *
   1538           * @return      uint8 - found(TRUE:FALSE)
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
   \                     ZDSecMgrNewDeviceEvent:
   1541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1542            uint8                 found;
   1543            ZDSecMgrDevice_t      device;
   1544            AddrMgrEntry_t        addrEntry;
   1545            associated_devices_t* assoc;
   1546            ZStatus_t             status;
   1547          
   1548            // initialize return results
   1549            found = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   1550          
   1551            assoc = AssocGetWithShort( ShortAddr );
   \   00000D                ; Setup parameters for call to function AssocGetWithShort
   \   00000D   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AE..         MOV     R6,?V2
   \   000016   AF..         MOV     R7,?V3
   1552          
   1553            if ( assoc != NULL )
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   1554            {
   1555              // device found
   1556              found = TRUE;
   \   00001F   75..01       MOV     ?V0,#0x1
   1557          
   1558              // check for preconfigured security
   1559              if ( zgPreConfigKeys == TRUE )
   \   000022   90....       MOV     DPTR,#zgPreConfigKeys
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6401         XRL     A,#0x1
   \   000028   7003         JNZ     ??ZDSecMgrNewDeviceEvent_1
   1560              {
   1561                // set association status to authenticated
   1562                ZDSecMgrAssocDeviceAuth( assoc );
   \   00002A                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002A   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1563              }
   1564          
   1565              // set up device info
   1566              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   12....       LCALL   ?Subroutine21 & 0xFFFF
   1567              addrEntry.index = assoc->addrIdx;
   \                     ??CrossCallReturnLabel_13:
   \   000036   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000039   7413         MOV     A,#0x13
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1568              AddrMgrEntryGet( &addrEntry );
   \                     ??CrossCallReturnLabel_124:
   \   000041                ; Setup parameters for call to function AddrMgrEntryGet
   \   000041   7408         MOV     A,#0x8
   \   000043   12....       LCALL   ?XSTACK_DISP101_8
   \   000046   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   1569          
   1570              device.nwkAddr    = assoc->shortAddr;
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   12....       LCALL   ?Subroutine20 & 0xFFFF
   1571              device.extAddr    = addrEntry.extAddr;
   \                     ??CrossCallReturnLabel_131:
   \   000050   740B         MOV     A,#0xb
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   A882         MOV     R0,DPL
   \   000057   A983         MOV     R1,DPH
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1572              device.parentAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_125:
   \   000061                ; Setup parameters for call to function NLME_GetShortAddr
   \   000061   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?Subroutine22 & 0xFFFF
   1573          
   1574              // the new device performed Secured Rejoin
   1575              if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
   1576                   ( assoc->devStatus & DEV_REJOIN_STATUS ) )
   \                     ??CrossCallReturnLabel_18:
   \   00006C   EE           MOV     A,R6
   \   00006D   2405         ADD     A,#0x5
   \   00006F   F8           MOV     R0,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F9           MOV     R1,A
   \   000073   E8           MOV     A,R0
   \   000074   FE           MOV     R6,A
   \   000075   E9           MOV     A,R1
   \   000076   FF           MOV     R7,A
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   5460         ANL     A,#0x60
   \   00007E   6460         XRL     A,#0x60
   \   000080   7009         JNZ     ??ZDSecMgrNewDeviceEvent_2
   1577              {
   1578                device.secure     = TRUE;
   \   000082   7406         MOV     A,#0x6
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   7401         MOV     A,#0x1
   \   000089   8006         SJMP    ??ZDSecMgrNewDeviceEvent_3
   1579              }
   1580              else
   1581              {
   1582                device.secure     = FALSE;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   00008B   7406         MOV     A,#0x6
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   E4           CLR     A
   1583              }
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   000091   12....       LCALL   ?Subroutine21 & 0xFFFF
   1584              device.devStatus  = assoc->devStatus;
   \                     ??CrossCallReturnLabel_14:
   \   000094   E0           MOVX    A,@DPTR
   \   000095   C0E0         PUSH    A
   \   000097   7407         MOV     A,#0x7
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   D0E0         POP     A
   \   00009E   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   1585          
   1586              // process new device
   1587              status = ZDSecMgrDeviceNew( &device );
   1588          
   1589              if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_151:
   \   0000A1   12....       LCALL   `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   0000A4   E9           MOV     A,R1
   \   0000A5   700A         JNZ     ??ZDSecMgrNewDeviceEvent_4
   1590              {
   1591                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C2E2         CLR     0xE0 /* A   */.2
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   8018         SJMP    ??ZDSecMgrNewDeviceEvent_0
   1592              }
   1593              else
   1594              {
   1595                // Clear SECURITY bit from Address Manager
   1596                ZDSecMgrAddrClear( addrEntry.extAddr );
   \                     ??ZDSecMgrNewDeviceEvent_4:
   \   0000B1                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000B1   740B         MOV     A,#0xb
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   AA82         MOV     R2,DPL
   \   0000B8   AB83         MOV     R3,DPH
   \   0000BA   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1597          
   1598                // Remove the Association completely
   1599                AssocRemove( addrEntry.extAddr );
   \   0000BD                ; Setup parameters for call to function AssocRemove
   \   0000BD   740B         MOV     A,#0xb
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   AA82         MOV     R2,DPL
   \   0000C4   AB83         MOV     R3,DPH
   \   0000C6   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   1600              }
   1601            }
   1602          
   1603            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   0000C9   A9..         MOV     R1,?V0
   \   0000CB   7415         MOV     A,#0x15
   \   0000CD   02....       LJMP    ?Subroutine3 & 0xFFFF
   1604          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   22           RET
   1605          
   1606          /******************************************************************************
   1607           * @fn          ZDSecMgrTCExtAddrCheck
   1608           *
   1609           * @brief       Verifies if received ext. address matches TC ext. address.
   1610           *
   1611           * @param       extAddr - Extended address to be verified.
   1612           *
   1613           * @return      TRUE - extended address matches
   1614           *              FALSE - otherwise
   1615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1616          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   1617          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1618            uint8  lookup[Z_EXTADDR_LEN];
   1619            APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   7A00         MOV     R2,#0x0
   \   000014   7B00         MOV     R3,#0x0
   \   000016   79AB         MOV     R1,#-0x55
   \   000018   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1620            return osal_ExtAddrEqual( extAddr, lookup );
   \   00001B                ; Setup parameters for call to function sAddrExtCmp
   \   00001B   AC..         MOV     R4,?XSP + 0
   \   00001D   AD..         MOV     R5,?XSP + 1
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000026                REQUIRE ?Subroutine8
   \   000026                ; // Fall through to label ?Subroutine8
   1621          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7408         MOV     A,#0x8
   \   000002   02....       LJMP    ??Subroutine58_0 & 0xFFFF
   1622          
   1623          /******************************************************************************
   1624           * @fn          ZDSecMgrTCDataLoad
   1625           *
   1626           * @brief       Stores the address of TC into address manager.
   1627           *
   1628           * @param       extAddr - Extended address to be verified.
   1629           *
   1630           * @return      none
   1631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1632          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   1633          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1634            uint16 ami;
   1635            AddrMgrEntry_t entry;
   1636          
   1637            // lookup using TC short address
   1638            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1639            osal_cpyExtAddr( entry.extAddr, extAddr );
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7405         MOV     A,#0x5
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1640          
   1641            // Verify if TC address has been added to Address Manager
   1642            if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
   \   000025                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000025   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000028   E9           MOV     A,R1
   \   000029   702A         JNZ     ??ZDSecMgrTCDataLoad_0
   \   00002B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000033   E9           MOV     A,R1
   \   000034   6401         XRL     A,#0x1
   \   000036   601D         JZ      ??ZDSecMgrTCDataLoad_0
   1643            {
   1644              ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
   \   000038                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000038   A8..         MOV     R0,?XSP + 0
   \   00003A   A9..         MOV     R1,?XSP + 1
   \   00003C   88..         MOV     ?V0,R0
   \   00003E   89..         MOV     ?V1,R1
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1645            }
   1646          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000055   740F         MOV     A,#0xf
   \   000057   02....       LJMP    ??Subroutine64_0 & 0xFFFF
   1647          
   1648          /******************************************************************************
   1649           * @fn          ZDSecMgrTransportKeyInd
   1650           *
   1651           * @brief       Process the ZDO_TransportKeyInd_t message.
   1652           *
   1653           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   1654           *
   1655           * @return      none
   1656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1657          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   1658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1659            uint8 index;
   1660            uint8 zgPreConfigKey[SEC_KEY_LEN];
   1661          
   1662            ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
   \   00000E   EA           MOV     A,R2
   \   00000F   2416         ADD     A,#0x16
   \   000011   FE           MOV     R6,A
   \   000012   E4           CLR     A
   \   000013   35..         ADDC    A,?V3
   \   000015   FF           MOV     R7,A
   \   000016                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1663            // check for distributed security
   1664            if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
   \   00001D                ; Setup parameters for call to function osal_isbufset
   \   00001D   7C08         MOV     R4,#0x8
   \   00001F   79FF         MOV     R1,#-0x1
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000028   E9           MOV     A,R1
   \   000029   6006         JZ      ??ZDSecMgrTransportKeyInd_0
   1665            {
   1666              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00002B   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
   1667            }
   1668          
   1669            // load Trust Center data if needed
   1670            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   000031                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   000031   EE           MOV     A,R6
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   FB           MOV     R3,A
   \   000035   12....       LCALL   `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   1671          
   1672            if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   1673                 ( ind->keyType == 6            ) )
   \   000038   85..82       MOV     DPL,?V2
   \   00003B   85..83       MOV     DPH,?V3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   E5..         MOV     A,?V2
   \   000046   2406         ADD     A,#0x6
   \   000048   F5..         MOV     ?V0,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V3
   \   00004D   F5..         MOV     ?V1,A
   \   00004F   7401         MOV     A,#0x1
   \   000051   68           XRL     A,R0
   \   000052   6008         JZ      ??ZDSecMgrTransportKeyInd_1
   \   000054   7406         MOV     A,#0x6
   \   000056   68           XRL     A,R0
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??ZDSecMgrTransportKeyInd_2 & 0xFFFF
   1674            {
   1675              // check for dummy NWK key (all zeros)
   1676              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   00005C   7A00         MOV     R2,#0x0
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   00005E   EA           MOV     A,R2
   \   00005F   F8           MOV     R0,A
   \   000060   E5..         MOV     A,?V2
   \   000062   28           ADD     A,R0
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V3
   \   000068   F583         MOV     DPH,A
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   7007         JNZ     ??ZDSecMgrTransportKeyInd_4
   1677                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   1678                    index++ );
   \   000073   0A           INC     R2
   \   000074   EA           MOV     A,R2
   \   000075   C3           CLR     C
   \   000076   9410         SUBB    A,#0x10
   \   000078   40E4         JC      ??ZDSecMgrTransportKeyInd_3
   1679          
   1680              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   00007A   7410         MOV     A,#0x10
   \   00007C   6A           XRL     A,R2
   \   00007D   7031         JNZ     ??ZDSecMgrTransportKeyInd_5
   1681              {
   1682                // load preconfigured key - once!!
   1683                if ( !_NIB.nwkKeyLoaded )
   \   00007F   90....       MOV     DPTR,#_NIB + 61
   \   000082   E0           MOVX    A,@DPTR
   \   000083   7054         JNZ     ??ZDSecMgrTransportKeyInd_6
   1684                {
   1685                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000085                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000085   7404         MOV     A,#0x4
   \   000087   12....       LCALL   ?XSTACK_DISP102_8
   \   00008A   7A62         MOV     R2,#0x62
   \   00008C   7B00         MOV     R3,#0x0
   \   00008E   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   1686                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   000091                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000091   7900         MOV     R1,#0x0
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?XSTACK_DISP101_8
   \   000098   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1687                  SSP_SwitchNwkKey( 0 );
   \   00009B                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00009B   7900         MOV     R1,#0x0
   \   00009D   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1688          
   1689                  // clear local copy of key
   1690                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   0000A0                ; Setup parameters for call to function osal_memset
   \   0000A0   7C10         MOV     R4,#0x10
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7900         MOV     R1,#0x0
   \   0000A6   7404         MOV     A,#0x4
   \   0000A8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000AB   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000AE   8029         SJMP    ??ZDSecMgrTransportKeyInd_6
   1691                }
   1692              }
   1693              else
   1694              {
   1695                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   0000B0   E5..         MOV     A,?V2
   \   0000B2   2405         ADD     A,#0x5
   \   0000B4   F8           MOV     R0,A
   \   0000B5   E4           CLR     A
   \   0000B6   35..         ADDC    A,?V3
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   FE           MOV     R6,A
   \   0000BB   E9           MOV     A,R1
   \   0000BC   FF           MOV     R7,A
   \   0000BD                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   AA..         MOV     R2,?V0
   \   0000C5   AB..         MOV     R3,?V1
   \   0000C7   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1696                if ( !_NIB.nwkKeyLoaded )
   \   0000CA   90....       MOV     DPTR,#_NIB + 61
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   7009         JNZ     ??ZDSecMgrTransportKeyInd_6
   1697                {
   1698                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000D0                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F9           MOV     R1,A
   \   0000D6   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1699                }
   1700              }
   1701          
   1702              // handle next step in authentication process
   1703              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   0000D9                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000D9   12....       LCALL   `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   0000DC   8078         SJMP    ??ZDSecMgrTransportKeyInd_7
   1704            }
   1705            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   0000DE   7404         MOV     A,#0x4
   \   0000E0   68           XRL     A,R0
   \   0000E1   6073         JZ      ??ZDSecMgrTransportKeyInd_7
   1706            {
   1707              // This should not happen because TCLK should not be Tx
   1708            }
   1709            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \   0000E3   7403         MOV     A,#0x3
   \   0000E5   68           XRL     A,R0
   \   0000E6   706E         JNZ     ??ZDSecMgrTransportKeyInd_7
   1710            {
   1711              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1712              {
   1713                uint16           ami;
   1714                ZDSecMgrEntry_t* entry;
   1715          
   1716                // get the address index
   1717                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   \   0000E8                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?XSTACK_DISP102_8
   \   0000ED   EE           MOV     A,R6
   \   0000EE   FA           MOV     R2,A
   \   0000EF   EF           MOV     A,R7
   \   0000F0   FB           MOV     R3,A
   \   0000F1   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   0000F4   E9           MOV     A,R1
   \   0000F5   602B         JZ      ??ZDSecMgrTransportKeyInd_8
   1718                {
   1719                  // store new EXT address
   1720                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   \   0000F7                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   0000F7   7402         MOV     A,#0x2
   \   0000F9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000FC   88..         MOV     ?V2,R0
   \   0000FE   89..         MOV     ?V3,R1
   \   000100   78..         MOV     R0,#?V2
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000105   EE           MOV     A,R6
   \   000106   FC           MOV     R4,A
   \   000107   EF           MOV     A,R7
   \   000108   FD           MOV     R5,A
   \   000109   7AFE         MOV     R2,#-0x2
   \   00010B   7BFF         MOV     R3,#-0x1
   \   00010D   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000110   7402         MOV     A,#0x2
   \   000112   12....       LCALL   ?DEALLOC_XSTACK8
   1721                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000115                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000115   7D00         MOV     R5,#0x0
   \   000117   7C00         MOV     R4,#0x0
   \   000119   7900         MOV     R1,#0x0
   \   00011B   EE           MOV     A,R6
   \   00011C   FA           MOV     R2,A
   \   00011D   EF           MOV     A,R7
   \   00011E   FB           MOV     R3,A
   \   00011F   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1722                }
   1723          
   1724                ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrTransportKeyInd_8:
   \   000122                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000122   AC..         MOV     R4,?XSP + 0
   \   000124   AD..         MOV     R5,?XSP + 1
   \   000126   7402         MOV     A,#0x2
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00012E   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   1725          
   1726                if ( entry == NULL )
   \   000131   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000134   7015         JNZ     ??CrossCallReturnLabel_126
   1727                {
   1728                  // get new entry
   1729                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000136                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000136   AA..         MOV     R2,?XSP + 0
   \   000138   AB..         MOV     R3,?XSP + 1
   \   00013A   12....       LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   00013D   E9           MOV     A,R1
   \   00013E   700B         JNZ     ??CrossCallReturnLabel_126
   1730                  {
   1731                    // finish setting up entry
   1732                    entry->ami = ami;
   \   000140   7402         MOV     A,#0x2
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   12....       LCALL   ?Subroutine25 & 0xFFFF
   1733                  }
   1734                }
   \                     ??CrossCallReturnLabel_21:
   \   000148   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1735          
   1736                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   \                     ??CrossCallReturnLabel_126:
   \   00014B                ; Setup parameters for call to function APSME_LinkKeySet
   \   00014B   AC..         MOV     R4,?V0
   \   00014D   AD..         MOV     R5,?V1
   \   00014F   EE           MOV     A,R6
   \   000150   FA           MOV     R2,A
   \   000151   EF           MOV     A,R7
   \   000152   FB           MOV     R3,A
   \   000153   12....       LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   1737          
   1738          #if defined NV_RESTORE
   1739                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   1740          #endif
   1741              }
   1742            }
   1743          }
   \                     ??ZDSecMgrTransportKeyInd_7:
   \   000156   7414         MOV     A,#0x14
   \   000158                REQUIRE ?Subroutine3
   \   000158                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine57_0
   \   000006                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000006   22           RET
   1744          
   1745          /******************************************************************************
   1746           * @fn          ZDSecMgrUpdateDeviceInd
   1747           *
   1748           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   1749           *
   1750           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   1751           *
   1752           * @return      none
   1753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7408         MOV     A,#0x8
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   1755          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1756            ZDSecMgrDevice_t device;
   1757          
   1758            device.nwkAddr    = ind->devAddr;
   \   000009   EA           MOV     A,R2
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3B           ADDC    A,R3
   \   000010   F583         MOV     DPH,A
   \   000012   12....       LCALL   ?Subroutine20 & 0xFFFF
   1759            device.extAddr    = ind->devExtAddr;
   \                     ??CrossCallReturnLabel_132:
   \   000015   EA           MOV     A,R2
   \   000016   2404         ADD     A,#0x4
   \   000018   F8           MOV     R0,A
   \   000019   E4           CLR     A
   \   00001A   3B           ADDC    A,R3
   \   00001B   F9           MOV     R1,A
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine14 & 0xFFFF
   1760            device.parentAddr = ind->srcAddr;
   \                     ??CrossCallReturnLabel_1:
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1761            device.devStatus  = DEV_SEC_INIT_STATUS;
   \                     ??CrossCallReturnLabel_127:
   \   00002A   7407         MOV     A,#0x7
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7404         MOV     A,#0x4
   \   000031   F0           MOVX    @DPTR,A
   1762            device.secure     = FALSE;
   \   000032   7406         MOV     A,#0x6
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   1763          
   1764            // Trust Center should identify the type of JOIN/REJOIN and
   1765            // Transport the NWK key accordingly, it will only be transported for:
   1766            //              APSME_UD_STANDARD_UNSECURED_JOIN
   1767            //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
   1768            if ( ind->status != APSME_UD_DEVICE_LEFT )
   \   000039   EA           MOV     A,R2
   \   00003A   240E         ADD     A,#0xe
   \   00003C   F582         MOV     DPL,A
   \   00003E   E4           CLR     A
   \   00003F   3B           ADDC    A,R3
   \   000040   F583         MOV     DPH,A
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   7402         MOV     A,#0x2
   \   000046   68           XRL     A,R0
   \   000047   601A         JZ      ??ZDSecMgrUpdateDeviceInd_0
   1769            {
   1770              if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
   \   000049   E8           MOV     A,R0
   \   00004A   7010         JNZ     ??ZDSecMgrUpdateDeviceInd_1
   1771              {
   1772                device.devStatus &= ~DEV_SEC_INIT_STATUS;
   1773                device.devStatus |=  DEV_SEC_AUTH_STATUS;
   \   00004C   7407         MOV     A,#0x7
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7408         MOV     A,#0x8
   \   000053   F0           MOVX    @DPTR,A
   1774                device.secure = TRUE;
   \   000054   7406         MOV     A,#0x6
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   7401         MOV     A,#0x1
   \   00005B   F0           MOVX    @DPTR,A
   1775              }
   1776          
   1777              ZDSecMgrDeviceJoin( &device );
   \                     ??ZDSecMgrUpdateDeviceInd_1:
   \   00005C                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   00005C   AA..         MOV     R2,?XSP + 0
   \   00005E   AB..         MOV     R3,?XSP + 1
   \   000060   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   1778            }
   1779          }
   \                     ??ZDSecMgrUpdateDeviceInd_0:
   \   000063   02....       LJMP    ?Subroutine1 & 0xFFFF
   1780          
   1781          /******************************************************************************
   1782           * @fn          ZDSecMgrRemoveDeviceInd
   1783           *
   1784           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   1785           *
   1786           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   1787           *
   1788           * @return      none
   1789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1790          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   1791          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1792            ZDSecMgrDevice_t device;
   1793          
   1794            // only accept from Trust Center
   1795            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000013   702F         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   1796            {
   1797              // look up NWK address
   1798              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   000015   EA           MOV     A,R2
   \   000016   2404         ADD     A,#0x4
   \   000018   FE           MOV     R6,A
   \   000019   E4           CLR     A
   \   00001A   3B           ADDC    A,R3
   \   00001B   FF           MOV     R7,A
   \   00001C                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00001C   AC..         MOV     R4,?XSP + 0
   \   00001E   AD..         MOV     R5,?XSP + 1
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000027   E9           MOV     A,R1
   \   000028   6401         XRL     A,#0x1
   \   00002A   7018         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   1799              {
   1800                device.parentAddr = NLME_GetShortAddr();
   \   00002C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   1801                device.extAddr    = ind->childExtAddr;
   1802          
   1803                // remove device
   1804                ZDSecMgrDeviceRemove( &device );
   1805              }
   1806            }
   \                     ??CrossCallReturnLabel_159:
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   EE           MOV     A,R6
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   EF           MOV     A,R7
   \   00003E   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000041   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   1807          }
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000044   02....       LJMP    ?Subroutine8 & 0xFFFF
   1808          
   1809          /******************************************************************************
   1810           * @fn          ZDSecMgrRequestKeyInd
   1811           *
   1812           * @brief       Process the ZDO_RequestKeyInd_t message.
   1813           *
   1814           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   1815           *
   1816           * @return      none
   1817           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1818          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   1819          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1820            if ( ind->keyType == KEY_TYPE_NWK )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   7401         MOV     A,#0x1
   \   000010   68           XRL     A,R0
   \   000011   6008         JZ      ??ZDSecMgrRequestKeyInd_0
   1821            {
   1822            }
   1823            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000013   7402         MOV     A,#0x2
   \   000015   68           XRL     A,R0
   \   000016   7003         JNZ     ??ZDSecMgrRequestKeyInd_0
   1824            {
   1825              ZDSecMgrAppKeyReq( ind );
   \   000018                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   000018   12....       LCALL   `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   1826            }
   1827            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   1828            {
   1829            }
   1830            //else ignore
   1831          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   00001B   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1832          
   1833          /******************************************************************************
   1834           * @fn          ZDSecMgrSwitchKeyInd
   1835           *
   1836           * @brief       Process the ZDO_SwitchKeyInd_t message.
   1837           *
   1838           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   1839           *
   1840           * @return      none
   1841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1842          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   1843          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1844            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000004                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1845          
   1846            // Save if nv
   1847            ZDApp_NVUpdate();
   \   000011                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000011   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1848          }
   \   000014   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1849          
   1850          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1851          /******************************************************************************
   1852           * @fn          ZDSecMgrUpdateNwkKey
   1853           *
   1854           * @brief       Load a new NWK key and trigger a network update to the dstAddr.
   1855           *
   1856           * @param       key       - [in] new NWK key
   1857           * @param       keySeqNum - [in] new NWK key sequence number
   1858           *
   1859           * @return      ZStatus_t
   1860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrUpdateNwkKey:
   1862          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV     A,#-0x1a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
   1863            ZStatus_t               status;
   1864            APSME_TransportKeyReq_t req;
   1865          
   1866            // initialize common elements of local variables
   1867            req.keyType   = KEY_TYPE_NWK;
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
   1868          
   1869            req.dstAddr   = dstAddr;
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   EC           MOV     A,R4
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   ED           MOV     A,R5
   \   000022   F0           MOVX    @DPTR,A
   1870            req.keySeqNum = keySeqNum;
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E9           MOV     A,R1
   \   000029   F0           MOVX    @DPTR,A
   1871            req.key       = key;
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   EE           MOV     A,R6
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   EF           MOV     A,R7
   \   000033   F0           MOVX    @DPTR,A
   1872            req.extAddr   = NULL;
   \   000034   7406         MOV     A,#0x6
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
   1873            req.nwkSecure = TRUE;
   \   00003D   740A         MOV     A,#0xa
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   7401         MOV     A,#0x1
   \   000044   F0           MOVX    @DPTR,A
   1874            req.tunnel    = NULL;
   \   000045   740B         MOV     A,#0xb
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   F0           MOVX    @DPTR,A
   1875          
   1876            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1877            {
   1878              // Broadcast transport NWK key
   1879              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1880                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1881                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   6C           XRL     A,R4
   \   000051   7003         JNZ     ??ZDSecMgrUpdateNwkKey_0
   \   000053   74FF         MOV     A,#-0x1
   \   000055   6D           XRL     A,R5
   \                     ??ZDSecMgrUpdateNwkKey_0:
   \   000056   6014         JZ      ??ZDSecMgrUpdateNwkKey_1
   \   000058   74FC         MOV     A,#-0x4
   \   00005A   6C           XRL     A,R4
   \   00005B   7003         JNZ     ??ZDSecMgrUpdateNwkKey_2
   \   00005D   74FF         MOV     A,#-0x1
   \   00005F   6D           XRL     A,R5
   \                     ??ZDSecMgrUpdateNwkKey_2:
   \   000060   600A         JZ      ??ZDSecMgrUpdateNwkKey_1
   \   000062   74FD         MOV     A,#-0x3
   \   000064   6C           XRL     A,R4
   \   000065   7003         JNZ     ??ZDSecMgrUpdateNwkKey_3
   \   000067   74FF         MOV     A,#-0x1
   \   000069   6D           XRL     A,R5
   \                     ??ZDSecMgrUpdateNwkKey_3:
   \   00006A   7008         JNZ     ??ZDSecMgrUpdateNwkKey_4
   1882              {
   1883                req.apsSecure = FALSE;
   \                     ??ZDSecMgrUpdateNwkKey_1:
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   E4           CLR     A
   \   000072   803A         SJMP    ??ZDSecMgrUpdateNwkKey_5
   1884                status = APSME_TransportKeyReq( &req );
   1885              }
   1886              else
   1887              {
   1888                AddrMgrEntry_t          addrEntry;
   1889          
   1890                addrEntry.user = ADDRMGR_USER_SECURITY;
   \                     ??ZDSecMgrUpdateNwkKey_4:
   \   000074   740D         MOV     A,#0xd
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   7402         MOV     A,#0x2
   \   00007B   F0           MOVX    @DPTR,A
   1891                addrEntry.nwkAddr = dstAddr;
   \   00007C   740E         MOV     A,#0xe
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   EC           MOV     A,R4
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   ED           MOV     A,R5
   \   000085   F0           MOVX    @DPTR,A
   1892          
   1893                status = ZFailure;
   \   000086   75..01       MOV     ?V0,#0x1
   1894          
   1895                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   \   000089                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000089   740D         MOV     A,#0xd
   \   00008B   12....       LCALL   ?XSTACK_DISP101_8
   \   00008E   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000091   E9           MOV     A,R1
   \   000092   6401         XRL     A,#0x1
   \   000094   7021         JNZ     ??ZDSecMgrUpdateNwkKey_6
   1896                {
   1897                  req.extAddr = addrEntry.extAddr;
   \   000096   7410         MOV     A,#0x10
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   A882         MOV     R0,DPL
   \   00009D   A983         MOV     R1,DPH
   \   00009F   7406         MOV     A,#0x6
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   1898                  req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_128:
   \   0000A7   7409         MOV     A,#0x9
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   7401         MOV     A,#0x1
   1899                  status = APSME_TransportKeyReq( &req );
   1900                }
   1901              }
   1902            }
   \                     ??ZDSecMgrUpdateNwkKey_5:
   \   0000AE   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000B1   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000B4   E9           MOV     A,R1
   \   0000B5   F5..         MOV     ?V0,A
   1903            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1904            {
   1905              req.apsSecure = FALSE;
   1906              status = APSME_TransportKeyReq( &req );
   1907            }
   1908          
   1909            SSP_UpdateNwkKey( key, keySeqNum );
   \                     ??ZDSecMgrUpdateNwkKey_6:
   \   0000B7                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000B7   A9..         MOV     R1,?V1
   \   0000B9   EE           MOV     A,R6
   \   0000BA   FA           MOV     R2,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   FB           MOV     R3,A
   \   0000BD   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1910          
   1911            // Save if nv
   1912            ZDApp_NVUpdate();
   \   0000C0                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000C0   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1913          
   1914            return status;
   \   0000C3   A9..         MOV     R1,?V0
   \   0000C5   741A         MOV     A,#0x1a
   \   0000C7   02....       LJMP    ??Subroutine64_0 & 0xFFFF
   1915          }
   1916          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1917          
   1918          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1919          /******************************************************************************
   1920           * @fn          ZDSecMgrSwitchNwkKey
   1921           *
   1922           * @brief       Causes the NWK key to switch via a network command to the dstAddr.
   1923           *
   1924           * @param       keySeqNum - [in] new NWK key sequence number
   1925           *
   1926           * @return      ZStatus_t
   1927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1928          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrSwitchNwkKey:
   1929          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   1930            ZStatus_t            status;
   1931            APSME_SwitchKeyReq_t req;
   1932          
   1933            // initialize common elements of local variables
   1934            req.dstAddr = dstAddr;
   \   00000C   12....       LCALL   ?Subroutine16 & 0xFFFF
   1935            req.keySeqNum = keySeqNum;
   \                     ??CrossCallReturnLabel_157:
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   1936          
   1937            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1938            {
   1939              // Broadcast switch NWK key
   1940              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1941                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1942                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   \   000014   74FF         MOV     A,#-0x1
   \   000016   6A           XRL     A,R2
   \   000017   7003         JNZ     ??ZDSecMgrSwitchNwkKey_0
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   6B           XRL     A,R3
   \                     ??ZDSecMgrSwitchNwkKey_0:
   \   00001C   6014         JZ      ??ZDSecMgrSwitchNwkKey_1
   \   00001E   74FC         MOV     A,#-0x4
   \   000020   6A           XRL     A,R2
   \   000021   7003         JNZ     ??ZDSecMgrSwitchNwkKey_2
   \   000023   74FF         MOV     A,#-0x1
   \   000025   6B           XRL     A,R3
   \                     ??ZDSecMgrSwitchNwkKey_2:
   \   000026   600A         JZ      ??ZDSecMgrSwitchNwkKey_1
   \   000028   74FD         MOV     A,#-0x3
   \   00002A   6A           XRL     A,R2
   \   00002B   7003         JNZ     ??ZDSecMgrSwitchNwkKey_3
   \   00002D   74FF         MOV     A,#-0x1
   \   00002F   6B           XRL     A,R3
   \                     ??ZDSecMgrSwitchNwkKey_3:
   \   000030   7008         JNZ     ??ZDSecMgrSwitchNwkKey_4
   1943              {
   1944                req.apsSecure = FALSE;
   \                     ??ZDSecMgrSwitchNwkKey_1:
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   802D         SJMP    ??ZDSecMgrSwitchNwkKey_5
   1945                status = APSME_SwitchKeyReq( &req );
   1946              }
   1947              else
   1948              {
   1949                AddrMgrEntry_t          addrEntry;
   1950          
   1951                addrEntry.user = ADDRMGR_USER_SECURITY;
   \                     ??ZDSecMgrSwitchNwkKey_4:
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   7402         MOV     A,#0x2
   \   000041   F0           MOVX    @DPTR,A
   1952                addrEntry.nwkAddr = dstAddr;
   \   000042   7405         MOV     A,#0x5
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ?Subroutine22 & 0xFFFF
   1953          
   1954                status = ZFailure;
   \                     ??CrossCallReturnLabel_19:
   \   00004A   7E01         MOV     R6,#0x1
   1955          
   1956                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   \   00004C                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP101_8
   \   000051   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000054   E9           MOV     A,R1
   \   000055   6401         XRL     A,#0x1
   \   000057   7016         JNZ     ??ZDSecMgrSwitchNwkKey_6
   1957                {
   1958                  req.dstAddr = addrEntry.nwkAddr;
   \   000059   7405         MOV     A,#0x5
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ?Subroutine20 & 0xFFFF
   1959                  req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_133:
   \   000061   7403         MOV     A,#0x3
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   EE           MOV     A,R6
   1960                  status = APSME_SwitchKeyReq( &req );
   1961                }
   1962              }
   1963            }
   \                     ??ZDSecMgrSwitchNwkKey_5:
   \   000067   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00006A   12....       LCALL   `??APSME_SwitchKeyReq::?relay`; Banked call to: APSME_SwitchKeyReq
   \   00006D   E9           MOV     A,R1
   \   00006E   FE           MOV     R6,A
   1964            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1965            {
   1966              req.apsSecure = FALSE;
   1967              status = APSME_SwitchKeyReq( &req );
   1968            }
   1969          
   1970            SSP_SwitchNwkKey( keySeqNum );
   \                     ??ZDSecMgrSwitchNwkKey_6:
   \   00006F                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00006F   EF           MOV     A,R7
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1971          
   1972            // Save if nv
   1973            ZDApp_NVUpdate();
   \   000074                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000074   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1974          
   1975            return status;
   \   000077   EE           MOV     A,R6
   \   000078   F9           MOV     R1,A
   \   000079   7411         MOV     A,#0x11
   \   00007B   02....       LJMP    ??Subroutine58_0 & 0xFFFF
   1976          }
   1977          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1978          
   1979          /******************************************************************************
   1980           * @fn          ZDSecMgrRequestAppKey
   1981           *
   1982           * @brief       Request an application key with partner.
   1983           *
   1984           * @param       partExtAddr - [in] partner extended address
   1985           *
   1986           * @return      ZStatus_t
   1987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1988          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   1989          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV     A,#-0x4
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1990            ZStatus_t status;
   1991            APSME_RequestKeyReq_t req;
   1992          
   1993            req.dstAddr = 0;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1994            req.keyType = KEY_TYPE_APP_MASTER;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7402         MOV     A,#0x2
   \   000017   F0           MOVX    @DPTR,A
   1995          
   1996            req.partExtAddr = partExtAddr;
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine13 & 0xFFFF
   1997            status = APSME_RequestKeyReq( &req );
   1998          
   1999            return status;
   \                     ??CrossCallReturnLabel_147:
   \   00001E   12....       LCALL   `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000021   7404         MOV     A,#0x4
   \   000023   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   2000          }
   2001          
   2002          #if ( ZG_BUILD_JOINING_TYPE )
   2003          /******************************************************************************
   2004           * @fn          ZDSecMgrSetupPartner
   2005           *
   2006           * @brief       Setup for application key partner.
   2007           *
   2008           * @param       partNwkAddr - [in] partner network address
   2009           *
   2010           * @return      ZStatus_t
   2011           */
   2012          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   2013          {
   2014            AddrMgrEntry_t entry;
   2015            ZStatus_t      status;
   2016          
   2017            status = ZFailure;
   2018          
   2019            // update the address manager
   2020            entry.user    = ADDRMGR_USER_SECURITY;
   2021            entry.nwkAddr = partNwkAddr;
   2022            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   2023          
   2024            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   2025            {
   2026              status = ZSuccess;
   2027          
   2028              // check for address discovery
   2029              if ( partNwkAddr == INVALID_NODE_ADDR )
   2030              {
   2031                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   2032              }
   2033              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   2034              {
   2035                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   2036              }
   2037            }
   2038          
   2039            return status;
   2040          }
   2041          #endif // ( ZG_BUILD_JOINING_TYPE )
   2042          
   2043          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2044          /******************************************************************************
   2045           * @fn          ZDSecMgrAppKeyTypeSet
   2046           *
   2047           * @brief       Set application key type.
   2048           *
   2049           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   2050           *                                                   KEY_TYPE_APP_LINK@3
   2051           *
   2052           * @return      ZStatus_t
   2053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2054          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   \                     ZDSecMgrAppKeyTypeSet:
   2055          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2056            if ( keyType == KEY_TYPE_APP_LINK )
   \   000006   7403         MOV     A,#0x3
   \   000008   68           XRL     A,R0
   \   000009   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   00000C   7004         JNZ     ??ZDSecMgrAppKeyTypeSet_0
   2057            {
   2058              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   \   00000E   7403         MOV     A,#0x3
   \   000010   8002         SJMP    ??ZDSecMgrAppKeyTypeSet_1
   2059            }
   2060            else
   2061            {
   2062              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   \                     ??ZDSecMgrAppKeyTypeSet_0:
   \   000012   7402         MOV     A,#0x2
   2063            }
   \                     ??ZDSecMgrAppKeyTypeSet_1:
   \   000014   02....       LJMP    ?Subroutine9 & 0xFFFF
   2064          
   2065            return ZSuccess;
   2066          }
   2067          #endif
   2068          
   2069          /******************************************************************************
   2070           * ZigBee Device Security Manager - Stub Implementations
   2071           */
   2072          
   2073          
   2074          /******************************************************************************
   2075           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   2076           *
   2077           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   2078           *
   2079           * @param       extAddr - [in] EXT address
   2080           * @param       data    - [in] APSME_LinkKeyData_t
   2081           *
   2082           * @return      ZStatus_t
   2083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2084          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   2085          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2086            ZStatus_t status;
   2087            ZDSecMgrEntry_t* entry;
   2088            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2089            uint16 Index;
   2090          
   2091            // lookup entry index for specified EXT address
   2092            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP100_8
   \   000013   88..         MOV     ?V0,R0
   \   000015   89..         MOV     ?V1,R1
   \   000017   78..         MOV     R0,#?V0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP102_8
   \   000021   12....       LCALL   `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
   \   000029   E9           MOV     A,R1
   \   00002A   F5..         MOV     ?V0,A
   2093          
   2094            if ( status == ZSuccess )
   \   00002C   6003         JZ      $+5
   \   00002E   02....       LJMP    ??CrossCallReturnLabel_163 & 0xFFFF
   2095            {
   2096              // point to NV item
   2097              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E0           MOVX    A,@DPTR
   \   000037   2401         ADD     A,#0x1
   \   000039   F8           MOV     R0,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   3402         ADDC    A,#0x2
   \   00003E   F9           MOV     R1,A
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   2098          
   2099              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \                     ??CrossCallReturnLabel_129:
   \   00004D                ; Setup parameters for call to function osal_mem_alloc
   \   00004D   7A18         MOV     R2,#0x18
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000054   8A..         MOV     ?V2,R2
   \   000056   8B..         MOV     ?V3,R3
   2100          
   2101              if (pApsLinkKey != NULL)
   \   000058   EA           MOV     A,R2
   \   000059   45..         ORL     A,?V3
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??CrossCallReturnLabel_163 & 0xFFFF
   2102              {
   2103                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2104                osal_nv_read( entry->keyNvId, 0,
   2105                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000060                ; Setup parameters for call to function osal_nv_read
   \   000060   78..         MOV     R0,#?V2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   75..18       MOV     ?V4,#0x18
   \   000068   75..00       MOV     ?V5,#0x0
   \   00006B   78..         MOV     R0,#?V4
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7C00         MOV     R4,#0x0
   \   000072   7D00         MOV     R5,#0x0
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00007C   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007F   7404         MOV     A,#0x4
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   2106          
   2107                // set new values of the key
   2108                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   000084                ; Setup parameters for call to function osal_memcpy
   \   000084   8E..         MOV     ?V4,R6
   \   000086   8F..         MOV     ?V5,R7
   \   000088   75..00       MOV     ?V6,#0x0
   \   00008B   78..         MOV     R0,#?V4
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000090   7C10         MOV     R4,#0x10
   \   000092   7D00         MOV     R5,#0x0
   \   000094   AA..         MOV     R2,?V2
   \   000096   AB..         MOV     R3,?V3
   \   000098   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009B   7403         MOV     A,#0x3
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   2109                pApsLinkKey->rxFrmCntr = 0;
   \   0000A0   E5..         MOV     A,?V2
   \   0000A2   2414         ADD     A,#0x14
   \   0000A4   12....       LCALL   ?Subroutine11 & 0xFFFF
   2110                pApsLinkKey->txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_164:
   \   0000A7   E5..         MOV     A,?V2
   \   0000A9   2410         ADD     A,#0x10
   \   0000AB   12....       LCALL   ?Subroutine11 & 0xFFFF
   2111          
   2112                osal_nv_write( entry->keyNvId, 0,
   2113                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \                     ??CrossCallReturnLabel_165:
   \   0000AE                ; Setup parameters for call to function osal_nv_write
   \   0000AE   78..         MOV     R0,#?V2
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   75..18       MOV     ?V4,#0x18
   \   0000B6   75..00       MOV     ?V5,#0x0
   \   0000B9   78..         MOV     R0,#?V4
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   7C00         MOV     R4,#0x0
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7404         MOV     A,#0x4
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000CA   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000CD   7404         MOV     A,#0x4
   \   0000CF   12....       LCALL   ?DEALLOC_XSTACK8
   2114          
   2115                // clear copy of key in RAM
   2116                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   0000D2                ; Setup parameters for call to function osal_memset
   \   0000D2   7C18         MOV     R4,#0x18
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   7900         MOV     R1,#0x0
   \   0000D8   AA..         MOV     R2,?V2
   \   0000DA   AB..         MOV     R3,?V3
   \   0000DC   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2117          
   2118                osal_mem_free(pApsLinkKey);
   \   0000DF                ; Setup parameters for call to function osal_mem_free
   \   0000DF   AA..         MOV     R2,?V2
   \   0000E1   AB..         MOV     R3,?V3
   \   0000E3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \   0000EC   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000EF   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000F2   E8           MOV     A,R0
   \   0000F3   75F009       MOV     B,#0x9
   \   0000F6   A4           MUL     AB
   \   0000F7   F8           MOV     R0,A
   \   0000F8   AAF0         MOV     R2,B
   \   0000FA   75F009       MOV     B,#0x9
   \   0000FD   E9           MOV     A,R1
   \   0000FE   A4           MUL     AB
   \   0000FF   2A           ADD     A,R2
   \   000100   F9           MOV     R1,A
   \   000101   74..         MOV     A,#ApsLinkKeyFrmCntr & 0xff
   \   000103   28           ADD     A,R0
   \   000104   FA           MOV     R2,A
   \   000105   74..         MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   000107   39           ADDC    A,R1
   \   000108   FB           MOV     R3,A
   \   000109   EA           MOV     A,R2
   \   00010A   24F7         ADD     A,#-0x9
   \   00010C   F582         MOV     DPL,A
   \   00010E   EB           MOV     A,R3
   \   00010F   34ED         ADDC    A,#-0x13
   \   000111   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   2119          
   2120                // set initial values for counters in RAM
   2121                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   2122                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_162:
   \   000114   EA           MOV     A,R2
   \   000115   24FB         ADD     A,#-0x5
   \   000117   F582         MOV     DPL,A
   \   000119   EB           MOV     A,R3
   \   00011A   34ED         ADDC    A,#-0x13
   \   00011C   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   2123              }
   2124            }
   2125          
   2126            return status;
   \                     ??CrossCallReturnLabel_163:
   \   00011F   A9..         MOV     R1,?V0
   \   000121   7404         MOV     A,#0x4
   \   000123                REQUIRE ?Subroutine6
   \   000123                ; // Fall through to label ?Subroutine6
   2127          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V3
   \   000005                REQUIRE ??Subroutine62_0
   \   000005                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine63_0
   \   000002                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
   2128          
   2129          /******************************************************************************
   2130           * @fn          ZDSecMgrAuthenticationSet
   2131           *
   2132           * @brief       Mark the specific device as authenticated or not
   2133           *
   2134           * @param       extAddr - [in] EXT address
   2135           * @param       option  - [in] authenticated or not
   2136           *
   2137           * @return      ZStatus_t
   2138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2139          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   2140          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2141            ZStatus_t        status;
   2142            ZDSecMgrEntry_t* entry;
   2143          
   2144          
   2145            // lookup entry index for specified EXT address
   2146            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000C                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000C   AC..         MOV     R4,?XSP + 0
   \   00000E   AD..         MOV     R5,?XSP + 1
   \   000010   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000013   E9           MOV     A,R1
   \   000014   F9           MOV     R1,A
   2147          
   2148            if ( status == ZSuccess )
   \   000015   7005         JNZ     ??ZDSecMgrAuthenticationSet_0
   2149            {
   2150              entry->authenticateOption = option;
   \   000017   12....       LCALL   ?Subroutine29 & 0xFFFF
   2151            }
   \                     ??CrossCallReturnLabel_29:
   \   00001A   EE           MOV     A,R6
   \   00001B   F0           MOVX    @DPTR,A
   2152          
   2153            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   00001C   02....       LJMP    ?Subroutine7 & 0xFFFF
   2154          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET
   2155          
   2156          /******************************************************************************
   2157           * @fn          ZDSecMgrAuthenticationCheck
   2158           *
   2159           * @brief       Check if the specific device has been authenticated or not
   2160           *              For non-trust center device, always return TRUE
   2161           *
   2162           * @param       shortAddr - [in] short address
   2163           *
   2164           * @return      TRUE @ authenticated with CBKE
   2165           *              FALSE @ not authenticated
   2166           */
   2167          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2168          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   2169          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2170          #if defined (TC_LINKKEY_JOIN)
   2171          
   2172            ZDSecMgrEntry_t* entry;
   2173            uint8 extAddr[Z_EXTADDR_LEN];
   2174          
   2175            // If the local device is not the trust center, always return TRUE
   2176            APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   7404         MOV     A,#0x4
   \   000010   12....       LCALL   ?XSTACK_DISP102_8
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   79AB         MOV     R1,#-0x55
   \   000019   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   2177            if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001F   8A..         MOV     ?V0,R2
   \   000021   8B..         MOV     ?V1,R3
   \   000023   AC..         MOV     R4,?V0
   \   000025   AD..         MOV     R5,?V1
   \   000027                ; Setup parameters for call to function sAddrExtCmp
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?XSTACK_DISP101_8
   \   00002C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV     A,R1
   \   000030   603B         JZ      ??ZDSecMgrAuthenticationCheck_0
   2178            {
   2179              return TRUE;
   2180            }
   2181            // Otherwise, check the authentication option
   2182            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   \   000032                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?XSTACK_DISP102_8
   \   000037   EE           MOV     A,R6
   \   000038   FA           MOV     R2,A
   \   000039   EF           MOV     A,R7
   \   00003A   FB           MOV     R3,A
   \   00003B   12....       LCALL   `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00003E   E9           MOV     A,R1
   \   00003F   6015         JZ      ??ZDSecMgrAuthenticationCheck_1
   2183            {
   2184              // lookup entry index for specified EXT address
   2185              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   \   000041                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000041   AC..         MOV     R4,?XSP + 0
   \   000043   AD..         MOV     R5,?XSP + 1
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?XSTACK_DISP101_8
   \   00004A   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00004D   E9           MOV     A,R1
   \   00004E   700D         JNZ     ??ZDSecMgrAuthenticationCheck_2
   2186              {
   2187                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   \   000050   12....       LCALL   ?Subroutine29 & 0xFFFF
   2188                {
   2189                  return TRUE;
   2190                }
   2191                else
   2192                {
   2193                  return FALSE;
   2194                }
   2195              }
   \                     ??CrossCallReturnLabel_30:
   \   000053   E0           MOVX    A,@DPTR
   \   000054   7017         JNZ     ??ZDSecMgrAuthenticationCheck_0
   2196              else
   2197              {
   2198                // it may have been secured with TCLK only
   2199                uint16    ami;
   2200          
   2201                // lookup address index in address manager
   2202                if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   2203                {
   2204                  return TRUE;
   2205                }
   2206              }
   2207            }
   2208            return FALSE;
   \                     ??ZDSecMgrAuthenticationCheck_1:
   \   000056   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAuthenticationCheck_3:
   \   000058   740C         MOV     A,#0xc
   \   00005A   02....       LJMP    ??Subroutine64_0 & 0xFFFF
   \                     ??ZDSecMgrAuthenticationCheck_2:
   \   00005D                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP102_8
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?XSTACK_DISP101_8
   \   000067   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00006A   E9           MOV     A,R1
   \   00006B   70E9         JNZ     ??ZDSecMgrAuthenticationCheck_1
   \                     ??ZDSecMgrAuthenticationCheck_0:
   \   00006D   7901         MOV     R1,#0x1
   \   00006F   80E7         SJMP    ??ZDSecMgrAuthenticationCheck_3
   2209          
   2210          #else
   2211            (void)shortAddr;  // Intentionally unreferenced parameter
   2212          
   2213            // For non AMI/SE Profile, perform no check and always return TRUE.
   2214            return TRUE;
   2215          
   2216          #endif // TC_LINKKEY_JOIN
   2217          }
   2218          
   2219          /******************************************************************************
   2220           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   2221           *
   2222           * @brief       Get Key NV ID for specified NWK address.
   2223           *
   2224           * @param       extAddr - [in] EXT address
   2225           * @param       keyNvId - [out] NV ID
   2226           *
   2227           * @return      ZStatus_t
   2228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2229          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   2230          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2231            ZStatus_t status;
   2232            ZDSecMgrEntry_t* entry;
   2233          
   2234            // lookup entry index for specified NWK address
   2235            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000015   E9           MOV     A,R1
   \   000016   F9           MOV     R1,A
   2236          
   2237            if ( status == ZSuccess )
   \   000017   7013         JNZ     ??APSME_LinkKeyNVIdGet_0
   2238            {
   2239              // return the index to the NV table
   2240              *pKeyNvId = entry->keyNvId;
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   12....       LCALL   ?Subroutine23 & 0xFFFF
   2241            }
   \                     ??CrossCallReturnLabel_112:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   EA           MOV     A,R2
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   EB           MOV     A,R3
   \   00002A   8007         SJMP    ??APSME_LinkKeyNVIdGet_1
   2242            else
   2243            {
   2244              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   000033   F0           MOVX    @DPTR,A
   2245            }
   2246          
   2247            return status;
   \   000034   02....       LJMP    ?Subroutine7 & 0xFFFF
   2248          }
   2249          
   2250          /******************************************************************************
   2251           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   2252           *
   2253           * @brief       Verifies if Link Key in NV has been set.
   2254           *
   2255           * @param       extAddr - [in] EXT address
   2256           *
   2257           * @return      TRUE - Link Key has been established
   2258           *              FALSE - Link Key in NV has default value.
   2259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2260          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   2261          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2262            APSME_LinkKeyData_t *pKeyData;
   2263            uint16 apsLinkKeyNvId;
   2264            uint8 nullKey[SEC_KEY_LEN];
   2265            uint8 status = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2266          
   2267            // initialize default vealue to compare to
   2268            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000011                ; Setup parameters for call to function osal_memset
   \   000011   7C10         MOV     R4,#0x10
   \   000013   7D00         MOV     R5,#0x0
   \   000015   7900         MOV     R1,#0x0
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP101_8
   \   00001C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2269          
   2270            // check for APS link NV ID
   2271            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001F                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001F   AC..         MOV     R4,?XSP + 0
   \   000021   AD..         MOV     R5,?XSP + 1
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   2272          
   2273            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00002D   607A         JZ      ??APSME_IsLinkKeyValid_0
   2274            {
   2275              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   7A18         MOV     R2,#0x18
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000036   8A..         MOV     ?V2,R2
   \   000038   8B..         MOV     ?V3,R3
   2276          
   2277              if (pKeyData != NULL)
   \   00003A   EA           MOV     A,R2
   \   00003B   45..         ORL     A,?V3
   \   00003D   606A         JZ      ??APSME_IsLinkKeyValid_0
   2278              {
   2279                // retrieve key from NV
   2280                if ( osal_nv_read( apsLinkKeyNvId, 0,
   2281                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   00003F                ; Setup parameters for call to function osal_nv_read
   \   00003F   78..         MOV     R0,#?V2
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..18       MOV     ?V4,#0x18
   \   000047   75..00       MOV     ?V5,#0x0
   \   00004A   78..         MOV     R0,#?V4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV     R4,#0x0
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00005B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \   000063   E9           MOV     A,R1
   \   000064   702F         JNZ     ??APSME_IsLinkKeyValid_1
   2282                {
   2283                  // if stored key is different than default value, then a key has been established
   2284                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   000066                ; Setup parameters for call to function osal_memcmp
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?XSTACK_DISP100_8
   \   00006B   88..         MOV     ?V4,R0
   \   00006D   89..         MOV     ?V5,R1
   \   00006F   75..00       MOV     ?V6,#0x0
   \   000072   78..         MOV     R0,#?V4
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000077   7C10         MOV     R4,#0x10
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   85..82       MOV     DPL,?V2
   \   00007E   85..83       MOV     DPH,?V3
   \   000081   A982         MOV     R1,DPL
   \   000083   AA83         MOV     R2,DPH
   \   000085   7B00         MOV     R3,#0x0
   \   000087   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00008A   7403         MOV     A,#0x3
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   E9           MOV     A,R1
   \   000090   7003         JNZ     ??APSME_IsLinkKeyValid_1
   2285                  {
   2286                    status = TRUE;
   \   000092   75..01       MOV     ?V0,#0x1
   2287                  }
   2288                }
   2289          
   2290                // clear copy of key in RAM
   2291                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_1:
   \   000095                ; Setup parameters for call to function osal_memset
   \   000095   7C18         MOV     R4,#0x18
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7900         MOV     R1,#0x0
   \   00009B   AA..         MOV     R2,?V2
   \   00009D   AB..         MOV     R3,?V3
   \   00009F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2292          
   2293                osal_mem_free(pKeyData);
   \   0000A2                ; Setup parameters for call to function osal_mem_free
   \   0000A2   AA..         MOV     R2,?V2
   \   0000A4   AB..         MOV     R3,?V3
   \   0000A6   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2294              }
   2295            }
   2296          
   2297            return status;
   \                     ??APSME_IsLinkKeyValid_0:
   \   0000A9   A9..         MOV     R1,?V0
   \   0000AB   7412         MOV     A,#0x12
   \   0000AD   02....       LJMP    ?Subroutine6 & 0xFFFF
   2298          }
   2299          
   2300          /******************************************************************************
   2301           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   2302           *
   2303           * @brief       Verify and process key transportation to child.
   2304           *
   2305           * @param       ind - [in] APSME_TransportKeyInd_t
   2306           *
   2307           * @return      uint8 - success(TRUE:FALSE)
   2308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2309          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   2310          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2311            // verify from Trust Center
   2312            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00000C   7027         JNZ     ??APSME_KeyFwdToChild_0
   2313            {
   2314              // check for initial NWK key
   2315              if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   2316                   ( ind->keyType == 6            ) )
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   7401         MOV     A,#0x1
   \   000018   68           XRL     A,R0
   \   000019   6005         JZ      ??APSME_KeyFwdToChild_1
   \   00001B   7406         MOV     A,#0x6
   \   00001D   68           XRL     A,R0
   \   00001E   7011         JNZ     ??APSME_KeyFwdToChild_2
   2317              {
   2318                // set association status to authenticated
   2319                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   000020                ; Setup parameters for call to function AssocGetWithExt
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   2320              }
   \                     ??CrossCallReturnLabel_109:
   \   00002B   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00002E                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002E   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2321          
   2322              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   000031   7901         MOV     R1,#0x1
   \   000033   8002         SJMP    ??APSME_KeyFwdToChild_3
   2323            }
   2324          
   2325            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000035   7900         MOV     R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   000037   02....       LJMP    ??Subroutine65_0 & 0xFFFF
   2326          }
   2327          
   2328          /******************************************************************************
   2329           * @fn          ZDSecMgrAddLinkKey
   2330           *
   2331           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   2332           *              as authenticated in the authenticateOption. Note that this function
   2333           *              is hardwared to CBKE right now.
   2334           *
   2335           * @param       shortAddr - short address of the partner device
   2336           * @param       extAddr - extended address of the partner device
   2337           * @param       key - link key
   2338           *
   2339           * @return      ZStatus_t
   2340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2341          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   2342          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2343            uint16           ami;
   2344            ZDSecMgrEntry_t* entry;
   2345          
   2346            /* Store the device address in the addr manager */
   2347            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP100_8
   \   000013   88..         MOV     ?V0,R0
   \   000015   89..         MOV     ?V1,R1
   \   000017   78..         MOV     R0,#?V0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   6004         JZ      ??ZDSecMgrAddLinkKey_0
   2348            {
   2349              /* Adding to Addr Manager fails */
   2350              return ZFailure;
   \   000027   7901         MOV     R1,#0x1
   \   000029   8043         SJMP    ??ZDSecMgrAddLinkKey_1
   2351            }
   2352          
   2353            /* Lookup entry using specified address index */
   2354            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   00002B                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   00002B   AC..         MOV     R4,?XSP + 0
   \   00002D   AD..         MOV     R5,?XSP + 1
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000037   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   2355          
   2356            // If no existing entry, create one
   2357            if ( entry == NULL )
   \   00003A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00003D   7015         JNZ     ??CrossCallReturnLabel_130
   2358            {
   2359              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   00003F                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   12....       LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   000046   E9           MOV     A,R1
   \   000047   702A         JNZ     ??ZDSecMgrAddLinkKey_2
   2360              {
   2361                entry->ami = ami;
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?Subroutine25 & 0xFFFF
   2362              }
   \                     ??CrossCallReturnLabel_22:
   \   000051   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   2363              else
   2364              {
   2365                /* Security Manager full */
   2366                return ZBufferFull;
   2367              }
   2368            }
   2369            // Write the link key
   2370            APSME_LinkKeySet( extAddr, key );
   \                     ??CrossCallReturnLabel_130:
   \   000054                ; Setup parameters for call to function APSME_LinkKeySet
   \   000054   740E         MOV     A,#0xe
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   2371          
   2372          #if defined (TC_LINKKEY_JOIN)
   2373            // Mark the device as authenticated.
   2374            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   \   000063                ; Setup parameters for call to function ZDSecMgrAuthenticationSet
   \   000063   7901         MOV     R1,#0x1
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??ZDSecMgrAuthenticationSet::?relay`; Banked call to: ZDSecMgrAuthenticationSet
   2375          #endif
   2376          
   2377          #if defined NV_RESTORE
   2378            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   2379          #endif
   2380          
   2381            return ZSuccess;
   \   00006C   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   00006E   7404         MOV     A,#0x4
   \   000070   02....       LJMP    ??Subroutine64_0 & 0xFFFF
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000073   7911         MOV     R1,#0x11
   \   000075   80F7         SJMP    ??ZDSecMgrAddLinkKey_1
   2382          }
   2383          
   2384          /******************************************************************************
   2385           * @fn          ZDSecMgrInitNV
   2386           *
   2387           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   2388           *
   2389           * @param       none
   2390           *
   2391           * @return      uint8 - <osal_nv_item_init> return codes
   2392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2393          uint8 ZDSecMgrInitNV(void)
   \                     ZDSecMgrInitNV:
   2394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2395          
   2396            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   2397                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C11         MOV     R4,#0x11
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7A4C         MOV     R2,#0x4c
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   FE           MOV     R6,A
   2398          
   2399            // If the item does not already exist, set all values to 0
   2400            if (rtrn != SUCCESS)
   \   000026   6021         JZ      ??ZDSecMgrInitNV_0
   2401            {
   2402              nvDeviceListHdr_t hdr;
   2403              hdr.numRecs = 0;
   \   000028   12....       LCALL   ?Subroutine15 & 0xFFFF
   2404              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   2405            }
   \                     ??CrossCallReturnLabel_2:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..02       MOV     ?V0,#0x2
   \   000031   75..00       MOV     ?V1,#0x0
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7C00         MOV     R4,#0x0
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7A4C         MOV     R2,#0x4c
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000044   7404         MOV     A,#0x4
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   2406          
   2407            rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
   2408                                       zgApsTrustCenterAddr );
   2409          
   2410            return rtrn;
   \                     ??ZDSecMgrInitNV_0:
   \   000049                ; Setup parameters for call to function osal_nv_item_init
   \   000049   75....       MOV     ?V0,#zgApsTrustCenterAddr & 0xff
   \   00004C   75....       MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   7C08         MOV     R4,#0x8
   \   000056   7D00         MOV     R5,#0x0
   \   000058   7A71         MOV     R2,#0x71
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00005F   7402         MOV     A,#0x2
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   \   000064   E9           MOV     A,R1
   \   000065   4E           ORL     A,R6
   \   000066   F9           MOV     R1,A
   \   000067   7402         MOV     A,#0x2
   \   000069   80..         SJMP    ??Subroutine64_0
   2411          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   A8..         MOV     R0,?XSP + 0
   \   00000C   A9..         MOV     R1,?XSP + 1
   \   00000E   88..         MOV     ?V0,R0
   \   000010   89..         MOV     ?V1,R1
   \   000012   78..         MOV     R0,#?V0
   \   000014   22           RET
   2412          
   2413          #if defined ( NV_RESTORE )
   2414          /*********************************************************************
   2415           * @fn      ZDSecMgrWriteNV()
   2416           *
   2417           * @brief   Save off the APS link key list to NV
   2418           *
   2419           * @param   none
   2420           *
   2421           * @return  none
   2422           */
   2423          static void ZDSecMgrWriteNV( void )
   2424          {
   2425            uint16 i;
   2426            nvDeviceListHdr_t hdr;
   2427          
   2428            hdr.numRecs = 0;
   2429          
   2430            if (ZDSecMgrEntries != NULL)
   2431            {
   2432              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   2433              {
   2434                // Save off the record
   2435                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2436                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2437                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   2438          
   2439                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   2440                {
   2441                  hdr.numRecs++;
   2442                }
   2443              }
   2444            }
   2445          
   2446            // Save off the header
   2447            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   2448          }
   2449          #endif // NV_RESTORE
   2450          
   2451          #if defined ( NV_RESTORE )
   2452          /******************************************************************************
   2453           * @fn          ZDSecMgrRestoreFromNV
   2454           *
   2455           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   2456           *              the key data itself as they remain in NV until they are used.
   2457           *              Only list data is restored.
   2458           *              Restore zgTrustCenterAdress from NV.
   2459           *
   2460           * @param       none
   2461           *
   2462           * @return      None.
   2463           */
   2464          static void ZDSecMgrRestoreFromNV( void )
   2465          {
   2466            nvDeviceListHdr_t hdr;
   2467            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2468          
   2469            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   2470                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   2471            {
   2472              uint8 x;
   2473          
   2474              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   2475          
   2476              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   2477              {
   2478                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   2479                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   2480                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   2481                {
   2482                  // update data only for valid entries
   2483                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   2484                  {
   2485                    if (pApsLinkKey != NULL)
   2486                    {
   2487                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2488                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   2489                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   2490          
   2491                      // set new values for the counter
   2492                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   2493          
   2494                      // restore values for counters in RAM
   2495                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   2496                                                      pApsLinkKey->txFrmCntr;
   2497          
   2498                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   2499                                                      pApsLinkKey->rxFrmCntr;
   2500          
   2501                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   2502                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   2503          
   2504                      // clear copy of key in RAM
   2505                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   2506                    }
   2507                  }
   2508                }
   2509              }
   2510          
   2511              if (pApsLinkKey != NULL)
   2512              {
   2513                osal_mem_free(pApsLinkKey);
   2514              }
   2515            }
   2516          
   2517            osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   2518          }
   2519          #endif // NV_RESTORE
   2520          
   2521          /*********************************************************************
   2522           * @fn          ZDSecMgrSetDefaultNV
   2523           *
   2524           * @brief       Write the defaults to NV for Entry table and for APS key data table
   2525           *
   2526           * @param       none
   2527           *
   2528           * @return      none
   2529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2530          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   2531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2532            uint16 i;
   2533            nvDeviceListHdr_t hdr;
   2534            ZDSecMgrEntry_t secMgrEntry;
   2535            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2536          
   2537            // Initialize the header
   2538            hdr.numRecs = 0;
   \   00000A   12....       LCALL   ?Subroutine15 & 0xFFFF
   2539          
   2540            // clear the header
   2541            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \                     ??CrossCallReturnLabel_3:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..02       MOV     ?V0,#0x2
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A4C         MOV     R2,#0x4c
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   2542          
   2543            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C05         MOV     R4,#0x5
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7900         MOV     R1,#0x0
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP101_8
   \   000036   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2544          
   2545            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000039   7E00         MOV     R6,#0x0
   \   00003B   7F00         MOV     R7,#0x0
   2546            {
   2547              // Clear the record
   2548              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2549                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2550                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   00003D                ; Setup parameters for call to function osal_nv_write
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP100_8
   \   000042   88..         MOV     ?V0,R0
   \   000044   89..         MOV     ?V1,R1
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..05       MOV     ?V0,#0x5
   \   00004E   75..00       MOV     ?V1,#0x0
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   EE           MOV     A,R6
   \   000057   F8           MOV     R0,A
   \   000058   EF           MOV     A,R7
   \   000059   F9           MOV     R1,A
   \   00005A   E8           MOV     A,R0
   \   00005B   75F005       MOV     B,#0x5
   \   00005E   A4           MUL     AB
   \   00005F   F8           MOV     R0,A
   \   000060   AAF0         MOV     R2,B
   \   000062   75F005       MOV     B,#0x5
   \   000065   E9           MOV     A,R1
   \   000066   A4           MUL     AB
   \   000067   2A           ADD     A,R2
   \   000068   F9           MOV     R1,A
   \   000069   E8           MOV     A,R0
   \   00006A   2402         ADD     A,#0x2
   \   00006C   FC           MOV     R4,A
   \   00006D   E4           CLR     A
   \   00006E   39           ADDC    A,R1
   \   00006F   FD           MOV     R5,A
   \   000070   7A4C         MOV     R2,#0x4c
   \   000072   7B00         MOV     R3,#0x0
   \   000074   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000077   7404         MOV     A,#0x4
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   2551            }
   \   00007C   0E           INC     R6
   \   00007D   EE           MOV     A,R6
   \   00007E   7001         JNZ     ??ZDSecMgrSetDefaultNV_1
   \   000080   0F           INC     R7
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   000081   C3           CLR     C
   \   000082   9403         SUBB    A,#0x3
   \   000084   EF           MOV     A,R7
   \   000085   9400         SUBB    A,#0x0
   \   000087   40B4         JC      ??ZDSecMgrSetDefaultNV_0
   2552          
   2553            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000089                ; Setup parameters for call to function osal_mem_alloc
   \   000089   7A18         MOV     R2,#0x18
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000090   8A..         MOV     ?V0,R2
   \   000092   8B..         MOV     ?V1,R3
   2554          
   2555            if (pApsLinkKey != NULL)
   \   000094   EA           MOV     A,R2
   \   000095   45..         ORL     A,?V1
   \   000097   6045         JZ      ??ZDSecMgrSetDefaultNV_2
   2556            {
   2557              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   000099                ; Setup parameters for call to function osal_memset
   \   000099   7C18         MOV     R4,#0x18
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7900         MOV     R1,#0x0
   \   00009F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2558          
   2559              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   0000A2   7E00         MOV     R6,#0x0
   \   0000A4   7F00         MOV     R7,#0x0
   2560              {
   2561                // Clear the record
   2562                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   2563                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   0000A6                ; Setup parameters for call to function osal_nv_write
   \   0000A6   78..         MOV     R0,#?V0
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   75..18       MOV     ?V2,#0x18
   \   0000AE   75..00       MOV     ?V3,#0x0
   \   0000B1   78..         MOV     R0,#?V2
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   7C00         MOV     R4,#0x0
   \   0000B8   7D00         MOV     R5,#0x0
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2401         ADD     A,#0x1
   \   0000BD   FA           MOV     R2,A
   \   0000BE   EF           MOV     A,R7
   \   0000BF   3402         ADDC    A,#0x2
   \   0000C1   FB           MOV     R3,A
   \   0000C2   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000C5   7404         MOV     A,#0x4
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   2564              }
   \   0000CA   0E           INC     R6
   \   0000CB   EE           MOV     A,R6
   \   0000CC   7001         JNZ     ??ZDSecMgrSetDefaultNV_4
   \   0000CE   0F           INC     R7
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   0000CF   C3           CLR     C
   \   0000D0   9403         SUBB    A,#0x3
   \   0000D2   EF           MOV     A,R7
   \   0000D3   9400         SUBB    A,#0x0
   \   0000D5   40CF         JC      ??ZDSecMgrSetDefaultNV_3
   2565          
   2566              osal_mem_free(pApsLinkKey);
   \   0000D7                ; Setup parameters for call to function osal_mem_free
   \   0000D7   AA..         MOV     R2,?V0
   \   0000D9   AB..         MOV     R3,?V1
   \   0000DB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2567            }
   2568          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   0000DE   7407         MOV     A,#0x7
   \   0000E0   02....       LJMP    ?Subroutine3 & 0xFFFF
   2569          
   2570          #if defined ( NV_RESTORE )
   2571          /*********************************************************************
   2572           * @fn      ZDSecMgrUpdateNV()
   2573           *
   2574           * @brief   Updates one entry of the APS link key table to NV
   2575           *
   2576           * @param   index - to the entry in security manager table
   2577           *
   2578           * @return  none
   2579           */
   2580          static void ZDSecMgrUpdateNV( uint16 index )
   2581          {
   2582            nvDeviceListHdr_t hdr;
   2583          
   2584            if (ZDSecMgrEntries != NULL)
   2585            {
   2586              // Save off the record
   2587              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2588                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   2589                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   2590            }
   2591          
   2592            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   2593            {
   2594              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   2595              {
   2596                if (hdr.numRecs > 0)
   2597                {
   2598                  hdr.numRecs--;
   2599                }
   2600              }
   2601              else
   2602              {
   2603                hdr.numRecs++;
   2604              }
   2605          
   2606              // Save off the header
   2607              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   2608            }
   2609          }
   2610          #endif // NV_RESTORE
   2611          
   2612          /******************************************************************************
   2613           * @fn          ZDSecMgrAPSRemove
   2614           *
   2615           * @brief       Remove device from network.
   2616           *
   2617           * @param       nwkAddr - device's NWK address
   2618           * @param       extAddr - device's Extended address
   2619           * @param       parentAddr - parent's NWK address
   2620           *
   2621           * @return      ZStatus_t
   2622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2623          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   2624          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2625            ZDSecMgrDevice_t device;
   2626          
   2627            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   2628                 ( extAddr == NULL )              ||
   2629                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   000009   74FE         MOV     A,#-0x2
   \   00000B   6A           XRL     A,R2
   \   00000C   7003         JNZ     ??ZDSecMgrAPSRemove_0
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   6B           XRL     A,R3
   \                     ??ZDSecMgrAPSRemove_0:
   \   000011   6016         JZ      ??ZDSecMgrAPSRemove_1
   \   000013   EC           MOV     A,R4
   \   000014   4D           ORL     A,R5
   \   000015   6012         JZ      ??ZDSecMgrAPSRemove_1
   \   000017   7408         MOV     A,#0x8
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00001F   74FE         MOV     A,#-0x2
   \   000021   68           XRL     A,R0
   \   000022   7003         JNZ     ??ZDSecMgrAPSRemove_2
   \   000024   74FF         MOV     A,#-0x1
   \   000026   69           XRL     A,R1
   \                     ??ZDSecMgrAPSRemove_2:
   \   000027   7004         JNZ     ??ZDSecMgrAPSRemove_3
   2630            {
   2631              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   000029   7901         MOV     R1,#0x1
   \   00002B   801C         SJMP    ??ZDSecMgrAPSRemove_4
   2632            }
   2633          
   2634            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00002D   12....       LCALL   ?Subroutine16 & 0xFFFF
   2635            device.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_158:
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   EC           MOV     A,R4
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   ED           MOV     A,R5
   \   000037   F0           MOVX    @DPTR,A
   2636            device.parentAddr = parentAddr;
   \   000038   7404         MOV     A,#0x4
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E8           MOV     A,R0
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E9           MOV     A,R1
   \   000041   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2637          
   2638            // remove device
   2639            ZDSecMgrDeviceRemove( &device );
   \                     ??CrossCallReturnLabel_155:
   \   000044   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2640          
   2641            return ( ZSuccess );
   \   000047   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   000049   02....       LJMP    ?Subroutine1 & 0xFFFF
   2642          }
   2643          
   2644          /******************************************************************************
   2645           * @fn          APSME_TCLinkKeyInit
   2646           *
   2647           * @brief       Initialize the NV table for preconfigured TC link key
   2648           *
   2649           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   2650           *              Trust Center Link Key is written to NV. A single tclk is used
   2651           *              by all devices joining the network.
   2652           *
   2653           * @param       setDefault - TRUE to set default values
   2654           *
   2655           * @return      none
   2656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2657          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   2658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2659            uint8             i;
   2660            APSME_TCLinkKey_t tcLinkKey;
   2661            uint8             rtrn;
   2662          
   2663            // Initialize all NV items for preconfigured TCLK
   2664            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   2665            {
   2666              // Making sure data is cleared for every key all the time
   2667              osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C20         MOV     R4,#0x20
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2668          
   2669              // Initialize first element of the table with the default TCLK
   2670              if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
   \   000017   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   7030         JNZ     ??APSME_TCLinkKeyInit_0
   2671              {
   2672                osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   00001F                ; Setup parameters for call to function osal_memset
   \   00001F   7C08         MOV     R4,#0x8
   \   000021   7D00         MOV     R5,#0x0
   \   000023   79FF         MOV     R1,#-0x1
   \   000025   AA..         MOV     R2,?XSP + 0
   \   000027   AB..         MOV     R3,?XSP + 1
   \   000029   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2673                osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   75....       MOV     ?V0,#defaultTCLinkKey & 0xff
   \   00002F   75....       MOV     ?V1,#(defaultTCLinkKey >> 8) & 0xff
   \   000032   75..80       MOV     ?V2,#-0x80
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003A   7C10         MOV     R4,#0x10
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   740B         MOV     A,#0xb
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   AA82         MOV     R2,DPL
   \   000045   AB83         MOV     R3,DPH
   \   000047   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   2674              }
   2675          
   2676              // If the item doesn't exist in NV memory, create and initialize
   2677              // it with the default value passed in, either defaultTCLK or 0
   2678              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   2679                                         sizeof(APSME_TCLinkKey_t), &tcLinkKey);
   2680          
   2681              if (rtrn == SUCCESS)
   \                     ??APSME_TCLinkKeyInit_0:
   \   00004F                ; Setup parameters for call to function osal_nv_item_init
   \   00004F   A8..         MOV     R0,?XSP + 0
   \   000051   A9..         MOV     R1,?XSP + 1
   \   000053   88..         MOV     ?V0,R0
   \   000055   89..         MOV     ?V1,R1
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7C20         MOV     R4,#0x20
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   7A01         MOV     R2,#0x1
   \   000062   7B01         MOV     R3,#0x1
   \   000064   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
   \   00006D   7074         JNZ     ??APSME_TCLinkKeyInit_1
   2682              {
   2683                // set the Frame counters to 0 to existing keys in NV
   2684                osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2685                               sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   00006F                ; Setup parameters for call to function osal_nv_read
   \   00006F   78..         MOV     R0,#?V0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   75..20       MOV     ?V0,#0x20
   \   000077   75..00       MOV     ?V1,#0x0
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   7C00         MOV     R4,#0x0
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7A01         MOV     R2,#0x1
   \   000085   7B01         MOV     R3,#0x1
   \   000087   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   2686          
   2687          #if defined ( NV_RESTORE )
   2688                if (setDefault == TRUE)
   2689                {
   2690                  // clear the value stored in NV
   2691                  tcLinkKey.txFrmCntr = 0;
   2692                }
   2693                else
   2694                {
   2695                  // increase the value stored in NV
   2696                  tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   2697                }
   2698          #else
   2699                // Clear the counters if NV_RESTORE is not enabled and this NV item
   2700                // already existed in the NV memory
   2701                tcLinkKey.txFrmCntr = 0;
   \   00008F   7418         MOV     A,#0x18
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   2702                tcLinkKey.rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_160:
   \   000097   741C         MOV     A,#0x1c
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   2703          #endif  // NV_RESTORE
   2704          
   2705                osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2706                                sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \                     ??CrossCallReturnLabel_161:
   \   00009F                ; Setup parameters for call to function osal_nv_write
   \   00009F   A8..         MOV     R0,?XSP + 0
   \   0000A1   A9..         MOV     R1,?XSP + 1
   \   0000A3   88..         MOV     ?V0,R0
   \   0000A5   89..         MOV     ?V1,R1
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   75..20       MOV     ?V0,#0x20
   \   0000AF   75..00       MOV     ?V1,#0x0
   \   0000B2   78..         MOV     R0,#?V0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   7C00         MOV     R4,#0x0
   \   0000B9   7D00         MOV     R5,#0x0
   \   0000BB   7A01         MOV     R2,#0x1
   \   0000BD   7B01         MOV     R3,#0x1
   \   0000BF   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000C2   7404         MOV     A,#0x4
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   2707          
   2708                // set initial values for counters in RAM
   2709                TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
   \   0000C7   7418         MOV     A,#0x18
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?XLOAD_R0123
   \   0000CF   90....       MOV     DPTR,#TCLinkKeyFrmCntr
   \   0000D2   12....       LCALL   ?XSTORE_R0123
   2710                TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
   \   0000D5   741C         MOV     A,#0x1c
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?XLOAD_R0123
   \   0000DD   90....       MOV     DPTR,#TCLinkKeyFrmCntr + 4
   \   0000E0   12....       LCALL   ?XSTORE_R0123
   2711              }
   2712            }
   2713          
   2714            // clear copy of key in RAM
   2715            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyInit_1:
   \   0000E3                ; Setup parameters for call to function osal_memset
   \   0000E3   7C20         MOV     R4,#0x20
   \   0000E5   7D00         MOV     R5,#0x0
   \   0000E7   7900         MOV     R1,#0x0
   \   0000E9   AA..         MOV     R2,?XSP + 0
   \   0000EB   AB..         MOV     R3,?XSP + 1
   \   0000ED   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2716          
   2717          }
   \   0000F0   7420         MOV     A,#0x20
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   7F03         MOV     R7,#0x3
   \   0000F7   02....       LJMP    ?BANKED_LEAVE_XDATA
   2718          
   2719          /******************************************************************************
   2720           * @fn          APSME_TCLinkKeySync
   2721           *
   2722           * @brief       Sync Trust Center LINK key data.
   2723           *
   2724           * @param       srcAddr - [in] srcAddr
   2725           * @param       si      - [in, out] SSP_Info_t
   2726           *
   2727           * @return      ZStatus_t
   2728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2729          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   2730          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   2731            uint8 i, selectedId = ZDSECMGR_TC_DEVICE_MAX;
   2732            ZStatus_t status = ZSecNoKey;
   \   000012   75..A1       MOV     ?V2,#-0x5f
   2733            APSME_TCLinkKey_t tcLinkKey;
   2734            uint32 *tclkRxFrmCntr;
   2735            uint16 originatorAddr = APSME_TRUSTCENTER_NWKADDR;
   \   000015   75..00       MOV     ?V4,#0x0
   \   000018   75..00       MOV     ?V5,#0x0
   2736          
   2737            // Look up the IEEE address of the trust center if it's available
   2738            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   00001B   EC           MOV     A,R4
   \   00001C   2406         ADD     A,#0x6
   \   00001E   FE           MOV     R6,A
   \   00001F   E4           CLR     A
   \   000020   35..         ADDC    A,?V1
   \   000022   FF           MOV     R7,A
   \   000023                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00002A   E9           MOV     A,R1
   \   00002B   700D         JNZ     ??APSME_TCLinkKeySync_0
   2739            {
   2740              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   00002D                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00002D   EE           MOV     A,R6
   \   00002E   FC           MOV     R4,A
   \   00002F   EF           MOV     A,R7
   \   000030   FD           MOV     R5,A
   \   000031   AA..         MOV     R2,?V6
   \   000033   AB..         MOV     R3,?V7
   \   000035   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000038   8018         SJMP    ??APSME_TCLinkKeySync_1
   2741            }
   2742            else if ( osal_ExtAddrEqual( si->extAddr, _NIB.nwkCoordExtAddress ) )
   \                     ??APSME_TCLinkKeySync_0:
   \   00003A                ; Setup parameters for call to function sAddrExtCmp
   \   00003A   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   00003C   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000045   E9           MOV     A,R1
   \   000046   600A         JZ      ??APSME_TCLinkKeySync_1
   2743            {
   2744              originatorAddr = _NIB.nwkCoordAddress;
   \   000048   90....       MOV     DPTR,#_NIB + 23
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V4,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V5,A
   2745              // in case originated not from our parent, use the default TC address
   2746            }
   2747          
   2748            // Look up the TC link key associated with the device
   2749            // or the default TC link key (extAddr is all FFs), whichever is found
   2750            for ( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   2751            {
   2752              // Read entry i of the TC link key table from NV
   2753              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2754                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \                     ??APSME_TCLinkKeySync_1:
   \   000052                ; Setup parameters for call to function osal_nv_read
   \   000052   A8..         MOV     R0,?XSP + 0
   \   000054   A9..         MOV     R1,?XSP + 1
   \   000056   88..         MOV     ?V6,R0
   \   000058   89..         MOV     ?V7,R1
   \   00005A   78..         MOV     R0,#?V6
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..20       MOV     ?V6,#0x20
   \   000062   75..00       MOV     ?V7,#0x0
   \   000065   78..         MOV     R0,#?V6
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV     R4,#0x0
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A01         MOV     R2,#0x1
   \   000070   7B01         MOV     R3,#0x1
   \   000072   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   2755          
   2756              // prefer exact match over default
   2757              if ( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   \   00007A                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   00007A   AC..         MOV     R4,?XSP + 0
   \   00007C   AD..         MOV     R5,?XSP + 1
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   000085   E9           MOV     A,R1
   \   000086   7020         JNZ     ??APSME_TCLinkKeySync_2
   2758              {
   2759                selectedId = i;
   2760                // break from the loop
   2761                break;
   2762              }
   2763              else if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   \   000088                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   000088   AA..         MOV     R2,?XSP + 0
   \   00008A   AB..         MOV     R3,?XSP + 1
   \   00008C   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   00008F   E9           MOV     A,R1
   \   000090   6067         JZ      ??APSME_TCLinkKeySync_3
   2764              {
   2765                if ( ( originatorAddr != APSME_TRUSTCENTER_NWKADDR ) && ( si->keyID == SEC_KEYID_TRANSPORT )
   2766                     && (i == 0) && ( zgUseDefaultTCLK == TRUE ) )
   \   000092   E5..         MOV     A,?V4
   \   000094   45..         ORL     A,?V5
   \   000096   6010         JZ      ??APSME_TCLinkKeySync_2
   \   000098   12....       LCALL   ?Subroutine37 & 0xFFFF
   2767                {
   2768                  //if a Key is received directly from an unusual TC,
   2769                  // don't use the first element of the table initialized with the default TCLK
   2770                  continue;
   2771                }
   2772                if ( selectedId == ZDSECMGR_TC_DEVICE_MAX )
   2773                {
   2774                  selectedId = i;
   2775                }
   2776              }
   2777            }
   \                     ??CrossCallReturnLabel_47:
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6402         XRL     A,#0x2
   \   00009E   7008         JNZ     ??APSME_TCLinkKeySync_2
   \   0000A0   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6401         XRL     A,#0x1
   \   0000A6   6051         JZ      ??APSME_TCLinkKeySync_3
   2778          
   2779            if ( selectedId < ZDSECMGR_TC_DEVICE_MAX )
   2780            {
   2781               // Only for UNIQUE keys, verify that the incoming frame counter is valid
   2782              if ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY )
   \                     ??APSME_TCLinkKeySync_2:
   \   0000A8   E5..         MOV     A,?V0
   \   0000AA   240F         ADD     A,#0xf
   \   0000AC   F8           MOV     R0,A
   \   0000AD   E4           CLR     A
   \   0000AE   35..         ADDC    A,?V1
   \   0000B0   F9           MOV     R1,A
   \   0000B1   E8           MOV     A,R0
   \   0000B2   FA           MOV     R2,A
   \   0000B3   E9           MOV     A,R1
   \   0000B4   FB           MOV     R3,A
   \   0000B5   90....       MOV     DPTR,#zgApsLinkKeyType
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   7032         JNZ     ??APSME_TCLinkKeySync_4
   2783              {
   2784                tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
   2785          
   2786                if ( si->frmCntr >= *tclkRxFrmCntr )
   \   0000BB   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000BE   78..         MOV     R0,#?V0
   \   0000C0   12....       LCALL   ?L_MOV_X
   \   0000C3   90....       MOV     DPTR,#TCLinkKeyFrmCntr + 4
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?UL_GE_X
   \   0000CB   501B         JNC     ??APSME_TCLinkKeySync_5
   2787                {
   2788                  // set the keyNvId to use
   2789                  si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \   0000CD   8A82         MOV     DPL,R2
   \   0000CF   8B83         MOV     DPH,R3
   \   0000D1   7401         MOV     A,#0x1
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   F0           MOVX    @DPTR,A
   2790          
   2791                  // update the rx frame counter
   2792                  *tclkRxFrmCntr = si->frmCntr + 1;
   \   0000D6   90....       MOV     DPTR,#__Constant_1
   \   0000D9   78..         MOV     R0,#?V0
   \   0000DB   12....       LCALL   ?L_ADD_X
   \   0000DE   90....       MOV     DPTR,#TCLinkKeyFrmCntr + 4
   \   0000E1   78..         MOV     R0,#?V0
   \   0000E3   12....       LCALL   ?L_MOV_TO_X
   2793          
   2794                  status = ZSuccess;
   \   0000E6   800E         SJMP    ??APSME_TCLinkKeySync_6
   2795                }
   2796                else
   2797                {
   2798                  status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_5:
   \   0000E8   75..A2       MOV     ?V2,#-0x5e
   \   0000EB   800C         SJMP    ??APSME_TCLinkKeySync_3
   2799                }
   2800              }
   2801              else
   2802              {
   2803                // set the keyNvId to use
   2804                si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \                     ??APSME_TCLinkKeySync_4:
   \   0000ED   8A82         MOV     DPL,R2
   \   0000EF   8B83         MOV     DPH,R3
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   F0           MOVX    @DPTR,A
   2805          
   2806                status = ZSuccess;
   \                     ??APSME_TCLinkKeySync_6:
   \   0000F6   75..00       MOV     ?V2,#0x0
   2807              }
   2808            }
   2809          
   2810            // clear copy of key in RAM
   2811            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeySync_3:
   \   0000F9                ; Setup parameters for call to function osal_memset
   \   0000F9   7C20         MOV     R4,#0x20
   \   0000FB   7D00         MOV     R5,#0x0
   \   0000FD   7900         MOV     R1,#0x0
   \   0000FF   AA..         MOV     R2,?XSP + 0
   \   000101   AB..         MOV     R3,?XSP + 1
   \   000103   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2812          
   2813            return status;
   \   000106   A9..         MOV     R1,?V2
   \   000108   7420         MOV     A,#0x20
   \   00010A   02....       LJMP    ?Subroutine5 & 0xFFFF
   2814          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E5..         MOV     A,?V0
   \   000002   2412         ADD     A,#0x12
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV     A,?V0
   \   000002   240E         ADD     A,#0xe
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
   2815          
   2816          /******************************************************************************
   2817           * @fn          APSME_TCLinkKeyLoad
   2818           *
   2819           * @brief       Load Trust Center LINK key data.
   2820           *
   2821           * @param       dstAddr - [in] dstAddr
   2822           * @param       si      - [in, out] SSP_Info_t
   2823           *
   2824           * @return      ZStatus_t
   2825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   2827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 45
   \   000005   74D3         MOV     A,#-0x2d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0,R4
   \   00000C   8D..         MOV     ?V1,R5
   2828            uint8 i;
   2829            ZStatus_t status = ZSecNoKey;
   \   00000E   7EA1         MOV     R6,#-0x5f
   2830            APSME_TCLinkKey_t tcLinkKey;
   2831            AddrMgrEntry_t addrEntry;
   2832            uint32 *tclkTxFrmCntr;
   2833            uint8 extAddrFound;
   2834            uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
   2835          
   2836            // Look up the ami of the srcAddr if available
   2837            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   2838            addrEntry.nwkAddr = dstAddr;
   \   000018   04           INC     A
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine22 & 0xFFFF
   2839          
   2840            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   \                     ??CrossCallReturnLabel_20:
   \   00001F   EC           MOV     A,R4
   \   000020   2406         ADD     A,#0x6
   \   000022   F5..         MOV     ?V2,A
   \   000024   E4           CLR     A
   \   000025   35..         ADDC    A,?V1
   \   000027   F5..         MOV     ?V3,A
   \   000029                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000029   AA..         MOV     R2,?V2
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00002F   E9           MOV     A,R1
   \   000030   FF           MOV     R7,A
   2841          
   2842            // Look up the TC link key associated with the device
   2843            // or the master TC link key (ami = 0xFFFF), whichever is found
   2844            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   2845            {
   2846              // Read entry i of the TC link key table from NV
   2847              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2848                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000031                ; Setup parameters for call to function osal_nv_read
   \   000031   740D         MOV     A,#0xd
   \   000033   12....       LCALL   ?XSTACK_DISP100_8
   \   000036   88..         MOV     ?V4,R0
   \   000038   89..         MOV     ?V5,R1
   \   00003A   78..         MOV     R0,#?V4
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   75..20       MOV     ?V4,#0x20
   \   000042   75..00       MOV     ?V5,#0x0
   \   000045   78..         MOV     R0,#?V4
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7C00         MOV     R4,#0x0
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7A01         MOV     R2,#0x1
   \   000050   7B01         MOV     R3,#0x1
   \   000052   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   2849          
   2850              if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   \   00005A   EF           MOV     A,R7
   \   00005B   600F         JZ      ??APSME_TCLinkKeyLoad_0
   \   00005D                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   00005D   740D         MOV     A,#0xd
   \   00005F   12....       LCALL   ?XSTACK_DISP102_8
   \   000062   AA..         MOV     R2,?V2
   \   000064   AB..         MOV     R3,?V3
   \   000066   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   000069   E9           MOV     A,R1
   \   00006A   7012         JNZ     ??APSME_TCLinkKeyLoad_1
   2851              {
   2852                status = ZSuccess;
   2853          
   2854                break; // break from the loop
   2855              }
   2856          
   2857              if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   \                     ??APSME_TCLinkKeyLoad_0:
   \   00006C                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   00006C   740D         MOV     A,#0xd
   \   00006E   12....       LCALL   ?XSTACK_DISP101_8
   \   000071   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   000074   E9           MOV     A,R1
   \   000075   603C         JZ      ??APSME_TCLinkKeyLoad_2
   2858              {
   2859                if ( !extAddrFound && ( !APSME_IsDistributedSecurity() ) )
   \   000077   EF           MOV     A,R7
   \   000078   7004         JNZ     ??APSME_TCLinkKeyLoad_1
   \   00007A                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00007A   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00007D   E9           MOV     A,R1
   2860                {
   2861                  status = ZSuccess;
   2862          
   2863                  break; // break from the loop
   2864                }
   2865          
   2866                // Remember the last default TCLK index
   2867                defaultTCLKIdx = i;
   2868              }
   2869            }
   2870          
   2871            if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
   2872            {
   2873              // Exact match was not found; use the last default TC Link Key
   2874              i = defaultTCLKIdx;
   2875              status = ZSuccess;
   2876            }
   2877          
   2878            if ( status == ZSuccess )
   \                     ??APSME_TCLinkKeyLoad_1:
   \   00007E   7E00         MOV     R6,#0x0
   2879            {
   2880              tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
   2881          
   2882              // set the keyNvId to use
   2883              si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
   \   000080   E5..         MOV     A,?V0
   \   000082   240F         ADD     A,#0xf
   \   000084   F582         MOV     DPL,A
   \   000086   E4           CLR     A
   \   000087   35..         ADDC    A,?V1
   \   000089   F583         MOV     DPH,A
   \   00008B   7401         MOV     A,#0x1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   2884          
   2885              // update link key related fields
   2886              si->keyID   = SEC_KEYID_LINK;
   \   000090   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
   2887              si->frmCntr = *tclkTxFrmCntr;
   \   000095   90....       MOV     DPTR,#TCLinkKeyFrmCntr
   \   000098   12....       LCALL   ?XLOAD_R0123
   \   00009B   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00009E   12....       LCALL   ?XSTORE_R0123
   2888          
   2889              // update outgoing frame counter
   2890              (*tclkTxFrmCntr)++;
   \   0000A1   90....       MOV     DPTR,#__Constant_1
   \   0000A4   78..         MOV     R0,#?V0
   \   0000A6   12....       LCALL   ?L_MOV_X
   \   0000A9   90....       MOV     DPTR,#TCLinkKeyFrmCntr
   \   0000AC   78..         MOV     R0,#?V0
   \   0000AE   12....       LCALL   ?L_ADD_TO_X
   \   0000B1   8013         SJMP    ??APSME_TCLinkKeyLoad_3
   \                     ??APSME_TCLinkKeyLoad_2:
   \   0000B3                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   2891          
   2892          #if defined ( NV_RESTORE )
   2893              // write periodically to NV
   2894              if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   2895              {
   2896                // set the flag to write key to NV
   2897                TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   2898          
   2899                // Notify the ZDApp that the frame counter has changed.
   2900                osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   2901              }
   2902          #endif
   2903            }
   \   0000B3   AA..         MOV     R2,?XSP + 0
   \   0000B5   AB..         MOV     R3,?XSP + 1
   \   0000B7   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000BA   E9           MOV     A,R1
   \   0000BB   6401         XRL     A,#0x1
   \   0000BD   7007         JNZ     ??APSME_TCLinkKeyLoad_3
   2904          
   2905            // If no TC link key found, remove the device from the address manager
   2906            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   2907            {
   2908              AddrMgrEntryRelease( &addrEntry );
   \   0000BF                ; Setup parameters for call to function AddrMgrEntryRelease
   \   0000BF   AA..         MOV     R2,?XSP + 0
   \   0000C1   AB..         MOV     R3,?XSP + 1
   \   0000C3   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   2909            }
   2910          
   2911              // clear copy of key in RAM
   2912            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyLoad_3:
   \   0000C6                ; Setup parameters for call to function osal_memset
   \   0000C6   7C20         MOV     R4,#0x20
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7900         MOV     R1,#0x0
   \   0000CC   740D         MOV     A,#0xd
   \   0000CE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2913          
   2914            return status;
   \   0000D4   EE           MOV     A,R6
   \   0000D5   F9           MOV     R1,A
   \   0000D6   742D         MOV     A,#0x2d
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   02....       LJMP    ?Subroutine2 & 0xFFFF
   2915          }
   2916          
   2917          /******************************************************************************
   2918           * @fn          APSME_IsDefaultTCLK
   2919           *
   2920           * @brief       Return TRUE or FALSE based on the extended address.  If the
   2921           *              input ext address is all FFs, it means the trust center link
   2922           *              assoiciated with the address is the default trust center link key
   2923           *
   2924           * @param       extAddr - [in] extended address
   2925           *
   2926           * @return      uint8 TRUE/FALSE
   2927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2928          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   2929          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2930            return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000004                ; Setup parameters for call to function osal_isbufset
   \   000004   7C08         MOV     R4,#0x8
   \   000006   79FF         MOV     R1,#-0x1
   \   000008   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   00000B   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   2931          }
   2932          
   2933          /******************************************************************************
   2934           * @fn          ZDSecMgrNwkKeyInit
   2935           *
   2936           * @brief       Initialize the NV items for
   2937           *                  ZCD_NV_NWKKEY,
   2938           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   2939           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   2940           *
   2941           * @param       setDefault
   2942           *
   2943           * @return      none
   2944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2945          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   2946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2947            uint8 status;
   2948            nwkKeyDesc nwkKey;
   2949          
   2950            // Initialize NV items for NWK key, this structure contains the frame counter
   2951            // and is only used when NV_RESTORE is enabled
   2952            nwkActiveKeyItems keyItems;
   2953          
   2954            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   7411         MOV     A,#0x11
   \   000012   12....       LCALL   ?XSTACK_DISP101_8
   \   000015   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2955          
   2956            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   2957          
   2958          #if defined ( NV_RESTORE )
   2959            // reset the values of NV items if NV_RESTORE is not enabled
   2960            if ((status == SUCCESS) && (setDefault == TRUE))
   2961            {
   2962              // clear NV data to default values
   2963              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   2964            }
   2965          #else
   2966            (void)setDefault;   // to eliminate compiler warning
   2967          
   2968            // reset the values of NV items if NV_RESTORE is not enabled
   2969            if (status == SUCCESS)
   \   000018                ; Setup parameters for call to function osal_nv_item_init
   \   000018   7411         MOV     A,#0x11
   \   00001A   12....       LCALL   ?XSTACK_DISP100_8
   \   00001D   88..         MOV     ?V0,R0
   \   00001F   89..         MOV     ?V1,R1
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7C15         MOV     R4,#0x15
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A82         MOV     R2,#-0x7e
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   E9           MOV     A,R1
   \   000037   7020         JNZ     ??ZDSecMgrNwkKeyInit_0
   2970            {
   2971              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   000039                ; Setup parameters for call to function osal_nv_write
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..15       MOV     ?V0,#0x15
   \   000041   75..00       MOV     ?V1,#0x0
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7C00         MOV     R4,#0x0
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   7A82         MOV     R2,#-0x7e
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   2972            }
   2973          #endif // defined (NV_RESTORE)
   2974          
   2975            // Initialize NV items for NWK Active and Alternate keys. These items are used
   2976            // all the time, independently of NV_RESTORE being set or not
   2977            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   000059                ; Setup parameters for call to function osal_memset
   \   000059   7C11         MOV     R4,#0x11
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7900         MOV     R1,#0x0
   \   00005F   AA..         MOV     R2,?XSP + 0
   \   000061   AB..         MOV     R3,?XSP + 1
   \   000063   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2978          
   2979            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   2980          
   2981          #if defined ( NV_RESTORE )
   2982            // reset the values of NV items if NV_RESTORE is not enabled
   2983            if ((status == SUCCESS) && (setDefault == TRUE))
   2984            {
   2985              // clear NV data to default values
   2986              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   2987            }
   2988          #else
   2989            // reset the values of NV items if NV_RESTORE is not enabled
   2990            if (status == SUCCESS)
   \   000066                ; Setup parameters for call to function osal_nv_item_init
   \   000066   A8..         MOV     R0,?XSP + 0
   \   000068   A9..         MOV     R1,?XSP + 1
   \   00006A   88..         MOV     ?V0,R0
   \   00006C   89..         MOV     ?V1,R1
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7C11         MOV     R4,#0x11
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7A3A         MOV     R2,#0x3a
   \   000079   7B00         MOV     R3,#0x0
   \   00007B   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   \   000083   E9           MOV     A,R1
   \   000084   7020         JNZ     ??ZDSecMgrNwkKeyInit_1
   2991            {
   2992              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   000086                ; Setup parameters for call to function osal_nv_write
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   75..11       MOV     ?V0,#0x11
   \   00008E   75..00       MOV     ?V1,#0x0
   \   000091   78..         MOV     R0,#?V0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   7C00         MOV     R4,#0x0
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   7A3A         MOV     R2,#0x3a
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   2993            }
   2994          #endif // defined (NV_RESTORE)
   2995          
   2996            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   2997          
   2998          #if defined ( NV_RESTORE )
   2999            // reset the values of NV items if NV_RESTORE is not enabled
   3000            if ((status == SUCCESS) && (setDefault == TRUE))
   3001            {
   3002              // clear NV data to default values
   3003              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3004            }
   3005          #else
   3006            // reset the values of NV items if NV_RESTORE is not enabled
   3007            if (status == SUCCESS)
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   0000A6                ; Setup parameters for call to function osal_nv_item_init
   \   0000A6   A8..         MOV     R0,?XSP + 0
   \   0000A8   A9..         MOV     R1,?XSP + 1
   \   0000AA   88..         MOV     ?V0,R0
   \   0000AC   89..         MOV     ?V1,R1
   \   0000AE   78..         MOV     R0,#?V0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   7C11         MOV     R4,#0x11
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   7A3B         MOV     R2,#0x3b
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000BE   7402         MOV     A,#0x2
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C3   E9           MOV     A,R1
   \   0000C4   7020         JNZ     ??ZDSecMgrNwkKeyInit_2
   3008            {
   3009              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   0000C6                ; Setup parameters for call to function osal_nv_write
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   75..11       MOV     ?V0,#0x11
   \   0000CE   75..00       MOV     ?V1,#0x0
   \   0000D1   78..         MOV     R0,#?V0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   7C00         MOV     R4,#0x0
   \   0000D8   7D00         MOV     R5,#0x0
   \   0000DA   7A3B         MOV     R2,#0x3b
   \   0000DC   7B00         MOV     R3,#0x0
   \   0000DE   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000E1   7404         MOV     A,#0x4
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   3010            }
   3011          #endif // defined (NV_RESTORE)
   3012          
   3013          }
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   0000E6   7426         MOV     A,#0x26
   \   0000E8   02....       LJMP    ??Subroutine64_0 & 0xFFFF
   3014          
   3015          /*********************************************************************
   3016           * @fn          ZDSecMgrReadKeyFromNv
   3017           *
   3018           * @brief       Looks for a specific key in NV based on Index value
   3019           *
   3020           * @param   keyNvId - Index of key to look in NV
   3021           *                    valid values are:
   3022           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   3023           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   3024           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3025           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3026           *                    ZCD_NV_PRECFGKEY
   3027           *
   3028           * @param  *keyinfo - Data is read into this buffer.
   3029           *
   3030           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   3031           *          Otherwise, NV_OPER_FAILED for failure.
   3032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3033          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   3034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3035            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   3036                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   000005   743A         MOV     A,#0x3a
   \   000007   6A           XRL     A,R2
   \   000008   7001         JNZ     ??ZDSecMgrReadKeyFromNv_0
   \   00000A   EB           MOV     A,R3
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   00000B   6006         JZ      ??ZDSecMgrReadKeyFromNv_1
   \   00000D   743B         MOV     A,#0x3b
   \   00000F   6A           XRL     A,R2
   \   000010   4B           ORL     A,R3
   \   000011   7018         JNZ     ??ZDSecMgrReadKeyFromNv_2
   3037            {
   3038              // get NWK active or alternate key from NV
   3039              return (osal_nv_read(keyNvId,
   3040                                   osal_offsetof(nwkKeyDesc, key),
   3041                                   SEC_KEY_LEN,
   3042                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000013                ; Setup parameters for call to function osal_nv_read
   \   000013   8C..         MOV     ?V0,R4
   \   000015   8D..         MOV     ?V1,R5
   \   000017   78..         MOV     R0,#?V0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   75..10       MOV     ?V0,#0x10
   \   00001F   75..00       MOV     ?V1,#0x0
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C01         MOV     R4,#0x1
   \   000029   8042         SJMP    ??ZDSecMgrReadKeyFromNv_3
   3043            }
   3044            else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
   3045                     (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   00002B   EA           MOV     A,R2
   \   00002C   24FF         ADD     A,#-0x1
   \   00002E   F8           MOV     R0,A
   \   00002F   EB           MOV     A,R3
   \   000030   34FE         ADDC    A,#-0x2
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   49           ORL     A,R1
   \   000035   7018         JNZ     ??ZDSecMgrReadKeyFromNv_4
   3046            {
   3047              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   3048              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3049              return (osal_nv_read(keyNvId,
   3050                                   osal_offsetof(APSME_TCLinkKey_t, key),
   3051                                   SEC_KEY_LEN,
   3052                                   keyinfo));
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   8C..         MOV     ?V0,R4
   \   000039   8D..         MOV     ?V1,R5
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..10       MOV     ?V0,#0x10
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C08         MOV     R4,#0x8
   \   00004D   801E         SJMP    ??ZDSecMgrReadKeyFromNv_3
   3053            }
   3054            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   3055                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   00004F   19           DEC     R1
   \   000050   C3           CLR     C
   \   000051   E8           MOV     A,R0
   \   000052   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000055   501A         JNC     ??ZDSecMgrReadKeyFromNv_5
   3056            {
   3057              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   3058              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3059              return (osal_nv_read(keyNvId,
   3060                                   osal_offsetof(APSME_LinkKeyData_t, key),
   3061                                   SEC_KEY_LEN,
   3062                                   keyinfo));
   \   000057                ; Setup parameters for call to function osal_nv_read
   \   000057   8C..         MOV     ?V0,R4
   \   000059   8D..         MOV     ?V1,R5
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75..10       MOV     ?V0,#0x10
   \   000063   75..00       MOV     ?V1,#0x0
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   8022         SJMP    ??ZDSecMgrReadKeyFromNv_6
   3063            }
   3064            else if (keyNvId == ZCD_NV_PRECFGKEY)
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   000071   7462         MOV     A,#0x62
   \   000073   6A           XRL     A,R2
   \   000074   4B           ORL     A,R3
   \   000075   7026         JNZ     ??ZDSecMgrReadKeyFromNv_7
   3065            {
   3066              // Read entry keyNvId of the Preconfig key from NV.
   3067              return (osal_nv_read(keyNvId,
   3068                                   0,
   3069                                   SEC_KEY_LEN,
   3070                                   keyinfo));
   \   000077                ; Setup parameters for call to function osal_nv_read
   \   000077   8C..         MOV     ?V0,R4
   \   000079   8D..         MOV     ?V1,R5
   \   00007B   78..         MOV     R0,#?V0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   75..10       MOV     ?V0,#0x10
   \   000083   75..00       MOV     ?V1,#0x0
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7C00         MOV     R4,#0x0
   \   00008D   7D00         MOV     R5,#0x0
   \   00008F   7A62         MOV     R2,#0x62
   \   000091   7B00         MOV     R3,#0x0
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   000093   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   8002         SJMP    ??ZDSecMgrReadKeyFromNv_8
   3071            }
   3072          
   3073            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   00009D   790A         MOV     R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   00009F   02....       LJMP    ??Subroutine65_0 & 0xFFFF
   3074          }
   3075          
   3076          /******************************************************************************
   3077           * @fn          ZDSecMgrApsLinkKeyInit
   3078           *
   3079           * @brief       Initialize the NV table for Application link keys
   3080           *
   3081           * @param       none
   3082           *
   3083           * @return      none
   3084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3085          void ZDSecMgrApsLinkKeyInit(void)
   \                     ZDSecMgrApsLinkKeyInit:
   3086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3087            APSME_LinkKeyData_t pApsLinkKey;
   3088            uint8 i;
   3089            uint8 status;
   3090          
   3091            // Initialize all NV items for APS link key, if not exist already.
   3092            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C18         MOV     R4,#0x18
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3093          
   3094            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000017   75..00       MOV     ?V0,#0x0
   3095            {
   3096              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   3097                                         sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3098          
   3099          #if defined ( NV_RESTORE )
   3100              (void)status;   // to eliminate compiler warning
   3101          #else
   3102              // reset the values of NV items if NV_RESTORE is not enabled
   3103              if (status == SUCCESS)
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   00001A   E5..         MOV     A,?V0
   \   00001C   2401         ADD     A,#0x1
   \   00001E   FE           MOV     R6,A
   \   00001F   E4           CLR     A
   \   000020   3402         ADDC    A,#0x2
   \   000022   FF           MOV     R7,A
   \   000023                ; Setup parameters for call to function osal_nv_item_init
   \   000023   A8..         MOV     R0,?XSP + 0
   \   000025   A9..         MOV     R1,?XSP + 1
   \   000027   88..         MOV     ?V2,R0
   \   000029   89..         MOV     ?V3,R1
   \   00002B   78..         MOV     R0,#?V2
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7C18         MOV     R4,#0x18
   \   000032   7D00         MOV     R5,#0x0
   \   000034   EE           MOV     A,R6
   \   000035   FA           MOV     R2,A
   \   000036   EF           MOV     A,R7
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   E9           MOV     A,R1
   \   000041   7020         JNZ     ??ZDSecMgrApsLinkKeyInit_1
   3104              {
   3105                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3106                              sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   000043                ; Setup parameters for call to function osal_nv_write
   \   000043   78..         MOV     R0,#?V2
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   75..18       MOV     ?V2,#0x18
   \   00004B   75..00       MOV     ?V3,#0x0
   \   00004E   78..         MOV     R0,#?V2
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7C00         MOV     R4,#0x0
   \   000055   7D00         MOV     R5,#0x0
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   FB           MOV     R3,A
   \   00005B   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   3107          
   3108              }
   3109          #endif // defined (NV_RESTORE)
   3110            }
   \                     ??ZDSecMgrApsLinkKeyInit_1:
   \   000063   05..         INC     ?V0
   \   000065   EE           MOV     A,R6
   \   000066   C3           CLR     C
   \   000067   9403         SUBB    A,#0x3
   \   000069   40AF         JC      ??ZDSecMgrApsLinkKeyInit_0
   3111          }
   \   00006B   7418         MOV     A,#0x18
   \   00006D   02....       LJMP    ?Subroutine3 & 0xFFFF
   3112          
   3113          /******************************************************************************
   3114           * @fn          ZDSecMgrInitNVKeyTables
   3115           *
   3116           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   3117           *
   3118           * @param       setDefault - TRUE to set default values
   3119           *
   3120           * @return      none
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   3123          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3124            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   12....       LCALL   `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   3125            ZDSecMgrApsLinkKeyInit();
   \   00000A                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000A   12....       LCALL   `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   3126            APSME_TCLinkKeyInit(setDefault);
   \   00000D                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   00000D   EE           MOV     A,R6
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   3127          }
   \   000012   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   3128          
   3129          /******************************************************************************
   3130           * @fn          ZDSecMgrSaveApsLinkKey
   3131           *
   3132           * @brief       Save APS Link Key to NV. It will loop through all the keys
   3133           *              to see which one to save.
   3134           *
   3135           * @param       none
   3136           *
   3137           * @return      none
   3138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3139          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   3140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3141            APSME_LinkKeyData_t *pKeyData = NULL;
   3142            int i;
   3143          
   3144            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A18         MOV     R2,#0x18
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   3145          
   3146            if (pKeyData != NULL)
   \   000010   EA           MOV     A,R2
   \   000011   45..         ORL     A,?V7
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   3147            {
   3148              // checks all pending flags to know which one to save
   3149              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   000018   75..00       MOV     ?V0,#0x0
   \   00001B   75..00       MOV     ?V1,#0x0
   3150              {
   3151                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   00001E   E5..         MOV     A,?V0
   \   000020   75F009       MOV     B,#0x9
   \   000023   A4           MUL     AB
   \   000024   F8           MOV     R0,A
   \   000025   AAF0         MOV     R2,B
   \   000027   75F009       MOV     B,#0x9
   \   00002A   E5..         MOV     A,?V1
   \   00002C   A4           MUL     AB
   \   00002D   2A           ADD     A,R2
   \   00002E   F9           MOV     R1,A
   \   00002F   74..         MOV     A,#ApsLinkKeyFrmCntr & 0xff
   \   000031   28           ADD     A,R0
   \   000032   F5..         MOV     ?V2,A
   \   000034   74..         MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   000036   39           ADDC    A,R1
   \   000037   F5..         MOV     ?V3,A
   \   000039   E5..         MOV     A,?V2
   \   00003B   2408         ADD     A,#0x8
   \   00003D   F5..         MOV     ?V4,A
   \   00003F   E4           CLR     A
   \   000040   35..         ADDC    A,?V3
   \   000042   F5..         MOV     ?V5,A
   \   000044   85..82       MOV     DPL,?V4
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6401         XRL     A,#0x1
   \   00004C   6003         JZ      $+5
   \   00004E   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
   \   000051   E5..         MOV     A,?V0
   \   000053   2401         ADD     A,#0x1
   \   000055   FE           MOV     R6,A
   \   000056   E5..         MOV     A,?V1
   \   000058   3402         ADDC    A,#0x2
   \   00005A   FF           MOV     R7,A
   \   00005B                ; Setup parameters for call to function osal_nv_read
   \   00005B   78..         MOV     R0,#?V6
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75..18       MOV     ?V8,#0x18
   \   000063   75..00       MOV     ?V9,#0x0
   \   000066   78..         MOV     R0,#?V8
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   FB           MOV     R3,A
   3152                {
   3153                  // retrieve key from NV
   3154                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3155                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   \   000073   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   \   00007C   705A         JNZ     ??ZDSecMgrSaveApsLinkKey_2
   3156                  {
   3157                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   00007E   85..82       MOV     DPL,?V2
   \   000081   85..83       MOV     DPH,?V3
   \   000084   12....       LCALL   ?XLOAD_R0123
   \   000087   E5..         MOV     A,?V6
   \   000089   2410         ADD     A,#0x10
   \   00008B   F582         MOV     DPL,A
   \   00008D   E4           CLR     A
   \   00008E   35..         ADDC    A,?V7
   \   000090   F583         MOV     DPH,A
   \   000092   12....       LCALL   ?XSTORE_R0123
   3158                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   000095   85..82       MOV     DPL,?V2
   \   000098   85..83       MOV     DPH,?V3
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   12....       LCALL   ?XLOAD_R0123
   \   0000A2   E5..         MOV     A,?V6
   \   0000A4   2414         ADD     A,#0x14
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   35..         ADDC    A,?V7
   \   0000AB   F583         MOV     DPH,A
   \   0000AD   12....       LCALL   ?XSTORE_R0123
   3159          
   3160                    // Write the APS link key back to the NV
   3161                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3162                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   0000B0                ; Setup parameters for call to function osal_nv_write
   \   0000B0   78..         MOV     R0,#?V6
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   75..18       MOV     ?V2,#0x18
   \   0000B8   75..00       MOV     ?V3,#0x0
   \   0000BB   78..         MOV     R0,#?V2
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   7C00         MOV     R4,#0x0
   \   0000C2   7D00         MOV     R5,#0x0
   \   0000C4   EE           MOV     A,R6
   \   0000C5   FA           MOV     R2,A
   \   0000C6   EF           MOV     A,R7
   \   0000C7   FB           MOV     R3,A
   \   0000C8   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000CB   7404         MOV     A,#0x4
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   3163          
   3164                    // clear the pending write flag
   3165                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   0000D0   85..82       MOV     DPL,?V4
   \   0000D3   85..83       MOV     DPH,?V5
   \   0000D6   E4           CLR     A
   \   0000D7   F0           MOVX    @DPTR,A
   3166                  }
   3167                }
   3168              }
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   0000D8   05..         INC     ?V0
   \   0000DA   E5..         MOV     A,?V0
   \   0000DC   7002         JNZ     ??ZDSecMgrSaveApsLinkKey_3
   \   0000DE   05..         INC     ?V1
   \                     ??ZDSecMgrSaveApsLinkKey_3:
   \   0000E0   C3           CLR     C
   \   0000E1   9403         SUBB    A,#0x3
   \   0000E3   E5..         MOV     A,?V1
   \   0000E5   9400         SUBB    A,#0x0
   \   0000E7   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000E9   65D0         XRL     A,PSW
   \   0000EB   33           RLC     A
   \   0000EC   5003         JNC     $+5
   \   0000EE   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   3169          
   3170              // clear copy of key in RAM
   3171              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000F1                ; Setup parameters for call to function osal_memset
   \   0000F1   7C18         MOV     R4,#0x18
   \   0000F3   7D00         MOV     R5,#0x0
   \   0000F5   7900         MOV     R1,#0x0
   \   0000F7   AA..         MOV     R2,?V6
   \   0000F9   AB..         MOV     R3,?V7
   \   0000FB   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3172          
   3173              osal_mem_free(pKeyData);
   \   0000FE                ; Setup parameters for call to function osal_mem_free
   \   0000FE   AA..         MOV     R2,?V6
   \   000100   AB..         MOV     R3,?V7
   \   000102   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3174            }
   3175          }
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   000105   7F0A         MOV     R7,#0xa
   \   000107   02....       LJMP    ?BANKED_LEAVE_XDATA
   3176          
   3177          /******************************************************************************
   3178           * @fn          ZDSecMgrSaveTCLinkKey
   3179           *
   3180           * @brief       Save TC Link Key to NV. It will loop through all the keys
   3181           *              to see which one to save.
   3182           *
   3183           * @param       none
   3184           *
   3185           * @return      none
   3186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3187          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   3188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3189            APSME_TCLinkKey_t *pKeyData = NULL;
   3190            uint16 i;
   3191          
   3192            pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A20         MOV     R2,#0x20
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   3193          
   3194            if (pKeyData != NULL)
   \   000010   EA           MOV     A,R2
   \   000011   45..         ORL     A,?V1
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
   3195            {
   3196              for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   3197              {
   3198                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   000018   90....       MOV     DPTR,#TCLinkKeyFrmCntr + 8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6401         XRL     A,#0x1
   \   00001E   706A         JNZ     ??ZDSecMgrSaveTCLinkKey_1
   3199                {
   3200                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   3201                                   sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
   \   000020                ; Setup parameters for call to function osal_nv_read
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   75..20       MOV     ?V2,#0x20
   \   000028   75..00       MOV     ?V3,#0x0
   \   00002B   78..         MOV     R0,#?V2
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7C00         MOV     R4,#0x0
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7A01         MOV     R2,#0x1
   \   000036   7B01         MOV     R3,#0x1
   \   000038   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   E9           MOV     A,R1
   \   000041   7047         JNZ     ??ZDSecMgrSaveTCLinkKey_1
   3202                  {
   3203                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000043   90....       MOV     DPTR,#TCLinkKeyFrmCntr
   \   000046   12....       LCALL   ?XLOAD_R0123
   \   000049   E5..         MOV     A,?V0
   \   00004B   2418         ADD     A,#0x18
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   35..         ADDC    A,?V1
   \   000052   F583         MOV     DPH,A
   \   000054   12....       LCALL   ?XSTORE_R0123
   3204                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   000057   90....       MOV     DPTR,#TCLinkKeyFrmCntr + 4
   \   00005A   12....       LCALL   ?XLOAD_R0123
   \   00005D   E5..         MOV     A,?V0
   \   00005F   241C         ADD     A,#0x1c
   \   000061   F582         MOV     DPL,A
   \   000063   E4           CLR     A
   \   000064   35..         ADDC    A,?V1
   \   000066   F583         MOV     DPH,A
   \   000068   12....       LCALL   ?XSTORE_R0123
   3205          
   3206                    // Write the TC link key back to the NV
   3207                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   3208                                  sizeof(APSME_TCLinkKey_t), pKeyData);
   \   00006B                ; Setup parameters for call to function osal_nv_write
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   7C00         MOV     R4,#0x0
   \   000077   7D00         MOV     R5,#0x0
   \   000079   7A01         MOV     R2,#0x1
   \   00007B   7B01         MOV     R3,#0x1
   \   00007D   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000080   7404         MOV     A,#0x4
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   3209          
   3210                    // clear the pending write flag
   3211                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   000085   90....       MOV     DPTR,#TCLinkKeyFrmCntr + 8
   \   000088   E4           CLR     A
   \   000089   F0           MOVX    @DPTR,A
   3212                  }
   3213                }
   3214              }
   3215                // clear copy of key in RAM
   3216              osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   00008A                ; Setup parameters for call to function osal_memset
   \   00008A   7C20         MOV     R4,#0x20
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   7900         MOV     R1,#0x0
   \   000090   AA..         MOV     R2,?V0
   \   000092   AB..         MOV     R3,?V1
   \   000094   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3217          
   3218              osal_mem_free(pKeyData);
   \   000097                ; Setup parameters for call to function osal_mem_free
   \   000097   AA..         MOV     R2,?V0
   \   000099   AB..         MOV     R3,?V1
   \   00009B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3219            }
   3220          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   00009E   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3221          
   3222          /******************************************************************************
   3223           * @fn          ZDSecMgrUpdateTCAddress
   3224           *
   3225           * @brief       Update Trust Center address and save to NV.
   3226           *
   3227           * @param       extAddr - [in] extended address or NULL if no TC protected
   3228           *
   3229           * @return      none
   3230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3231          void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
   \                     ZDSecMgrUpdateTCAddress:
   3232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3233            uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00000A   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3234            APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   000016   EA           MOV     A,R2
   \   000017   4B           ORL     A,R3
   \   000018   700C         JNZ     ??ZDSecMgrUpdateTCAddress_0
   \   00001A   A8..         MOV     R0,?XSP + 0
   \   00001C   A9..         MOV     R1,?XSP + 1
   \   00001E   88..         MOV     ?V0,R0
   \   000020   89..         MOV     ?V1,R1
   \   000022   AA..         MOV     R2,?V0
   \   000024   AB..         MOV     R3,?V1
   \                     ??ZDSecMgrUpdateTCAddress_0:
   \   000026                ; Setup parameters for call to function APSME_SetRequest
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \   000029   FD           MOV     R5,A
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   79AB         MOV     R1,#-0x55
   \   000030   12....       LCALL   `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   3235          #if defined ( NV_RESTORE )
   3236            osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   3237          #endif
   3238          }
   \   000033   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMI::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMI

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExtGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExtGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMIGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryFree::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSendNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemoveByExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidateRM::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateRM

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinDirect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinDirect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinFwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinFwd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAssocDeviceAuth::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAssocDeviceAuth

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoining::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoining

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNewDeviceEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNewDeviceEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCExtAddrCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCExtAddrCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCDataLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCDataLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTransportKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTransportKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRemoveDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRemoveDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestAppKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestAppKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyTypeSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyTypeSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeySet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeySet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeyNVIdGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeyNVIdGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsLinkKeyValid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsLinkKeyValid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_KeyFwdToChild::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_KeyFwdToChild

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAPSRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAPSRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeySync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeySync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsDefaultTCLK::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsDefaultTCLK

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNwkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNwkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrReadKeyFromNv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrReadKeyFromNv

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrApsLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrApsLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNVKeyTables::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNVKeyTables

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveApsLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveApsLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveTCLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveTCLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateTCAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateTCAddress

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1
   3239          
   3240          #if defined ( ZBA_FALLBACK_NWKKEY )
   3241          /******************************************************************************
   3242           * @fn          ZDSecMgrFallbackNwkKey
   3243           *
   3244           * @brief       Use the ZBA fallback network key.
   3245           *
   3246           * @param       none
   3247           *
   3248           * @return      none
   3249           */
   3250          void ZDSecMgrFallbackNwkKey( void )
   3251          {
   3252            if ( !_NIB.nwkKeyLoaded )
   3253            {
   3254              uint8 fallbackKey[SEC_KEY_LEN];
   3255          
   3256              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   3257              SSP_UpdateNwkKey( fallbackKey, 0);
   3258              SSP_SwitchNwkKey( 0 );
   3259          
   3260              // clear local copy of key
   3261              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   3262          
   3263              // handle next step in authentication process
   3264              ZDSecMgrAuthNwkKey();
   3265            }
   3266          }
   3267          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   3268          
   3269          #if defined ( NV_RESTORE )
   3270          /******************************************************************************
   3271           * @fn          ZDSecMgrClearNVKeyValues
   3272           *
   3273           * @brief       If NV_RESTORE is enabled and the status of the network needs
   3274           *              default values this fuction clears ZCD_NV_NWKKEY,
   3275           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   3276           *
   3277           * @param       none
   3278           *
   3279           * @return      none
   3280           */
   3281          void ZDSecMgrClearNVKeyValues(void)
   3282          {
   3283            nwkActiveKeyItems keyItems;
   3284            nwkKeyDesc nwkKey;
   3285          
   3286            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   3287          
   3288            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   3289          
   3290            // Initialize NV items for NWK Active and Alternate keys.
   3291            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   3292          
   3293            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   3294          
   3295            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   3296          }
   3297          #endif // defined ( NV_RESTORE )
   3298          
   3299          /******************************************************************************
   3300          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     59   APSME_IsDefaultTCLK
        2      0   -> osal_isbufset
      0     37   APSME_IsLinkKeyValid
        0     33   -> APSME_LinkKeyNVIdGet
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
        0     36   -> osal_memcmp
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0     10   APSME_KeyFwdToChild
        0     10   -> AssocGetWithExt
        0     10   -> ZDSecMgrAssocDeviceAuth
      0     44   APSME_LinkKeyNVIdGet
        0     11   -> ZDSecMgrEntryLookupExt
      0     55   APSME_LinkKeySet
        0     21   -> ZDSecMgrEntryLookupExtGetIndex
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
        0     19   -> osal_memset
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
      0     56   APSME_TCLinkKeyInit
        0     46   -> osal_memcpy
        0     43   -> osal_memset
        0     45   -> osal_nv_item_init
        0     47   -> osal_nv_read
        0     47   -> osal_nv_write
      0     63   APSME_TCLinkKeyLoad
        0     59   -> APSME_IsDefaultTCLK
        0     59   -> APSME_IsDistributedSecurity
        0     59   -> AddrMgrEntryLookupNwk
        0     59   -> AddrMgrEntryRelease
        0     59   -> AddrMgrExtAddrEqual
        0     59   -> AddrMgrExtAddrValid
        0     59   -> osal_memset
        0     63   -> osal_nv_read
      0     52   APSME_TCLinkKeySync
        0     48   -> APSME_IsDefaultTCLK
        0     48   -> APSME_LookupExtAddr
        0     48   -> AddrMgrExtAddrEqual
        0     48   -> AddrMgrExtAddrValid
        0     48   -> osal_memset
        0     52   -> osal_nv_read
        0     48   -> sAddrExtCmp
      2     10   ZDSecMgrAPSRemove
        2      8   -> ZDSecMgrDeviceRemove
      0     18   ZDSecMgrAddLinkKey
        0     14   -> APSME_LinkKeySet
        0     16   -> ZDSecMgrAddrStore
        0     14   -> ZDSecMgrAuthenticationSet
        0     14   -> ZDSecMgrEntryLookupAMI
        0     14   -> ZDSecMgrEntryNew
      0     57   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     56   ZDSecMgrAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      3     59   ZDSecMgrAppKeyGet
        2      0   -> SSP_GetTrueRand
      0     59   ZDSecMgrAppKeyReq
        0     51   -> APSME_LookupExtAddr
        0     51   -> APSME_LookupNwkAddr
        0     51   -> APSME_TransportKeyReq
        0     59   -> ZDSecMgrAppKeyGet
        0     51   -> osal_memset
      2      0   ZDSecMgrAppKeyTypeSet
      0     49   ZDSecMgrApsLinkKeyInit
        0     36   -> osal_memset
        0     38   -> osal_nv_item_init
        0     40   -> osal_nv_write
      2     33   ZDSecMgrAssocDeviceAuth
      2     32   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0     22   ZDSecMgrAuthenticationCheck
        0     22   -> APSME_GetRequest
        0     22   -> AddrMgrExtAddrLookup
        0     22   -> NLME_GetExtAddr
        0     22   -> ZDSecMgrEntryLookupExt
        0     22   -> ZDSecMgrExtAddrLookup
        0     22   -> sAddrExtCmp
      1     25   ZDSecMgrAuthenticationSet
        0     11   -> ZDSecMgrEntryLookupExt
      2      0   ZDSecMgrConfig
        2      0   -> APSME_SecurityCM_CD
        2      0   -> SSP_Init
      0     42   ZDSecMgrDeviceJoin
        0     30   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrAddrStore
        0     30   -> ZDSecMgrDeviceRemove
        0     30   -> ZDSecMgrDeviceValidate
        0     30   -> ZDSecMgrSendNwkKey
        0     33   -> osal_memcpy
      0      9   ZDSecMgrDeviceJoinDirect
        0      9   -> AssocGetWithShort
        0      9   -> ZDSecMgrAssocDeviceAuth
        0      9   -> ZDSecMgrDeviceJoin
      0     18   ZDSecMgrDeviceJoinFwd
        0     18   -> APSME_UpdateDeviceReq
        0     18   -> AssocGetWithShort
        0     18   -> ZDSecMgrAssocDeviceAuth
      2     33   ZDSecMgrDeviceNew
        2      0   -> ZDSecMgrDeviceJoinDirect
      0     50   ZDSecMgrDeviceRemove
        0     20   -> APSME_RemoveDeviceReq
        0     20   -> AssocGetWithExt
        0     20   -> NLME_GetShortAddr
        0     20   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrEntryFree
        0     11   -> ZDSecMgrEntryLookupExt
      2     30   ZDSecMgrDeviceValidate
        2      0   -> ZDSecMgrDeviceValidateRM
      2      0   ZDSecMgrDeviceValidateRM
      0     29   ZDSecMgrEntryFree
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> osal_memset
        0     18   -> osal_nv_write
      2     10   ZDSecMgrEntryInit
        2      0   -> osal_mem_alloc
      0     22   ZDSecMgrEntryLookup
        0     22   -> AddrMgrEntryLookupNwk
      0     41   ZDSecMgrEntryLookupAMI
      0      9   ZDSecMgrEntryLookupAMIGetIndex
      0     33   ZDSecMgrEntryLookupExt
        0     11   -> ZDSecMgrEntryLookupAMI
        0     11   -> ZDSecMgrExtAddrLookup
      0     32   ZDSecMgrEntryLookupExtGetIndex
        0     11   -> ZDSecMgrExtAddrLookup
      0     41   ZDSecMgrEntryNew
      0     54   ZDSecMgrExtAddrLookup
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrExtAddrSet
      0     24   ZDSecMgrExtAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0     10   ZDSecMgrInit
        0     10   -> APSME_SecurityCM_CD
        0     10   -> APSME_SetRequest
        0     10   -> NLME_GetExtAddr
        0     10   -> SSP_Init
        0     10   -> ZDSecMgrEntryInit
      0     16   ZDSecMgrInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrNwkKeyInit
      1     33   ZDSecMgrNewDeviceEvent
        0     33   -> AddrMgrEntryGet
        0     33   -> AssocGetWithShort
        0     33   -> AssocRemove
        0     33   -> NLME_GetShortAddr
        0     33   -> ZDSecMgrAddrClear
        0     33   -> ZDSecMgrAssocDeviceAuth
        0     33   -> ZDSecMgrDeviceNew
      0     61   ZDSecMgrNwkKeyInit
        0     48   -> osal_memset
        0     50   -> osal_nv_item_init
        0     52   -> osal_nv_write
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     46   ZDSecMgrReadKeyFromNv
        0     14   -> osal_nv_read
      0     17   ZDSecMgrRemoveDeviceInd
        0     17   -> APSME_LookupNwkAddr
        0     17   -> NLME_GetShortAddr
        0     17   -> ZDSecMgrDeviceRemove
      2      4   ZDSecMgrRequestAppKey
        2      4   -> APSME_RequestKeyReq
      2      0   ZDSecMgrRequestKeyInd
        2      0   -> ZDSecMgrAppKeyReq
      0     22   ZDSecMgrSaveApsLinkKey
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> osal_memset
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      0     16   ZDSecMgrSaveTCLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      1     80   ZDSecMgrSendNwkKey
        0     46   -> APSME_TransportKeyReq
        0     46   -> NLME_GetShortAddr
        0     50   -> NLME_ReadNwkKeyInfo
        0     46   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      2      0   ZDSecMgrSwitchKeyInd
        2      0   -> SSP_SwitchNwkKey
        2      0   -> ZDApp_NVUpdate
      1     26   ZDSecMgrSwitchNwkKey
        0     26   -> APSME_SwitchKeyReq
        0     26   -> AddrMgrEntryLookupNwk
        0     26   -> SSP_SwitchNwkKey
        0     26   -> ZDApp_NVUpdate
      0     59   ZDSecMgrTCDataLoad
        0     25   -> APSME_IsDistributedSecurity
        0     25   -> AddrMgrEntryLookupExt
        0     27   -> ZDSecMgrAddrStore
        0     25   -> sAddrExtCpy
      0     17   ZDSecMgrTCExtAddrCheck
        0     17   -> APSME_GetRequest
        0     17   -> sAddrExtCmp
      0     34   ZDSecMgrTransportKeyInd
        0     32   -> APSME_LinkKeySet
        0     32   -> SSP_SwitchNwkKey
        0     32   -> SSP_UpdateNwkKey
        0     32   -> ZDP_NwkAddrReq
        0     34   -> ZDSecMgrAddrStore
        0     32   -> ZDSecMgrAuthNwkKey
        0     32   -> ZDSecMgrEntryLookupAMI
        0     32   -> ZDSecMgrEntryNew
        0     32   -> ZDSecMgrExtAddrLookup
        0     32   -> ZDSecMgrReadKeyFromNv
        0     32   -> ZDSecMgrTCDataLoad
        0     32   -> ZDSecMgrUpdateTCAddress
        0     32   -> osal_isbufset
        0     32   -> osal_memset
      2      8   ZDSecMgrUpdateDeviceInd
        2      8   -> ZDSecMgrDeviceJoin
      1     36   ZDSecMgrUpdateNwkKey
        0     36   -> APSME_TransportKeyReq
        0     36   -> AddrMgrEntryLookupNwk
        0     36   -> SSP_UpdateNwkKey
        0     36   -> ZDApp_NVUpdate
      0     50   ZDSecMgrUpdateTCAddress
        0     18   -> APSME_SetRequest


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  ?<Initializer for ZDSecMgrAppKeyType>
       5  ??Subroutine46_0
       8  ??Subroutine47_0
       6  ??Subroutine48_0
       9  ??Subroutine49_0
       4  ??Subroutine50_0
       2  ??Subroutine51_0
       6  ??Subroutine52_0
       3  ??Subroutine53_0
       7  ??Subroutine54_0
       6  ??Subroutine55_0
       5  ??Subroutine56_0
       5  ??Subroutine57_0
       3  ??Subroutine58_0
       5  ??Subroutine59_0
       6  ??Subroutine60_0
       8  ??Subroutine61_0
       2  ??Subroutine62_0
       9  ??Subroutine63_0
       3  ??Subroutine64_0
       5  ??Subroutine65_0
       2  ?Subroutine0
       2  ?Subroutine1
       3  ?Subroutine10
       5  ?Subroutine11
       4  ?Subroutine12
       4  ?Subroutine13
      15  ?Subroutine14
      21  ?Subroutine15
       6  ?Subroutine16
      13  ?Subroutine17
       9  ?Subroutine18
      15  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
       6  ?Subroutine21
       6  ?Subroutine22
       3  ?Subroutine23
       6  ?Subroutine24
       7  ?Subroutine25
       6  ?Subroutine26
      11  ?Subroutine27
       2  ?Subroutine28
      14  ?Subroutine29
       3  ?Subroutine3
       4  ?Subroutine30
       8  ?Subroutine31
       6  ?Subroutine32
       4  ?Subroutine33
       1  ?Subroutine34
      27  ?Subroutine35
      12  ?Subroutine36
      12  ?Subroutine37
      12  ?Subroutine38
       6  ?Subroutine39
       2  ?Subroutine4
       9  ?Subroutine40
      12  ?Subroutine41
       7  ?Subroutine42
       6  ?Subroutine43
       9  ?Subroutine44
      30  ?Subroutine45
       8  ?Subroutine5
       8  ?Subroutine6
       5  ?Subroutine7
       5  ?Subroutine8
       6  ?Subroutine9
      14  APSME_IsDefaultTCLK
       6  APSME_IsDefaultTCLK::?relay
     176  APSME_IsLinkKeyValid
       6  APSME_IsLinkKeyValid::?relay
      58  APSME_KeyFwdToChild
       6  APSME_KeyFwdToChild::?relay
      55  APSME_LinkKeyNVIdGet
       6  APSME_LinkKeyNVIdGet::?relay
     291  APSME_LinkKeySet
       6  APSME_LinkKeySet::?relay
     250  APSME_TCLinkKeyInit
       6  APSME_TCLinkKeyInit::?relay
     222  APSME_TCLinkKeyLoad
       6  APSME_TCLinkKeyLoad::?relay
     269  APSME_TCLinkKeySync
       6  APSME_TCLinkKeySync::?relay
      27  ApsLinkKeyFrmCntr
       9  TCLinkKeyFrmCntr
      32  TrustCenterLinkKey
      76  ZDSecMgrAPSRemove
       6  ZDSecMgrAPSRemove::?relay
     119  ZDSecMgrAddLinkKey
       6  ZDSecMgrAddLinkKey::?relay
      68  ZDSecMgrAddrClear
       6  ZDSecMgrAddrClear::?relay
      75  ZDSecMgrAddrStore
       6  ZDSecMgrAddrStore::?relay
      36  ZDSecMgrAppKeyGet
       6  ZDSecMgrAppKeyGet::?relay
     278  ZDSecMgrAppKeyReq
       6  ZDSecMgrAppKeyReq::?relay
       1  ZDSecMgrAppKeyType
      23  ZDSecMgrAppKeyTypeSet
       6  ZDSecMgrAppKeyTypeSet::?relay
     112  ZDSecMgrApsLinkKeyInit
       6  ZDSecMgrApsLinkKeyInit::?relay
      23  ZDSecMgrAssocDeviceAuth
       6  ZDSecMgrAssocDeviceAuth::?relay
      26  ZDSecMgrAuthNwkKey
       6  ZDSecMgrAuthNwkKey::?relay
     113  ZDSecMgrAuthenticationCheck
       6  ZDSecMgrAuthenticationCheck::?relay
      31  ZDSecMgrAuthenticationSet
       6  ZDSecMgrAuthenticationSet::?relay
      12  ZDSecMgrConfig
       6  ZDSecMgrConfig::?relay
     244  ZDSecMgrDeviceJoin
       6  ZDSecMgrDeviceJoin::?relay
      35  ZDSecMgrDeviceJoinDirect
       6  ZDSecMgrDeviceJoinDirect::?relay
     188  ZDSecMgrDeviceJoinFwd
       6  ZDSecMgrDeviceJoinFwd::?relay
       9  ZDSecMgrDeviceNew
       6  ZDSecMgrDeviceNew::?relay
     245  ZDSecMgrDeviceRemove
       6  ZDSecMgrDeviceRemove::?relay
      35  ZDSecMgrDeviceRemoveByExtAddr
       6  ZDSecMgrDeviceRemoveByExtAddr::?relay
      24  ZDSecMgrDeviceValidate
       6  ZDSecMgrDeviceValidate::?relay
      17  ZDSecMgrDeviceValidateRM
       6  ZDSecMgrDeviceValidateRM::?relay
       2  ZDSecMgrEntries
     108  ZDSecMgrEntryFree
       6  ZDSecMgrEntryFree::?relay
      65  ZDSecMgrEntryInit
       6  ZDSecMgrEntryInit::?relay
      98  ZDSecMgrEntryLookup
       6  ZDSecMgrEntryLookup::?relay
      67  ZDSecMgrEntryLookupAMI
       6  ZDSecMgrEntryLookupAMI::?relay
      63  ZDSecMgrEntryLookupAMIGetIndex
       6  ZDSecMgrEntryLookupAMIGetIndex::?relay
      59  ZDSecMgrEntryLookupExt
       6  ZDSecMgrEntryLookupExt::?relay
      92  ZDSecMgrEntryLookupExtGetIndex
       6  ZDSecMgrEntryLookupExtGetIndex::?relay
     114  ZDSecMgrEntryNew
       6  ZDSecMgrEntryNew::?relay
      72  ZDSecMgrExtAddrLookup
       6  ZDSecMgrExtAddrLookup::?relay
      75  ZDSecMgrExtAddrStore
       6  ZDSecMgrExtAddrStore::?relay
      48  ZDSecMgrInit
       6  ZDSecMgrInit::?relay
     107  ZDSecMgrInitNV
       6  ZDSecMgrInitNV::?relay
      21  ZDSecMgrInitNVKeyTables
       6  ZDSecMgrInitNVKeyTables::?relay
     208  ZDSecMgrNewDeviceEvent
       6  ZDSecMgrNewDeviceEvent::?relay
     235  ZDSecMgrNwkKeyInit
       6  ZDSecMgrNwkKeyInit::?relay
      39  ZDSecMgrPermitJoining
       6  ZDSecMgrPermitJoining::?relay
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      24  ZDSecMgrPermitJoiningTimeout
       6  ZDSecMgrPermitJoiningTimeout::?relay
     162  ZDSecMgrReadKeyFromNv
       6  ZDSecMgrReadKeyFromNv::?relay
      71  ZDSecMgrRemoveDeviceInd
       6  ZDSecMgrRemoveDeviceInd::?relay
      38  ZDSecMgrRequestAppKey
       6  ZDSecMgrRequestAppKey::?relay
      30  ZDSecMgrRequestKeyInd
       6  ZDSecMgrRequestKeyInd::?relay
     266  ZDSecMgrSaveApsLinkKey
       6  ZDSecMgrSaveApsLinkKey::?relay
     161  ZDSecMgrSaveTCLinkKey
       6  ZDSecMgrSaveTCLinkKey::?relay
     268  ZDSecMgrSendNwkKey
       6  ZDSecMgrSendNwkKey::?relay
     227  ZDSecMgrSetDefaultNV
       6  ZDSecMgrSetDefaultNV::?relay
      23  ZDSecMgrSwitchKeyInd
       6  ZDSecMgrSwitchKeyInd::?relay
     126  ZDSecMgrSwitchNwkKey
       6  ZDSecMgrSwitchNwkKey::?relay
       1  ZDSecMgrTCAuthenticated
      90  ZDSecMgrTCDataLoad
       6  ZDSecMgrTCDataLoad::?relay
       8  ZDSecMgrTCExtAddr
      38  ZDSecMgrTCExtAddrCheck
       6  ZDSecMgrTCExtAddrCheck::?relay
     344  ZDSecMgrTransportKeyInd
       6  ZDSecMgrTransportKeyInd::?relay
     102  ZDSecMgrUpdateDeviceInd
       6  ZDSecMgrUpdateDeviceInd::?relay
     202  ZDSecMgrUpdateNwkKey
       6  ZDSecMgrUpdateNwkKey::?relay
      54  ZDSecMgrUpdateTCAddress
       6  ZDSecMgrUpdateTCAddress::?relay
       4  __Constant_1

 
 7 298 bytes in segment BANKED_CODE
   372 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    81 bytes in segment XDATA_Z
 
 7 671 bytes of CODE  memory
     8 bytes of CONST memory (+ 4 bytes shared)
    82 bytes of XDATA memory

Errors: none
Warnings: none
