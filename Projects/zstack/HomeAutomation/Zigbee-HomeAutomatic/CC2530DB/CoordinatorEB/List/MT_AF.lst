###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Aug/2016  23:13:58
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
#        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\MT_AF.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\MT_AF.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
      4            Revision:       $Revision: 42025 $
      5          
      6            Description:    MonitorTest functions for the AF layer.
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "MT.h"
     47          #include "MT_AF.h"
     48          #include "MT_ZDO.h"
     49          #include "nwk.h"
     50          #include "OnBoard.h"
     51          #include "MT_UART.h"
     52          
     53          #if defined INTER_PAN
     54          #include "stub_aps.h"
     55          #endif
     56          
     57          #if defined ( MT_GP_FUNC )
     58          #include "MT_GP.h"
     59          #endif
     60          
     61          /* ------------------------------------------------------------------------------------------------
     62           *                                          Constants
     63           * ------------------------------------------------------------------------------------------------
     64           */
     65          
     66          #if !defined MT_AF_EXEC_CNT
     67          #define MT_AF_EXEC_CNT  15
     68          #endif
     69          
     70          #if !defined MT_AF_EXEC_DLY
     71          #define MT_AF_EXEC_DLY  1000
     72          #endif
     73          
     74          /* ------------------------------------------------------------------------------------------------
     75           *                                           Typedefs
     76           * ------------------------------------------------------------------------------------------------
     77           */
     78          
     79          typedef struct
     80          {
     81            uint8 *data;
     82            afAddrType_t dstAddr;
     83            endPointDesc_t *epDesc;
     84            uint16 cId;
     85            uint16 dataLen;
     86            uint8 transId;
     87            uint8 txOpts;
     88            uint8 radius;
     89            uint8 tick;
     90          } mtAfDataReq_t;
     91          
     92          typedef struct _mtAfInMsgList_t
     93          {
     94            struct _mtAfInMsgList_t *next;
     95            uint8 *data;
     96            uint32 timestamp;         // Receipt timestamp from MAC.
     97            uint8 tick;
     98          } mtAfInMsgList_t;
     99          
    100          /* ------------------------------------------------------------------------------------------------
    101           *                                        Local Variables
    102           * ------------------------------------------------------------------------------------------------
    103           */
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    107          
    108          /* ------------------------------------------------------------------------------------------------
    109           *                                        Global Variables
    110           * ------------------------------------------------------------------------------------------------
    111           */
    112          
    113          #if defined ( MT_AF_CB_FUNC )
    114          uint16 _afCallbackSub;
    115          #endif
    116          
    117          /* ------------------------------------------------------------------------------------------------
    118           *                                        Local Functions
    119           * ------------------------------------------------------------------------------------------------
    120           */
    121          
    122          static void MT_AfRegister(uint8 *pBuf);
    123          static void MT_AfDelete(uint8 *pBuf);
    124          static void MT_AfDataRequest(uint8 *pBuf);
    125          
    126          #if defined ( ZIGBEEPRO )
    127          static void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    128          #endif
    129          
    130          #if defined INTER_PAN
    131          static void MT_AfInterPanCtl(uint8 *pBuf);
    132          #endif
    133          
    134          static void MT_AfDataRetrieve(uint8 *pBuf);
    135          static void MT_AfDataStore(uint8 *pBuf);
    136          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    137          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    138          
    139          
    140          /**************************************************************************************************
    141           * @fn          MT_AfExec
    142           *
    143           * @brief       This function is invoked by an MT timer event.
    144           *
    145           * input parameters
    146           *
    147           * None.
    148           *
    149           * output parameters
    150           *
    151           * None.
    152           *
    153           * @return      None.
    154           **************************************************************************************************
    155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          void MT_AfExec(void)
   \                     MT_AfExec:
    157          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    158            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP    ??MT_AfExec_1
    159          
    160            while (pItem != NULL)
    161            {
    162              if (--(pItem->tick) == 0)
    163              {
    164                if (pMtAfInMsgList == pItem)
    165                {
    166                  pMtAfInMsgList = pItem->next;
    167                  (void)osal_mem_free(pItem);
    168                  pItem = pMtAfInMsgList;
    169                }
    170                else
    171                {
    172                  pPrev->next = pItem->next;
    173                  (void)osal_mem_free(pItem);
    174                  pItem = pPrev->next;
    175                }
    176              }
    177              else
    178              {
    179                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    180                pItem = pItem->next;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
    181              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   603F         JZ      ??MT_AfExec_3
   \   000019   EA           MOV     A,R2
   \   00001A   2408         ADD     A,#0x8
   \   00001C   F582         MOV     DPL,A
   \   00001E   E4           CLR     A
   \   00001F   3B           ADDC    A,R3
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   14           DEC     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   70E3         JNZ     ??MT_AfExec_2
   \   000027   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00002A   EA           MOV     A,R2
   \   00002B   68           XRL     A,R0
   \   00002C   7002         JNZ     ??MT_AfExec_4
   \   00002E   EB           MOV     A,R3
   \   00002F   69           XRL     A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   700D         JNZ     ??MT_AfExec_5
   \   000036   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E                ; Setup parameters for call to function osal_mem_free
   \   00003E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000041   80C2         SJMP    ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   000043   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E8           MOV     A,R0
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E9           MOV     A,R1
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   80BA         SJMP    ??MT_AfExec_1
    182            }
    183          
    184            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000058   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00005B   601A         JZ      ??MT_AfExec_6
    185            {
    186              if (--(pMtAfDataReq->tick) == 0)
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C8           XCH     A,R0
   \   00005F   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000062   E0           MOVX    A,@DPTR
   \   000063   14           DEC     A
   \   000064   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   700D         JNZ     ??MT_AfExec_6
    187              {
    188                (void)osal_mem_free(pMtAfDataReq);
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00006D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    189                pMtAfDataReq = NULL;
   \   000070   90....       MOV     DPTR,#pMtAfDataReq
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
    190              }
    191            }
    192          
    193            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   000077   90....       MOV     DPTR,#pMtAfInMsgList
   \   00007A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00007D   7005         JNZ     ??MT_AfExec_7
   \   00007F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000082   6026         JZ      ??MT_AfExec_8
    194            {
    195              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000084                ; Setup parameters for call to function osal_start_timerEx
   \   000084   90....       MOV     DPTR,#__Constant_3e8
   \   000087   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00008A   7A08         MOV     R2,#0x8
   \   00008C   7B00         MOV     R3,#0x0
   \   00008E   90....       MOV     DPTR,#MT_TaskID
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   E9           MOV     A,R1
   \   00009C   600C         JZ      ??MT_AfExec_8
    196              {
    197                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00009E                ; Setup parameters for call to function osal_set_event
   \   00009E   7A08         MOV     R2,#0x8
   \   0000A0   7B00         MOV     R3,#0x0
   \   0000A2   90....       MOV     DPTR,#MT_TaskID
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    198              }
    199            }
    200          }
   \                     ??MT_AfExec_8:
   \   0000AA   7F01         MOV     R7,#0x1
   \   0000AC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000004   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   2417         ADD     A,#0x17
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   90....       MOV     DPTR,#pMtAfInMsgList
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C8           XCH     A,R0
   \   000008   22           RET
    201          
    202          /***************************************************************************************************
    203           * @fn      MT_AfCommandProcessing
    204           *
    205           * @brief   Process all the AF commands that are issued by test tool
    206           *
    207           * @param   pBuf - pointer to the received buffer
    208           *
    209           * @return  status
    210           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    213            uint8 status = MT_RPC_SUCCESS;
   \   00000A   75..00       MOV     ?V0,#0x0
    214          
    215            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000D   EA           MOV     A,R2
   \   00000E   2403         ADD     A,#0x3
   \   000010   F5..         MOV     ?V2,A
   \   000012   E4           CLR     A
   \   000013   3B           ADDC    A,R3
   \   000014   F5..         MOV     ?V3,A
   \   000016   EA           MOV     A,R2
   \   000017   2402         ADD     A,#0x2
   \   000019   F8           MOV     R0,A
   \   00001A   E4           CLR     A
   \   00001B   3B           ADDC    A,R3
   \   00001C   F9           MOV     R1,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6031         JZ      ??MT_AfCommandProcessing_0
   \   000024   14           DEC     A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??MT_AfCommandProcessing_1 & 0xFFFF
   \   00002A   14           DEC     A
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??MT_AfCommandProcessing_1 & 0xFFFF
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??MT_AfCommandProcessing_2 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   607A         JZ      ??MT_AfCommandProcessing_3
   \   000039   24F3         ADD     A,#-0xd
   \   00003B   7003         JNZ     $+5
   \   00003D   02....       LJMP    ??MT_AfCommandProcessing_4 & 0xFFFF
   \   000040   14           DEC     A
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??MT_AfCommandProcessing_5 & 0xFFFF
   \   000046   14           DEC     A
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??MT_AfCommandProcessing_6 & 0xFFFF
   \   00004C   14           DEC     A
   \   00004D   7003         JNZ     $+5
   \   00004F   02....       LJMP    ??MT_AfCommandProcessing_7 & 0xFFFF
   \   000052   02....       LJMP    ??MT_AfCommandProcessing_8 & 0xFFFF
    216            {
    217              case MT_AF_REGISTER:
    218                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000055   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V1,A
   \   00005B                ; Setup parameters for call to function osal_mem_alloc
   \   00005B   7A06         MOV     R2,#0x6
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000062   8A..         MOV     ?V4,R2
   \   000064   8B..         MOV     ?V5,R3
   \   000066   AE..         MOV     R6,?V4
   \   000068   AF..         MOV     R7,?V5
   \   00006A   EE           MOV     A,R6
   \   00006B   4F           ORL     A,R7
   \   00006C   603A         JZ      ??MT_AfCommandProcessing_9
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#MT_TaskID & 0xff
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   000079   F0           MOVX    @DPTR,A
   \   00007A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00007A   EE           MOV     A,R6
   \   00007B   FC           MOV     R4,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   AA..         MOV     R2,?V2
   \   000080   AB..         MOV     R3,?V3
   \   000082   12....       LCALL   `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   000085   E9           MOV     A,R1
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   700F         JNZ     ??MT_AfCommandProcessing_10
   \   00008F                ; Setup parameters for call to function afRegister
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000096   E9           MOV     A,R1
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   F0           MOVX    @DPTR,A
   \                     ??MT_AfCommandProcessing_10:
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6007         JZ      ??MT_AfCommandProcessing_9
   \   0000A1                ; Setup parameters for call to function osal_mem_free
   \   0000A1   EE           MOV     A,R6
   \   0000A2   FA           MOV     R2,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   FB           MOV     R3,A
   \   0000A5   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??MT_AfCommandProcessing_9:
   \   0000A8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000A8   AC..         MOV     R4,?XSP + 0
   \   0000AA   AD..         MOV     R5,?XSP + 1
   \   0000AC   7B01         MOV     R3,#0x1
   \   0000AE   AA..         MOV     R2,?V1
   \   0000B0   02....       LJMP    ??MT_AfCommandProcessing_11 & 0xFFFF
    219                break;
    220          
    221              case MT_AF_DELETE:
    222                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   0000B3   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FE           MOV     R6,A
   \   0000B8                ; Setup parameters for call to function afDelete
   \   0000B8   85..82       MOV     DPL,?V2
   \   0000BB   85..83       MOV     DPH,?V3
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   `??afDelete::?relay` ; Banked call to: afDelete
   \   0000C3   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000C6   EE           MOV     A,R6
   \   0000C7   FA           MOV     R2,A
   \   0000C8   02....       LJMP    ??MT_AfCommandProcessing_11 & 0xFFFF
    223                break;
    224          
    225              case MT_AF_DATA_REQUEST:
    226              case MT_AF_DATA_REQUEST_EXT:
    227                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   0000CB                ; Setup parameters for call to function MT_AfDataRequest
   \   0000CB   12....       LCALL   `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    228                break;
   \   0000CE   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    229          
    230          #if defined( ZIGBEEPRO )
    231              case MT_AF_DATA_REQUEST_SRCRTG:
    232                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   0000D1                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   0000D1   12....       LCALL   `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    233                break;
   \   0000D4   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    234          #endif
    235          
    236          #if defined INTER_PAN
    237              case MT_AF_INTER_PAN_CTL:
    238                MT_AfInterPanCtl(pBuf);
    239                break;
    240          #endif
    241          
    242              case MT_AF_DATA_RETRIEVE:
    243                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   0000D7                ; Setup parameters for call to function MT_AfDataRetrieve
   \   0000D7   12....       LCALL   `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    244                break;
   \   0000DA   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    245          
    246              case MT_AF_DATA_STORE:
    247                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   0000DD                ; Setup parameters for call to function MT_AfDataStore
   \   0000DD   12....       LCALL   `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    248                break;
   \   0000E0   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    249          
    250              case MT_AF_APSF_CONFIG_SET:
    251                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   0000E3   8A82         MOV     DPL,R2
   \   0000E5   8B83         MOV     DPH,R3
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   C0E0         PUSH    A
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   D0E0         POP     A
   \   0000F5   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   C0E0         PUSH    A
   \   0000FC   7402         MOV     A,#0x2
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   D0E0         POP     A
   \   000103   F0           MOVX    @DPTR,A
   \   000104                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000104   7401         MOV     A,#0x1
   \   000106   12....       LCALL   ?XSTACK_DISP101_8
   \   000109   85..82       MOV     DPL,?V2
   \   00010C   85..83       MOV     DPH,?V3
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F9           MOV     R1,A
   \   000111   12....       LCALL   `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   000114   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000117   7A13         MOV     R2,#0x13
   \   000119   8045         SJMP    ??MT_AfCommandProcessing_11
    252                break;
    253          
    254              case MT_AF_APSF_CONFIG_GET:
    255                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   00011B   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   00011E   7401         MOV     A,#0x1
   \   000120   12....       LCALL   ?XSTACK_DISP102_8
   \   000123   7402         MOV     A,#0x2
   \   000125   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000128                ; Setup parameters for call to function afAPSF_ConfigGet
   \   000128   04           INC     A
   \   000129   12....       LCALL   ?XSTACK_DISP101_8
   \   00012C   85..82       MOV     DPL,?V2
   \   00012F   85..83       MOV     DPH,?V3
   \   000132   E0           MOVX    A,@DPTR
   \   000133   F9           MOV     R1,A
   \   000134   12....       LCALL   `??afAPSF_ConfigGet::?relay`; Banked call to: afAPSF_ConfigGet
   \   000137   7401         MOV     A,#0x1
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   C0E0         PUSH    A
   \   00013F   7403         MOV     A,#0x3
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   D0E0         POP     A
   \   000146   F0           MOVX    @DPTR,A
   \   000147   7402         MOV     A,#0x2
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   C0E0         PUSH    A
   \   00014F   7404         MOV     A,#0x4
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   D0E0         POP     A
   \   000156   F0           MOVX    @DPTR,A
   \   000157                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000157   7403         MOV     A,#0x3
   \   000159   12....       LCALL   ?XSTACK_DISP102_8
   \   00015C   7B03         MOV     R3,#0x3
   \   00015E   7A14         MOV     R2,#0x14
   \                     ??MT_AfCommandProcessing_11:
   \   000160   7964         MOV     R1,#0x64
   \   000162   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    256                break;
   \   000165   8003         SJMP    ??MT_AfCommandProcessing_12
    257          
    258              default:
    259                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_8:
   \   000167   75..02       MOV     ?V0,#0x2
    260                break;
    261            }
    262          
    263            return status;
   \                     ??MT_AfCommandProcessing_12:
   \   00016A   A9..         MOV     R1,?V0
   \   00016C   7405         MOV     A,#0x5
   \   00016E                REQUIRE ?Subroutine0
   \   00016E                ; // Fall through to label ?Subroutine0
    264          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F06         MOV     R7,#0x6
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    265          
    266          /***************************************************************************************************
    267           * @fn      MT_AfRegister
    268           *
    269           * @brief   Process AF Register command
    270           *
    271           * @param   pBuf - pointer to the received buffer
    272           *
    273           * @return  none
    274           ***************************************************************************************************/
    275          static void MT_AfRegister(uint8 *pBuf)
    276          {
    277            uint8 cmdId;
    278            uint8 retValue = ZMemError;
    279            endPointDesc_t *epDesc;
    280          
    281            /* parse header */
    282            cmdId = pBuf[MT_RPC_POS_CMD1];
    283            pBuf += MT_RPC_FRAME_HDR_SZ;
    284          
    285            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
    286            if ( epDesc )
    287            {
    288              epDesc->task_id = &MT_TaskID;
    289              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
    290              if ( retValue == ZSuccess )
    291              {
    292                retValue = afRegister( epDesc );
    293              }
    294          
    295              if ( retValue != ZSuccess )
    296              {
    297                osal_mem_free( epDesc );
    298              }
    299            }
    300          
    301            /* Build and send back the response */
    302            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    303          }
    304          
    305          /***************************************************************************************************
    306           * @fn      MT_AfDelete
    307           *
    308           * @brief   Process AF Delete Endpoint command
    309           *
    310           * @param   pBuf - pointer to the received buffer
    311           *
    312           * @return  none
    313           ***************************************************************************************************/
    314          static void MT_AfDelete(uint8 *pBuf)
    315          {
    316            uint8 cmdId;
    317            uint8 retValue = ZMemError;
    318          
    319            /* parse header */
    320            cmdId = pBuf[MT_RPC_POS_CMD1];
    321            pBuf += MT_RPC_FRAME_HDR_SZ;
    322          
    323            retValue = afDelete( *pBuf );
    324          
    325            /* Build and send back the response */
    326            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    327          }
    328          
    329          /***************************************************************************************************
    330           * @fn      MT_AfDataRequest
    331           *
    332           * @brief   Process AF Register command
    333           *
    334           * @param   pBuf - pointer to the received buffer
    335           *
    336           * @return  none
    337           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          static void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    340            #define MT_AF_REQ_MSG_LEN  10
    341            #define MT_AF_REQ_MSG_EXT  10
    342          
    343            endPointDesc_t *epDesc;
    344            afAddrType_t dstAddr;
    345            cId_t cId;
    346            uint8 transId, txOpts, radius;
    347            uint8 cmd0, cmd1;
    348            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?Subroutine34 & 0xFFFF
    349            uint16 dataLen, tempLen;
    350          
    351            /* Parse header */
    352            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_78:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V12,A
    353            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V9,A
    354            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000025   EE           MOV     A,R6
   \   000026   2403         ADD     A,#0x3
   \   000028   FE           MOV     R6,A
   \   000029   5001         JNC     ??MT_AfDataRequest_0
   \   00002B   0F           INC     R7
    355          
    356            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002C   7402         MOV     A,#0x2
   \   00002E   65..         XRL     A,?V9
   \   000030   7079         JNZ     ??MT_AfDataRequest_1
    357            {
    358              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   740A         MOV     A,#0xa
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E8           MOV     A,R0
   \   00003E   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000041   AE82         MOV     R6,DPL
   \   000043   AF83         MOV     R7,DPH
    359          
    360              if (dstAddr.addrMode == afAddr64Bit)
   \   000045   7403         MOV     A,#0x3
   \   000047   68           XRL     A,R0
   \   000048   701F         JNZ     ??MT_AfDataRequest_2
    361              {
    362                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00004A                ; Setup parameters for call to function osal_memcpy
   \   00004A   8E..         MOV     ?V0,R6
   \   00004C   8F..         MOV     ?V1,R7
   \   00004E   75..00       MOV     ?V2,#0x0
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000056   7C08         MOV     R4,#0x8
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7405         MOV     A,#0x5
   \   00005C   12....       LCALL   ?XSTACK_DISP101_8
   \   00005F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   8011         SJMP    ??MT_AfDataRequest_3
    363              }
    364              else
    365              {
    366                dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_2:
   \   000069                ; Setup parameters for call to function osal_build_uint16
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000070   7402         MOV     A,#0x2
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   EA           MOV     A,R2
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   EB           MOV     A,R3
   \   000079   F0           MOVX    @DPTR,A
    367              }
    368              pBuf += Z_EXTADDR_LEN;
    369          
    370              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C0E0         PUSH    A
   \   000089   740B         MOV     A,#0xb
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   \   000091   EE           MOV     A,R6
   \   000092   2409         ADD     A,#0x9
   \   000094   FE           MOV     R6,A
   \   000095   5001         JNC     ??MT_AfDataRequest_4
   \   000097   0F           INC     R7
    371              dstAddr.panId = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_4:
   \   000098                ; Setup parameters for call to function osal_build_uint16
   \   000098   FA           MOV     R2,A
   \   000099   EF           MOV     A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00009E   740C         MOV     A,#0xc
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL   ?Subroutine28 & 0xFFFF
    372              pBuf += 2;
    373            }
   \                     ??CrossCallReturnLabel_42:
   \   0000A6   5035         JNC     ??MT_AfDataRequest_5
   \   0000A8   0F           INC     R7
   \   0000A9   8032         SJMP    ??MT_AfDataRequest_5
    374            else
    375            {
    376              /* Destination address */
    377              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000AB   740A         MOV     A,#0xa
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   F0           MOVX    @DPTR,A
    378              dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   0000B3                ; Setup parameters for call to function osal_build_uint16
   \   0000B3   0A           INC     R2
   \   0000B4   0A           INC     R2
   \   0000B5   0A           INC     R2
   \   0000B6   EF           MOV     A,R7
   \   0000B7   FB           MOV     R3,A
   \   0000B8   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine22 & 0xFFFF
    379              pBuf += 2;
    380          
    381              /* Destination endpoint */
    382              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_75:
   \   0000C3   C0E0         PUSH    A
   \   0000C5   740B         MOV     A,#0xb
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   D0E0         POP     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   EE           MOV     A,R6
   \   0000CE   2403         ADD     A,#0x3
   \   0000D0   FE           MOV     R6,A
   \   0000D1   5001         JNC     ??MT_AfDataRequest_6
   \   0000D3   0F           INC     R7
    383              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_6:
   \   0000D4   740C         MOV     A,#0xc
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   E4           CLR     A
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   F0           MOVX    @DPTR,A
    384            }
    385          
    386            /* Source endpoint */
    387            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   0000DD                ; Setup parameters for call to function afFindEndPointDesc
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000E6   8A..         MOV     ?V10,R2
   \   0000E8   8B..         MOV     ?V11,R3
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   A3           INC     DPTR
   \   0000EF   AE82         MOV     R6,DPL
   \   0000F1   AF83         MOV     R7,DPH
    388          
    389            /* ClusterId */
    390            cId = osal_build_uint16( pBuf );
   \   0000F3                ; Setup parameters for call to function osal_build_uint16
   \   0000F3   EE           MOV     A,R6
   \   0000F4   FA           MOV     R2,A
   \   0000F5   EF           MOV     A,R7
   \   0000F6   FB           MOV     R3,A
   \   0000F7   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000FA   8A..         MOV     ?V2,R2
   \   0000FC   8B..         MOV     ?V3,R3
    391            pBuf +=2;
    392          
    393            /* TransId */
    394            transId = *pBuf++;
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   C0E0         PUSH    A
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   D0E0         POP     A
   \   00010E   F0           MOVX    @DPTR,A
    395          
    396            /* TxOption */
    397            txOpts = *pBuf++;
   \   00010F   8E82         MOV     DPL,R6
   \   000111   8F83         MOV     DPH,R7
   \   000113   12....       LCALL   ?Subroutine12 & 0xFFFF
    398          
    399            /* Radius */
    400            radius = *pBuf++;
   \                     ??CrossCallReturnLabel_16:
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F5..         MOV     ?V7,A
   \   000119   EE           MOV     A,R6
   \   00011A   2405         ADD     A,#0x5
   \   00011C   FE           MOV     R6,A
   \   00011D   5001         JNC     ??MT_AfDataRequest_7
   \   00011F   0F           INC     R7
    401          
    402            /* Length */
    403            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_7:
   \   000120   7402         MOV     A,#0x2
   \   000122   65..         XRL     A,?V9
   \   000124   701C         JNZ     ??MT_AfDataRequest_8
    404            {
    405              dataLen = osal_build_uint16( pBuf );
   \   000126                ; Setup parameters for call to function osal_build_uint16
   \   000126   EE           MOV     A,R6
   \   000127   FA           MOV     R2,A
   \   000128   EF           MOV     A,R7
   \   000129   FB           MOV     R3,A
   \   00012A   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00012D   8A..         MOV     ?V0,R2
   \   00012F   8B..         MOV     ?V1,R3
    406              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000131   EA           MOV     A,R2
   \   000132   2414         ADD     A,#0x14
   \   000134   F8           MOV     R0,A
   \   000135   E4           CLR     A
   \   000136   35..         ADDC    A,?V1
   \   000138   F9           MOV     R1,A
    407              pBuf += 2;
   \   000139   EE           MOV     A,R6
   \   00013A   2402         ADD     A,#0x2
   \   00013C   FE           MOV     R6,A
   \   00013D   5018         JNC     ??MT_AfDataRequest_9
   \   00013F   0F           INC     R7
   \   000140   8015         SJMP    ??MT_AfDataRequest_9
    408            }
    409            else
    410            {
    411              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   000142   8E82         MOV     DPL,R6
   \   000144   8F83         MOV     DPH,R7
   \   000146   E0           MOVX    A,@DPTR
   \   000147   F5..         MOV     ?V0,A
   \   000149   75..00       MOV     ?V1,#0x0
   \   00014C   A3           INC     DPTR
   \   00014D   0E           INC     R6
   \   00014E   AF83         MOV     R7,DPH
    412              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000150   240A         ADD     A,#0xa
   \   000152   F8           MOV     R0,A
   \   000153   E4           CLR     A
   \   000154   3400         ADDC    A,#0x0
   \   000156   F9           MOV     R1,A
    413            }
    414          
    415            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   000157   E5..         MOV     A,?V10
   \   000159   45..         ORL     A,?V11
   \   00015B   6011         JZ      ??MT_AfDataRequest_10
    416            {
    417              retValue = afStatus_INVALID_PARAMETER;
    418            }
    419            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   00015D   C3           CLR     C
   \   00015E   E8           MOV     A,R0
   \   00015F   94FB         SUBB    A,#-0x5
   \   000161   E9           MOV     A,R1
   \   000162   9400         SUBB    A,#0x0
   \   000164   5003         JNC     $+5
   \   000166   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    420            {
    421              if (pMtAfDataReq != NULL)
   \   000169   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00016C   600B         JZ      ??MT_AfDataRequest_12
    422              {
    423                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_10:
   \   00016E   85..82       MOV     DPL,?XSP + 0
   \   000171   85..83       MOV     DPH,?XSP + 1
   \   000174   7402         MOV     A,#0x2
   \   000176   02....       LJMP    ??MT_AfDataRequest_13 & 0xFFFF
    424              }
    425              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_12:
   \   000179                ; Setup parameters for call to function osal_mem_alloc
   \   000179   E5..         MOV     A,?V0
   \   00017B   2418         ADD     A,#0x18
   \   00017D   FA           MOV     R2,A
   \   00017E   E4           CLR     A
   \   00017F   35..         ADDC    A,?V1
   \   000181   FB           MOV     R3,A
   \   000182   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000185   90....       MOV     DPTR,#pMtAfDataReq
   \   000188   EA           MOV     A,R2
   \   000189   F0           MOVX    @DPTR,A
   \   00018A   A3           INC     DPTR
   \   00018B   EB           MOV     A,R3
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000190   85..82       MOV     DPL,?XSP + 0
   \   000193   85..83       MOV     DPH,?XSP + 1
   \   000196   7005         JNZ     ??MT_AfDataRequest_14
    426              {
    427                retValue = afStatus_MEM_FAIL;
   \   000198   7410         MOV     A,#0x10
   \   00019A   02....       LJMP    ??MT_AfDataRequest_13 & 0xFFFF
    428              }
    429              else
    430              {
    431                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   00019D   E4           CLR     A
   \   00019E   F0           MOVX    @DPTR,A
    432          
    433                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   00019F   90....       MOV     DPTR,#pMtAfDataReq
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   2418         ADD     A,#0x18
   \   0001A5   FA           MOV     R2,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   3400         ADDC    A,#0x0
   \   0001AA   FB           MOV     R3,A
   \   0001AB   90....       MOV     DPTR,#pMtAfDataReq
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   F8           MOV     R0,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   F583         MOV     DPH,A
   \   0001B4   8882         MOV     DPL,R0
   \   0001B6   EA           MOV     A,R2
   \   0001B7   F0           MOVX    @DPTR,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   EB           MOV     A,R3
   \   0001BA   F0           MOVX    @DPTR,A
    434                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001BB                ; Setup parameters for call to function osal_memcpy
   \   0001BB   7402         MOV     A,#0x2
   \   0001BD   12....       LCALL   ?XSTACK_DISP100_8
   \   0001C0   88..         MOV     ?V4,R0
   \   0001C2   89..         MOV     ?V5,R1
   \   0001C4   75..00       MOV     ?V6,#0x0
   \   0001C7   78..         MOV     R0,#?V4
   \   0001C9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001CC   7C0C         MOV     R4,#0xc
   \   0001CE   7D00         MOV     R5,#0x0
   \   0001D0   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001D3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001D6   7403         MOV     A,#0x3
   \   0001D8   12....       LCALL   ?DEALLOC_XSTACK8
    435                pMtAfDataReq->epDesc = epDesc;
   \   0001DB   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001DE   E5..         MOV     A,?V10
   \   0001E0   F0           MOVX    @DPTR,A
   \   0001E1   A3           INC     DPTR
   \   0001E2   E5..         MOV     A,?V11
   \   0001E4   F0           MOVX    @DPTR,A
    436                pMtAfDataReq->cId = cId;
   \   0001E5   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001E8   E5..         MOV     A,?V2
   \   0001EA   F0           MOVX    @DPTR,A
   \   0001EB   A3           INC     DPTR
   \   0001EC   E5..         MOV     A,?V3
   \   0001EE   F0           MOVX    @DPTR,A
    437                pMtAfDataReq->dataLen = dataLen;
   \   0001EF   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001F2   E5..         MOV     A,?V0
   \   0001F4   F0           MOVX    @DPTR,A
   \   0001F5   A3           INC     DPTR
   \   0001F6   E5..         MOV     A,?V1
   \   0001F8   F0           MOVX    @DPTR,A
    438                pMtAfDataReq->transId = transId;
   \   0001F9   7401         MOV     A,#0x1
   \   0001FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   C0E0         PUSH    A
   \   000201   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000204   2414         ADD     A,#0x14
   \   000206   F582         MOV     DPL,A
   \   000208   E4           CLR     A
   \   000209   38           ADDC    A,R0
   \   00020A   F583         MOV     DPH,A
   \   00020C   D0E0         POP     A
   \   00020E   F0           MOVX    @DPTR,A
    439                pMtAfDataReq->txOpts = txOpts;
   \   00020F   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000212   E5..         MOV     A,?V8
   \   000214   F0           MOVX    @DPTR,A
    440                pMtAfDataReq->radius = radius;
   \   000215   90....       MOV     DPTR,#pMtAfDataReq
   \   000218   E0           MOVX    A,@DPTR
   \   000219   F8           MOV     R0,A
   \   00021A   A3           INC     DPTR
   \   00021B   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00021E   E5..         MOV     A,?V7
   \   000220   12....       LCALL   ?Subroutine4 & 0xFFFF
    441          
    442                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    443                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_2:
   \   000223   740F         MOV     A,#0xf
   \   000225   F0           MOVX    @DPTR,A
    444                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000226                ; Setup parameters for call to function osal_start_timerEx
   \   000226   90....       MOV     DPTR,#__Constant_3e8
   \   000229   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00022C   7A08         MOV     R2,#0x8
   \   00022E   7B00         MOV     R3,#0x0
   \   000230   90....       MOV     DPTR,#MT_TaskID
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F9           MOV     R1,A
   \   000235   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000238   7404         MOV     A,#0x4
   \   00023A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023D   E9           MOV     A,R1
   \   00023E   6053         JZ      ??MT_AfDataRequest_15
    445                {
    446                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000240                ; Setup parameters for call to function osal_set_event
   \   000240   7A08         MOV     R2,#0x8
   \   000242   7B00         MOV     R3,#0x0
   \   000244   90....       MOV     DPTR,#MT_TaskID
   \   000247   E0           MOVX    A,@DPTR
   \   000248   F9           MOV     R1,A
   \   000249   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00024C   8045         SJMP    ??MT_AfDataRequest_15
    447                }
    448              }
    449            }
    450          #if defined ( MT_GP_FUNC )
    451            else if ( ( cmd1 == MT_AF_DATA_REQUEST_EXT )
    452                     && ( dstAddr.endPoint == ZGP_ENDPOINT_ID )
    453                     && ( dstAddr.panId == 0 )
    454                     && ( dstAddr.addrMode == afAddr64Bit ) )// loopback support
    455            {
    456              retValue = MT_GpGenerateResponse( dstAddr.addr.extAddr, dataLen, pBuf );
    457            }
    458          #endif
    459            else
    460            {
    461              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_11:
   \   00024E                ; Setup parameters for call to function AF_DataRequest
   \   00024E   E5..         MOV     A,?V7
   \   000250   F5..         MOV     ?V4,A
   \   000252   78..         MOV     R0,#?V4
   \   000254   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000257   7402         MOV     A,#0x2
   \   000259   12....       LCALL   ?XSTACK_DISP100_8
   \   00025C   88..         MOV     ?V4,R0
   \   00025E   89..         MOV     ?V5,R1
   \   000260   78..         MOV     R0,#?V4
   \   000262   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000265   8E..         MOV     ?V4,R6
   \   000267   8F..         MOV     ?V5,R7
   \   000269   78..         MOV     R0,#?V4
   \   00026B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026E   78..         MOV     R0,#?V0
   \   000270   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000273   78..         MOV     R0,#?V2
   \   000275   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000278   A9..         MOV     R1,?V8
   \   00027A   AC..         MOV     R4,?V10
   \   00027C   AD..         MOV     R5,?V11
   \   00027E   740B         MOV     A,#0xb
   \   000280   12....       LCALL   ?XSTACK_DISP101_8
   \   000283   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000286   7409         MOV     A,#0x9
   \   000288   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028B   E9           MOV     A,R1
   \   00028C   85..82       MOV     DPL,?XSP + 0
   \   00028F   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequest_13:
   \   000292   F0           MOVX    @DPTR,A
    462            }
    463          
    464            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_15:
   \   000293   74E0         MOV     A,#-0x20
   \   000295   55..         ANL     A,?V12
   \   000297   6420         XRL     A,#0x20
   \   000299   700D         JNZ     ??MT_AfDataRequest_16
    465            {
    466              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   00029B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00029B   AC..         MOV     R4,?XSP + 0
   \   00029D   AD..         MOV     R5,?XSP + 1
   \   00029F   7B01         MOV     R3,#0x1
   \   0002A1   AA..         MOV     R2,?V9
   \   0002A3   7964         MOV     R1,#0x64
   \   0002A5   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    467            }
    468          }
   \                     ??MT_AfDataRequest_16:
   \   0002A8   740E         MOV     A,#0xe
   \   0002AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002AD   7F0D         MOV     R7,#0xd
   \   0002AF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   2402         ADD     A,#0x2
   \   000008   FE           MOV     R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V8,A
   \   000006   8E82         MOV     DPL,R6
   \   000008   8F83         MOV     DPH,R7
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2402         ADD     A,#0x2
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C8           XCH     A,R0
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   38           ADDC    A,R0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   2415         ADD     A,#0x15
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   2412         ADD     A,#0x12
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   2410         ADD     A,#0x10
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   240E         ADD     A,#0xe
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
    469          
    470          #if defined( ZIGBEEPRO )
    471          /***************************************************************************************************
    472           * @fn      MT_AfDataRequestSrcRtg
    473           *
    474           * @brief   Process AF Register command
    475           *
    476           * @param   pBuf - pointer to the received buffer
    477           *
    478           * @return  none
    479           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          static void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    482            uint8 cmdId, dataLen = 0;
    483            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    484            endPointDesc_t *epDesc;
    485            byte transId;
    486            afAddrType_t dstAddr;
    487            cId_t cId;
    488            byte txOpts, radius, srcEP, relayCnt;
    489            uint16 *pRelayList;
    490            uint8 i;
    491          
    492            /* parse header */
    493            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_77:
   \   000019   F5..         MOV     ?V6,A
    494            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001B   EE           MOV     A,R6
   \   00001C   2403         ADD     A,#0x3
   \   00001E   FE           MOV     R6,A
   \   00001F   5001         JNC     ??MT_AfDataRequestSrcRtg_0
   \   000021   0F           INC     R7
    495          
    496            /* Destination address */
    497            /* Initialize the panID field to zero to avoid inter-pan */
    498            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000022                ; Setup parameters for call to function osal_memset
   \   000022   7C0C         MOV     R4,#0xc
   \   000024   7D00         MOV     R5,#0x0
   \   000026   7900         MOV     R1,#0x0
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP101_8
   \   00002D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    499            dstAddr.addrMode = afAddr16Bit;
   \   000030   740A         MOV     A,#0xa
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7402         MOV     A,#0x2
   \   000037   F0           MOVX    @DPTR,A
    500            dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   000038                ; Setup parameters for call to function osal_build_uint16
   \   000038   EE           MOV     A,R6
   \   000039   FA           MOV     R2,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine22 & 0xFFFF
    501            pBuf += 2;
    502          
    503            /* Destination endpoint */
    504            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_76:
   \   000047   C0E0         PUSH    A
   \   000049   740B         MOV     A,#0xb
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   D0E0         POP     A
   \   000050   12....       LCALL   ?Subroutine26 & 0xFFFF
    505          
    506            /* Source endpoint */
    507            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_38:
   \   000053   F9           MOV     R1,A
   \   000054   EE           MOV     A,R6
   \   000055   2404         ADD     A,#0x4
   \   000057   FE           MOV     R6,A
   \   000058   5001         JNC     ??MT_AfDataRequestSrcRtg_1
   \   00005A   0F           INC     R7
    508            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00005B                ; Setup parameters for call to function afFindEndPointDesc
   \   00005B   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00005E   8A..         MOV     ?V2,R2
   \   000060   8B..         MOV     ?V3,R3
    509          
    510            /* ClusterId */
    511            cId = osal_build_uint16( pBuf );
   \   000062                ; Setup parameters for call to function osal_build_uint16
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000069   8A..         MOV     ?V4,R2
   \   00006B   8B..         MOV     ?V5,R3
    512            pBuf +=2;
    513          
    514            /* TransId */
    515            transId = *pBuf++;
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   C0E0         PUSH    A
   \   000076   7401         MOV     A,#0x1
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   D0E0         POP     A
   \   00007D   12....       LCALL   ?Subroutine26 & 0xFFFF
    516          
    517            /* TxOption */
    518            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_39:
   \   000080   F5..         MOV     ?V7,A
    519          
    520            /* Radius */
    521            radius = *pBuf++;
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   12....       LCALL   ?Subroutine12 & 0xFFFF
    522          
    523            /* Source route relay count */
    524            relayCnt = *pBuf++;
   \                     ??CrossCallReturnLabel_17:
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V9,A
   \   00008E   EE           MOV     A,R6
   \   00008F   2406         ADD     A,#0x6
   \   000091   FE           MOV     R6,A
   \   000092   5001         JNC     ??MT_AfDataRequestSrcRtg_2
   \   000094   0F           INC     R7
    525          
    526            /* Convert the source route relay list */
    527            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   000095                ; Setup parameters for call to function osal_mem_alloc
   \   000095   AA..         MOV     R2,?V9
   \   000097   EA           MOV     A,R2
   \   000098   2A           ADD     A,R2
   \   000099   FA           MOV     R2,A
   \   00009A   E4           CLR     A
   \   00009B   33           RLC     A
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A0   8A..         MOV     ?V0,R2
   \   0000A2   8B..         MOV     ?V1,R3
   \   0000A4   EA           MOV     A,R2
   \   0000A5   45..         ORL     A,?V1
   \   0000A7   7003         JNZ     $+5
   \   0000A9   02....       LJMP    ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    528            {
    529              for( i = 0; i < relayCnt; i++ )
   \   0000AC   75..00       MOV     ?V10,#0x0
   \   0000AF   8021         SJMP    ??MT_AfDataRequestSrcRtg_4
    530              {
    531                pRelayList[i] = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000B1                ; Setup parameters for call to function osal_build_uint16
   \   0000B1   EE           MOV     A,R6
   \   0000B2   FA           MOV     R2,A
   \   0000B3   EF           MOV     A,R7
   \   0000B4   FB           MOV     R3,A
   \   0000B5   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000B8   A8..         MOV     R0,?V10
   \   0000BA   E8           MOV     A,R0
   \   0000BB   28           ADD     A,R0
   \   0000BC   F8           MOV     R0,A
   \   0000BD   E4           CLR     A
   \   0000BE   33           RLC     A
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E5..         MOV     A,?V0
   \   0000C2   28           ADD     A,R0
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   E5..         MOV     A,?V1
   \   0000C7   39           ADDC    A,R1
   \   0000C8   F583         MOV     DPH,A
   \   0000CA   12....       LCALL   ?Subroutine28 & 0xFFFF
    532                pBuf += 2;
    533              }
   \                     ??CrossCallReturnLabel_43:
   \   0000CD   5001         JNC     ??MT_AfDataRequestSrcRtg_6
   \   0000CF   0F           INC     R7
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000D0   05..         INC     ?V10
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000D2   E5..         MOV     A,?V10
   \   0000D4   C3           CLR     C
   \   0000D5   95..         SUBB    A,?V9
   \   0000D7   40D8         JC      ??MT_AfDataRequestSrcRtg_5
    534          
    535              /* Data payload Length */
    536              dataLen = *pBuf++;
   \   0000D9   8E82         MOV     DPL,R6
   \   0000DB   8F83         MOV     DPH,R7
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F5..         MOV     ?V10,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   AE82         MOV     R6,DPL
   \   0000E3   AF83         MOV     R7,DPH
    537          
    538              if ( epDesc == NULL )
   \   0000E5   E5..         MOV     A,?V2
   \   0000E7   45..         ORL     A,?V3
   \   0000E9   700A         JNZ     ??MT_AfDataRequestSrcRtg_7
    539              {
    540                retValue = afStatus_INVALID_PARAMETER;
   \   0000EB   85..82       MOV     DPL,?XSP + 0
   \   0000EE   85..83       MOV     DPH,?XSP + 1
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   804D         SJMP    ??MT_AfDataRequestSrcRtg_8
    541              }
    542              else
    543              {
    544                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    545                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0000F5                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0000F5   78..         MOV     R0,#?V0
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FA   78..         MOV     R0,#?V9
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FF   78..         MOV     R0,#?V8
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000104   7405         MOV     A,#0x5
   \   000106   12....       LCALL   ?XSTACK_DISP100_8
   \   000109   88..         MOV     ?V8,R0
   \   00010B   89..         MOV     ?V9,R1
   \   00010D   78..         MOV     R0,#?V8
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   8E..         MOV     ?V8,R6
   \   000114   8F..         MOV     ?V9,R7
   \   000116   78..         MOV     R0,#?V8
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   75..00       MOV     ?V11,#0x0
   \   00011E   78..         MOV     R0,#?V10
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000123   78..         MOV     R0,#?V4
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000128   A9..         MOV     R1,?V7
   \   00012A   AC..         MOV     R4,?V2
   \   00012C   AD..         MOV     R5,?V3
   \   00012E   740E         MOV     A,#0xe
   \   000130   12....       LCALL   ?XSTACK_DISP101_8
   \   000133   12....       LCALL   `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   000136   740C         MOV     A,#0xc
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013B   E9           MOV     A,R1
   \   00013C   85..82       MOV     DPL,?XSP + 0
   \   00013F   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000142   F0           MOVX    @DPTR,A
    546              }
    547          
    548              /* Free the memory allocated */
    549              osal_mem_free( pRelayList );
   \   000143                ; Setup parameters for call to function osal_mem_free
   \   000143   AA..         MOV     R2,?V0
   \   000145   AB..         MOV     R3,?V1
   \   000147   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00014A   8009         SJMP    ??MT_AfDataRequestSrcRtg_9
    550            }
    551            else
    552            {
    553              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   00014C   85..82       MOV     DPL,?XSP + 0
   \   00014F   85..83       MOV     DPH,?XSP + 1
   \   000152   7410         MOV     A,#0x10
   \   000154   F0           MOVX    @DPTR,A
    554            }
    555          
    556          
    557            /* Build and send back the response */
    558            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   000155                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000155   AC..         MOV     R4,?XSP + 0
   \   000157   AD..         MOV     R5,?XSP + 1
   \   000159   7B01         MOV     R3,#0x1
   \   00015B   AA..         MOV     R2,?V6
   \   00015D   7964         MOV     R1,#0x64
   \   00015F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    559          }
   \   000162   740E         MOV     A,#0xe
   \   000164   12....       LCALL   ?DEALLOC_XSTACK8
   \   000167   7F0C         MOV     R7,#0xc
   \   000169   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
    560          #endif
    561          
    562          #if defined INTER_PAN
    563          /***************************************************************************************************
    564           * @fn      MT_AfInterPanCtl
    565           *
    566           * @brief   Process the AF Inter Pan control command.
    567           *
    568           * @param   pBuf - pointer to the received buffer
    569           *
    570           * @return  none
    571           ***************************************************************************************************/
    572          static void MT_AfInterPanCtl(uint8 *pBuf)
    573          {
    574            uint8 cmd, rtrn;
    575            uint16 panId;
    576            endPointDesc_t *pEP;
    577          
    578            cmd = pBuf[MT_RPC_POS_CMD1];
    579            pBuf += MT_RPC_FRAME_HDR_SZ;
    580          
    581            switch (*pBuf++)  // Inter-pan request parameter.
    582            {
    583            case InterPanClr:
    584              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    585              break;
    586          
    587            case InterPanSet:
    588              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    589              break;
    590          
    591            case InterPanReg:
    592              if ((pEP = afFindEndPointDesc(*pBuf)))
    593              {
    594                StubAPS_RegisterApp(pEP);
    595                rtrn = SUCCESS;
    596              }
    597              else
    598              {
    599                rtrn = FAILURE;
    600              }
    601              break;
    602          
    603            case InterPanChk:
    604              panId = osal_build_uint16( pBuf );
    605              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    606              break;
    607          
    608            default:
    609              rtrn = afStatus_INVALID_PARAMETER;
    610              break;
    611            }
    612          
    613            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    614          }
    615          #endif
    616          
    617          /***************************************************************************************************
    618           * @fn      MT_AfDataConfirm
    619           *
    620           * @brief   Process
    621           *
    622           * @param   pBuf - pointer to the received buffer
    623           *
    624           * @return  none
    625           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    627          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    628            uint8 retArray[3];
    629          
    630            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
    631            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_0:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
    632            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_40:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   F0           MOVX    @DPTR,A
    633          
    634            /* Build and send back the response */
    635            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7B03         MOV     R3,#0x3
   \   000028   7A80         MOV     R2,#-0x80
   \   00002A   7944         MOV     R1,#0x44
   \   00002C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    636          }
   \   00002F   7403         MOV     A,#0x3
   \   000031                REQUIRE ?Subroutine1
   \   000031                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
    637          
    638          /***************************************************************************************************
    639           * @fn      MT_AfReflectError
    640           *
    641           * @brief   Process
    642           *
    643           * @param   pBuf - pointer to the received buffer
    644           *
    645           * @return  none
    646           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    648          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV     A,#-0x6
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    649            uint8 retArray[6];
    650          
    651            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
    652            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_1:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
    653            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_41:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine25 & 0xFFFF
    654            retArray[3] = pMsg->dstAddrMode;
   \                     ??CrossCallReturnLabel_37:
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C0E0         PUSH    A
   \   000027   7403         MOV     A,#0x3
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
    655            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   00002F   EA           MOV     A,R2
   \   000030   2405         ADD     A,#0x5
   \   000032   F8           MOV     R0,A
   \   000033   E4           CLR     A
   \   000034   3B           ADDC    A,R3
   \   000035   F9           MOV     R1,A
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C0E0         PUSH    A
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   12....       LCALL   ??Subroutine44_0 & 0xFFFF
    656            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \                     ??CrossCallReturnLabel_90:
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C0E0         PUSH    A
   \   00004B   7405         MOV     A,#0x5
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    657          
    658            /* Build and send back the response */
    659            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \   000053                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000053   AC..         MOV     R4,?XSP + 0
   \   000055   AD..         MOV     R5,?XSP + 1
   \   000057   7B06         MOV     R3,#0x6
   \   000059   7A83         MOV     R2,#-0x7d
   \   00005B   7944         MOV     R1,#0x44
   \   00005D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    660          }
   \   000060   7406         MOV     A,#0x6
   \   000062   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
    661          
    662          /***************************************************************************************************
    663           * @fn          MT_AfIncomingMsg
    664           *
    665           * @brief       Process the callback subscription for AF Incoming data.
    666           *
    667           * @param       pkt - Incoming AF data.
    668           *
    669           * @return      none
    670           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    672          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
    673            #define MT_AF_INC_MSG_LEN  20
    674            #define MT_AF_INC_MSG_EXT  10
    675          
    676            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   00000E   EA           MOV     A,R2
   \   00000F   2420         ADD     A,#0x20
   \   000011   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V1,A
    677            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   00001B   E5..         MOV     A,?V0
   \   00001D   2414         ADD     A,#0x14
   \   00001F   FE           MOV     R6,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V1
   \   000023   FF           MOV     R7,A
    678            uint8 cmd = MT_AF_INCOMING_MSG;
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   7481         MOV     A,#-0x7f
   \   00002C   F0           MOVX    @DPTR,A
    679            uint8 *pRsp, *pTmp;
    680            mtAfInMsgList_t *pItem = NULL;
   \   00002D   75..00       MOV     ?V10,#0x0
   \   000030   75..00       MOV     ?V11,#0x0
    681          
    682          #if defined INTER_PAN
    683            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    684            {
    685              cmd = MT_AF_INCOMING_MSG_EXT;
    686            }
    687            else
    688          #endif
    689            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    690                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   000033   EA           MOV     A,R2
   \   000034   240E         ADD     A,#0xe
   \   000036   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6403         XRL     A,#0x3
   \   00003C   6009         JZ      ??MT_AfIncomingMsg_0
   \   00003E   C3           CLR     C
   \   00003F   EE           MOV     A,R6
   \   000040   94F1         SUBB    A,#-0xf
   \   000042   EF           MOV     A,R7
   \   000043   9400         SUBB    A,#0x0
   \   000045   4010         JC      ??MT_AfIncomingMsg_1
    691            {
    692              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   7482         MOV     A,#-0x7e
   \   00004F   F0           MOVX    @DPTR,A
    693            }
    694          
    695            if (cmd == MT_AF_INCOMING_MSG_EXT)
    696            {
    697              respLen += MT_AF_INC_MSG_EXT;
   \   000050   EE           MOV     A,R6
   \   000051   240A         ADD     A,#0xa
   \   000053   FE           MOV     R6,A
   \   000054   E4           CLR     A
   \   000055   3F           ADDC    A,R7
   \   000056   FF           MOV     R7,A
    698            }
    699          
    700            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   000057   C3           CLR     C
   \   000058   EE           MOV     A,R6
   \   000059   94FB         SUBB    A,#-0x5
   \   00005B   EF           MOV     A,R7
   \   00005C   9400         SUBB    A,#0x0
   \   00005E   4034         JC      ??MT_AfIncomingMsg_2
    701            {
    702              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000060                ; Setup parameters for call to function osal_mem_alloc
   \   000060   E5..         MOV     A,?V0
   \   000062   2409         ADD     A,#0x9
   \   000064   FA           MOV     R2,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V1
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006C   8A..         MOV     ?V10,R2
   \   00006E   8B..         MOV     ?V11,R3
   \   000070   EA           MOV     A,R2
   \   000071   45..         ORL     A,?V11
   \   000073   7003         JNZ     $+5
   \   000075   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    703              {
    704                return;  // If cannot hold a huge message, cannot give indication at all.
    705              }
    706          
    707              pItem->data = (uint8 *)(pItem+1);
   \   000078   EA           MOV     A,R2
   \   000079   2409         ADD     A,#0x9
   \   00007B   F8           MOV     R0,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V11
   \   00007F   F9           MOV     R1,A
   \   000080   8A82         MOV     DPL,R2
   \   000082   8B83         MOV     DPH,R3
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E8           MOV     A,R0
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E9           MOV     A,R1
   \   00008A   F0           MOVX    @DPTR,A
    708              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   00008B   C3           CLR     C
   \   00008C   EE           MOV     A,R6
   \   00008D   95..         SUBB    A,?V0
   \   00008F   FE           MOV     R6,A
   \   000090   EF           MOV     A,R7
   \   000091   95..         SUBB    A,?V1
   \   000093   FF           MOV     R7,A
    709            }
    710          
    711            // Attempt to allocate memory for the response packet.
    712            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   000094                ; Setup parameters for call to function osal_mem_alloc
   \   000094   EE           MOV     A,R6
   \   000095   FA           MOV     R2,A
   \   000096   EF           MOV     A,R7
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009B   8A..         MOV     ?V12,R2
   \   00009D   8B..         MOV     ?V13,R3
   \   00009F   EA           MOV     A,R2
   \   0000A0   45..         ORL     A,?V13
   \   0000A2   7010         JNZ     ??MT_AfIncomingMsg_4
    713            {
    714              if (pItem != NULL)
   \   0000A4   E5..         MOV     A,?V10
   \   0000A6   45..         ORL     A,?V11
   \   0000A8   6007         JZ      ??MT_AfIncomingMsg_5
    715              {
    716                (void)osal_mem_free(pItem);
   \   0000AA                ; Setup parameters for call to function osal_mem_free
   \   0000AA   AA..         MOV     R2,?V10
   \   0000AC   AB..         MOV     R3,?V11
   \   0000AE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    717              }
    718              return;
   \                     ??MT_AfIncomingMsg_5:
   \   0000B1   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    719            }
    720            pTmp = pRsp;
    721          
    722            /* Group ID */
    723            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_4:
   \   0000B4   E5..         MOV     A,?V8
   \   0000B6   2402         ADD     A,#0x2
   \   0000B8   F8           MOV     R0,A
   \   0000B9   E4           CLR     A
   \   0000BA   35..         ADDC    A,?V9
   \   0000BC   F9           MOV     R1,A
   \   0000BD   12....       LCALL   ?Subroutine9 & 0xFFFF
    724            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_12:
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   A3           INC     DPTR
   \   0000C5   F0           MOVX    @DPTR,A
    725          
    726            /* Cluster ID */
    727            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   0000C6   E5..         MOV     A,?V8
   \   0000C8   2404         ADD     A,#0x4
   \   0000CA   F8           MOV     R0,A
   \   0000CB   E4           CLR     A
   \   0000CC   35..         ADDC    A,?V9
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   12....       LCALL   ??Subroutine44_0 & 0xFFFF
    728            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_91:
   \   0000D7   A3           INC     DPTR
   \   0000D8   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   F0           MOVX    @DPTR,A
    729          
    730            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000DF   EA           MOV     A,R2
   \   0000E0   2406         ADD     A,#0x6
   \   0000E2   FC           MOV     R4,A
   \   0000E3   E4           CLR     A
   \   0000E4   35..         ADDC    A,?V13
   \   0000E6   FD           MOV     R5,A
   \   0000E7   EA           MOV     A,R2
   \   0000E8   2405         ADD     A,#0x5
   \   0000EA   FA           MOV     R2,A
   \   0000EB   E4           CLR     A
   \   0000EC   35..         ADDC    A,?V13
   \   0000EE   FB           MOV     R3,A
   \   0000EF   E5..         MOV     A,?V12
   \   0000F1   2404         ADD     A,#0x4
   \   0000F3   F5..         MOV     ?V6,A
   \   0000F5   E4           CLR     A
   \   0000F6   35..         ADDC    A,?V13
   \   0000F8   F5..         MOV     ?V7,A
   \   0000FA   E5..         MOV     A,?V8
   \   0000FC   240F         ADD     A,#0xf
   \   0000FE   F5..         MOV     ?V14,A
   \   000100   E4           CLR     A
   \   000101   35..         ADDC    A,?V9
   \   000103   F5..         MOV     ?V15,A
   \   000105   E5..         MOV     A,?V8
   \   000107   2406         ADD     A,#0x6
   \   000109   F8           MOV     R0,A
   \   00010A   E4           CLR     A
   \   00010B   35..         ADDC    A,?V9
   \   00010D   F9           MOV     R1,A
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   E0           MOVX    A,@DPTR
   \   000115   6482         XRL     A,#0x82
   \   000117   705D         JNZ     ??MT_AfIncomingMsg_6
    731            {
    732              *pTmp++ = pMsg->srcAddr.addrMode;
   \   000119   85..82       MOV     DPL,?V4
   \   00011C   85..83       MOV     DPH,?V5
   \   00011F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000122   8A..         MOV     ?V2,R2
   \   000124   8B..         MOV     ?V3,R3
    733          
    734              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   000126   85..82       MOV     DPL,?V4
   \   000129   85..83       MOV     DPH,?V5
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   6403         XRL     A,#0x3
   \   00012F   701A         JNZ     ??MT_AfIncomingMsg_7
    735              {
    736                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000131                ; Setup parameters for call to function osal_memcpy
   \   000131   88..         MOV     ?V4,R0
   \   000133   89..         MOV     ?V5,R1
   \   000135   75..00       MOV     ?V6,#0x0
   \   000138   78..         MOV     R0,#?V4
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00013D   7C08         MOV     R4,#0x8
   \   00013F   7D00         MOV     R5,#0x0
   \   000141   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000144   7403         MOV     A,#0x3
   \   000146   12....       LCALL   ?DEALLOC_XSTACK8
   \   000149   8008         SJMP    ??MT_AfIncomingMsg_8
    737              }
    738              else
    739              {
    740                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   00014B   12....       LCALL   ?Subroutine9 & 0xFFFF
    741                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    742              }
   \                     ??CrossCallReturnLabel_13:
   \   00014E   8C82         MOV     DPL,R4
   \   000150   8D83         MOV     DPH,R5
   \   000152   F0           MOVX    @DPTR,A
    743              pTmp += Z_EXTADDR_LEN;
    744          
    745              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_8:
   \   000153   85..82       MOV     DPL,?V14
   \   000156   85..83       MOV     DPH,?V15
   \   000159   12....       LCALL   ?Subroutine15 & 0xFFFF
    746          #if defined INTER_PAN
    747              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    748              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    749          #else
    750              *pTmp++ = 0;
    751              *pTmp++ = 0;
    752          #endif
    753            }
   \                     ??CrossCallReturnLabel_22:
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000164   E4           CLR     A
   \   000165   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000168   A3           INC     DPTR
   \   000169   F0           MOVX    @DPTR,A
   \   00016A   E5..         MOV     A,?V2
   \   00016C   240B         ADD     A,#0xb
   \   00016E   F5..         MOV     ?V2,A
   \   000170   502B         JNC     ??MT_AfIncomingMsg_9
   \   000172   05..         INC     ?V3
   \   000174   8027         SJMP    ??MT_AfIncomingMsg_9
    754            else
    755            {
    756              /* Source Address */
    757              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   000176   8882         MOV     DPL,R0
   \   000178   8983         MOV     DPH,R1
   \   00017A   12....       LCALL   ?Subroutine19 & 0xFFFF
    758              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_31:
   \   00017D   8882         MOV     DPL,R0
   \   00017F   8983         MOV     DPH,R1
   \   000181   A3           INC     DPTR
   \   000182   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000185   F0           MOVX    @DPTR,A
    759          
    760              /* Source EP */
    761              *pTmp++ = pMsg->srcAddr.endPoint;
   \   000186   85..82       MOV     DPL,?V14
   \   000189   85..83       MOV     DPH,?V15
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   8C82         MOV     DPL,R4
   \   00018F   8D83         MOV     DPH,R5
   \   000191   F0           MOVX    @DPTR,A
   \   000192   E5..         MOV     A,?V12
   \   000194   2407         ADD     A,#0x7
   \   000196   F5..         MOV     ?V2,A
   \   000198   E4           CLR     A
   \   000199   35..         ADDC    A,?V13
   \   00019B   F5..         MOV     ?V3,A
    762            }
    763          
    764            /* Destination EP */
    765            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_9:
   \   00019D   E5..         MOV     A,?V8
   \   00019F   2414         ADD     A,#0x14
   \   0001A1   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0001A4   12....       LCALL   ?Subroutine20 & 0xFFFF
    766          
    767            /* WasBroadCast */
    768            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_32:
   \   0001A7   E5..         MOV     A,?V8
   \   0001A9   2415         ADD     A,#0x15
   \   0001AB   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001AE   12....       LCALL   ?Subroutine13 & 0xFFFF
    769          
    770            /* LinkQuality */
    771            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_18:
   \   0001B1   2416         ADD     A,#0x16
   \   0001B3   12....       LCALL   ?Subroutine16 & 0xFFFF
    772          
    773            /* SecurityUse */
    774            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_24:
   \   0001B6   E5..         MOV     A,?V8
   \   0001B8   2419         ADD     A,#0x19
   \   0001BA   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001BD   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001C0   F0           MOVX    @DPTR,A
   \   0001C1   E5..         MOV     A,?V2
   \   0001C3   2404         ADD     A,#0x4
   \   0001C5   F5..         MOV     ?V2,A
   \   0001C7   5002         JNC     ??MT_AfIncomingMsg_10
   \   0001C9   05..         INC     ?V3
    775          
    776            /* Timestamp */
    777            osal_buffer_uint32( pTmp, pMsg->timestamp );
   \                     ??MT_AfIncomingMsg_10:
   \   0001CB   E5..         MOV     A,?V8
   \   0001CD   241A         ADD     A,#0x1a
   \   0001CF   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001D2   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001D5   AA..         MOV     R2,?V2
   \   0001D7   AB..         MOV     R3,?V3
   \   0001D9   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   0001DC   7404         MOV     A,#0x4
   \   0001DE   12....       LCALL   ?DEALLOC_XSTACK8
    778            pTmp += 4;
    779          
    780            /* Data Length */
    781            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0001E1   E5..         MOV     A,?V2
   \   0001E3   2406         ADD     A,#0x6
   \   0001E5   F8           MOV     R0,A
   \   0001E6   E4           CLR     A
   \   0001E7   35..         ADDC    A,?V3
   \   0001E9   F9           MOV     R1,A
   \   0001EA   E5..         MOV     A,?V2
   \   0001EC   2405         ADD     A,#0x5
   \   0001EE   FA           MOV     R2,A
   \   0001EF   E4           CLR     A
   \   0001F0   35..         ADDC    A,?V3
   \   0001F2   FB           MOV     R3,A
   \   0001F3   E5..         MOV     A,?V2
   \   0001F5   2404         ADD     A,#0x4
   \   0001F7   FC           MOV     R4,A
   \   0001F8   E4           CLR     A
   \   0001F9   35..         ADDC    A,?V3
   \   0001FB   FD           MOV     R5,A
   \   0001FC   85..82       MOV     DPL,?XSP + 0
   \   0001FF   85..83       MOV     DPH,?XSP + 1
   \   000202   E0           MOVX    A,@DPTR
   \   000203   6482         XRL     A,#0x82
   \   000205   701C         JNZ     ??MT_AfIncomingMsg_11
    782            {
    783              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    784               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    785               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    786               */
    787              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   000207   8C82         MOV     DPL,R4
   \   000209   8D83         MOV     DPH,R5
   \   00020B   E4           CLR     A
   \   00020C   12....       LCALL   ?Subroutine40 & 0xFFFF
    788              *pTmp++ = LO_UINT16(dataLen);
    789              *pTmp++ = HI_UINT16(dataLen);
    790            }
   \                     ??CrossCallReturnLabel_70:
   \   00020F   E5..         MOV     A,?V0
   \   000211   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000214   E5..         MOV     A,?V1
   \   000216   F0           MOVX    @DPTR,A
   \   000217   E5..         MOV     A,?V2
   \   000219   2407         ADD     A,#0x7
   \   00021B   F5..         MOV     ?V2,A
   \   00021D   501A         JNC     ??MT_AfIncomingMsg_12
   \   00021F   05..         INC     ?V3
   \   000221   8016         SJMP    ??MT_AfIncomingMsg_12
    791            else
    792            {
    793              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_11:
   \   000223   E5..         MOV     A,?V8
   \   000225   241F         ADD     A,#0x1f
   \   000227   12....       LCALL   ?Subroutine38 & 0xFFFF
    794              *pTmp++ = dataLen;
    795            }
   \                     ??CrossCallReturnLabel_64:
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   8C82         MOV     DPL,R4
   \   00022D   8D83         MOV     DPH,R5
   \   00022F   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000232   E5..         MOV     A,?V0
   \   000234   F0           MOVX    @DPTR,A
   \   000235   88..         MOV     ?V2,R0
   \   000237   89..         MOV     ?V3,R1
    796          
    797            /* Data */
    798            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_12:
   \   000239   E5..         MOV     A,?V8
   \   00023B   2422         ADD     A,#0x22
   \   00023D   F5..         MOV     ?V6,A
   \   00023F   E4           CLR     A
   \   000240   35..         ADDC    A,?V9
   \   000242   F5..         MOV     ?V7,A
   \   000244   E5..         MOV     A,?V10
   \   000246   45..         ORL     A,?V11
   \   000248   7003         JNZ     $+5
   \   00024A   02....       LJMP    ??MT_AfIncomingMsg_13 & 0xFFFF
    799            {
    800              // Enqueue the new huge incoming item.
    801              pItem->next = pMtAfInMsgList;
   \   00024D   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000250   85..82       MOV     DPL,?V10
   \   000253   85..83       MOV     DPH,?V11
   \   000256   E8           MOV     A,R0
   \   000257   F0           MOVX    @DPTR,A
   \   000258   A3           INC     DPTR
   \   000259   E9           MOV     A,R1
   \   00025A   F0           MOVX    @DPTR,A
    802              pMtAfInMsgList = pItem;
   \   00025B   90....       MOV     DPTR,#pMtAfInMsgList
   \   00025E   E5..         MOV     A,?V10
   \   000260   F0           MOVX    @DPTR,A
   \   000261   A3           INC     DPTR
   \   000262   E5..         MOV     A,?V11
   \   000264   F0           MOVX    @DPTR,A
    803          
    804              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    805              pItem->tick = MT_AF_EXEC_CNT;
   \   000265   85..82       MOV     DPL,?V10
   \   000268   F583         MOV     DPH,A
   \   00026A   A3           INC     DPTR
   \   00026B   A3           INC     DPTR
   \   00026C   A3           INC     DPTR
   \   00026D   A3           INC     DPTR
   \   00026E   A3           INC     DPTR
   \   00026F   A3           INC     DPTR
   \   000270   A3           INC     DPTR
   \   000271   A3           INC     DPTR
   \   000272   740F         MOV     A,#0xf
   \   000274   F0           MOVX    @DPTR,A
    806              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000275                ; Setup parameters for call to function osal_start_timerEx
   \   000275   90....       MOV     DPTR,#__Constant_3e8
   \   000278   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00027B   7A08         MOV     R2,#0x8
   \   00027D   7B00         MOV     R3,#0x0
   \   00027F   90....       MOV     DPTR,#MT_TaskID
   \   000282   E0           MOVX    A,@DPTR
   \   000283   F9           MOV     R1,A
   \   000284   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000287   7404         MOV     A,#0x4
   \   000289   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028C   E9           MOV     A,R1
   \   00028D   600C         JZ      ??MT_AfIncomingMsg_14
    807              {
    808                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00028F                ; Setup parameters for call to function osal_set_event
   \   00028F   7A08         MOV     R2,#0x8
   \   000291   7B00         MOV     R3,#0x0
   \   000293   90....       MOV     DPTR,#MT_TaskID
   \   000296   E0           MOVX    A,@DPTR
   \   000297   F9           MOV     R1,A
   \   000298   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    809              }
    810          
    811              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_14:
   \   00029B   85..82       MOV     DPL,?V4
   \   00029E   85..83       MOV     DPH,?V5
   \   0002A1   12....       LCALL   ?XLOAD_R0123
   \   0002A4   85..82       MOV     DPL,?V10
   \   0002A7   85..83       MOV     DPH,?V11
   \   0002AA   A3           INC     DPTR
   \   0002AB   A3           INC     DPTR
   \   0002AC   A3           INC     DPTR
   \   0002AD   A3           INC     DPTR
   \   0002AE   12....       LCALL   ?XSTORE_R0123
    812              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   0002B1                ; Setup parameters for call to function osal_memcpy
   \   0002B1   12....       LCALL   ?Subroutine10 & 0xFFFF
    813            }
   \                     ??CrossCallReturnLabel_14:
   \   0002B4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002B7   AC..         MOV     R4,?V0
   \   0002B9   AD..         MOV     R5,?V1
   \   0002BB   85..82       MOV     DPL,?V10
   \   0002BE   85..83       MOV     DPH,?V11
   \   0002C1   A3           INC     DPTR
   \   0002C2   A3           INC     DPTR
   \   0002C3   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0002C6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002C9   7403         MOV     A,#0x3
   \   0002CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002CE   8022         SJMP    ??MT_AfIncomingMsg_15
    814            else
    815            {
    816              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_13:
   \   0002D0                ; Setup parameters for call to function osal_memcpy
   \   0002D0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0002D3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002D6   AC..         MOV     R4,?V0
   \   0002D8   AD..         MOV     R5,?V1
   \   0002DA   AA..         MOV     R2,?V2
   \   0002DC   AB..         MOV     R3,?V3
   \   0002DE   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002E1   7403         MOV     A,#0x3
   \   0002E3   12....       LCALL   ?DEALLOC_XSTACK8
    817              pTmp += dataLen;
   \   0002E6   E5..         MOV     A,?V2
   \   0002E8   25..         ADD     A,?V0
   \   0002EA   F5..         MOV     ?V2,A
   \   0002EC   E5..         MOV     A,?V3
   \   0002EE   35..         ADDC    A,?V1
   \   0002F0   F5..         MOV     ?V3,A
    818            }
    819          
    820            // MAC Source address
    821            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_15:
   \   0002F2   E5..         MOV     A,?V8
   \   0002F4   2424         ADD     A,#0x24
   \   0002F6   F8           MOV     R0,A
   \   0002F7   E4           CLR     A
   \   0002F8   35..         ADDC    A,?V9
   \   0002FA   F9           MOV     R1,A
   \   0002FB   8882         MOV     DPL,R0
   \   0002FD   8983         MOV     DPH,R1
   \   0002FF   12....       LCALL   ?Subroutine20 & 0xFFFF
    822            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
   \                     ??CrossCallReturnLabel_33:
   \   000302   8882         MOV     DPL,R0
   \   000304   8983         MOV     DPH,R1
   \   000306   A3           INC     DPTR
   \   000307   12....       LCALL   ?Subroutine13 & 0xFFFF
    823          
    824            // messages result radius
    825            *pTmp = pMsg->radius;
   \                     ??CrossCallReturnLabel_19:
   \   00030A   2426         ADD     A,#0x26
   \   00030C   12....       LCALL   ?Subroutine16 & 0xFFFF
    826          
    827            /* Build and send back the response */
    828            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??CrossCallReturnLabel_25:
   \   00030F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00030F   AC..         MOV     R4,?V12
   \   000311   AD..         MOV     R5,?V13
   \   000313   EE           MOV     A,R6
   \   000314   FB           MOV     R3,A
   \   000315   85..82       MOV     DPL,?XSP + 0
   \   000318   85..83       MOV     DPH,?XSP + 1
   \   00031B   E0           MOVX    A,@DPTR
   \   00031C   FA           MOV     R2,A
   \   00031D   7944         MOV     R1,#0x44
   \   00031F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    829          
    830            (void)osal_mem_free(pRsp);
   \   000322                ; Setup parameters for call to function osal_mem_free
   \   000322   AA..         MOV     R2,?V12
   \   000324   AB..         MOV     R3,?V13
   \   000326   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    831          }
   \                     ??MT_AfIncomingMsg_3:
   \   000329   7401         MOV     A,#0x1
   \   00032B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00032E   7F10         MOV     R7,#0x10
   \   000330   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F5..         MOV     ?V4,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V9
   \   000005   F5..         MOV     ?V5,A
   \   000007                ; Setup parameters for call to function osal_buffer_uint32
   \   000007   85..82       MOV     DPL,?V4
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V6
   \   000004   85..83       MOV     DPH,?V7
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V9
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V8
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?V6
   \   000003   85..83       MOV     DPH,?V7
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V5,A
   \   00000D   75..00       MOV     ?V6,#0x0
   \   000010   78..         MOV     R0,#?V4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine45_0
   \   000004                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
    832          
    833          /**************************************************************************************************
    834           * @fn          MT_AfDataRetrieve
    835           *
    836           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    837           *          incoming AF message.
    838           *
    839           * input parameters
    840           *
    841           * @param pBuf - pointer to the received buffer
    842           *
    843           * output parameters
    844           *
    845           * @param rtrn - AF-Status of the operation.
    846           *
    847           * @return      None.
    848           **************************************************************************************************
    849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          static void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    852            #define MT_AF_RTV_HDR_SZ  2
    853          
    854            uint32 timestamp;
    855            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000009   90....       MOV     DPTR,#pMtAfInMsgList
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V3,A
    856            uint8 rtrn = afStatus_FAILED;
   \   000013   75..01       MOV     ?V1,#0x1
    857            uint8 len = 0;
   \   000016   75..00       MOV     ?V0,#0x0
    858          
    859            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EE           MOV     A,R6
   \   00001A   2403         ADD     A,#0x3
   \   00001C   FE           MOV     R6,A
   \   00001D   5001         JNC     ??MT_AfDataRetrieve_0
   \   00001F   0F           INC     R7
    860            timestamp = osal_build_uint32( pBuf, 4 );
   \                     ??MT_AfDataRetrieve_0:
   \   000020                ; Setup parameters for call to function osal_build_uint32
   \   000020   7904         MOV     R1,#0x4
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000028   8A..         MOV     ?V4,R2
   \   00002A   8B..         MOV     ?V5,R3
   \   00002C   8C..         MOV     ?V6,R4
   \   00002E   8D..         MOV     ?V7,R5
   \   000030   800D         SJMP    ??MT_AfDataRetrieve_1
    861          
    862            while (pItem != NULL)
    863            {
    864              pPrev = pItem;
    865              if (pItem->timestamp == timestamp)
    866              {
    867                break;
    868              }
    869              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_2:
   \   000032   85..82       MOV     DPL,?V2
   \   000035   85..83       MOV     DPH,?V3
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V3,A
   \                     ??MT_AfDataRetrieve_1:
   \   00003F   E5..         MOV     A,?V2
   \   000041   45..         ORL     A,?V3
   \   000043   6063         JZ      ??MT_AfDataRetrieve_3
   \   000045   85....       MOV     ?V8,?V2
   \   000048   85....       MOV     ?V9,?V3
   \   00004B   85..82       MOV     DPL,?V2
   \   00004E   85..83       MOV     DPH,?V3
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   78..         MOV     R0,#?V4
   \   000057   12....       LCALL   ?L_EQ_X
   \   00005A   70D6         JNZ     ??MT_AfDataRetrieve_2
    870            }
    871          
    872            if (pItem != NULL)
    873            {
    874              uint16 idx;
    875              uint8 *pRsp;
    876          
    877              pBuf += 4;
   \   00005C   EE           MOV     A,R6
   \   00005D   2404         ADD     A,#0x4
   \   00005F   FE           MOV     R6,A
   \   000060   5001         JNC     ??MT_AfDataRetrieve_4
   \   000062   0F           INC     R7
    878              idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRetrieve_4:
   \   000063                ; Setup parameters for call to function osal_build_uint16
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000069   8A..         MOV     ?V6,R2
   \   00006B   8B..         MOV     ?V7,R3
    879              len = pBuf[2];
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V0,A
    880          
    881              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   000076   704D         JNZ     ??MT_AfDataRetrieve_5
    882              {
    883                if (pMtAfInMsgList == pItem)
   \   000078   85..82       MOV     DPL,?V2
   \   00007B   85..83       MOV     DPH,?V3
   \   00007E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000081   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000084   E5..         MOV     A,?V2
   \   000086   6A           XRL     A,R2
   \   000087   7003         JNZ     ??MT_AfDataRetrieve_6
   \   000089   E5..         MOV     A,?V3
   \   00008B   6B           XRL     A,R3
   \                     ??MT_AfDataRetrieve_6:
   \   00008C   7005         JNZ     ??MT_AfDataRetrieve_7
    884                {
    885                  pMtAfInMsgList = pItem->next;
   \   00008E   90....       MOV     DPTR,#pMtAfInMsgList
   \   000091   8006         SJMP    ??MT_AfDataRetrieve_8
    886                }
    887                else
    888                {
    889                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   000093   85..82       MOV     DPL,?V8
   \   000096   85..83       MOV     DPH,?V9
   \                     ??MT_AfDataRetrieve_8:
   \   000099   E8           MOV     A,R0
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   E9           MOV     A,R1
   \   00009D   F0           MOVX    @DPTR,A
    890                }
    891                (void)osal_mem_free(pItem);
   \   00009E                ; Setup parameters for call to function osal_mem_free
   \   00009E   AA..         MOV     R2,?V2
   \   0000A0   AB..         MOV     R3,?V3
   \   0000A2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    892                rtrn = afStatus_SUCCESS;
   \   0000A5   75..00       MOV     ?V1,#0x0
    893              }
    894              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    895              {
    896                rtrn = afStatus_MEM_FAIL;
    897                len = 0;
    898              }
    899              else
    900              {
    901                pRsp[0] = ZSuccess;
    902                pRsp[1] = len;
    903                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    904                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    905                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    906                (void)osal_mem_free(pRsp);
    907                return;
    908              }
    909            }
    910          
    911            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   E5..         MOV     A,?V1
   \   0000AE   F0           MOVX    @DPTR,A
    912            pBuf[1] = len;
   \   0000AF   A3           INC     DPTR
   \   0000B0   E5..         MOV     A,?V0
   \   0000B2   F0           MOVX    @DPTR,A
    913            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    914                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000B3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FC           MOV     R4,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   FD           MOV     R5,A
   \   0000B7   7B02         MOV     R3,#0x2
   \   0000B9   7A12         MOV     R2,#0x12
   \   0000BB   7964         MOV     R1,#0x64
   \   0000BD   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    915          }
   \                     ??MT_AfDataRetrieve_9:
   \   0000C0   7F0B         MOV     R7,#0xb
   \   0000C2   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_5:
   \   0000C5                ; Setup parameters for call to function osal_mem_alloc
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   FA           MOV     R2,A
   \   0000C8   E4           CLR     A
   \   0000C9   3400         ADDC    A,#0x0
   \   0000CB   FB           MOV     R3,A
   \   0000CC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CF   8A..         MOV     ?V4,R2
   \   0000D1   8B..         MOV     ?V5,R3
   \   0000D3   EA           MOV     A,R2
   \   0000D4   45..         ORL     A,?V5
   \   0000D6   7008         JNZ     ??MT_AfDataRetrieve_10
   \   0000D8   75..10       MOV     ?V1,#0x10
   \   0000DB   75..00       MOV     ?V0,#0x0
   \   0000DE   80C8         SJMP    ??MT_AfDataRetrieve_3
   \                     ??MT_AfDataRetrieve_10:
   \   0000E0   8A82         MOV     DPL,R2
   \   0000E2   8B83         MOV     DPH,R3
   \   0000E4   E4           CLR     A
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E5..         MOV     A,?V0
   \   0000E9   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   25..         ADD     A,?V6
   \   0000EF   F5..         MOV     ?V8,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   35..         ADDC    A,?V7
   \   0000F5   F5..         MOV     ?V9,A
   \   0000F7   75..00       MOV     ?V10,#0x0
   \   0000FA   78..         MOV     R0,#?V8
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   AC..         MOV     R4,?V0
   \   000101   7D00         MOV     R5,#0x0
   \   000103   EA           MOV     A,R2
   \   000104   2402         ADD     A,#0x2
   \   000106   FA           MOV     R2,A
   \   000107   E4           CLR     A
   \   000108   35..         ADDC    A,?V5
   \   00010A   FB           MOV     R3,A
   \   00010B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010E   7403         MOV     A,#0x3
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000113   AC..         MOV     R4,?V4
   \   000115   AD..         MOV     R5,?V5
   \   000117   7402         MOV     A,#0x2
   \   000119   25..         ADD     A,?V0
   \   00011B   FB           MOV     R3,A
   \   00011C   7A12         MOV     R2,#0x12
   \   00011E   7964         MOV     R1,#0x64
   \   000120   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   AA..         MOV     R2,?V4
   \   000125   AB..         MOV     R3,?V5
   \   000127   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012A   8094         SJMP    ??MT_AfDataRetrieve_9
    916          
    917          /**************************************************************************************************
    918           * @fn          MT_AfDataStore
    919           *
    920           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    921           *          outgoing AF message.
    922           *
    923           * input parameters
    924           *
    925           * @param pBuf - pointer to the received buffer
    926           *
    927           * output parameters
    928           *
    929           * @param rtrn - AF-Status of the operation.
    930           *
    931           * @return      None.
    932           **************************************************************************************************
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B01         MOV     R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          static void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    935          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    936            uint16 idx;
    937            uint8 len, rtrn = afStatus_FAILED;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    938          
    939            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_AfDataStore_0
   \   00001D   0F           INC     R7
    940            idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataStore_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint16
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
    941            len = pBuf[2];
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FC           MOV     R4,A
    942            pBuf += 3;
   \   00002C   EE           MOV     A,R6
   \   00002D   2403         ADD     A,#0x3
   \   00002F   FE           MOV     R6,A
   \   000030   5001         JNC     ??MT_AfDataStore_1
   \   000032   0F           INC     R7
    943          
    944            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   000033   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000036   700B         JNZ     ??MT_AfDataStore_2
    945            {
    946              rtrn = afStatus_MEM_FAIL;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   7410         MOV     A,#0x10
   \   000040   02....       LJMP    ??MT_AfDataStore_3 & 0xFFFF
    947            }
    948            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F583         MOV     DPH,A
   \   000046   8882         MOV     DPL,R0
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V4,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V5,A
   \   00004F   EC           MOV     A,R4
   \   000050   7060         JNZ     ??MT_AfDataStore_4
    949            {
    950              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    951                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    952                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   000052                ; Setup parameters for call to function AF_DataRequest
   \   000052   90....       MOV     DPTR,#pMtAfDataReq + 1
   \   000055   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V0,A
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   90....       MOV     DPTR,#pMtAfDataReq
   \   000063   E0           MOVX    A,@DPTR
   \   000064   2414         ADD     A,#0x14
   \   000066   F5..         MOV     ?V0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F5..         MOV     ?V1,A
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   78..         MOV     R0,#?V4
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00007B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00007E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000084   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FC           MOV     R4,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FD           MOV     R5,A
   \   000091   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000094   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000097   7409         MOV     A,#0x9
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   E9           MOV     A,R1
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   F0           MOVX    @DPTR,A
    953              (void)osal_mem_free(pMtAfDataReq);
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000A7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    954              pMtAfDataReq = NULL;
   \   0000AA   90....       MOV     DPTR,#pMtAfDataReq
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   8025         SJMP    ??MT_AfDataStore_3
    955            }
    956            else
    957            {
    958              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000B2                ; Setup parameters for call to function osal_memcpy
   \   0000B2   8E..         MOV     ?V0,R6
   \   0000B4   8F..         MOV     ?V1,R7
   \   0000B6   75..00       MOV     ?V2,#0x0
   \   0000B9   78..         MOV     R0,#?V0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   E5..         MOV     A,?V4
   \   0000C2   2A           ADD     A,R2
   \   0000C3   FA           MOV     R2,A
   \   0000C4   E5..         MOV     A,?V5
   \   0000C6   3B           ADDC    A,R3
   \   0000C7   FB           MOV     R3,A
   \   0000C8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
    959              rtrn = afStatus_SUCCESS;
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   E4           CLR     A
    960            }
   \                     ??MT_AfDataStore_3:
   \   0000D7   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    961          
    962            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    963                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??CrossCallReturnLabel_74:
   \   0000DA   7A11         MOV     R2,#0x11
   \   0000DC   7964         MOV     R1,#0x64
   \   0000DE   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    964          }
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine41_0
   \   000007                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7410         MOV     A,#0x10
   \   000008                REQUIRE ??Subroutine44_0
   \   000008                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfExec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRetrieve::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    965          
    966          /**************************************************************************************************
    967           * @fn          MT_AfAPSF_ConfigSet
    968           *
    969           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    970           *
    971           * input parameters
    972           *
    973           * @param       pBuf - Pointer to the received buffer.
    974           *
    975           * output parameters
    976           *
    977           * None.
    978           *
    979           * @return      None.
    980           */
    981          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    982          {
    983            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    984            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    985          
    986            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    987                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    988          }
    989          
    990          /**************************************************************************************************
    991           * @fn          MT_AfAPSF_ConfigGet
    992           *
    993           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
    994           *
    995           * input parameters
    996           *
    997           * @param       pBuf - Pointer to the received buffer.
    998           *
    999           * output parameters
   1000           *
   1001           * None.
   1002           *
   1003           * @return      None.
   1004           */
   1005          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   1006          {
   1007            afAPSF_Config_t cfg = { 0, 0 };
   1008            uint8 buf[2];
   1009          
   1010            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   1011          
   1012            buf[0] = cfg.frameDelay;
   1013            buf[1] = cfg.windowSize;
   1014          
   1015            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1016                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   1017          }
   1018          
   1019          /***************************************************************************************************
   1020          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     19   MT_AfCommandProcessing
        0     19   -> MT_AfDataRequest
        0     19   -> MT_AfDataRequestSrcRtg
        0     19   -> MT_AfDataRetrieve
        0     19   -> MT_AfDataStore
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> MT_BuildEndpointDesc
        0     19   -> afAPSF_ConfigGet
        0     19   -> afAPSF_ConfigSet
        0     19   -> afDelete
        0     19   -> afRegister
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     63   MT_AfDataRequest
        0     44   -> AF_DataRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     35   -> afFindEndPointDesc
        0     35   -> osal_build_uint16
        0     35   -> osal_mem_alloc
        0     38   -> osal_memcpy
        0     35   -> osal_set_event
        0     39   -> osal_start_timerEx
      1     65   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_build_uint16
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     41   MT_AfDataRetrieve
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_build_uint16
        0     19   -> osal_build_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     43   MT_AfDataStore
        0     24   -> AF_DataRequest
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_build_uint16
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      0     13   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0     13   -> osal_start_timerEx
      1     29   MT_AfIncomingMsg
        0     25   -> MT_BuildAndSendZToolResponse
        0     29   -> osal_buffer_uint32
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     28   -> osal_memcpy
        0     25   -> osal_set_event
        0     29   -> osal_start_timerEx
      3      6   MT_AfReflectError
        2      6   -> MT_BuildAndSendZToolResponse


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       8  ??Subroutine41_0
       6  ??Subroutine42_0
       6  ??Subroutine43_0
       6  ??Subroutine44_0
       6  ??Subroutine45_0
       6  ??Subroutine46_0
       6  ??Subroutine47_0
       8  ?Subroutine0
      10  ?Subroutine1
      19  ?Subroutine10
       3  ?Subroutine11
      15  ?Subroutine12
       7  ?Subroutine13
      11  ?Subroutine14
       5  ?Subroutine15
       8  ?Subroutine16
      13  ?Subroutine17
       7  ?Subroutine18
       9  ?Subroutine19
       3  ?Subroutine2
       9  ?Subroutine20
      11  ?Subroutine21
       4  ?Subroutine22
       8  ?Subroutine23
       7  ?Subroutine24
       5  ?Subroutine25
       7  ?Subroutine26
       5  ?Subroutine27
      10  ?Subroutine28
      13  ?Subroutine29
      19  ?Subroutine3
       9  ?Subroutine30
       3  ?Subroutine31
       4  ?Subroutine32
       5  ?Subroutine33
       7  ?Subroutine34
      10  ?Subroutine35
       7  ?Subroutine36
       9  ?Subroutine37
       8  ?Subroutine38
       9  ?Subroutine39
       8  ?Subroutine4
       6  ?Subroutine40
      12  ?Subroutine5
      12  ?Subroutine6
      12  ?Subroutine7
      12  ?Subroutine8
      11  ?Subroutine9
     366  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      49  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     690  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     364  MT_AfDataRequestSrcRtg
       6  MT_AfDataRequestSrcRtg::?relay
     300  MT_AfDataRetrieve
       6  MT_AfDataRetrieve::?relay
     230  MT_AfDataStore
       6  MT_AfDataStore::?relay
     175  MT_AfExec
       6  MT_AfExec::?relay
     819  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
     100  MT_AfReflectError
       6  MT_AfReflectError::?relay
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 3 497 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
 3 551 bytes of CODE  memory
     2 bytes of CONST memory (+ 4 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none
