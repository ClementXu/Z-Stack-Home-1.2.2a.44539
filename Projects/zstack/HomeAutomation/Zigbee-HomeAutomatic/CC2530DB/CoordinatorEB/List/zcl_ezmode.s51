///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Aug/2016  23:14:09
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Components\stack\zcl\zcl_ezmode.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Components\stack\zcl\zcl_ezmode.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
//        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
//        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zcl_ezmode.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_ezmode

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,0203H
        PUBLIC `??zcl_EZModeBindAddEntry::?relay`
        FUNCTION `??zcl_EZModeBindAddEntry::?relay`,0203H
        PUBLIC `??zcl_EZModeGetNwkAddr::?relay`
        FUNCTION `??zcl_EZModeGetNwkAddr::?relay`,0203H
        PUBLIC `??zcl_EZModePermitJoiningRequest::?relay`
        FUNCTION `??zcl_EZModePermitJoiningRequest::?relay`,0203H
        PUBLIC `??zcl_EZModeSendMatchDescReq::?relay`
        FUNCTION `??zcl_EZModeSendMatchDescReq::?relay`,0203H
        PUBLIC `??zcl_EZModeStartDevice::?relay`
        FUNCTION `??zcl_EZModeStartDevice::?relay`,0203H
        PUBLIC `??zcl_EZModeStartTimer::?relay`
        FUNCTION `??zcl_EZModeStartTimer::?relay`,0203H
        PUBLIC `??zcl_EZModeStopTimer::?relay`
        FUNCTION `??zcl_EZModeStopTimer::?relay`,0203H
        PUBLIC `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,0203H
        FUNCTION `??zcl_ProcessEZMode::?relay`,0203H
        PUBLIC `??zcl_RegisterEZMode::?relay`
        FUNCTION `??zcl_RegisterEZMode::?relay`,0203H
        FUNCTION `??zcl_SetEZModeState::?relay`,0203H
        PUBWEAK __Constant_2bf20
        PUBWEAK __Constant_5
        PUBWEAK __Constant_fa0
        PUBLIC zclEZModeErr
        PUBLIC zclEZModeInvokeData
        PUBLIC zclEZModeMatched
        PUBLIC zclEZModeOpener
        PUBLIC zclEZModeQueryRspEP
        PUBLIC zclEZModeQueryRspNwkAddr
        PUBLIC zclEZModeRegisterData
        PUBLIC zclEZModeRegistered
        PUBLIC zclEZModeState
        PUBLIC zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC zcl_EZModeBindAddEntry
        FUNCTION zcl_EZModeBindAddEntry,0a1203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zcl_EZModeGetNwkAddr
        FUNCTION zcl_EZModeGetNwkAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_EZModePermitJoiningRequest
        FUNCTION zcl_EZModePermitJoiningRequest,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC zcl_EZModeSendMatchDescReq
        FUNCTION zcl_EZModeSendMatchDescReq,0a1203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC zcl_EZModeStartDevice
        FUNCTION zcl_EZModeStartDevice,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_EZModeStartTimer
        FUNCTION zcl_EZModeStartTimer,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC zcl_EZModeStopTimer
        FUNCTION zcl_EZModeStopTimer,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION zcl_ProcessEZMode,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC zcl_RegisterEZMode
        FUNCTION zcl_RegisterEZMode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zcl_SetEZModeState,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDOInitDevice       SYMBOL "ZDOInitDevice"
`??ZDOInitDevice::?relay` SYMBOL "?relay", ZDOInitDevice
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
`??ZDP_MatchDescReq::?relay` SYMBOL "?relay", ZDP_MatchDescReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_EZModeBindAddEntry SYMBOL "zcl_EZModeBindAddEntry"
`??zcl_EZModeBindAddEntry::?relay` SYMBOL "?relay", zcl_EZModeBindAddEntry
zcl_EZModeGetNwkAddr SYMBOL "zcl_EZModeGetNwkAddr"
`??zcl_EZModeGetNwkAddr::?relay` SYMBOL "?relay", zcl_EZModeGetNwkAddr
zcl_EZModePermitJoiningRequest SYMBOL "zcl_EZModePermitJoiningRequest"
`??zcl_EZModePermitJoiningRequest::?relay` SYMBOL "?relay", zcl_EZModePermitJoiningRequest
zcl_EZModeSendMatchDescReq SYMBOL "zcl_EZModeSendMatchDescReq"
`??zcl_EZModeSendMatchDescReq::?relay` SYMBOL "?relay", zcl_EZModeSendMatchDescReq
zcl_EZModeStartDevice SYMBOL "zcl_EZModeStartDevice"
`??zcl_EZModeStartDevice::?relay` SYMBOL "?relay", zcl_EZModeStartDevice
zcl_EZModeStartTimer SYMBOL "zcl_EZModeStartTimer"
`??zcl_EZModeStartTimer::?relay` SYMBOL "?relay", zcl_EZModeStartTimer
zcl_EZModeStopTimer SYMBOL "zcl_EZModeStopTimer"
`??zcl_EZModeStopTimer::?relay` SYMBOL "?relay", zcl_EZModeStopTimer
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_RegisterEZMode  SYMBOL "zcl_RegisterEZMode"
`??zcl_RegisterEZMode::?relay` SYMBOL "?relay", zcl_RegisterEZMode

        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,00H
        EXTERN `??ZDOInitDevice::?relay`
        FUNCTION `??ZDOInitDevice::?relay`,00H
        EXTERN `??ZDP_MatchDescReq::?relay`
        FUNCTION `??ZDP_MatchDescReq::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindAddEntry
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_ezmode.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_ezmode.c
//    3   Revised:        $Date: 2014-12-03 14:48:39 -0800 (Wed, 03 Dec 2014) $
//    4   Revision:       $Revision: 41325 $
//    5 
//    6   Description:    Zigbee Cluster Library - EZ Mode
//    7 
//    8 
//    9   Copyright 2013-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 
//   45 #include "zcl.h"
//   46 #include "zcl_general.h"
//   47 #include "zcl_ezmode.h"
//   48 
//   49 #if !defined ( ZCL_STANDALONE )
//   50   #include "OSAL.h"
//   51   #include "zcl_ha.h"
//   52 #endif
//   53 
//   54 
//   55 #ifdef ZCL_EZMODE
//   56 
//   57 /*********************************************************************
//   58  * MACROS
//   59  */
//   60 
//   61 /*********************************************************************
//   62  * CONSTANTS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * TYPEDEFS
//   67  */
//   68 
//   69 /*********************************************************************
//   70  * LOCAL PROTOTYPES
//   71  */
//   72 static void zcl_SetEZModeError( uint8 errorCode );
//   73 static void zcl_SetEZModeState( zlcEZMode_State_t newState );
//   74 static void zcl_ProcessEZMode( void );
//   75 
//   76 
//   77 /*********************************************************************
//   78  * GLOBAL VARIABLES
//   79  */
//   80 
//   81 // internal EZ-Mode state machine

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 uint8  zclEZModeRegistered;
zclEZModeRegistered:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 uint8  zclEZModeErr;
zclEZModeErr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   84 uint8  zclEZModeState;
zclEZModeState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 uint8  zclEZModeOpener;
zclEZModeOpener:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 uint8  zclEZModeMatched;              // we were matched by a remote node
zclEZModeMatched:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   87 uint16 zclEZModeQueryRspNwkAddr;      // short address (on QueryRsp)
zclEZModeQueryRspNwkAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 uint8  zclEZModeQueryRspEP;           // endpoint (on QueryRsp)
zclEZModeQueryRspEP:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   89 zclEZMode_RegisterData_t zclEZModeRegisterData; // registered once on init
zclEZModeRegisterData:
        DS 10
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   90 zclEZMode_InvokeData_t   zclEZModeInvokeData; // user's configuration parameters
zclEZModeInvokeData:
        DS 9
        REQUIRE __INIT_XDATA_Z
//   91                                               // what endpoint, initiator, etc.
//   92 
//   93 /*********************************************************************
//   94  * GLOBAL FUNCTIONS
//   95  */
//   96 
//   97 /*********************************************************************
//   98  * @fn      zcl_RegisterEZMode
//   99  *
//  100  * @brief   Called upon task initialation, to initialize EZ-Mode.
//  101  *
//  102  * @param   pData - task ID, App Callback routine, etc..
//  103  *
//  104  * @return  none
//  105  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 void zcl_RegisterEZMode( zclEZMode_RegisterData_t const *pData )
zcl_RegisterEZMode:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zcl_RegisterEZMode
        CODE
//  107 {
        FUNCALL zcl_RegisterEZMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  108   // make a copy of the data. Cannot fail.
//  109   zcl_memcpy( &zclEZModeRegisterData, (void *)pData,
//  110               sizeof(zclEZMode_RegisterData_t) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#zclEZModeRegisterData & 0xff
        MOV     R3,#(zclEZModeRegisterData >> 8) & 0xff
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  111   zclEZModeRegistered = TRUE;
        MOV     DPTR,#zclEZModeRegistered
        MOV     A,#0x1
        MOVX    @DPTR,A
//  112 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  113 
//  114 /*********************************************************************
//  115  * @fn      zcl_InvokeEZMode
//  116  *
//  117  * @brief   Called to invoke EZ-Mode on an endpoint. This is a toggle
//  118  *          (will cancel if EZ-Mode currently enabled). Note: there is only 1
//  119  *          state machine. EZ-Mode can only be invoked on 1 endpoint at a time.
//  120  *
//  121  * @param   none
//  122  *
//  123  * @return  none
//  124  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void zcl_InvokeEZMode( zclEZMode_InvokeData_t *pData )
zcl_InvokeEZMode:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zcl_InvokeEZMode
        CODE
//  126 {
        FUNCALL zcl_InvokeEZMode, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_InvokeEZMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_InvokeEZMode, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_InvokeEZMode, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_InvokeEZMode, zcl_EZModeStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  127   // if not registered, do nothing
//  128   if(!zclEZModeRegistered)
        MOV     DPTR,#zclEZModeRegistered
        MOVX    A,@DPTR
        JZ      ??zcl_InvokeEZMode_0
//  129   {
//  130     return;
//  131   }
//  132 
//  133   // there is only 1 EZ-Mode state machine. If already in EZ-Mode, cancel it
//  134   if(zclEZModeState != EZMODE_STATE_READY)
        MOV     DPTR,#zclEZModeState
        MOVX    A,@DPTR
        JZ      ??zcl_InvokeEZMode_1
//  135   {
//  136     zcl_SetEZModeError ( EZMODE_ERR_CANCELLED );
        MOV     DPTR,#zclEZModeErr
        MOV     A,#0x2
        MOVX    @DPTR,A
//  137     // needed to shut down timers, turn off joining, etc...
//  138     zcl_SetEZModeState ( EZMODE_STATE_FINISH );
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x63
        LCALL   `??zcl_SetEZModeState::?relay`; Banked call to: zcl_SetEZModeState
//  139     return;
        SJMP    ??zcl_InvokeEZMode_0
//  140   }
//  141 
//  142   // copy the data, so we remember which endpoint, etc...
//  143   zcl_memcpy( &zclEZModeInvokeData, pData, sizeof(zclEZMode_InvokeData_t) );
??zcl_InvokeEZMode_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     R2,#zclEZModeInvokeData & 0xff
        MOV     R3,#(zclEZModeInvokeData >> 8) & 0xff
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  144 
//  145   // start with no error, and no QueryResponses in our list
//  146   zcl_SetEZModeError ( EZMODE_ERR_SUCCESS );
        MOV     DPTR,#zclEZModeErr
        CLR     A
        MOVX    @DPTR,A
//  147   zclEZModeOpener = zclEZModeMatched = 0;
        MOV     DPTR,#zclEZModeMatched
        MOVX    @DPTR,A
        MOV     DPTR,#zclEZModeOpener
        MOVX    @DPTR,A
//  148 
//  149   // if already on network, just go to identify state
//  150   if ( zclEZModeInvokeData.onNetwork )
        MOV     DPTR,#zclEZModeInvokeData + 1
        MOVX    A,@DPTR
        JZ      ??zcl_InvokeEZMode_2
//  151   {
//  152     zcl_SetEZModeState( EZMODE_STATE_OPENER );
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x3
        SJMP    ??zcl_InvokeEZMode_3
//  153   }
//  154 
//  155   // not already on network, form/join a network
//  156   else
//  157   {
//  158     zcl_SetEZModeState( EZMODE_STATE_JOINER );
??zcl_InvokeEZMode_2:
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x2
??zcl_InvokeEZMode_3:
        LCALL   `??zcl_SetEZModeState::?relay`; Banked call to: zcl_SetEZModeState
//  159   }
//  160 
//  161   // start a total timeout for EZ_Mode (will cancel if not finished in this time)
//  162   zcl_EZModeStartTimer( *zclEZModeRegisterData.pTaskID,
//  163                      zclEZModeRegisterData.timeoutEvt, EZMODE_TIME );
        ; Setup parameters for call to function zcl_EZModeStartTimer
        MOV     DPTR,#__Constant_2bf20
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   `??zcl_EZModeStartTimer::?relay`; Banked call to: zcl_EZModeStartTimer
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  164 }
??zcl_InvokeEZMode_0:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock2
//  165 
//  166 /*********************************************************************
//  167  * @fn      zcl_EZModeAction
//  168  *
//  169  * @brief   Called when the application needs to inform EZ-Mode of some action
//  170  *          (now on the network, identify mode query, etc...)
//  171  *
//  172  * @param   action - which action has taken place
//  173  *          pData  - the data unique to the action
//  174  *
//  175  * @return  none
//  176  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  177 void zcl_EZModeAction(zclEzMode_Action_t action, zclEZMode_ActionData_t *pData)
zcl_EZModeAction:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zcl_EZModeAction
        CODE
//  178 {
        FUNCALL zcl_EZModeAction, zcl_ProcessEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_EZModePermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_EZModeSendMatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_EZModeBindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_EZModeBindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModeAction, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  179   ZDO_MatchDescRsp_t *pMatchDescRsp;
//  180   zAddrType_t dstAddr;
//  181 
//  182   // not in the EZ-Mode state machine, so do nothing
//  183   if( zclEZModeState == EZMODE_STATE_READY )
        MOV     DPTR,#zclEZModeState
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zcl_EZModeAction_0 & 0xFFFF
//  184     return;
//  185 
//  186   switch ( action )
        MOV     A,R1
        DEC     A
        JZ      ??zcl_EZModeAction_1
        DEC     A
        JZ      ??zcl_EZModeAction_2
        DEC     A
        JZ      ??zcl_EZModeAction_3
        DEC     A
        JZ      ??zcl_EZModeAction_4
        DEC     A
        JNZ     $+5
        LJMP    ??zcl_EZModeAction_5 & 0xFFFF
        ADD     A,#-0x5e
        JNZ     $+5
        LJMP    ??zcl_EZModeAction_6 & 0xFFFF
        LJMP    ??zcl_EZModeAction_0 & 0xFFFF
//  187   {
//  188     case EZMODE_ACTION_PROCESS:
//  189       zcl_ProcessEZMode();  // process next state
??zcl_EZModeAction_1:
        ; Setup parameters for call to function zcl_ProcessEZMode
        LCALL   `??zcl_ProcessEZMode::?relay`; Banked call to: zcl_ProcessEZMode
//  190     break;
        LJMP    ??zcl_EZModeAction_0 & 0xFFFF
//  191 
//  192     case EZMODE_ACTION_NETWORK_STARTED:
//  193       // once on the network, time to go on to the identify state
//  194       if( zclEZModeState == EZMODE_STATE_JOINER )
??zcl_EZModeAction_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??zcl_EZModeAction_0 & 0xFFFF
//  195       {
//  196         // set local permit joining on locally only for joiners (openers turn it on across the network)
//  197         zcl_EZModePermitJoiningRequest( *zclEZModeRegisterData.pTaskID, NULL,
//  198                                        (byte)(EZMODE_TIME / 1000) ); // in seconds
        ; Setup parameters for call to function zcl_EZModePermitJoiningRequest
        MOV     R4,#-0x4c
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   `??zcl_EZModePermitJoiningRequest::?relay`; Banked call to: zcl_EZModePermitJoiningRequest
//  199         zcl_SetEZModeState( EZMODE_STATE_IDENTIFYING );
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x4
        LJMP    ??zcl_EZModeAction_7 & 0xFFFF
//  200       }
//  201     break;
//  202 
//  203     // received identify query
//  204     case EZMODE_ACTION_IDENTIFY_QUERY:
//  205 
//  206       // targets just go to autoclose once they have been identified
//  207       if ( !zclEZModeInvokeData.initiator )
??zcl_EZModeAction_3:
        MOV     DPTR,#zclEZModeInvokeData + 2
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zcl_EZModeAction_0 & 0xFFFF
        LJMP    ??zcl_EZModeAction_8 & 0xFFFF
//  208       {
//  209         zcl_SetEZModeState( EZMODE_STATE_AUTOCLOSE );
//  210       }
//  211     break;
//  212 
//  213     // received identify query response
//  214     case EZMODE_ACTION_IDENTIFY_QUERY_RSP:
//  215 
//  216       if ( pData->pIdentifyQueryRsp->srcAddr->addr.shortAddr
//  217           != zcl_EZModeGetNwkAddr() )
??zcl_EZModeAction_4:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,R2
        XRL     A,R0
        JNZ     ??zcl_EZModeAction_9
        MOV     A,R3
        XRL     A,R1
??zcl_EZModeAction_9:
        JNZ     $+5
        LJMP    ??zcl_EZModeAction_0 & 0xFFFF
//  218       {
//  219         // remember the node we found via identify query
//  220         zclEZModeQueryRspNwkAddr = pData->pIdentifyQueryRsp->srcAddr->addr.shortAddr;
        MOV     DPTR,#zclEZModeQueryRspNwkAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  221         zclEZModeQueryRspEP = pData->pIdentifyQueryRsp->srcAddr->endPoint;
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#zclEZModeQueryRspEP
        MOVX    @DPTR,A
//  222 
//  223         // initiate match descriptor request on the remote node
//  224         dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine5 & 0xFFFF
//  225         dstAddr.addr.shortAddr = zclEZModeQueryRspNwkAddr;
//  226         zcl_EZModeSendMatchDescReq( *zclEZModeRegisterData.pTaskID,
//  227                           &dstAddr,
//  228                           zclEZModeQueryRspNwkAddr,
//  229                           zclEZModeInvokeData.numActiveOutClusters,
//  230                           zclEZModeInvokeData.pActiveOutClusterIDs,
//  231                           zclEZModeInvokeData.numActiveInClusters,
//  232                           zclEZModeInvokeData.pActiveInClusterIDs );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function zcl_EZModeSendMatchDescReq
        MOV     DPTR,#zclEZModeInvokeData + 4
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPTR,#zclEZModeInvokeData + 3
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     DPTR,#zclEZModeInvokeData + 7
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPTR,#zclEZModeInvokeData + 6
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPTR,#zclEZModeQueryRspNwkAddr
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP101_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   `??zcl_EZModeSendMatchDescReq::?relay`; Banked call to: zcl_EZModeSendMatchDescReq
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  233         zcl_SetEZModeState( EZMODE_STATE_WAITING_MATCHDESCRSP );
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x6
        SJMP    ??zcl_EZModeAction_7
//  234       }
//  235     break;
//  236 
//  237     // received match descriptor response, see if active clusters match
//  238     case EZMODE_ACTION_MATCH_DESC_RSP:
//  239 
//  240       pMatchDescRsp = pData->pMatchDescRsp;
??zcl_EZModeAction_5:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine9 & 0xFFFF
//  241       if ( ( pMatchDescRsp && pMatchDescRsp->status == ZSuccess ) && ( pMatchDescRsp->cnt>0 ) )
??CrossCallReturnLabel_8:
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zcl_EZModeAction_8
        MOVX    A,@DPTR
        JNZ     ??zcl_EZModeAction_8
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??zcl_EZModeAction_8
//  242       {
//  243         zclEZModeMatched = TRUE;
        MOV     DPTR,#zclEZModeMatched
        MOV     A,#0x1
        LCALL   ?Subroutine5 & 0xFFFF
//  244 
//  245         dstAddr.addr.shortAddr = zclEZModeQueryRspNwkAddr;
//  246         dstAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_1:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  247 
//  248         // bind each matching input cluster
//  249         if ( zclEZModeInvokeData.numActiveInClusters )
        MOV     DPTR,#zclEZModeInvokeData + 3
        MOVX    A,@DPTR
        MOV     R5,A
        JZ      ??zcl_EZModeAction_10
//  250         {
//  251           zcl_EZModeBindAddEntry( zclEZModeInvokeData.endpoint, &dstAddr, zclEZModeQueryRspEP,
//  252                         zclEZModeInvokeData.numActiveInClusters, zclEZModeInvokeData.pActiveInClusterIDs );
        ; Setup parameters for call to function zcl_EZModeBindAddEntry
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPTR,#zclEZModeQueryRspEP
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#zclEZModeInvokeData
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_EZModeBindAddEntry::?relay`; Banked call to: zcl_EZModeBindAddEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  253         }
//  254 
//  255         // bind each matching output cluster
//  256         if ( zclEZModeInvokeData.numActiveOutClusters )
??zcl_EZModeAction_10:
        MOV     DPTR,#zclEZModeInvokeData + 6
        MOVX    A,@DPTR
        MOV     R5,A
        JZ      ??zcl_EZModeAction_8
//  257         {
//  258           zcl_EZModeBindAddEntry( zclEZModeInvokeData.endpoint, &dstAddr, zclEZModeQueryRspEP,
//  259                         zclEZModeInvokeData.numActiveOutClusters, zclEZModeInvokeData.pActiveOutClusterIDs );
        ; Setup parameters for call to function zcl_EZModeBindAddEntry
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPTR,#zclEZModeQueryRspEP
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#zclEZModeInvokeData
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_EZModeBindAddEntry::?relay`; Banked call to: zcl_EZModeBindAddEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  260         }
//  261       }
//  262 
//  263       // time to close (wait a bit before finishing, to allow for multiple initiators)
//  264       zcl_SetEZModeState( EZMODE_STATE_AUTOCLOSE );
??zcl_EZModeAction_8:
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x7
        SJMP    ??zcl_EZModeAction_7
//  265     break;
//  266 
//  267     // timed out of EZ-Mode
//  268     case EZMODE_ACTION_TIMED_OUT:
//  269       // timed out
//  270       if(zclEZModeState != EZMODE_STATE_READY)
//  271       {
//  272         zcl_SetEZModeError( EZMODE_ERR_TIMEDOUT );
??zcl_EZModeAction_6:
        MOV     DPTR,#zclEZModeErr
        MOV     A,#0x3
        MOVX    @DPTR,A
//  273         zcl_SetEZModeState( EZMODE_STATE_FINISH );
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x63
??zcl_EZModeAction_7:
        LCALL   `??zcl_SetEZModeState::?relay`; Banked call to: zcl_SetEZModeState
//  274       }
//  275     break;
//  276   }   // switch ( action )
//  277 
//  278 }
??zcl_EZModeAction_0:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zcl_EZModeAction
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zcl_EZModeAction
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#zclEZModeQueryRspNwkAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  279 
//  280 /*********************************************************************
//  281  * LOCAL VARIABLES
//  282  */
//  283 
//  284 
//  285 /*********************************************************************
//  286  * LOCAL FUNCTIONS
//  287  */
//  288 
//  289 /*********************************************************************
//  290  * @fn      zcl_SetEZModeState
//  291  *
//  292  * @brief   Move on to new state after a short wait.
//  293  *
//  294  * @param   none
//  295  *
//  296  * @return  none
//  297  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  298 static void zcl_SetEZModeState( zlcEZMode_State_t newState )
zcl_SetEZModeState:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zcl_SetEZModeState
        CODE
//  299 {
        FUNCALL zcl_SetEZModeState, zcl_EZModeStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  300   zclEZModeState = newState;
        MOV     DPTR,#zclEZModeState
        MOVX    @DPTR,A
//  301   zcl_EZModeStartTimer( *zclEZModeRegisterData.pTaskID, zclEZModeRegisterData.processEvt, 5 );
        ; Setup parameters for call to function zcl_EZModeStartTimer
        MOV     DPTR,#__Constant_5
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     DPTR,#zclEZModeRegisterData + 2
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   `??zcl_EZModeStartTimer::?relay`; Banked call to: zcl_EZModeStartTimer
        LJMP    ?Subroutine2 & 0xFFFF
//  302 }
          CFI EndBlock cfiBlock11
//  303 
//  304 /*********************************************************************
//  305  * @fn      zclSampleSw_SetEZModeError
//  306  *
//  307  * @brief   Called to set error code that will be reported on finish. Starts as EZMODE_ERR_SUCCESS.
//  308  *
//  309  * @param   none
//  310  *
//  311  * @return  none
//  312  */
//  313 static void zcl_SetEZModeError( uint8 errorCode )
//  314 {
//  315   zclEZModeErr = errorCode;
//  316 }
//  317 
//  318 /*********************************************************************
//  319  * @fn      zcl_ProcessEZMode
//  320  *
//  321  * @brief   Called when EZ-Mode changes state. See EZMODE_STATE_xxxx in zcl_ezmode.h
//  322  *
//  323  * @param   none
//  324  *
//  325  * @return  status
//  326  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  327 static void zcl_ProcessEZMode( void )
zcl_ProcessEZMode:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zcl_ProcessEZMode
        CODE
//  328 {
        FUNCALL zcl_ProcessEZMode, zcl_EZModePermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_SetEZModeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_EZModeStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_EZModeStopTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_EZModeStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_EZModeStopTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessEZMode, zcl_EZModePermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
//  329   zAddrType_t dstAddr;
//  330   afAddrType_t afDstAddr;
//  331   zclEZMode_CBData_t cbData;
//  332 
//  333   dstAddr.addr.shortAddr = 0xfffc;        // all routers (for PermitJoin) devices
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  334   dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  335 
//  336   afDstAddr.addr.shortAddr = 0xffff;      // all devices (for IdentifyQuery)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  337   afDstAddr.addrMode = afAddrBroadcast;
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  338   afDstAddr.endPoint = 0xff;
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  339 
//  340   switch(zclEZModeState)
        MOV     DPTR,#zclEZModeState
        MOVX    A,@DPTR
        ADD     A,#-0x2
        JZ      ??zcl_ProcessEZMode_0
        DEC     A
        JZ      ??zcl_ProcessEZMode_1
        DEC     A
        JZ      ??zcl_ProcessEZMode_2
        DEC     A
        JZ      ??zcl_ProcessEZMode_3
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??zcl_ProcessEZMode_4 & 0xFFFF
        ADD     A,#-0x5c
        JNZ     $+5
        LJMP    ??zcl_ProcessEZMode_5 & 0xFFFF
        LJMP    ??zcl_ProcessEZMode_6 & 0xFFFF
//  341   {
//  342     // openers will broadcast permit joining
//  343     case EZMODE_STATE_OPENER:
//  344       zclEZModeOpener = 1;
??zcl_ProcessEZMode_1:
        MOV     DPTR,#zclEZModeOpener
        MOV     A,#0x1
        MOVX    @DPTR,A
//  345 
//  346       // enable joining both locally and over-the-air
//  347       zcl_EZModePermitJoiningRequest( *zclEZModeRegisterData.pTaskID, &dstAddr,
//  348                                      (byte)(EZMODE_TIME / 1000) );
        ; Setup parameters for call to function zcl_EZModePermitJoiningRequest
        MOV     R4,#-0x4c
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   `??zcl_EZModePermitJoiningRequest::?relay`; Banked call to: zcl_EZModePermitJoiningRequest
//  349 
//  350       // then go to identifying state
//  351       zcl_SetEZModeState(EZMODE_STATE_IDENTIFYING);
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x4
        SJMP    ??zcl_ProcessEZMode_7
//  352     break;
//  353 
//  354     // joiners will try to join the network, and if success will go to identifying state
//  355     case EZMODE_STATE_JOINER:
//  356       zclEZModeOpener = 0;
??zcl_ProcessEZMode_0:
        MOV     DPTR,#zclEZModeOpener
        CLR     A
        MOVX    @DPTR,A
//  357       zcl_EZModeStartDevice(*zclEZModeRegisterData.pTaskID, 0);   // see ZDO_STATE_CHANGE in zclSampleSw_event_loop()
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,A
        MOV     R3,A
        LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
//  358     break;
        LJMP    ??zcl_ProcessEZMode_6 & 0xFFFF
//  359 
//  360     // go into identify state
//  361     case EZMODE_STATE_IDENTIFYING:
//  362 
//  363       // tell app to go into identify mode
//  364       if ( zclEZModeRegisterData.pfnNotifyCB )
??zcl_ProcessEZMode_2:
        MOV     DPTR,#zclEZModeRegisterData + 8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??zcl_ProcessEZMode_8
//  365       {
//  366         (*zclEZModeRegisterData.pfnNotifyCB)( zclEZModeState, NULL );
        ; Setup parameters for indirect call
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x4
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?CALL_IND
//  367       }
//  368 
//  369       // initiators start looking for other nodes in identify mode
//  370       if ( zclEZModeInvokeData.initiator )
??zcl_ProcessEZMode_8:
        MOV     DPTR,#zclEZModeInvokeData + 2
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zcl_ProcessEZMode_6 & 0xFFFF
//  371       {
//  372         zcl_SetEZModeState ( EZMODE_STATE_WAITING_IDENTIFYQUERYRSP );
        ; Setup parameters for call to function zcl_SetEZModeState
        MOV     R1,#0x5
??zcl_ProcessEZMode_7:
        LCALL   `??zcl_SetEZModeState::?relay`; Banked call to: zcl_SetEZModeState
        LJMP    ??zcl_ProcessEZMode_6 & 0xFFFF
//  373       }
//  374     break;
//  375 
//  376     // timeout out with no query response, send another
//  377     case EZMODE_STATE_WAITING_IDENTIFYQUERYRSP:
//  378       // ZStatus_t zclGeneral_SendIdentifyQuery( uint8 srcEP, afAddrType_t *dstAddr, uint8 disableDefaultRsp, uint8 seqNum );
//  379       // NOTE: Ensure that Identify Cluster is enabled to use this function for EZ-Mode
//  380       zclGeneral_SendIdentifyQuery( zclEZModeInvokeData.endpoint, &afDstAddr, TRUE, (*zclEZModeRegisterData.pZclSeqNum)++ );
??zcl_ProcessEZMode_3:
        MOV     DPTR,#zclEZModeRegisterData + 6
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,R1
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        CLR     A
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#zclEZModeInvokeData
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
//  381 
//  382       // wait some time before sending out the next IdentifyQuery, will stop when we get a response
//  383       zcl_EZModeStartTimer( *zclEZModeRegisterData.pTaskID, zclEZModeRegisterData.processEvt, EZMODE_IDQUERYTIME );
        ; Setup parameters for call to function zcl_EZModeStartTimer
        MOV     DPTR,#__Constant_fa0
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     DPTR,#zclEZModeRegisterData + 2
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   `??zcl_EZModeStartTimer::?relay`; Banked call to: zcl_EZModeStartTimer
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
//  384       break;
        LJMP    ??zcl_ProcessEZMode_6 & 0xFFFF
//  385 
//  386     // waiting for simple descriptor response
//  387     case EZMODE_STATE_WAITING_MATCHDESCRSP:
//  388     break;
//  389 
//  390     // if waiting on autoclose, then we're done. Go to success.
//  391     case EZMODE_STATE_AUTOCLOSE:
//  392 
//  393       // special case: if 2 initators, we only fail if no match from either side
//  394       if( zclEZModeInvokeData.initiator && !zclEZModeMatched )
??zcl_ProcessEZMode_4:
        MOV     DPTR,#zclEZModeInvokeData + 2
        MOVX    A,@DPTR
        JZ      ??zcl_ProcessEZMode_9
        MOV     DPTR,#zclEZModeMatched
        MOVX    A,@DPTR
        JNZ     ??zcl_ProcessEZMode_9
//  395       {
//  396         zcl_SetEZModeError ( EZMODE_ERR_NOMATCH );
        MOV     DPTR,#zclEZModeErr
        MOV     A,#0x4
        MOVX    @DPTR,A
//  397       }
//  398 
//  399       // if user specified callback, call on AutoClose
//  400       if ( zclEZModeRegisterData.pfnNotifyCB )
??zcl_ProcessEZMode_9:
        MOV     DPTR,#zclEZModeRegisterData + 8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??zcl_ProcessEZMode_10
//  401       {
//  402         cbData.sAutoClose.err = zclEZModeErr;
        LCALL   ?Subroutine11 & 0xFFFF
//  403         (*zclEZModeRegisterData.pfnNotifyCB)( zclEZModeState, &cbData );
??CrossCallReturnLabel_15:
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x7
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?CALL_IND
//  404       }
//  405 
//  406       // no longer will timeout, since cannot fail
//  407       zcl_EZModeStopTimer( *zclEZModeRegisterData.pTaskID, zclEZModeRegisterData.timeoutEvt );
??zcl_ProcessEZMode_10:
        ; Setup parameters for call to function zcl_EZModeStopTimer
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   `??zcl_EZModeStopTimer::?relay`; Banked call to: zcl_EZModeStopTimer
//  408 
//  409       // wait a little to turn off identify mode, to give time for the other side to discover
//  410       // in case of complex devices (both target/initiator)
//  411       zcl_EZModeStartTimer( *zclEZModeRegisterData.pTaskID, zclEZModeRegisterData.processEvt, EZMODE_AUTOCLOSETIME );
        ; Setup parameters for call to function zcl_EZModeStartTimer
        MOV     DPTR,#__Constant_fa0
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     DPTR,#zclEZModeRegisterData + 2
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   `??zcl_EZModeStartTimer::?relay`; Banked call to: zcl_EZModeStartTimer
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
//  412 
//  413       // go to finish state after autoclose. Don't use zcl_SetEZModeState() because we don't want it to happen immediately
//  414       zclEZModeState = EZMODE_STATE_FINISH;
        MOV     DPTR,#zclEZModeState
        MOV     A,#0x63
        SJMP    ??zcl_ProcessEZMode_11
//  415     break;
//  416 
//  417     case EZMODE_STATE_FINISH:
//  418 
//  419       // no longer will timeout, since we're done
//  420       zcl_EZModeStopTimer( *zclEZModeRegisterData.pTaskID, zclEZModeRegisterData.timeoutEvt );
??zcl_ProcessEZMode_5:
        ; Setup parameters for call to function zcl_EZModeStopTimer
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   `??zcl_EZModeStopTimer::?relay`; Banked call to: zcl_EZModeStopTimer
//  421 
//  422       // if we opened the network, close it now (turn off joining)
//  423       if ( zclEZModeOpener )
        MOV     DPTR,#zclEZModeOpener
        MOVX    A,@DPTR
        JZ      ??zcl_ProcessEZMode_12
//  424       {
//  425         zcl_EZModePermitJoiningRequest( *zclEZModeRegisterData.pTaskID, &dstAddr, 0 );
        ; Setup parameters for call to function zcl_EZModePermitJoiningRequest
        MOV     R4,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   ?Subroutine7 & 0xFFFF
//  426       }
??CrossCallReturnLabel_5:
        LCALL   `??zcl_EZModePermitJoiningRequest::?relay`; Banked call to: zcl_EZModePermitJoiningRequest
//  427 
//  428       // if user callback, inform them of the finish, which will also turn off identify
//  429       if ( zclEZModeRegisterData.pfnNotifyCB )
??zcl_ProcessEZMode_12:
        MOV     DPTR,#zclEZModeRegisterData + 8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??zcl_ProcessEZMode_13
//  430       {
//  431         cbData.sFinish.err = zclEZModeErr;
        LCALL   ?Subroutine11 & 0xFFFF
//  432         cbData.sFinish.ep = zclEZModeQueryRspEP;
??CrossCallReturnLabel_16:
        MOV     DPTR,#zclEZModeQueryRspEP
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  433         cbData.sFinish.nwkaddr = zclEZModeQueryRspNwkAddr;
        MOV     DPTR,#zclEZModeQueryRspNwkAddr
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  434         (*zclEZModeRegisterData.pfnNotifyCB)( zclEZModeState, &cbData );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     DPTR,#zclEZModeState
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?CALL_IND
//  435       }
//  436 
//  437       // done, back to ready state
//  438       zclEZModeState = EZMODE_STATE_READY;
??zcl_ProcessEZMode_13:
        MOV     DPTR,#zclEZModeState
        CLR     A
??zcl_ProcessEZMode_11:
        MOVX    @DPTR,A
//  439     break;
//  440   }
//  441 }
??zcl_ProcessEZMode_6:
        MOV     A,#0x19
          CFI EndBlock cfiBlock12
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zcl_ProcessEZMode
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zcl_ProcessEZMode
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV     DPTR,#zclEZModeErr
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zcl_ProcessEZMode
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zcl_EZModeAction
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zcl_ProcessEZMode
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zcl_ProcessEZMode
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function zcl_InvokeEZMode
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zcl_ProcessEZMode
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zcl_ProcessEZMode
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     DPTR,#zclEZModeRegisterData + 4
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function zcl_SetEZModeState
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zcl_ProcessEZMode
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zcl_ProcessEZMode
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zcl_InvokeEZMode
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zcl_ProcessEZMode
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zcl_ProcessEZMode
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_26:
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zcl_EZModeAction
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_3
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zcl_ProcessEZMode
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_4
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zcl_ProcessEZMode
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_5
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-4
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zcl_InvokeEZMode
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_22
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zcl_ProcessEZMode
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_23
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zcl_ProcessEZMode
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_24
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-4
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zcl_SetEZModeState
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_19
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zcl_ProcessEZMode
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_20
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zcl_ProcessEZMode
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_21
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPTR,#zclEZModeRegisterData
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_28:
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
//  442 
//  443 #if !defined ( ZCL_STANDALONE )
//  444 /*********************************************************************
//  445  * @fn      zcl_EZModeSendMatchDescReq
//  446  *
//  447  * @brief   Call to send a ZDP Match Descriptor Request
//  448  *
//  449  * @param   srcID - source task ID sending,
//  450  *          for ZCL_STANDALONE, use source endpoint
//  451  * @param   dstAddr - destination address
//  452  * @param   nwkAddr - network address of interest
//  453  * @param   NumInClusters - number of input clusters
//  454  * @param   InClusterList - input cluster ID list
//  455  * @param   NumOutClusters - number of output clusters
//  456  * @param   OutClusterList - output cluster ID list
//  457  *
//  458  * @return  afStatus_t
//  459  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  460 afStatus_t zcl_EZModeSendMatchDescReq( uint8 srcID,
zcl_EZModeSendMatchDescReq:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function zcl_EZModeSendMatchDescReq
        CODE
//  461                                        zAddrType_t *dstAddr,
//  462                                        uint16 nwkAddr,
//  463                                        uint8  NumInClusters,
//  464                                        uint16 *InClusterList,
//  465                                        uint8  NumOutClusters,
//  466                                        uint16 *OutClusterList )
//  467 {
        FUNCALL zcl_EZModeSendMatchDescReq, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  468   (void)srcID;
//  469   return ZDP_MatchDescReq( dstAddr,
//  470                            nwkAddr,
//  471                            ZCL_HA_PROFILE_ID,
//  472                            NumInClusters,
//  473                            InClusterList,
//  474                            NumOutClusters,
//  475                            OutClusterList,
//  476                            FALSE );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
        MOV     A,#0x8
        SJMP    ?Subroutine3
//  477 }
          CFI EndBlock cfiBlock47
//  478 
//  479 /*********************************************************************
//  480  * @fn      zcl_EZModeStartTimer
//  481  *
//  482  * @brief   This function is called to start a timer to expire in n mSecs.
//  483  *          When the timer expires, call zcl_EZModeAction().
//  484  *
//  485  * @param   uint8 taskID - task id to set timer for
//  486  * @param   uint16 event_id - event to be notified with
//  487  * @param   uint32 timeout_value - in milliseconds.
//  488  *
//  489  * @return  SUCCESS, or NO_TIMER_AVAIL.
//  490  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  491 afStatus_t zcl_EZModeStartTimer( uint8 task_id, uint16 event_id,
zcl_EZModeStartTimer:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function zcl_EZModeStartTimer
        CODE
//  492                                   uint32 timeout_value )
//  493 {
        FUNCALL zcl_EZModeStartTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  494   return osal_start_timerEx( task_id, event_id, timeout_value );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        SJMP    ?Subroutine2
//  495 }
          CFI EndBlock cfiBlock48
//  496 
//  497 /*********************************************************************
//  498  * @fn      zcl_EZModeStopTimer
//  499  *
//  500  * @brief   This function is called to cancel a timer.
//  501  *
//  502  * @param   uint8 taskID - task id to set timer for
//  503  * @param   uint16 event_id - event to be notified with
//  504  *
//  505  * @return  SUCCESS, or NO_TIMER_AVAIL.
//  506  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  507 afStatus_t zcl_EZModeStopTimer( uint8 task_id, uint16 event_id )
zcl_EZModeStopTimer:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function zcl_EZModeStopTimer
        CODE
//  508 {
        FUNCALL zcl_EZModeStopTimer, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  509   return osal_stop_timerEx( task_id, event_id );
        ; Setup parameters for call to function osal_stop_timerEx
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        SJMP    ??Subroutine17_0
//  510 }
          CFI EndBlock cfiBlock49
//  511 
//  512 /*********************************************************************
//  513  * @fn      zcl_EZModePermitJoiningRequest
//  514  *
//  515  * @brief   Call to set the permit joining for device and network.
//  516  *
//  517  * @param   srcID - source task ID sending,
//  518  *          for ZCL_STANDALONE, use source endpoint
//  519  * @param   dstAddr - destination address of the message (short addr only),
//  520  *                    NULL to send to local device only.
//  521  * @param   duration - Permit duration
//  522  *
//  523  * @return  none
//  524  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  525 void zcl_EZModePermitJoiningRequest( uint8 srcID, zAddrType_t *dstAddr,
zcl_EZModePermitJoiningRequest:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function zcl_EZModePermitJoiningRequest
        CODE
//  526                                     uint8 duration )
//  527 {
        FUNCALL zcl_EZModePermitJoiningRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_EZModePermitJoiningRequest, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R4
        MOV     R6,A
//  528   zAddrType_t tmpAddr;
//  529 
//  530   (void)srcID;
//  531 
//  532   tmpAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  533 
//  534   if ( dstAddr == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zcl_EZModePermitJoiningRequest_0
//  535   {
//  536     tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??zcl_EZModePermitJoiningRequest_1
//  537   }
//  538   else
//  539   {
//  540     tmpAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??zcl_EZModePermitJoiningRequest_0:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine10 & 0xFFFF
//  541   }
??CrossCallReturnLabel_13:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??zcl_EZModePermitJoiningRequest_1:
        MOVX    @DPTR,A
//  542 
//  543   // Trust Center significance is always true
//  544   ZDP_MgmtPermitJoinReq( &tmpAddr, duration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOV     A,R6
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  545 }
        MOV     A,#0x9
        SJMP    ??Subroutine16_0
          CFI EndBlock cfiBlock50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zcl_ProcessEZMode
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zcl_ProcessEZMode
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zcl_EZModePermitJoiningRequest
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zcl_EZModeBindAddEntry
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
          CFI EndBlock cfiBlock57
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock58
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock59
//  546 
//  547 /*********************************************************************
//  548  * @fn      zcl_EZModeStartDevice
//  549  *
//  550  * @brief   Call to start a device joining.
//  551  *
//  552  * @param   srcID - source task ID sending,
//  553  *          for ZCL_STANDALONE, use source endpoint
//  554  * @param   startDelay - timeDelay to start device (in milliseconds)
//  555  *
//  556  * @return      none
//  557  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  558 void zcl_EZModeStartDevice( uint8 srcID, uint16 startDelay )
zcl_EZModeStartDevice:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function zcl_EZModeStartDevice
        CODE
//  559 {
        FUNCALL zcl_EZModeStartDevice, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  560   (void)srcID;
//  561   ZDOInitDevice( startDelay );
        ; Setup parameters for call to function ZDOInitDevice
        LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
//  562 }
          CFI EndBlock cfiBlock60
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock61
//  563 
//  564 /*********************************************************************
//  565  * @fn      zcl_EZModeBindAddEntry()
//  566  *
//  567  * @brief   This function is used to Add an entry to the binding table
//  568  *
//  569  * @param   srcEpInt - source endpoint
//  570  * @param   dstAddr - destination Address
//  571  * @param   dstEpInt - destination endpoint
//  572  * @param   numClusterIds - number of cluster Ids in the list
//  573  * @param   clusterIds - pointer to the Object ID list
//  574  *
//  575  * @return  pointer to binding table entry, NULL if not added
//  576  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  577 void zcl_EZModeBindAddEntry( uint8 srcEpInt,
zcl_EZModeBindAddEntry:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function zcl_EZModeBindAddEntry
        CODE
//  578                              zAddrType_t *dstAddr, uint8 dstEpInt,
//  579                              uint8 numClusterIds, uint16 *clusterIds )
//  580 {
        FUNCALL zcl_EZModeBindAddEntry, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
//  581   if ( pbindAddEntry )
        MOV     DPTR,#pbindAddEntry
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zcl_EZModeBindAddEntry_0
//  582   {
//  583     if ( pbindAddEntry( srcEpInt, dstAddr, dstEpInt, numClusterIds, clusterIds ) )
        ; Setup parameters for indirect call
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,?V0
        MOV     DPTR,#pbindAddEntry
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?CALL_IND
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??zcl_EZModeBindAddEntry_0
//  584     {
//  585       ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
//  586     }
//  587   }
//  588 }
??zcl_EZModeBindAddEntry_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zcl_EZModeAction
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zcl_EZModeBindAddEntry
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_27:
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function zcl_EZModeAction
          CFI Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zcl_EZModeAction
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_3
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-6
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zcl_ProcessEZMode
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_4
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-6
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zcl_ProcessEZMode
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_5
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-6
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zcl_InvokeEZMode
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_22
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-6
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zcl_ProcessEZMode
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_23
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-6
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zcl_ProcessEZMode
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_24
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-6
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zcl_SetEZModeState
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_19
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-6
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zcl_ProcessEZMode
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_20
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-6
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zcl_ProcessEZMode
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_21
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-6
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zcl_EZModeAction
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_6
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-6
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zcl_EZModeAction
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-6
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zcl_EZModeBindAddEntry
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_17
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80
//  589 
//  590 /*********************************************************************
//  591  * @fn      zcl_EZModeGetNwkAddr()
//  592  *
//  593  * @brief   This function is used to Add an entry to the binding table
//  594  *
//  595  *   NOTE: Do not call this function outside of zcl_ezmode.c.
//  596  *   NOTE2:  For ZCL_STANDALONE, this function needs to be implemented
//  597  *           elsewhere.
//  598  *
//  599  * @param       none
//  600  *
//  601  * @return  16 bit network address
//  602  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  603 uint16 zcl_EZModeGetNwkAddr( void )
zcl_EZModeGetNwkAddr:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function zcl_EZModeGetNwkAddr
        CODE
//  604 {
        FUNCALL zcl_EZModeGetNwkAddr, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  605   return ( NLME_GetShortAddr() );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        SJMP    ?Subroutine4
//  606 }
          CFI EndBlock cfiBlock81

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2bf20:
        DD 180000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_5:
        DD 5

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_fa0:
        DD 4000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_RegisterEZMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_RegisterEZMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_InvokeEZMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_InvokeEZMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModeAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModeAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SetEZModeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SetEZModeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_ProcessEZMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ProcessEZMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModeSendMatchDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModeSendMatchDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModeStartTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModeStartTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModeStopTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModeStopTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModePermitJoiningRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModePermitJoiningRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModeStartDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModeStartDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModeBindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModeBindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_EZModeGetNwkAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_EZModeGetNwkAddr

        END
//  607 #endif // !ZCL_STANDALONE
//  608 
//  609 #endif // ZCL_EZMODE
// 
// 1 346 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//    12 bytes in segment XDATA_ROM_C
//    27 bytes in segment XDATA_Z
// 
// 1 418 bytes of CODE  memory
//     0 bytes of CONST memory (+ 12 bytes shared)
//    27 bytes of XDATA memory
//
//Errors: none
//Warnings: none
