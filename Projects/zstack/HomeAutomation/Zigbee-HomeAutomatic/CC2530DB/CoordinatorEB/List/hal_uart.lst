###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                28/Aug/2016  20:48:03
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530EB\hal_uart.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D HOLD_AUTO_START -D
#        BUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -D DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\hal_uart.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\hal_uart.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 1038
   \   00040E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   85FFFF       MOV     0xff,0xff
   \   00000A   53F1FE       ANL     0xf1,#0xfe
   \   00000D   43F30C       ORL     0xf3,#0xc
   \   000010   53F2F3       ANL     0xf2,#0xf3
   \   000013   758680       MOV     0x86,#-0x80
   \   000016   75C480       MOV     0xc4,#-0x80
   \   000019   90....       MOV     DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV     A,#0x70
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74C1         MOV     A,#-0x3f
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   541F         ANL     A,#0x1f
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV     A,#0xf
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   744A         MOV     A,#0x4a
   \   000031   F0           MOVX    @DPTR,A
   \   000032   90....       MOV     DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV     A,#0x70
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74C1         MOV     A,#-0x3f
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   90....       MOV     DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   541F         ANL     A,#0x1f
   \   000042   F0           MOVX    @DPTR,A
   \   000043   90....       MOV     DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV     A,#-0x32
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   540F         ANL     A,#0xf
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   4410         ORL     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000053   90....       MOV     DPTR,#dmaCh1234 + 18
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#dmaCfg & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   90....       MOV     DPTR,#dmaCh1234 + 21
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000063   04           INC     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   90....       MOV     DPTR,#dmaCh1234 + 23
   \   000068   7412         MOV     A,#0x12
   \   00006A   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00006D                REQUIRE P2DIR
   \   00006D                REQUIRE PERCFG
   \   00006D                REQUIRE P0SEL
   \   00006D                REQUIRE ADCCFG
   \   00006D                REQUIRE U0CSR
   \   00006D                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine14_0
   \   000001                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   90....       MOV     DPTR,#dmaCfg + 1036
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7403         MOV     A,#0x3
   \   000023   68           XRL     A,R0
   \   000024   6005         JZ      ??HalUARTOpenDMA_0
   \   000026   7404         MOV     A,#0x4
   \   000028   68           XRL     A,R0
   \   000029   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002B   75C2D8       MOV     0xc2,#-0x28
   \   00002E   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000030   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000033   E0           MOVX    A,@DPTR
   \   000034   600B         JZ      ??HalUARTOpenDMA_3
   \   000036   14           DEC     A
   \   000037   6012         JZ      ??HalUARTOpenDMA_4
   \   000039   14           DEC     A
   \   00003A   6019         JZ      ??HalUARTOpenDMA_5
   \   00003C   14           DEC     A
   \   00003D   6020         JZ      ??HalUARTOpenDMA_6
   \   00003F   8028         SJMP    ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000041   75C508       MOV     0xc5,#0x8
   \   000044   90....       MOV     DPTR,#dmaCfg + 1032
   \   000047   7423         MOV     A,#0x23
   \   000049   8026         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   00004B   75C509       MOV     0xc5,#0x9
   \   00004E   90....       MOV     DPTR,#dmaCfg + 1032
   \   000051   7412         MOV     A,#0x12
   \   000053   801C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   000055   75C50A       MOV     0xc5,#0xa
   \   000058   90....       MOV     DPTR,#dmaCfg + 1032
   \   00005B   7409         MOV     A,#0x9
   \   00005D   8012         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   00005F   75C50A       MOV     0xc5,#0xa
   \   000062   90....       MOV     DPTR,#dmaCfg + 1032
   \   000065   7406         MOV     A,#0x6
   \   000067   8008         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000069   75C50B       MOV     0xc5,#0xb
   \   00006C   90....       MOV     DPTR,#dmaCfg + 1032
   \   00006F   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   600D         JZ      ??HalUARTOpenDMA_9
   \   00007B   75C442       MOV     0xc4,#0x42
   \   00007E   43F310       ORL     0xf3,#0x10
   \   000081   C285         CLR     0x80.5
   \   000083   43FD20       ORL     0xfd,#0x20
   \   000086   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000088   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00008B   9070C1       MOV     DPTR,#0x70c1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   90....       MOV     DPTR,#dmaCfg
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E4           CLR     A
   \   000095   F0           MOVX    @DPTR,A
   \   000096   75D1F7       MOV     0xd1,#-0x9
   \   000099   75D608       MOV     0xd6,#0x8
   \   00009C                ; Setup parameters for call to function osal_memset
   \   00009C   FC           MOV     R4,A
   \   00009D   7D02         MOV     R5,#0x2
   \   00009F   E5C2         MOV     A,0xc2
   \   0000A1   F4           CPL     A
   \   0000A2   F9           MOV     R1,A
   \   0000A3   7A..         MOV     R2,#dmaCfg & 0xff
   \   0000A5   7B..         MOV     R3,#(dmaCfg >> 8) & 0xff
   \   0000A7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000AA   438640       ORL     0x86,#0x40
   \   0000AD   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000B5   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000B8                REQUIRE U0BAUD
   \   0000B8                REQUIRE U0GCR
   \   0000B8                REQUIRE U0UCR
   \   0000B8                REQUIRE P0SEL
   \   0000B8                REQUIRE _A_P0
   \   0000B8                REQUIRE P0DIR
   \   0000B8                REQUIRE DMAIRQ
   \   0000B8                REQUIRE DMAARM
   \   0000B8                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(uint8 *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#dmaCfg + 1030
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   FA           MOV     R2,A
   \   00000E   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000010   2A           ADD     A,R2
   \   000011   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000014   FA           MOV     R2,A
   \   000015   EC           MOV     A,R4
   \   000016   2A           ADD     A,R2
   \   000017   FA           MOV     R2,A
   \   000018   E4           CLR     A
   \   000019   3D           ADDC    A,R5
   \   00001A   FB           MOV     R3,A
   \   00001B   C3           CLR     C
   \   00001C   EA           MOV     A,R2
   \   00001D   9401         SUBB    A,#0x1
   \   00001F   EB           MOV     A,R3
   \   000020   9401         SUBB    A,#0x1
   \   000022   4007         JC      ??HalUARTWriteDMA_0
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   00002B   AAA8         MOV     R2,0xa8+0x0
   \   00002D   C2AF         CLR     0xa8.7
   \   00002F   90....       MOV     DPTR,#dmaCfg + 1030
   \   000032   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000035   EA           MOV     A,R2
   \   000036   A2E7         MOV     C,0xE0 /* A   */.7
   \   000038   E4           CLR     A
   \   000039   33           RLC     A
   \   00003A   F5..         MOV     ?V0,A
   \   00003C   EA           MOV     A,R2
   \   00003D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00003F   92AF         MOV     0xa8.7,C
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7B00         MOV     R3,#0x0
   \   000045   8012         SJMP    ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   000047   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00004A   C0E0         PUSH    A
   \   00004C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   05..         INC     ?V4
   \   000054   0A           INC     R2
   \   000055   EA           MOV     A,R2
   \   000056   7001         JNZ     ??HalUARTWriteDMA_2
   \   000058   0B           INC     R3
   \                     ??HalUARTWriteDMA_2:
   \   000059   C3           CLR     C
   \   00005A   EA           MOV     A,R2
   \   00005B   9C           SUBB    A,R4
   \   00005C   EB           MOV     A,R3
   \   00005D   9D           SUBB    A,R5
   \   00005E   40E7         JC      ??HalUARTWriteDMA_3
   \   000060   A2AF         MOV     C,0xa8.7
   \   000062   E4           CLR     A
   \   000063   33           RLC     A
   \   000064   FE           MOV     R6,A
   \   000065   C2AF         CLR     0xa8.7
   \   000067   90....       MOV     DPTR,#dmaCfg + 1030
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   65..         XRL     A,?V5
   \   00006D   602E         JZ      ??HalUARTWriteDMA_4
   \   00006F   EE           MOV     A,R6
   \   000070   A2E0         MOV     C,0xE0 /* A   */.0
   \   000072   92AF         MOV     0xa8.7,C
   \   000074   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000077   7A00         MOV     R2,#0x0
   \   000079   7B00         MOV     R3,#0x0
   \   00007B   8012         SJMP    ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   00007D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000080   C0E0         PUSH    A
   \   000082   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000085   D0E0         POP     A
   \   000087   F0           MOVX    @DPTR,A
   \   000088   05..         INC     ?V4
   \   00008A   0A           INC     R2
   \   00008B   EA           MOV     A,R2
   \   00008C   7001         JNZ     ??HalUARTWriteDMA_5
   \   00008E   0B           INC     R3
   \                     ??HalUARTWriteDMA_5:
   \   00008F   C3           CLR     C
   \   000090   EA           MOV     A,R2
   \   000091   9C           SUBB    A,R4
   \   000092   EB           MOV     A,R3
   \   000093   9D           SUBB    A,R5
   \   000094   40E7         JC      ??HalUARTWriteDMA_6
   \   000096   A2AF         MOV     C,0xa8.7
   \   000098   E4           CLR     A
   \   000099   33           RLC     A
   \   00009A   FE           MOV     R6,A
   \   00009B   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   00009D   A8..         MOV     R0,?V5
   \   00009F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000A2   E5..         MOV     A,?V4
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   7401         MOV     A,#0x1
   \   0000A7   65..         XRL     A,?V5
   \   0000A9   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000AC   7006         JNZ     ??HalUARTWriteDMA_7
   \   0000AE   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000B1   7401         MOV     A,#0x1
   \   0000B3   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000B4   EE           MOV     A,R6
   \   0000B5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B7   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000B9   7F07         MOV     R7,#0x7
   \   0000BB   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BE                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E8           MOV     A,R0
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   E9           MOV     A,R1
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V5,A
   \   000003   FE           MOV     R6,A
   \   000004   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000006   2E           ADD     A,R6
   \   000007   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000A   F5..         MOV     ?V4,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   F5..         MOV     ?V3,A
   \   000003   85....       MOV     ?V0,?V4
   \   000006   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000008   25..         ADD     A,?V0
   \   00000A   F5..         MOV     ?V0,A
   \   00000C   E4           CLR     A
   \   00000D   34..         ADDC    A,#((dmaCfg + 516) >> 8) & 0xff
   \   00000F   F5..         MOV     ?V1,A
   \   000011   E5..         MOV     A,?V0
   \   000013   2400         ADD     A,#0x0
   \   000015   F582         MOV     DPL,A
   \   000017   E5..         MOV     A,?V1
   \   000019   35..         ADDC    A,?V3
   \   00001B   F583         MOV     DPH,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F8           MOV     R0,A
   \   000001   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000003   28           ADD     A,R0
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   34..         ADDC    A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   90....       MOV     DPTR,#dmaCfg + 512
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   E5C2         MOV     A,0xc2
   \   00000E   FA           MOV     R2,A
   \   00000F   EC           MOV     A,R4
   \   000010   2C           ADD     A,R4
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000014   6A           XRL     A,R2
   \   000015   7001         JNZ     ??HalUARTPollDMA_0
   \   000017   E4           CLR     A
   \                     ??HalUARTPollDMA_0:
   \   000018   7063         JNZ     ??HalUARTPollDMA_1
   \   00001A   EC           MOV     A,R4
   \   00001B   FF           MOV     R7,A
   \                     ??HalUARTPollDMA_2:
   \   00001C   E5C2         MOV     A,0xc2
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000023   6A           XRL     A,R2
   \   000024   7001         JNZ     ??HalUARTPollDMA_3
   \   000026   E4           CLR     A
   \                     ??HalUARTPollDMA_3:
   \   000027   7005         JNZ     ??HalUARTPollDMA_4
   \   000029   0F           INC     R7
   \   00002A   EC           MOV     A,R4
   \   00002B   6F           XRL     A,R7
   \   00002C   70EE         JNZ     ??HalUARTPollDMA_2
   \                     ??HalUARTPollDMA_4:
   \   00002E   90....       MOV     DPTR,#dmaCfg + 513
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6F           XRL     A,R7
   \   000033   6011         JZ      ??HalUARTPollDMA_5
   \   000035   EF           MOV     A,R7
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   7004         JNZ     ??HalUARTPollDMA_6
   \   00003B   E595         MOV     A,0x95
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_6:
   \   00003F   90....       MOV     DPTR,#dmaCfg + 514
   \   000042   7421         MOV     A,#0x21
   \   000044   801E         SJMP    ??HalUARTPollDMA_7
   \                     ??HalUARTPollDMA_5:
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   601A         JZ      ??HalUARTPollDMA_8
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   E595         MOV     A,0x95
   \   000050   C3           CLR     C
   \   000051   98           SUBB    A,R0
   \   000052   F8           MOV     R0,A
   \   000053   C3           CLR     C
   \   000054   99           SUBB    A,R1
   \   000055   90....       MOV     DPTR,#dmaCfg + 514
   \   000058   5009         JNC     ??HalUARTPollDMA_9
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   C3           CLR     C
   \   00005C   98           SUBB    A,R0
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   E595         MOV     A,0x95
   \   000060   A3           INC     DPTR
   \   000061   8001         SJMP    ??HalUARTPollDMA_7
   \                     ??HalUARTPollDMA_9:
   \   000063   E4           CLR     A
   \                     ??HalUARTPollDMA_7:
   \   000064   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_8:
   \   000065                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000065   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000068   8A..         MOV     ?V0,R2
   \   00006A   8B..         MOV     ?V1,R3
   \   00006C   A8..         MOV     R0,?V0
   \   00006E   A9..         MOV     R1,?V1
   \   000070   C3           CLR     C
   \   000071   E8           MOV     A,R0
   \   000072   94F0         SUBB    A,#-0x10
   \   000074   E9           MOV     A,R1
   \   000075   9400         SUBB    A,#0x0
   \   000077   400B         JC      ??HalUARTPollDMA_10
   \   000079   7E01         MOV     R6,#0x1
   \   00007B   8022         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_1:
   \   00007D   90....       MOV     DPTR,#dmaCfg + 514
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
   \   000082   801B         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_10:
   \   000084   C3           CLR     C
   \   000085   E8           MOV     A,R0
   \   000086   9470         SUBB    A,#0x70
   \   000088   E9           MOV     A,R1
   \   000089   9400         SUBB    A,#0x0
   \   00008B   4006         JC      ??HalUARTPollDMA_12
   \   00008D   7E02         MOV     R6,#0x2
   \   00008F   D285         SETB    0x80.5
   \   000091   800C         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_12:
   \   000093   E8           MOV     A,R0
   \   000094   49           ORL     A,R1
   \   000095   6008         JZ      ??HalUARTPollDMA_11
   \   000097   90....       MOV     DPTR,#dmaCfg + 514
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   7002         JNZ     ??HalUARTPollDMA_11
   \   00009D   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_11:
   \   00009F   90....       MOV     DPTR,#dmaCfg + 1031
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   6006         JZ      ??HalUARTPollDMA_13
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   D2E4         SETB    0xE0 /* A   */.4
   \   0000AA   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_13:
   \   0000AB   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   6018         JZ      ??HalUARTPollDMA_14
   \   0000B1   A895         MOV     R0,0x95+0x0
   \   0000B3   90....       MOV     DPTR,#dmaCfg + 1033
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   E8           MOV     A,R0
   \   0000B9   C3           CLR     C
   \   0000BA   99           SUBB    A,R1
   \   0000BB   F8           MOV     R0,A
   \   0000BC   90....       MOV     DPTR,#dmaCfg + 1032
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   C3           CLR     C
   \   0000C1   98           SUBB    A,R0
   \   0000C2   5005         JNC     ??HalUARTPollDMA_14
   \   0000C4   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000C7   E4           CLR     A
   \   0000C8   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_14:
   \   0000C9   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   604E         JZ      ??HalUARTPollDMA_15
   \   0000CF   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   7048         JNZ     ??HalUARTPollDMA_15
   \   0000D5   A3           INC     DPTR
   \   0000D6   E4           CLR     A
   \   0000D7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000DA   F8           MOV     R0,A
   \   0000DB   E4           CLR     A
   \   0000DC   C8           XCH     A,R0
   \   0000DD   F9           MOV     R1,A
   \   0000DE   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000E0   28           ADD     A,R0
   \   0000E1   74..         MOV     A,#((dmaCfg + 516) >> 8) & 0xff
   \   0000E3   39           ADDC    A,R1
   \   0000E4   90....       MOV     DPTR,#dmaCh1234 + 24
   \   0000E7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000EA   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000EC   90....       MOV     DPTR,#dmaCh1234 + 25
   \   0000EF   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F2   90....       MOV     DPTR,#dmaCh1234 + 29
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   90....       MOV     DPTR,#dmaCh1234 + 28
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   54E0         ANL     A,#0xe0
   \   0000FC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6401         XRL     A,#0x1
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A2AF         MOV     C,0xa8.7
   \   000105   E4           CLR     A
   \   000106   33           RLC     A
   \   000107   F8           MOV     R0,A
   \   000108   C2AF         CLR     0xa8.7
   \   00010A   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_16:
   \   00010D   00           NOP
   \   00010E   E5D6         MOV     A,0xd6
   \   000110   A2E4         MOV     C,0xE0 /* A   */.4
   \   000112   50F9         JNC     ??HalUARTPollDMA_16
   \   000114   75D1EF       MOV     0xd1,#-0x11
   \   000117   75D710       MOV     0xd7,#0x10
   \   00011A   E8           MOV     A,R0
   \   00011B   8027         SJMP    ??HalUARTPollDMA_17
   \                     ??HalUARTPollDMA_15:
   \   00011D   A2AF         MOV     C,0xa8.7
   \   00011F   E4           CLR     A
   \   000120   33           RLC     A
   \   000121   FA           MOV     R2,A
   \   000122   C2AF         CLR     0xa8.7
   \   000124   90....       MOV     DPTR,#dmaCfg + 1030
   \   000127   E0           MOVX    A,@DPTR
   \   000128   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00012B   6016         JZ      ??HalUARTPollDMA_18
   \   00012D   E5D6         MOV     A,0xd6
   \   00012F   A2E4         MOV     C,0xE0 /* A   */.4
   \   000131   4010         JC      ??HalUARTPollDMA_18
   \   000133   E5D1         MOV     A,0xd1
   \   000135   A2E4         MOV     C,0xE0 /* A   */.4
   \   000137   400A         JC      ??HalUARTPollDMA_18
   \   000139   EA           MOV     A,R2
   \   00013A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013C   92AF         MOV     0xa8.7,C
   \   00013E                ; Setup parameters for call to function HalUARTIsrDMA
   \   00013E   12....       LCALL   `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   000141   8005         SJMP    ??HalUARTPollDMA_19
   \                     ??HalUARTPollDMA_18:
   \   000143   EA           MOV     A,R2
   \                     ??HalUARTPollDMA_17:
   \   000144   A2E0         MOV     C,0xE0 /* A   */.0
   \   000146   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_19:
   \   000148   EE           MOV     A,R6
   \   000149   6019         JZ      ??HalUARTPollDMA_20
   \   00014B   90....       MOV     DPTR,#dmaCfg + 1036
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   8882         MOV     DPL,R0
   \   000155   8983         MOV     DPH,R1
   \   000157   E582         MOV     A,DPL
   \   000159   4583         ORL     A,DPH
   \   00015B   6007         JZ      ??HalUARTPollDMA_20
   \   00015D                ; Setup parameters for indirect call
   \   00015D   EE           MOV     A,R6
   \   00015E   FA           MOV     R2,A
   \   00015F   7900         MOV     R1,#0x0
   \   000161   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_20:
   \   000164   7F03         MOV     R7,#0x3
   \   000166   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000169                REQUIRE U0BAUD
   \   000169                REQUIRE ST0
   \   000169                REQUIRE _A_P0
   \   000169                REQUIRE _A_IEN0
   \   000169                REQUIRE DMAARM
   \   000169                REQUIRE DMAIRQ
   \   000169                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#dmaCfg & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 1030
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   E5C2         MOV     A,0xc2
   \   00000B   FC           MOV     R4,A
   \   00000C   90....       MOV     DPTR,#dmaCfg + 512
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000013   F9           MOV     R1,A
   \   000014   E4           CLR     A
   \   000015   C9           XCH     A,R1
   \   000016   6C           XRL     A,R4
   \   000017   7001         JNZ     ??HalUARTRxAvailDMA_0
   \   000019   E4           CLR     A
   \                     ??HalUARTRxAvailDMA_0:
   \   00001A   7031         JNZ     ??HalUARTRxAvailDMA_1
   \   00001C   7800         MOV     R0,#0x0
   \                     ??HalUARTRxAvailDMA_2:
   \   00001E   E5C2         MOV     A,0xc2
   \   000020   FE           MOV     R6,A
   \   000021   E8           MOV     A,R0
   \   000022   FC           MOV     R4,A
   \   000023   E9           MOV     A,R1
   \   000024   FD           MOV     R5,A
   \   000025   EC           MOV     A,R4
   \   000026   2C           ADD     A,R4
   \   000027   FC           MOV     R4,A
   \   000028   ED           MOV     A,R5
   \   000029   33           RLC     A
   \   00002A   FD           MOV     R5,A
   \   00002B   74..         MOV     A,#dmaCfg & 0xff
   \   00002D   2C           ADD     A,R4
   \   00002E   F582         MOV     DPL,A
   \   000030   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000032   3D           ADDC    A,R5
   \   000033   F583         MOV     DPH,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6E           XRL     A,R6
   \   000038   7001         JNZ     ??HalUARTRxAvailDMA_3
   \   00003A   E4           CLR     A
   \                     ??HalUARTRxAvailDMA_3:
   \   00003B   7005         JNZ     ??HalUARTRxAvailDMA_4
   \   00003D   0A           INC     R2
   \   00003E   EA           MOV     A,R2
   \   00003F   7001         JNZ     ??HalUARTRxAvailDMA_4
   \   000041   0B           INC     R3
   \                     ??HalUARTRxAvailDMA_4:
   \   000042   08           INC     R0
   \   000043   E8           MOV     A,R0
   \   000044   7001         JNZ     ??HalUARTRxAvailDMA_5
   \   000046   09           INC     R1
   \                     ??HalUARTRxAvailDMA_5:
   \   000047   C3           CLR     C
   \   000048   E9           MOV     A,R1
   \   000049   9401         SUBB    A,#0x1
   \   00004B   40D1         JC      ??HalUARTRxAvailDMA_2
   \                     ??HalUARTRxAvailDMA_1:
   \   00004D   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000050                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#dmaCfg + 1030
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6401         XRL     A,#0x1
   \   00000D   F8           MOV     R0,A
   \   00000E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#dmaCfg + 1031
   \   000016   04           INC     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   E595         MOV     A,0x95
   \   00001A   90....       MOV     DPTR,#dmaCfg + 1033
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000024   6006         JZ      ??HalUARTIsrDMA_0
   \   000026   90....       MOV     DPTR,#dmaCfg + 1035
   \   000029   7401         MOV     A,#0x1
   \   00002B   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002C   80..         SJMP    ??Subroutine14_0
   \   00002E                REQUIRE DMAIRQ
   \   00002E                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000007   80..         SJMP    ??Subroutine14_0
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   02....       LJMP    ?Subroutine1 & 0xFFFF
    141          }
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   00000B   E5..         MOV     A,?V2
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   7047         JNZ     ??HalUARTRead_0
   \   000013   8025         SJMP    ??HalUARTRead_1
   \                     ??HalUARTRead_2:
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
   \   000019   E5..         MOV     A,?V0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   A882         MOV     R0,DPL
   \   00001F   A983         MOV     R1,DPH
   \   000021   E5C2         MOV     A,0xc2
   \   000023   F4           CPL     A
   \   000024   F5..         MOV     ?V1,A
   \   000026   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000029   E4           CLR     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E5..         MOV     A,?V1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   90....       MOV     DPTR,#dmaCfg + 512
   \   000032   E0           MOVX    A,@DPTR
   \   000033   04           INC     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   0A           INC     R2
   \   000036   EA           MOV     A,R2
   \   000037   7001         JNZ     ??HalUARTRead_1
   \   000039   0B           INC     R3
   \                     ??HalUARTRead_1:
   \   00003A   C3           CLR     C
   \   00003B   EA           MOV     A,R2
   \   00003C   9C           SUBB    A,R4
   \   00003D   EB           MOV     A,R3
   \   00003E   9D           SUBB    A,R5
   \   00003F   5017         JNC     ??HalUARTRead_3
   \   000041   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V1,A
   \   00004B   E5C2         MOV     A,0xc2
   \   00004D   F5..         MOV     ?V4,A
   \   00004F   E5..         MOV     A,?V1
   \   000051   65..         XRL     A,?V4
   \   000053   7001         JNZ     ??HalUARTRead_4
   \   000055   E4           CLR     A
   \                     ??HalUARTRead_4:
   \   000056   60BD         JZ      ??HalUARTRead_2
   \                     ??HalUARTRead_3:
   \   000058   C285         CLR     0x80.5
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00005A   7F06         MOV     R7,#0x6
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005F                REQUIRE U0BAUD
   \   00005F                REQUIRE _A_P0
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011                REQUIRE ?Subroutine1
   \   000011                ; // Fall through to label ?Subroutine1
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000000   D285         SETB    0x80.5
   \   000002   5386BF       ANL     0x86,#0xbf
   \   000005   43AB10       ORL     0xab,#0x10
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
    234          #endif
    235          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43C480       ORL     0xc4,#0x80
   \   000006   438640       ORL     0x86,#0x40
   \   000009   C285         CLR     0x80.5
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
    253          #endif
    254          }
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   02....       LJMP    ??Subroutine14_0 & 0xFFFF
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP    ?Subroutine1
    307          #endif
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#dmaCfg + 512
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   74..         MOV     A,#dmaCfg & 0xff
   \   00000C   2E           ADD     A,R6
   \   00000D   F582         MOV     DPL,A
   \   00000F   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000011   3F           ADDC    A,R7
   \   000012   F583         MOV     DPH,A
   \   000014   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     11   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     11   HalUARTPollDMA
        0     11   -> HalUARTIsrDMA
        0     11   -> HalUARTRxAvailDMA
      1     14   HalUARTRead
      0      0   HalUARTResume
      0     20   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     24   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ??Subroutine13_0
       7  ??Subroutine14_0
       1  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine10
      17  ?Subroutine11
       4  ?Subroutine12
       7  ?Subroutine2
      30  ?Subroutine3
      13  ?Subroutine4
      21  ?Subroutine5
      10  ?Subroutine6
       6  ?Subroutine7
       4  ?Subroutine8
      11  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
       9  HalUARTInit
       6  HalUARTInit::?relay
     109  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      46  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
      16  HalUARTOpen
       6  HalUARTOpen::?relay
     184  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
      10  HalUARTPoll
       6  HalUARTPoll::?relay
     361  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
      95  HalUARTRead
       6  HalUARTRead::?relay
      14  HalUARTResume
       6  HalUARTResume::?relay
      80  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
      11  HalUARTSuspend
       6  HalUARTSuspend::?relay
      17  HalUARTWrite
       6  HalUARTWrite::?relay
     190  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
      19  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  P0DIR
       1  P0IEN
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_P0
    1038  dmaCfg

 
 1 312 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
 1 038 bytes in segment XDATA_Z
 
 1 396 bytes of CODE  memory
     0 bytes of DATA  memory (+ 16 bytes shared)
 1 038 bytes of XDATA memory

Errors: none
Warnings: none
