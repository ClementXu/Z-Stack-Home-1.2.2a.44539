###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Aug/2016  23:13:50
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530EB\hal_uart.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\hal_uart.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\hal_uart.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 526
   \   00020E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   85FFFF       MOV     0xff,0xff
   \   00000A   53F1FE       ANL     0xf1,#0xfe
   \   00000D   43F30C       ORL     0xf3,#0xc
   \   000010   53F2F3       ANL     0xf2,#0xf3
   \   000013   758680       MOV     0x86,#-0x80
   \   000016   75C480       MOV     0xc4,#-0x80
   \   000019   90....       MOV     DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV     A,#0x70
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74C1         MOV     A,#-0x3f
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   541F         ANL     A,#0x1f
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV     A,#0xf
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   744A         MOV     A,#0x4a
   \   000031   F0           MOVX    @DPTR,A
   \   000032   90....       MOV     DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV     A,#0x70
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74C1         MOV     A,#-0x3f
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   90....       MOV     DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   541F         ANL     A,#0x1f
   \   000042   F0           MOVX    @DPTR,A
   \   000043   90....       MOV     DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV     A,#-0x32
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   540F         ANL     A,#0xf
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   4410         ORL     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000053   90....       MOV     DPTR,#dmaCh1234 + 18
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#dmaCfg & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   90....       MOV     DPTR,#dmaCh1234 + 21
   \   00005E   7480         MOV     A,#-0x80
   \   000060   F0           MOVX    @DPTR,A
   \   000061   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   90....       MOV     DPTR,#dmaCh1234 + 23
   \   000069   7412         MOV     A,#0x12
   \   00006B   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00006E                REQUIRE P2DIR
   \   00006E                REQUIRE PERCFG
   \   00006E                REQUIRE P0SEL
   \   00006E                REQUIRE ADCCFG
   \   00006E                REQUIRE U0CSR
   \   00006E                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine15_0
   \   000001                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   90....       MOV     DPTR,#dmaCfg + 524
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7403         MOV     A,#0x3
   \   000023   68           XRL     A,R0
   \   000024   6005         JZ      ??HalUARTOpenDMA_0
   \   000026   7404         MOV     A,#0x4
   \   000028   68           XRL     A,R0
   \   000029   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002B   75C2D8       MOV     0xc2,#-0x28
   \   00002E   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000030   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000033   E0           MOVX    A,@DPTR
   \   000034   600B         JZ      ??HalUARTOpenDMA_3
   \   000036   14           DEC     A
   \   000037   6012         JZ      ??HalUARTOpenDMA_4
   \   000039   14           DEC     A
   \   00003A   6019         JZ      ??HalUARTOpenDMA_5
   \   00003C   14           DEC     A
   \   00003D   6020         JZ      ??HalUARTOpenDMA_6
   \   00003F   8028         SJMP    ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000041   75C508       MOV     0xc5,#0x8
   \   000044   90....       MOV     DPTR,#dmaCfg + 520
   \   000047   7423         MOV     A,#0x23
   \   000049   8026         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   00004B   75C509       MOV     0xc5,#0x9
   \   00004E   90....       MOV     DPTR,#dmaCfg + 520
   \   000051   7412         MOV     A,#0x12
   \   000053   801C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   000055   75C50A       MOV     0xc5,#0xa
   \   000058   90....       MOV     DPTR,#dmaCfg + 520
   \   00005B   7409         MOV     A,#0x9
   \   00005D   8012         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   00005F   75C50A       MOV     0xc5,#0xa
   \   000062   90....       MOV     DPTR,#dmaCfg + 520
   \   000065   7406         MOV     A,#0x6
   \   000067   8008         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000069   75C50B       MOV     0xc5,#0xb
   \   00006C   90....       MOV     DPTR,#dmaCfg + 520
   \   00006F   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   600D         JZ      ??HalUARTOpenDMA_9
   \   00007B   75C442       MOV     0xc4,#0x42
   \   00007E   43F310       ORL     0xf3,#0x10
   \   000081   C285         CLR     0x80.5
   \   000083   43FD20       ORL     0xfd,#0x20
   \   000086   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000088   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00008B   9070C1       MOV     DPTR,#0x70c1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   90....       MOV     DPTR,#dmaCfg
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E4           CLR     A
   \   000095   F0           MOVX    @DPTR,A
   \   000096   75D1F7       MOV     0xd1,#-0x9
   \   000099   75D608       MOV     0xd6,#0x8
   \   00009C                ; Setup parameters for call to function osal_memset
   \   00009C   FC           MOV     R4,A
   \   00009D   7D01         MOV     R5,#0x1
   \   00009F   E5C2         MOV     A,0xc2
   \   0000A1   F4           CPL     A
   \   0000A2   F9           MOV     R1,A
   \   0000A3   7A..         MOV     R2,#dmaCfg & 0xff
   \   0000A5   7B..         MOV     R3,#(dmaCfg >> 8) & 0xff
   \   0000A7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000AA   438640       ORL     0x86,#0x40
   \   0000AD   90....       MOV     DPTR,#dmaCfg + 523
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   90....       MOV     DPTR,#dmaCfg + 522
   \   0000B5   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000B8                REQUIRE U0BAUD
   \   0000B8                REQUIRE U0GCR
   \   0000B8                REQUIRE U0UCR
   \   0000B8                REQUIRE P0SEL
   \   0000B8                REQUIRE _A_P0
   \   0000B8                REQUIRE P0DIR
   \   0000B8                REQUIRE DMAIRQ
   \   0000B8                REQUIRE DMAARM
   \   0000B8                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(uint8 *, uint16)
   \                     HalUARTReadDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   802C         SJMP    ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E5..         MOV     A,?V0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   E5C2         MOV     A,0xc2
   \   000019   F4           CPL     A
   \   00001A   F5..         MOV     ?V1,A
   \   00001C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   E5..         MOV     A,?V1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#dmaCfg + 256
   \   000028   E0           MOVX    A,@DPTR
   \   000029   04           INC     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   C3           CLR     C
   \   00002C   9480         SUBB    A,#-0x80
   \   00002E   4002         JC      ??HalUARTReadDMA_2
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   000032   08           INC     R0
   \   000033   E8           MOV     A,R0
   \   000034   7001         JNZ     ??HalUARTReadDMA_0
   \   000036   09           INC     R1
   \                     ??HalUARTReadDMA_0:
   \   000037   C3           CLR     C
   \   000038   E8           MOV     A,R0
   \   000039   9C           SUBB    A,R4
   \   00003A   E9           MOV     A,R1
   \   00003B   9D           SUBB    A,R5
   \   00003C   5017         JNC     ??HalUARTReadDMA_3
   \   00003E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V1,A
   \   000048   E5C2         MOV     A,0xc2
   \   00004A   F5..         MOV     ?V2,A
   \   00004C   E5..         MOV     A,?V1
   \   00004E   65..         XRL     A,?V2
   \   000050   7001         JNZ     ??HalUARTReadDMA_4
   \   000052   E4           CLR     A
   \                     ??HalUARTReadDMA_4:
   \   000053   60B6         JZ      ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   000055   C285         CLR     0x80.5
   \   000057   E8           MOV     A,R0
   \   000058   FA           MOV     R2,A
   \   000059   E9           MOV     A,R1
   \   00005A   FB           MOV     R3,A
   \   00005B   7F04         MOV     R7,#0x4
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000060                REQUIRE U0BAUD
   \   000060                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#dmaCfg + 256
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   74..         MOV     A,#dmaCfg & 0xff
   \   00000C   2E           ADD     A,R6
   \   00000D   F582         MOV     DPL,A
   \   00000F   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000011   3F           ADDC    A,R7
   \   000012   F583         MOV     DPH,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(uint8 *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000010   F8           MOV     R0,A
   \   000011   EE           MOV     A,R6
   \   000012   28           ADD     A,R0
   \   000013   F8           MOV     R0,A
   \   000014   E4           CLR     A
   \   000015   3F           ADDC    A,R7
   \   000016   F9           MOV     R1,A
   \   000017   C3           CLR     C
   \   000018   E8           MOV     A,R0
   \   000019   9481         SUBB    A,#-0x7f
   \   00001B   E9           MOV     A,R1
   \   00001C   9400         SUBB    A,#0x0
   \   00001E   4007         JC      ??HalUARTWriteDMA_0
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \   000024   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000027   A9A8         MOV     R1,0xa8+0x0
   \   000029   C2AF         CLR     0xa8.7
   \   00002B   90....       MOV     DPTR,#dmaCfg + 518
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V3,A
   \   000031   FC           MOV     R4,A
   \   000032   7D00         MOV     R5,#0x0
   \   000034   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000037   E9           MOV     A,R1
   \   000038   A2E7         MOV     C,0xE0 /* A   */.7
   \   00003A   E4           CLR     A
   \   00003B   33           RLC     A
   \   00003C   F8           MOV     R0,A
   \   00003D   E9           MOV     A,R1
   \   00003E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000040   92AF         MOV     0xa8.7,C
   \   000042   7A00         MOV     R2,#0x0
   \   000044   7B00         MOV     R3,#0x0
   \   000046   801D         SJMP    ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   000048   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00004B   C0E0         PUSH    A
   \   00004D   8C..         MOV     ?V4,R4
   \   00004F   8D..         MOV     ?V5,R5
   \   000051   7407         MOV     A,#0x7
   \   000053   78..         MOV     R0,#?V4
   \   000055   12....       LCALL   ?S_SHL
   \   000058   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00005B   D0E0         POP     A
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   05..         INC     ?V2
   \   000060   0A           INC     R2
   \   000061   EA           MOV     A,R2
   \   000062   7001         JNZ     ??HalUARTWriteDMA_2
   \   000064   0B           INC     R3
   \                     ??HalUARTWriteDMA_2:
   \   000065   C3           CLR     C
   \   000066   EA           MOV     A,R2
   \   000067   9E           SUBB    A,R6
   \   000068   EB           MOV     A,R3
   \   000069   9F           SUBB    A,R7
   \   00006A   40DC         JC      ??HalUARTWriteDMA_3
   \   00006C   A2AF         MOV     C,0xa8.7
   \   00006E   E4           CLR     A
   \   00006F   33           RLC     A
   \   000070   FC           MOV     R4,A
   \   000071   C2AF         CLR     0xa8.7
   \   000073   90....       MOV     DPTR,#dmaCfg + 518
   \   000076   E0           MOVX    A,@DPTR
   \   000077   65..         XRL     A,?V3
   \   000079   603D         JZ      ??HalUARTWriteDMA_4
   \   00007B   EC           MOV     A,R4
   \   00007C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007E   92AF         MOV     0xa8.7,C
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V3,A
   \   000083   FC           MOV     R4,A
   \   000084   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000087   7A00         MOV     R2,#0x0
   \   000089   7B00         MOV     R3,#0x0
   \   00008B   801D         SJMP    ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   00008D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000090   C0E0         PUSH    A
   \   000092   8C..         MOV     ?V4,R4
   \   000094   8D..         MOV     ?V5,R5
   \   000096   7407         MOV     A,#0x7
   \   000098   78..         MOV     R0,#?V4
   \   00009A   12....       LCALL   ?S_SHL
   \   00009D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A0   D0E0         POP     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   05..         INC     ?V2
   \   0000A5   0A           INC     R2
   \   0000A6   EA           MOV     A,R2
   \   0000A7   7001         JNZ     ??HalUARTWriteDMA_5
   \   0000A9   0B           INC     R3
   \                     ??HalUARTWriteDMA_5:
   \   0000AA   C3           CLR     C
   \   0000AB   EA           MOV     A,R2
   \   0000AC   9E           SUBB    A,R6
   \   0000AD   EB           MOV     A,R3
   \   0000AE   9F           SUBB    A,R7
   \   0000AF   40DC         JC      ??HalUARTWriteDMA_6
   \   0000B1   A2AF         MOV     C,0xa8.7
   \   0000B3   E4           CLR     A
   \   0000B4   33           RLC     A
   \   0000B5   FC           MOV     R4,A
   \   0000B6   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   0000B8   A8..         MOV     R0,?V3
   \   0000BA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000BD   E5..         MOV     A,?V2
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   65..         XRL     A,?V3
   \   0000C4   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000C7   7006         JNZ     ??HalUARTWriteDMA_7
   \   0000C9   90....       MOV     DPTR,#dmaCfg + 523
   \   0000CC   7401         MOV     A,#0x1
   \   0000CE   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000CF   EC           MOV     A,R4
   \   0000D0   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D2   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000D4   7F07         MOV     R7,#0x7
   \   0000D6   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000D9                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV     A,?V0
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V1
   \   000007   3B           ADDC    A,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   2C           ADD     A,R4
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#((dmaCfg + 516) >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A8..         MOV     R0,?V2
   \   000002   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000004   28           ADD     A,R0
   \   000005   F8           MOV     R0,A
   \   000006   E4           CLR     A
   \   000007   34..         ADDC    A,#((dmaCfg + 260) >> 8) & 0xff
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   25..         ADD     A,?V4
   \   00000D   F582         MOV     DPL,A
   \   00000F   E9           MOV     A,R1
   \   000010   35..         ADDC    A,?V5
   \   000012   F583         MOV     DPH,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#dmaCfg + 518
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine14_0
   \   000004                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#((dmaCfg + 516) >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   90....       MOV     DPTR,#dmaCfg + 256
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   E5C2         MOV     A,0xc2
   \   00000E   FA           MOV     R2,A
   \   00000F   EC           MOV     A,R4
   \   000010   2C           ADD     A,R4
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000014   6A           XRL     A,R2
   \   000015   7001         JNZ     ??HalUARTPollDMA_0
   \   000017   E4           CLR     A
   \                     ??HalUARTPollDMA_0:
   \   000018   706B         JNZ     ??HalUARTPollDMA_1
   \   00001A   EC           MOV     A,R4
   \   00001B   FF           MOV     R7,A
   \                     ??HalUARTPollDMA_2:
   \   00001C   E5C2         MOV     A,0xc2
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000023   6A           XRL     A,R2
   \   000024   7001         JNZ     ??HalUARTPollDMA_3
   \   000026   E4           CLR     A
   \                     ??HalUARTPollDMA_3:
   \   000027   700D         JNZ     ??HalUARTPollDMA_4
   \   000029   0F           INC     R7
   \   00002A   EF           MOV     A,R7
   \   00002B   C3           CLR     C
   \   00002C   9480         SUBB    A,#-0x80
   \   00002E   4002         JC      ??HalUARTPollDMA_5
   \   000030   7F00         MOV     R7,#0x0
   \                     ??HalUARTPollDMA_5:
   \   000032   EC           MOV     A,R4
   \   000033   6F           XRL     A,R7
   \   000034   70E6         JNZ     ??HalUARTPollDMA_2
   \                     ??HalUARTPollDMA_4:
   \   000036   90....       MOV     DPTR,#dmaCfg + 257
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6F           XRL     A,R7
   \   00003B   6011         JZ      ??HalUARTPollDMA_6
   \   00003D   EF           MOV     A,R7
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7004         JNZ     ??HalUARTPollDMA_7
   \   000043   E595         MOV     A,0x95
   \   000045   A3           INC     DPTR
   \   000046   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_7:
   \   000047   90....       MOV     DPTR,#dmaCfg + 258
   \   00004A   74C6         MOV     A,#-0x3a
   \   00004C   801E         SJMP    ??HalUARTPollDMA_8
   \                     ??HalUARTPollDMA_6:
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   601A         JZ      ??HalUARTPollDMA_9
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   E595         MOV     A,0x95
   \   000058   C3           CLR     C
   \   000059   98           SUBB    A,R0
   \   00005A   F8           MOV     R0,A
   \   00005B   C3           CLR     C
   \   00005C   99           SUBB    A,R1
   \   00005D   90....       MOV     DPTR,#dmaCfg + 258
   \   000060   5009         JNC     ??HalUARTPollDMA_10
   \   000062   E0           MOVX    A,@DPTR
   \   000063   C3           CLR     C
   \   000064   98           SUBB    A,R0
   \   000065   F0           MOVX    @DPTR,A
   \   000066   E595         MOV     A,0x95
   \   000068   A3           INC     DPTR
   \   000069   8001         SJMP    ??HalUARTPollDMA_8
   \                     ??HalUARTPollDMA_10:
   \   00006B   E4           CLR     A
   \                     ??HalUARTPollDMA_8:
   \   00006C   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_9:
   \   00006D                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   00006D   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000070   8A..         MOV     ?V0,R2
   \   000072   8B..         MOV     ?V1,R3
   \   000074   A8..         MOV     R0,?V0
   \   000076   A9..         MOV     R1,?V1
   \   000078   C3           CLR     C
   \   000079   E8           MOV     A,R0
   \   00007A   9470         SUBB    A,#0x70
   \   00007C   E9           MOV     A,R1
   \   00007D   9400         SUBB    A,#0x0
   \   00007F   400B         JC      ??HalUARTPollDMA_11
   \   000081   7E01         MOV     R6,#0x1
   \   000083   8022         SJMP    ??HalUARTPollDMA_12
   \                     ??HalUARTPollDMA_1:
   \   000085   90....       MOV     DPTR,#dmaCfg + 258
   \   000088   E4           CLR     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   801B         SJMP    ??HalUARTPollDMA_12
   \                     ??HalUARTPollDMA_11:
   \   00008C   C3           CLR     C
   \   00008D   E8           MOV     A,R0
   \   00008E   9440         SUBB    A,#0x40
   \   000090   E9           MOV     A,R1
   \   000091   9400         SUBB    A,#0x0
   \   000093   4006         JC      ??HalUARTPollDMA_13
   \   000095   7E02         MOV     R6,#0x2
   \   000097   D285         SETB    0x80.5
   \   000099   800C         SJMP    ??HalUARTPollDMA_12
   \                     ??HalUARTPollDMA_13:
   \   00009B   E8           MOV     A,R0
   \   00009C   49           ORL     A,R1
   \   00009D   6008         JZ      ??HalUARTPollDMA_12
   \   00009F   90....       MOV     DPTR,#dmaCfg + 258
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   7002         JNZ     ??HalUARTPollDMA_12
   \   0000A5   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_12:
   \   0000A7   90....       MOV     DPTR,#dmaCfg + 519
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   6006         JZ      ??HalUARTPollDMA_14
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   EE           MOV     A,R6
   \   0000B0   D2E4         SETB    0xE0 /* A   */.4
   \   0000B2   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_14:
   \   0000B3   90....       MOV     DPTR,#dmaCfg + 522
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   6018         JZ      ??HalUARTPollDMA_15
   \   0000B9   A895         MOV     R0,0x95+0x0
   \   0000BB   90....       MOV     DPTR,#dmaCfg + 521
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E8           MOV     A,R0
   \   0000C1   C3           CLR     C
   \   0000C2   99           SUBB    A,R1
   \   0000C3   F8           MOV     R0,A
   \   0000C4   90....       MOV     DPTR,#dmaCfg + 520
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C3           CLR     C
   \   0000C9   98           SUBB    A,R0
   \   0000CA   5005         JNC     ??HalUARTPollDMA_15
   \   0000CC   90....       MOV     DPTR,#dmaCfg + 522
   \   0000CF   E4           CLR     A
   \   0000D0   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_15:
   \   0000D1   90....       MOV     DPTR,#dmaCfg + 523
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   6056         JZ      ??HalUARTPollDMA_16
   \   0000D7   90....       MOV     DPTR,#dmaCfg + 522
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   7050         JNZ     ??HalUARTPollDMA_16
   \   0000DD   A3           INC     DPTR
   \   0000DE   E4           CLR     A
   \   0000DF   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000E2   12....       LCALL   ?S_SHL
   \   0000E5   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000E7   25..         ADD     A,?V0
   \   0000E9   74..         MOV     A,#((dmaCfg + 260) >> 8) & 0xff
   \   0000EB   35..         ADDC    A,?V1
   \   0000ED   90....       MOV     DPTR,#dmaCh1234 + 24
   \   0000F0   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000F3   12....       LCALL   ?S_SHL
   \   0000F6   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000F8   25..         ADD     A,?V0
   \   0000FA   90....       MOV     DPTR,#dmaCh1234 + 25
   \   0000FD   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000100   90....       MOV     DPTR,#dmaCh1234 + 29
   \   000103   F0           MOVX    @DPTR,A
   \   000104   90....       MOV     DPTR,#dmaCh1234 + 28
   \   000107   E0           MOVX    A,@DPTR
   \   000108   54E0         ANL     A,#0xe0
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   90....       MOV     DPTR,#dmaCfg + 518
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6401         XRL     A,#0x1
   \   000112   F0           MOVX    @DPTR,A
   \   000113   A2AF         MOV     C,0xa8.7
   \   000115   E4           CLR     A
   \   000116   33           RLC     A
   \   000117   F8           MOV     R0,A
   \   000118   C2AF         CLR     0xa8.7
   \   00011A   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_17:
   \   00011D   00           NOP
   \   00011E   E5D6         MOV     A,0xd6
   \   000120   A2E4         MOV     C,0xE0 /* A   */.4
   \   000122   50F9         JNC     ??HalUARTPollDMA_17
   \   000124   75D1EF       MOV     0xd1,#-0x11
   \   000127   75D710       MOV     0xd7,#0x10
   \   00012A   E8           MOV     A,R0
   \   00012B   8023         SJMP    ??HalUARTPollDMA_18
   \                     ??HalUARTPollDMA_16:
   \   00012D   A2AF         MOV     C,0xa8.7
   \   00012F   E4           CLR     A
   \   000130   33           RLC     A
   \   000131   FA           MOV     R2,A
   \   000132   C2AF         CLR     0xa8.7
   \   000134   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000137   6016         JZ      ??HalUARTPollDMA_19
   \   000139   E5D6         MOV     A,0xd6
   \   00013B   A2E4         MOV     C,0xE0 /* A   */.4
   \   00013D   4010         JC      ??HalUARTPollDMA_19
   \   00013F   E5D1         MOV     A,0xd1
   \   000141   A2E4         MOV     C,0xE0 /* A   */.4
   \   000143   400A         JC      ??HalUARTPollDMA_19
   \   000145   EA           MOV     A,R2
   \   000146   A2E0         MOV     C,0xE0 /* A   */.0
   \   000148   92AF         MOV     0xa8.7,C
   \   00014A                ; Setup parameters for call to function HalUARTIsrDMA
   \   00014A   12....       LCALL   `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   00014D   8005         SJMP    ??HalUARTPollDMA_20
   \                     ??HalUARTPollDMA_19:
   \   00014F   EA           MOV     A,R2
   \                     ??HalUARTPollDMA_18:
   \   000150   A2E0         MOV     C,0xE0 /* A   */.0
   \   000152   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_20:
   \   000154   EE           MOV     A,R6
   \   000155   6019         JZ      ??HalUARTPollDMA_21
   \   000157   90....       MOV     DPTR,#dmaCfg + 524
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F8           MOV     R0,A
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F9           MOV     R1,A
   \   00015F   8882         MOV     DPL,R0
   \   000161   8983         MOV     DPH,R1
   \   000163   E582         MOV     A,DPL
   \   000165   4583         ORL     A,DPH
   \   000167   6007         JZ      ??HalUARTPollDMA_21
   \   000169                ; Setup parameters for indirect call
   \   000169   EE           MOV     A,R6
   \   00016A   FA           MOV     R2,A
   \   00016B   7900         MOV     R1,#0x0
   \   00016D   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_21:
   \   000170   7F03         MOV     R7,#0x3
   \   000172   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000175                REQUIRE U0BAUD
   \   000175                REQUIRE ST0
   \   000175                REQUIRE _A_P0
   \   000175                REQUIRE _A_IEN0
   \   000175                REQUIRE DMAARM
   \   000175                REQUIRE DMAIRQ
   \   000175                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 518
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   75..00       MOV     ?V1,#0x0
   \   00000A   7407         MOV     A,#0x7
   \   00000C   78..         MOV     R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#dmaCfg & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 518
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   E5C2         MOV     A,0xc2
   \   00000B   FC           MOV     R4,A
   \   00000C   90....       MOV     DPTR,#dmaCfg + 256
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000013   F9           MOV     R1,A
   \   000014   E4           CLR     A
   \   000015   C9           XCH     A,R1
   \   000016   6C           XRL     A,R4
   \   000017   7001         JNZ     ??HalUARTRxAvailDMA_0
   \   000019   E4           CLR     A
   \                     ??HalUARTRxAvailDMA_0:
   \   00001A   7033         JNZ     ??HalUARTRxAvailDMA_1
   \   00001C   7800         MOV     R0,#0x0
   \                     ??HalUARTRxAvailDMA_2:
   \   00001E   E5C2         MOV     A,0xc2
   \   000020   FE           MOV     R6,A
   \   000021   E8           MOV     A,R0
   \   000022   FC           MOV     R4,A
   \   000023   E9           MOV     A,R1
   \   000024   FD           MOV     R5,A
   \   000025   EC           MOV     A,R4
   \   000026   2C           ADD     A,R4
   \   000027   FC           MOV     R4,A
   \   000028   ED           MOV     A,R5
   \   000029   33           RLC     A
   \   00002A   FD           MOV     R5,A
   \   00002B   74..         MOV     A,#dmaCfg & 0xff
   \   00002D   2C           ADD     A,R4
   \   00002E   F582         MOV     DPL,A
   \   000030   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000032   3D           ADDC    A,R5
   \   000033   F583         MOV     DPH,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6E           XRL     A,R6
   \   000038   7001         JNZ     ??HalUARTRxAvailDMA_3
   \   00003A   E4           CLR     A
   \                     ??HalUARTRxAvailDMA_3:
   \   00003B   7005         JNZ     ??HalUARTRxAvailDMA_4
   \   00003D   0A           INC     R2
   \   00003E   EA           MOV     A,R2
   \   00003F   7001         JNZ     ??HalUARTRxAvailDMA_4
   \   000041   0B           INC     R3
   \                     ??HalUARTRxAvailDMA_4:
   \   000042   08           INC     R0
   \   000043   E8           MOV     A,R0
   \   000044   7001         JNZ     ??HalUARTRxAvailDMA_5
   \   000046   09           INC     R1
   \                     ??HalUARTRxAvailDMA_5:
   \   000047   C3           CLR     C
   \   000048   9480         SUBB    A,#-0x80
   \   00004A   E9           MOV     A,R1
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   40CF         JC      ??HalUARTRxAvailDMA_2
   \                     ??HalUARTRxAvailDMA_1:
   \   00004F   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000052                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#dmaCfg + 518
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6401         XRL     A,#0x1
   \   00000D   F8           MOV     R0,A
   \   00000E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#dmaCfg + 519
   \   000016   04           INC     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   E595         MOV     A,0x95
   \   00001A   90....       MOV     DPTR,#dmaCfg + 521
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000024   6006         JZ      ??HalUARTIsrDMA_0
   \   000026   90....       MOV     DPTR,#dmaCfg + 523
   \   000029   7401         MOV     A,#0x1
   \   00002B   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002C   80..         SJMP    ??Subroutine15_0
   \   00002E                REQUIRE DMAIRQ
   \   00002E                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000007   80..         SJMP    ??Subroutine15_0
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   80..         SJMP    ?Subroutine1
    141          }
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL   `??HalUARTReadDMA::?relay`; Banked call to: HalUARTReadDMA
   \   00000B   8004         SJMP    ??HalUARTRead_1
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011                REQUIRE ?Subroutine1
   \   000011                ; // Fall through to label ?Subroutine1
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011   80..         SJMP    ?Subroutine1
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000000   D285         SETB    0x80.5
   \   000002   5386BF       ANL     0x86,#0xbf
   \   000005   43AB10       ORL     0xab,#0x10
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
    234          #endif
    235          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43C480       ORL     0xc4,#0x80
   \   000006   438640       ORL     0x86,#0x40
   \   000009   C285         CLR     0x80.5
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
    253          #endif
    254          }
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   80..         SJMP    ??Subroutine15_0
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP    ?Subroutine1
    307          #endif
    308          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTReadDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     11   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     11   HalUARTPollDMA
        0     11   -> HalUARTIsrDMA
        0     11   -> HalUARTRxAvailDMA
      0      9   HalUARTRead
        0      9   -> HalUARTReadDMA
      1     21   HalUARTReadDMA
      0      0   HalUARTResume
      0     20   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     24   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??Subroutine14_0
       7  ??Subroutine15_0
       1  ?Subroutine0
       5  ?Subroutine1
      12  ?Subroutine10
      17  ?Subroutine11
       6  ?Subroutine12
      11  ?Subroutine13
       9  ?Subroutine2
      15  ?Subroutine3
       6  ?Subroutine4
      21  ?Subroutine5
      21  ?Subroutine6
       4  ?Subroutine7
       4  ?Subroutine8
      14  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
       9  HalUARTInit
       6  HalUARTInit::?relay
     110  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      46  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
      15  HalUARTOpen
       6  HalUARTOpen::?relay
     184  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
       9  HalUARTPoll
       6  HalUARTPoll::?relay
     373  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
      17  HalUARTRead
       6  HalUARTRead::?relay
      96  HalUARTReadDMA
       6  HalUARTReadDMA::?relay
      14  HalUARTResume
       6  HalUARTResume::?relay
      82  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
      11  HalUARTSuspend
       6  HalUARTSuspend::?relay
      19  HalUARTWrite
       6  HalUARTWrite::?relay
     217  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
      19  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  P0DIR
       1  P0IEN
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_P0
     526  dmaCfg

 
 1 378 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
   526 bytes in segment XDATA_Z
 
 1 468 bytes of CODE  memory
     0 bytes of DATA  memory (+ 16 bytes shared)
   526 bytes of XDATA memory

Errors: none
Warnings: none
