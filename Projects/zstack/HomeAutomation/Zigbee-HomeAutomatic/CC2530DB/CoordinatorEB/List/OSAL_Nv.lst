###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                28/Aug/2016  20:48:15
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\osal\mcu\cc2530\OSAL_Nv.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D HOLD_AUTO_START -D
#        BUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -D DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\OSAL_Nv.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\OSAL_Nv.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2014-12-19 13:07:30 -0800 (Fri, 19 Dec 2014) $
      4            Revision:       $Revision: 41556 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          #ifdef HAL_MCU_CC2533
     56          #include "hal_batmon.h"
     57          #endif
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     64          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     65          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     66          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     67          
     68          #define OSAL_NV_ACTIVE          0x00
     69          #define OSAL_NV_ERASED          0xFF
     70          #define OSAL_NV_ERASED_ID       0xFFFF
     71          #define OSAL_NV_ZEROED_ID       0x0000
     72          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     73          #define OSAL_NV_SOURCE_ID       0x8000
     74          
     75          // In case pages 0-1 are ever used, define a null page value.
     76          #define OSAL_NV_PAGE_NULL       0
     77          
     78          // In case item Id 0 is ever used, define a null item value.
     79          #define OSAL_NV_ITEM_NULL       0
     80          
     81          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     82          
     83          #define OSAL_NV_PAGE_HDR_OFFSET 0
     84          
     85          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     86          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     87            ZCD_NV_NWKKEY,
     88            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     89            ZCD_NV_NWK_ALTERN_KEY_INFO,
     90          };
     91          
     92          /*********************************************************************
     93           * MACROS
     94           */
     95          
     96          #if (defined HAL_MCU_CC2530 || defined HAL_MCU_CC2531)
     97          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     98          #elif defined HAL_MCU_CC2533
     99          # define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalBatMonRead( HAL_BATMON_MIN_FLASH ))
    100          #else
    101          # warning No implementation of a low Vdd check.
    102          # define  OSAL_NV_CHECK_BUS_VOLTAGE
    103          #endif
    104          
    105          #define OSAL_NV_DATA_SIZE( LEN )                      \
    106            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
    107                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
    108                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
    109          
    110          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    111            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    112                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    113            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    114          
    115          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    116            /* In order to recover from a page compaction that is interrupted,\
    117             * the logic in osal_nv_init() depends upon the following order:\
    118             * 1. State of the target of compaction is changed to ePgInUse.\
    119             * 2. Compacted page is erased.\
    120             */\
    121            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    122            erasePage( (COM_PG) ); \
    123            \
    124            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    125          )
    126          
    127          /*********************************************************************
    128           * TYPEDEFS
    129           */
    130          
    131          typedef struct
    132          {
    133            uint16 id;
    134            uint16 len;   // Enforce Flash-WORD size on len.
    135            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    136            uint16 stat;  // Item status.
    137          } osalNvHdr_t;
    138          // Struct member offsets.
    139          #define OSAL_NV_HDR_ID    0
    140          #define OSAL_NV_HDR_LEN   2
    141          #define OSAL_NV_HDR_CHK   4
    142          #define OSAL_NV_HDR_STAT  6
    143          
    144          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    145          #define OSAL_NV_HDR_SIZE  8
    146          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    147          
    148          typedef struct
    149          {
    150            uint16 active;
    151            uint16 inUse;
    152            uint16 xfer;
    153            uint16 spare;
    154          } osalNvPgHdr_t;
    155          // Struct member offsets.
    156          #define OSAL_NV_PG_ACTIVE 0
    157          #define OSAL_NV_PG_INUSE  2
    158          #define OSAL_NV_PG_XFER   4
    159          #define OSAL_NV_PG_SPARE  6
    160          
    161          #define OSAL_NV_PAGE_HDR_SIZE  8
    162          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    163          
    164          typedef enum
    165          {
    166            eNvXfer,
    167            eNvZero
    168          } eNvHdrEnum;
    169          
    170          typedef enum
    171          {
    172            ePgActive,
    173            ePgInUse,
    174            ePgXfer,
    175            ePgSpare
    176          } ePgHdrEnum;
    177          
    178          /*********************************************************************
    179           * GLOBAL VARIABLES
    180           */
    181          
    182          #ifndef OAD_KEEP_NV_PAGES
    183          // When NV pages are to remain intact during OAD download,
    184          // the image itself should not include NV pages.
    185          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    186          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    187          #pragma required=_nvBuf
    188          #endif // OAD_KEEP_NV_PAGES
    189          
    190          /*********************************************************************
    191           * LOCAL VARIABLES
    192           */
    193          
    194          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    196          
    197          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    199          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    201          
    202          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          
    205          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    208          
    209          /*********************************************************************
    210           * LOCAL FUNCTIONS
    211           */
    212          
    213          static uint8  initNV( void );
    214          
    215          static void   setPageUse( uint8 pg, uint8 inUse );
    216          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    217          static void   erasePage( uint8 pg );
    218          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    219          
    220          static uint16 findItem( uint16 id );
    221          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    222          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    223          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    224          
    225          static uint16 calcChkB( uint16 len, uint8 *buf );
    226          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    227          
    228          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    229          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    230          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    231          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    232          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    233          
    234          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    235          static uint8  hotItem(uint16 id);
    236          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    237          
    238          /*********************************************************************
    239           * @fn      initNV
    240           *
    241           * @brief   Initialize the NV flash pages.
    242           *
    243           * @param   none
    244           *
    245           * @return  TRUE
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          static uint8 initNV( void )
   \                     initNV:
    248          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    249            osalNvPgHdr_t pgHdr;
    250            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
    251            uint8 findDups = FALSE;
   \   00000D   7F00         MOV     R7,#0x0
    252            uint8 pg;
    253          
    254            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV     DPTR,#pgRes
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    255          
    256            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000014   7E79         MOV     R6,#0x79
    257            {
    258              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..08       MOV     ?V2,#0x8
   \   000019   8F..         MOV     ?V3,R7
   \   00001B   78..         MOV     R0,#?V2
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP102_8
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \   000029   EE           MOV     A,R6
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
    259          
    260              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F4           CPL     A
   \   00003B   7003         JNZ     ??initNV_1
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F4           CPL     A
   \                     ??initNV_1:
   \   000040   7013         JNZ     ??initNV_2
    261              {
    262                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000042   90....       MOV     DPTR,#pgRes
   \   000045   E0           MOVX    A,@DPTR
   \   000046   7004         JNZ     ??initNV_3
    263                {
    264                  pgRes = pg;
   \   000048   EE           MOV     A,R6
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   8019         SJMP    ??initNV_4
    265                }
    266                else
    267                {
    268                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004C                ; Setup parameters for call to function setPageUse
   \   00004C   7A01         MOV     R2,#0x1
   \   00004E   EE           MOV     A,R6
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   000053   8010         SJMP    ??initNV_4
    269                }
    270              }
    271              // An Xfer from this page was in progress.
    272              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F4           CPL     A
   \   00005C   7003         JNZ     ??initNV_5
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \                     ??initNV_5:
   \   000061   6002         JZ      ??initNV_4
    273              {
    274                oldPg = pg;
   \   000063   8E..         MOV     ?V0,R6
    275              }
    276            }
   \                     ??initNV_4:
   \   000065   0E           INC     R6
   \   000066   EE           MOV     A,R6
   \   000067   C3           CLR     C
   \   000068   947F         SUBB    A,#0x7f
   \   00006A   40AA         JC      ??initNV_0
    277          
    278            // If a page compaction was interrupted before the old page was erased.
    279            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00006C   E5..         MOV     A,?V0
   \   00006E   90....       MOV     DPTR,#pgRes
   \   000071   601F         JZ      ??initNV_6
    280            {
    281              /* Interrupted compaction before the target of compaction was put in use;
    282               * so erase the target of compaction and start again.
    283               */
    284              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000073   E0           MOVX    A,@DPTR
   \   000074   600F         JZ      ??initNV_7
    285              {
    286                erasePage( pgRes );
   \   000076                ; Setup parameters for call to function erasePage
   \   000076   F9           MOV     R1,A
   \   000077   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    287                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   00007A                ; Setup parameters for call to function compactPage
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   A9..         MOV     R1,?V0
   \   000080   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   000083   8014         SJMP    ??initNV_8
    288              }
    289              /* Interrupted compaction after the target of compaction was put in use,
    290               * but before the old page was erased; so erase it now and create a new reserve page.
    291               */
    292              else
    293              {
    294                erasePage( oldPg );
   \                     ??initNV_7:
   \   000085                ; Setup parameters for call to function erasePage
   \   000085   A9..         MOV     R1,?V0
   \   000087   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    295                pgRes = oldPg;
   \   00008A   E5..         MOV     A,?V0
   \   00008C   90....       MOV     DPTR,#pgRes
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   8007         SJMP    ??initNV_8
    296              }
    297            }
    298            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6004         JZ      ??initNV_8
    299            {
    300              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   000095                ; Setup parameters for call to function erasePage
   \   000095   F9           MOV     R1,A
   \   000096   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    301            }
    302            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    303             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    304             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    305             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    306             * size less the page header.
    307             */
    308          
    309            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   000099   7E79         MOV     R6,#0x79
    310            {
    311              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    312              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   00009B                ; Setup parameters for call to function initPage
   \   00009B   EF           MOV     A,R7
   \   00009C   FC           MOV     R4,A
   \   00009D   7A00         MOV     R2,#0x0
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   EE           MOV     A,R6
   \   0000A2   F9           MOV     R1,A
   \   0000A3   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   0000A6   8B..         MOV     ?V3,R3
   \   0000A8   EA           MOV     A,R2
   \   0000A9   45..         ORL     A,?V3
   \   0000AB   6004         JZ      ??initNV_10
    313              {
    314                findDups = TRUE;
   \   0000AD   7F01         MOV     R7,#0x1
    315                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000AF   7E78         MOV     R6,#0x78
    316                continue;
    317              }
    318            }
   \                     ??initNV_10:
   \   0000B1   0E           INC     R6
   \   0000B2   EE           MOV     A,R6
   \   0000B3   C3           CLR     C
   \   0000B4   947F         SUBB    A,#0x7f
   \   0000B6   40E3         JC      ??initNV_9
    319          
    320            if (findDups)
   \   0000B8   EF           MOV     A,R7
   \   0000B9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BB   5014         JNC     ??initNV_11
    321            {
    322              // Final pass to calculate page lost after invalidating duplicate items.
    323              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000BD   7E79         MOV     R6,#0x79
    324              {
    325                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000BF                ; Setup parameters for call to function initPage
   \   0000BF   7C00         MOV     R4,#0x0
   \   0000C1   7A00         MOV     R2,#0x0
   \   0000C3   7B00         MOV     R3,#0x0
   \   0000C5   EE           MOV     A,R6
   \   0000C6   F9           MOV     R1,A
   \   0000C7   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
    326              }
   \   0000CA   0E           INC     R6
   \   0000CB   EE           MOV     A,R6
   \   0000CC   C3           CLR     C
   \   0000CD   947F         SUBB    A,#0x7f
   \   0000CF   40EE         JC      ??initNV_12
    327            }
    328          
    329            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   0000D1   90....       MOV     DPTR,#pgRes
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   703C         JNZ     ??initNV_13
    330            {
    331              uint8 idx, mostLost = 0;
   \   0000D7   7E00         MOV     R6,#0x0
    332          
    333              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000D9   7C00         MOV     R4,#0x0
    334              {
    335                // Is this the page that was compacted?
    336                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   0000DB   EC           MOV     A,R4
   \   0000DC   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000DF   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000E2   74F8         MOV     A,#-0x8
   \   0000E4   6A           XRL     A,R2
   \   0000E5   7003         JNZ     ??initNV_15
   \   0000E7   7407         MOV     A,#0x7
   \   0000E9   6B           XRL     A,R3
   \                     ??initNV_15:
   \   0000EA   7004         JNZ     ??initNV_16
    337                {
    338                  mostLost = idx;
   \   0000EC   EC           MOV     A,R4
   \   0000ED   FE           MOV     R6,A
    339                  break;
   \   0000EE   8018         SJMP    ??initNV_17
    340                }
    341                /* This check is not expected to be necessary because the above test should always succeed
    342                 * with an early loop exit.
    343                 */
    344                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   0000F0   EE           MOV     A,R6
   \   0000F1   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000F4   39           ADDC    A,R1
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   C3           CLR     C
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   9A           SUBB    A,R2
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   9B           SUBB    A,R3
   \   0000FD   5002         JNC     ??initNV_18
    345                {
    346                  mostLost = idx;
   \   0000FF   EC           MOV     A,R4
   \   000100   FE           MOV     R6,A
    347                }
    348              }
   \                     ??initNV_18:
   \   000101   0C           INC     R4
   \   000102   EC           MOV     A,R4
   \   000103   C3           CLR     C
   \   000104   9406         SUBB    A,#0x6
   \   000106   40D3         JC      ??initNV_14
    349          
    350              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   000108   7479         MOV     A,#0x79
   \   00010A   2E           ADD     A,R6
   \   00010B   90....       MOV     DPTR,#pgRes
   \   00010E   F0           MOVX    @DPTR,A
    351              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   00010F                ; Setup parameters for call to function erasePage
   \   00010F   F9           MOV     R1,A
   \   000110   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    352            }
    353          
    354            return TRUE;
   \                     ??initNV_13:
   \   000113   7901         MOV     R1,#0x1
   \   000115   7408         MOV     A,#0x8
   \   000117   80..         SJMP    ??Subroutine37_0
    355          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#pgLost & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    356          
    357          /*********************************************************************
    358           * @fn      setPageUse
    359           *
    360           * @brief   Set page header active/inUse state according to 'inUse'.
    361           *
    362           * @param   pg - Valid NV page to verify and init.
    363           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    364           *
    365           * @return  none
    366           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    367          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    368          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    369            osalNvPgHdr_t pgHdr;
    370          
    371            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    372          
    373            if ( inUse )
   \   000016   EF           MOV     A,R7
   \   000017   6008         JZ      ??setPageUse_0
    374            {
    375              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   8007         SJMP    ??setPageUse_1
    376            }
    377            else
    378            {
    379              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   74FF         MOV     A,#-0x1
    380            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    381          
    382            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_75:
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    383          }
   \   000032   7408         MOV     A,#0x8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV     R4,?XSP + 0
   \   000005   AD..         MOV     R5,?XSP + 1
   \   000007   22           RET
    384          
    385          /*********************************************************************
    386           * @fn      initPage
    387           *
    388           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    389           *
    390           * @param   pg - Valid NV page to verify and init.
    391           * @param   id - Valid NV item Id to use function as a "findItem".
    392           *               If set to NULL then just perform the page initialization.
    393           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    394           *                     left from a write that is interrupted by a reset/power-cycle.
    395           *                     FALSE otherwise.
    396           *
    397           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    398           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    401          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V4,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   \   000010   8C..         MOV     ?V5,R4
    402            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   75..08       MOV     ?V0,#0x8
   \   000015   75..00       MOV     ?V1,#0x0
    403            uint16 sz, lost = 0;
   \   000018   75..00       MOV     ?V2,#0x0
   \   00001B   75..00       MOV     ?V3,#0x0
    404            osalNvHdr_t hdr;
    405          
    406            do
    407            {
    408              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001E                ; Setup parameters for call to function HalFlashRead
   \   00001E   75..08       MOV     ?V8,#0x8
   \   000021   75..00       MOV     ?V9,#0x0
   \   000024   78..         MOV     R0,#?V8
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP102_8
   \   00002E   AA..         MOV     R2,?V0
   \   000030   AB..         MOV     R3,?V1
   \   000032   A9..         MOV     R1,?V4
   \   000034   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    409          
    410              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F4           CPL     A
   \   000044   7003         JNZ     ??initPage_1
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F4           CPL     A
   \                     ??initPage_1:
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??initPage_2 & 0xFFFF
    411              {
    412                break;
    413              }
    414          
    415              // Get the actual size in bytes which is the ceiling(hdr.len)
    416              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000056   4006         JC      ??initPage_3
   \   000058   7EFC         MOV     R6,#-0x4
   \   00005A   7FFF         MOV     R7,#-0x1
   \   00005C   8006         SJMP    ??initPage_4
   \                     ??initPage_3:
   \   00005E   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000061   FE           MOV     R6,A
   \   000062   E9           MOV     A,R1
   \   000063   FF           MOV     R7,A
    417          
    418              // A bad 'len' write has blown away the rest of the page.
    419              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   000064   74F8         MOV     A,#-0x8
   \   000066   C3           CLR     C
   \   000067   95..         SUBB    A,?V0
   \   000069   F8           MOV     R0,A
   \   00006A   7407         MOV     A,#0x7
   \   00006C   95..         SUBB    A,?V1
   \   00006E   F9           MOV     R1,A
   \   00006F   C3           CLR     C
   \   000070   E8           MOV     A,R0
   \   000071   9E           SUBB    A,R6
   \   000072   E9           MOV     A,R1
   \   000073   9F           SUBB    A,R7
   \   000074   5020         JNC     ??initPage_5
    420              {
    421                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   000076   E5..         MOV     A,?V2
   \   000078   2400         ADD     A,#0x0
   \   00007A   E5..         MOV     A,?V3
   \   00007C   3408         ADDC    A,#0x8
   \   00007E   F5..         MOV     ?V3,A
   \   000080   C3           CLR     C
   \   000081   E5..         MOV     A,?V2
   \   000083   95..         SUBB    A,?V0
   \   000085   F5..         MOV     ?V2,A
   \   000087   E5..         MOV     A,?V3
   \   000089   95..         SUBB    A,?V1
   \   00008B   F5..         MOV     ?V3,A
    422                offset = OSAL_NV_PAGE_SIZE;
   \   00008D   75..00       MOV     ?V0,#0x0
   \   000090   75..08       MOV     ?V1,#0x8
    423                break;
   \   000093   02....       LJMP    ??initPage_2 & 0xFFFF
    424              }
    425          
    426              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   000096   E5..         MOV     A,?V0
   \   000098   2408         ADD     A,#0x8
   \   00009A   F5..         MOV     ?V0,A
   \   00009C   E4           CLR     A
   \   00009D   35..         ADDC    A,?V1
   \   00009F   F5..         MOV     ?V1,A
    427          
    428              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000AA   7003         JNZ     $+5
   \   0000AC   02....       LJMP    ??initPage_6 & 0xFFFF
    429              {
    430                /* This trick allows function to do double duty for findItem() without
    431                 * compromising its essential functionality at powerup initialization.
    432                 */
    433                if ( id != OSAL_NV_ITEM_NULL )
   \   0000AF   E5..         MOV     A,?V6
   \   0000B1   45..         ORL     A,?V7
   \   0000B3   604A         JZ      ??initPage_7
    434                {
    435                  /* This trick allows asking to find the old/transferred item in case
    436                   * of a successful new item write that gets interrupted before the
    437                   * old item can be zeroed out.
    438                   */
    439                  if ( (id & 0x7fff) == hdr.id )
   \   0000B5   A8..         MOV     R0,?V6
   \   0000B7   E5..         MOV     A,?V7
   \   0000B9   547F         ANL     A,#0x7f
   \   0000BB   F9           MOV     R1,A
   \   0000BC   85..82       MOV     DPL,?XSP + 0
   \   0000BF   85..83       MOV     DPH,?XSP + 1
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   68           XRL     A,R0
   \   0000C4   7003         JNZ     ??initPage_8
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   69           XRL     A,R1
   \                     ??initPage_8:
   \   0000C9   6003         JZ      $+5
   \   0000CB   02....       LJMP    ??CrossCallReturnLabel_44 & 0xFFFF
    440                  {
    441                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    442                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000CE   7406         MOV     A,#0x6
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000D6   E5..         MOV     A,?V7
   \   0000D8   5480         ANL     A,#0x80
   \   0000DA   700F         JNZ     ??initPage_9
   \   0000DC   74FF         MOV     A,#-0x1
   \   0000DE   68           XRL     A,R0
   \   0000DF   7003         JNZ     ??initPage_10
   \   0000E1   74FF         MOV     A,#-0x1
   \   0000E3   69           XRL     A,R1
   \                     ??initPage_10:
   \   0000E4   6003         JZ      $+5
   \   0000E6   02....       LJMP    ??CrossCallReturnLabel_44 & 0xFFFF
   \   0000E9   800D         SJMP    ??initPage_11
   \                     ??initPage_9:
   \   0000EB   74FF         MOV     A,#-0x1
   \   0000ED   68           XRL     A,R0
   \   0000EE   7003         JNZ     ??initPage_12
   \   0000F0   74FF         MOV     A,#-0x1
   \   0000F2   69           XRL     A,R1
   \                     ??initPage_12:
   \   0000F3   7003         JNZ     $+5
   \   0000F5   02....       LJMP    ??CrossCallReturnLabel_44 & 0xFFFF
    443                    {
    444                      return offset;
   \                     ??initPage_11:
   \   0000F8   AA..         MOV     R2,?V0
   \   0000FA   AB..         MOV     R3,?V1
   \   0000FC   02....       LJMP    ??initPage_13 & 0xFFFF
    445                    }
    446                  }
    447                }
    448                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    449                else
    450                {
    451                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   0000FF                ; Setup parameters for call to function calcChkF
   \   0000FF   AA..         MOV     R2,?V0
   \   000101   AB..         MOV     R3,?V1
   \   000103   A9..         MOV     R1,?V4
   \   000105   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000108   8A..         MOV     ?V8,R2
   \   00010A   8B..         MOV     ?V9,R3
   \   00010C   A8..         MOV     R0,?V8
   \   00010E   A9..         MOV     R1,?V9
   \   000110   7404         MOV     A,#0x4
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   E0           MOVX    A,@DPTR
   \   000116   68           XRL     A,R0
   \   000117   7003         JNZ     ??initPage_14
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   69           XRL     A,R1
   \                     ??initPage_14:
   \   00011C   7046         JNZ     ??initPage_15
    452                  {
    453                    if ( findDups )
   \   00011E   7406         MOV     A,#0x6
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000126   E5..         MOV     A,?V5
   \   000128   602A         JZ      ??initPage_16
    454                    {
    455                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00012A   74FF         MOV     A,#-0x1
   \   00012C   68           XRL     A,R0
   \   00012D   7003         JNZ     ??initPage_17
   \   00012F   74FF         MOV     A,#-0x1
   \   000131   69           XRL     A,R1
   \                     ??initPage_17:
   \   000132   7045         JNZ     ??CrossCallReturnLabel_44
    456                      {
    457                        /* The trick of setting the MSB of the item Id causes the logic
    458                         * immediately above to return a valid page only if the header 'stat'
    459                         * indicates that it was the older item being transferred.
    460                         */
    461                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000134                ; Setup parameters for call to function findItem
   \   000134   85..82       MOV     DPL,?XSP + 0
   \   000137   85..83       MOV     DPH,?XSP + 1
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   FA           MOV     R2,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   4480         ORL     A,#0x80
   \   000140   FB           MOV     R3,A
   \   000141   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
    462          
    463                        if ( off != OSAL_NV_ITEM_NULL )
   \   000144   EA           MOV     A,R2
   \   000145   4B           ORL     A,R3
   \   000146   6031         JZ      ??CrossCallReturnLabel_44
    464                        {
    465                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   000148                ; Setup parameters for call to function setItem
   \   000148   7C01         MOV     R4,#0x1
   \   00014A   90....       MOV     DPTR,#findPg
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F9           MOV     R1,A
   \   00014F   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   \   000152   8025         SJMP    ??CrossCallReturnLabel_44
    466                        }
    467                      }
    468                    }
    469                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    470                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_16:
   \   000154   74FF         MOV     A,#-0x1
   \   000156   68           XRL     A,R0
   \   000157   7003         JNZ     ??initPage_18
   \   000159   74FF         MOV     A,#-0x1
   \   00015B   69           XRL     A,R1
   \                     ??initPage_18:
   \   00015C   601B         JZ      ??CrossCallReturnLabel_44
    471                    {
    472                      return OSAL_NV_ERASED_ID;
   \   00015E   7AFF         MOV     R2,#-0x1
   \   000160   7BFF         MOV     R3,#-0x1
   \   000162   8048         SJMP    ??initPage_13
    473                    }
    474                  }
    475                  else
    476                  {
    477                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_15:
   \   000164                ; Setup parameters for call to function setItem
   \   000164   7C01         MOV     R4,#0x1
   \   000166   AA..         MOV     R2,?V0
   \   000168   AB..         MOV     R3,?V1
   \   00016A   A9..         MOV     R1,?V4
   \   00016C   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
    478                    lost += (OSAL_NV_HDR_SIZE + sz);
    479                  }
    480                }
    481              }
    482              else
    483              {
    484                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   00016F   EE           MOV     A,R6
   \   000170   2408         ADD     A,#0x8
   \   000172   F8           MOV     R0,A
   \   000173   E4           CLR     A
   \   000174   3F           ADDC    A,R7
   \   000175   F9           MOV     R1,A
   \   000176   12....       LCALL   ?Subroutine29 & 0xFFFF
    485              }
    486              offset += sz;
   \                     ??CrossCallReturnLabel_44:
   \   000179   E5..         MOV     A,?V0
   \   00017B   2E           ADD     A,R6
   \   00017C   F5..         MOV     ?V0,A
   \   00017E   E5..         MOV     A,?V1
   \   000180   3F           ADDC    A,R7
   \   000181   F5..         MOV     ?V1,A
    487          
    488            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   000183   C3           CLR     C
   \   000184   E5..         MOV     A,?V0
   \   000186   94F8         SUBB    A,#-0x8
   \   000188   E5..         MOV     A,?V1
   \   00018A   9407         SUBB    A,#0x7
   \   00018C   5003         JNC     $+5
   \   00018E   02....       LJMP    ??initPage_0 & 0xFFFF
    489          
    490            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   000191   A8..         MOV     R0,?V4
   \   000193   E8           MOV     A,R0
   \   000194   28           ADD     A,R0
   \   000195   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000198   E5..         MOV     A,?V0
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   A3           INC     DPTR
   \   00019C   E5..         MOV     A,?V1
   \   00019E   12....       LCALL   ?Subroutine10 & 0xFFFF
    491            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_4:
   \   0001A1   E5..         MOV     A,?V2
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   E5..         MOV     A,?V3
   \   0001A7   F0           MOVX    @DPTR,A
    492          
    493            return OSAL_NV_ITEM_NULL;
   \   0001A8   7A00         MOV     R2,#0x0
   \   0001AA   7B00         MOV     R3,#0x0
   \                     ??initPage_13:
   \   0001AC   7408         MOV     A,#0x8
   \   0001AE   80..         SJMP    ??Subroutine40_0
    494          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV     R7,#0xa
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000003   28           ADD     A,R0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000008   39           ADDC    A,R1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EC           MOV     A,R4
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3D           ADDC    A,R5
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   54FC         ANL     A,#0xfc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   C3           CLR     C
   \   000004   EC           MOV     A,R4
   \   000005   94FC         SUBB    A,#-0x4
   \   000007   ED           MOV     A,R5
   \   000008   94FF         SUBB    A,#-0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E5..         MOV     A,?V2
   \   000002   28           ADD     A,R0
   \   000003   F5..         MOV     ?V2,A
   \   000005   E5..         MOV     A,?V3
   \   000007   39           ADDC    A,R1
   \   000008   F5..         MOV     ?V3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    495          
    496          /*********************************************************************
    497           * @fn      erasePage
    498           *
    499           * @brief   Erases a page in Flash.
    500           *
    501           * @param   pg - Valid NV page to erase.
    502           *
    503           * @return  none
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          static void erasePage( uint8 pg )
   \                     erasePage:
    506          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    507            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL   `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    508          
    509            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV     A,R6
   \   00000B   2E           ADD     A,R6
   \   00000C   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00000F   7408         MOV     A,#0x8
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E4           CLR     A
   \   000014   12....       LCALL   ?Subroutine10 & 0xFFFF
    510            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_5:
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
    511          }
   \   00001B   02....       LJMP    ??Subroutine39_0 & 0xFFFF
    512          
    513          /*********************************************************************
    514           * @fn      compactPage
    515           *
    516           * @brief   Compacts the page specified.
    517           *
    518           * @param   srcPg - Valid NV page to erase.
    519           * @param   skipId - Item Id to not compact.
    520           *
    521           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    522           *          FALSE otherwise.
    523           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    524           *          the risk of infinitely looping on HAL flash failure.
    525           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    526           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    527           *          NV_OPER_FAILED.
    528           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    529           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    530           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    531           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    532           *          or written, the last value written with a return value of SUCCESS can continue to be
    533           *          read successfully.
    534           *          If eventually HAL flash starts working again, all of the pages marked as
    535           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    536           *          deterministically clean-up one page pending compaction per power-cycle
    537           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    538           *          through such a scenario.
    539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
    542            uint16 srcOff;
    543            uint8 rtrn;
    544          
    545            // To minimize code size, only check for a clean page here where it's absolutely required.
    546            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   7E00         MOV     R6,#0x0
   \   000012   7F00         MOV     R7,#0x0
    547            {
    548              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   000014                ; Setup parameters for call to function HalFlashRead
   \   000014   75..01       MOV     ?V4,#0x1
   \   000017   75..00       MOV     ?V5,#0x0
   \   00001A   78..         MOV     R0,#?V4
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?XSTACK_DISP102_8
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   90....       MOV     DPTR,#pgRes
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
    549              if (rtrn != OSAL_NV_ERASED)
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F4           CPL     A
   \   00003D   600D         JZ      ??compactPage_1
    550              {
    551                erasePage(pgRes);
   \   00003F                ; Setup parameters for call to function erasePage
   \   00003F   90....       MOV     DPTR,#pgRes
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    552                return FALSE;
   \   000047   7900         MOV     R1,#0x0
   \   000049   02....       LJMP    ??compactPage_2 & 0xFFFF
    553              }
    554            }
   \                     ??compactPage_1:
   \   00004C   0E           INC     R6
   \   00004D   EE           MOV     A,R6
   \   00004E   7001         JNZ     ??compactPage_3
   \   000050   0F           INC     R7
   \                     ??compactPage_3:
   \   000051   C3           CLR     C
   \   000052   EF           MOV     A,R7
   \   000053   9408         SUBB    A,#0x8
   \   000055   40BD         JC      ??compactPage_0
    555          
    556            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000057   7E08         MOV     R6,#0x8
   \   000059   7F00         MOV     R7,#0x0
    557            rtrn = TRUE;
   \   00005B   7401         MOV     A,#0x1
   \   00005D   F0           MOVX    @DPTR,A
    558          
    559            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    560            {
    561              osalNvHdr_t hdr;
    562              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_4:
   \   00005E   90....       MOV     DPTR,#pgRes
   \   000061   E0           MOVX    A,@DPTR
   \   000062   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F5..         MOV     ?V6,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F5..         MOV     ?V7,A
    563          
    564              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00006C                ; Setup parameters for call to function HalFlashRead
   \   00006C   75..08       MOV     ?V4,#0x8
   \   00006F   75..00       MOV     ?V5,#0x0
   \   000072   78..         MOV     R0,#?V4
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?XSTACK_DISP102_8
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   A9..         MOV     R1,?V0
   \   000082   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
    565          
    566              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00008A   7401         MOV     A,#0x1
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F4           CPL     A
   \   000091   7003         JNZ     ??compactPage_5
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F4           CPL     A
   \                     ??compactPage_5:
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??compactPage_6 & 0xFFFF
    567              {
    568                break;
    569              }
    570          
    571              // Get the actual size in bytes which is the ceiling(hdr.len)
    572              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00009B   7403         MOV     A,#0x3
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A3   4008         JC      ??compactPage_7
   \   0000A5   75..FC       MOV     ?V4,#-0x4
   \   0000A8   75..FF       MOV     ?V5,#-0x1
   \   0000AB   8008         SJMP    ??compactPage_8
   \                     ??compactPage_7:
   \   0000AD   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000B0   F5..         MOV     ?V4,A
   \   0000B2   E9           MOV     A,R1
   \   0000B3   F5..         MOV     ?V5,A
    573          
    574              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_8:
   \   0000B5   74F8         MOV     A,#-0x8
   \   0000B7   C3           CLR     C
   \   0000B8   9E           SUBB    A,R6
   \   0000B9   F8           MOV     R0,A
   \   0000BA   7407         MOV     A,#0x7
   \   0000BC   9F           SUBB    A,R7
   \   0000BD   F9           MOV     R1,A
   \   0000BE   C3           CLR     C
   \   0000BF   E8           MOV     A,R0
   \   0000C0   95..         SUBB    A,?V4
   \   0000C2   E9           MOV     A,R1
   \   0000C3   95..         SUBB    A,?V5
   \   0000C5   5003         JNC     $+5
   \   0000C7   02....       LJMP    ??compactPage_6 & 0xFFFF
    575              {
    576                break;
    577              }
    578          
    579              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000CA   74F8         MOV     A,#-0x8
   \   0000CC   C3           CLR     C
   \   0000CD   95..         SUBB    A,?V6
   \   0000CF   F8           MOV     R0,A
   \   0000D0   7407         MOV     A,#0x7
   \   0000D2   95..         SUBB    A,?V7
   \   0000D4   F9           MOV     R1,A
   \   0000D5   C3           CLR     C
   \   0000D6   E8           MOV     A,R0
   \   0000D7   95..         SUBB    A,?V4
   \   0000D9   E9           MOV     A,R1
   \   0000DA   95..         SUBB    A,?V5
   \   0000DC   5003         JNC     $+5
   \   0000DE   02....       LJMP    ??compactPage_9 & 0xFFFF
    580              {
    581                rtrn = FALSE;
    582                break;
    583              }
    584          
    585              srcOff += OSAL_NV_HDR_SIZE;
   \   0000E1   EE           MOV     A,R6
   \   0000E2   2408         ADD     A,#0x8
   \   0000E4   FE           MOV     R6,A
   \   0000E5   E4           CLR     A
   \   0000E6   3F           ADDC    A,R7
   \   0000E7   FF           MOV     R7,A
    586          
    587              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   0000E8   7401         MOV     A,#0x1
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000F0   7003         JNZ     $+5
   \   0000F2   02....       LJMP    ??compactPage_10 & 0xFFFF
   \   0000F5   7401         MOV     A,#0x1
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   65..         XRL     A,?V2
   \   0000FD   7004         JNZ     ??compactPage_11
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   65..         XRL     A,?V3
   \                     ??compactPage_11:
   \   000103   7003         JNZ     $+5
   \   000105   02....       LJMP    ??compactPage_10 & 0xFFFF
    588              {
    589                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000108                ; Setup parameters for call to function calcChkF
   \   000108   EE           MOV     A,R6
   \   000109   FA           MOV     R2,A
   \   00010A   EF           MOV     A,R7
   \   00010B   FB           MOV     R3,A
   \   00010C   A9..         MOV     R1,?V0
   \   00010E   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000111   8A..         MOV     ?V8,R2
   \   000113   8B..         MOV     ?V9,R3
   \   000115   A8..         MOV     R0,?V8
   \   000117   A9..         MOV     R1,?V9
   \   000119   7405         MOV     A,#0x5
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   68           XRL     A,R0
   \   000120   7003         JNZ     ??compactPage_12
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   69           XRL     A,R1
   \                     ??compactPage_12:
   \   000125   6003         JZ      $+5
   \   000127   02....       LJMP    ??compactPage_10 & 0xFFFF
    590                {
    591                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    592                   * OSAL_Nv interruptions caused by resets.
    593                   */
    594                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00012A   7407         MOV     A,#0x7
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F4           CPL     A
   \   000131   7003         JNZ     ??compactPage_13
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F4           CPL     A
   \                     ??compactPage_13:
   \   000136   700B         JNZ     ??compactPage_14
    595                  {
    596                    setItem( srcPg, srcOff, eNvXfer );
   \   000138                ; Setup parameters for call to function setItem
   \   000138   7C00         MOV     R4,#0x0
   \   00013A   EE           MOV     A,R6
   \   00013B   FA           MOV     R2,A
   \   00013C   EF           MOV     A,R7
   \   00013D   FB           MOV     R3,A
   \   00013E   A9..         MOV     R1,?V0
   \   000140   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
    597                  }
    598          
    599                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   000143                ; Setup parameters for call to function writeItem
   \   000143   75..00       MOV     ?V1,#0x0
   \   000146   78..         MOV     R0,#?V1
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014B   E4           CLR     A
   \   00014C   F5..         MOV     ?V8,A
   \   00014E   F5..         MOV     ?V9,A
   \   000150   78..         MOV     R0,#?V8
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000155   7406         MOV     A,#0x6
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00015D   7404         MOV     A,#0x4
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000165   90....       MOV     DPTR,#pgRes
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F9           MOV     R1,A
   \   00016A   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   00016D   7403         MOV     A,#0x3
   \   00016F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000172   E9           MOV     A,R1
   \   000173   7003         JNZ     $+5
   \   000175   02....       LJMP    ??compactPage_9 & 0xFFFF
    600                  {
    601                    dstOff += OSAL_NV_HDR_SIZE;
   \   000178   E5..         MOV     A,?V6
   \   00017A   2408         ADD     A,#0x8
   \   00017C   F5..         MOV     ?V6,A
   \   00017E   E4           CLR     A
   \   00017F   35..         ADDC    A,?V7
   \   000181   F5..         MOV     ?V7,A
    602                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   000183                ; Setup parameters for call to function xferBuf
   \   000183   78..         MOV     R0,#?V4
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000188   78..         MOV     R0,#?V6
   \   00018A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018D   90....       MOV     DPTR,#pgRes
   \   000190   E0           MOVX    A,@DPTR
   \   000191   FC           MOV     R4,A
   \   000192   EE           MOV     A,R6
   \   000193   FA           MOV     R2,A
   \   000194   EF           MOV     A,R7
   \   000195   FB           MOV     R3,A
   \   000196   A9..         MOV     R1,?V0
   \   000198   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   00019B   7404         MOV     A,#0x4
   \   00019D   12....       LCALL   ?DEALLOC_XSTACK8
    603                    // Calculate and write the new checksum.
    604                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   0001A0                ; Setup parameters for call to function calcChkF
   \   0001A0   7403         MOV     A,#0x3
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001A8   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   0001AB   7405         MOV     A,#0x5
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001B3   7002         JNZ     ??compactPage_15
   \   0001B5   EB           MOV     A,R3
   \   0001B6   6D           XRL     A,R5
   \                     ??compactPage_15:
   \   0001B7   7054         JNZ     ??compactPage_9
    605                    {
    606                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001B9                ; Setup parameters for call to function setChk
   \   0001B9   AA..         MOV     R2,?V6
   \   0001BB   AB..         MOV     R3,?V7
   \   0001BD   90....       MOV     DPTR,#pgRes
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   0001C5   8A..         MOV     ?V8,R2
   \   0001C7   8B..         MOV     ?V9,R3
   \   0001C9   A8..         MOV     R0,?V8
   \   0001CB   A9..         MOV     R1,?V9
   \   0001CD   7405         MOV     A,#0x5
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   68           XRL     A,R0
   \   0001D4   7003         JNZ     ??compactPage_16
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   69           XRL     A,R1
   \                     ??compactPage_16:
   \   0001D9   7032         JNZ     ??compactPage_9
    607                      {
    608                        rtrn = FALSE;
    609                        break;
    610                      }
    611                      else
    612                      {
    613                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001DB                ; Setup parameters for call to function hotItemUpdate
   \   0001DB   7401         MOV     A,#0x1
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   12....       LCALL   ?Subroutine11 & 0xFFFF
    614                      }
    615                    }
    616                    else
    617                    {
    618                      rtrn = FALSE;
    619                      break;
    620                    }
    621                  }
   \                     ??CrossCallReturnLabel_7:
   \   0001E3   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
    622                  else
    623                  {
    624                    rtrn = FALSE;
    625                    break;
    626                  }
    627                }
    628              }
    629          
    630              srcOff += sz;
   \                     ??compactPage_10:
   \   0001E6   EE           MOV     A,R6
   \   0001E7   25..         ADD     A,?V4
   \   0001E9   FE           MOV     R6,A
   \   0001EA   EF           MOV     A,R7
   \   0001EB   35..         ADDC    A,?V5
   \   0001ED   FF           MOV     R7,A
   \   0001EE   C3           CLR     C
   \   0001EF   EE           MOV     A,R6
   \   0001F0   94F8         SUBB    A,#-0x8
   \   0001F2   EF           MOV     A,R7
   \   0001F3   9407         SUBB    A,#0x7
   \   0001F5   5003         JNC     $+5
   \   0001F7   02....       LJMP    ??compactPage_4 & 0xFFFF
    631            }
    632          
    633            if (rtrn == FALSE)
   \                     ??compactPage_6:
   \   0001FA   85..82       MOV     DPL,?XSP + 0
   \   0001FD   85..83       MOV     DPH,?XSP + 1
   \   000200   E0           MOVX    A,@DPTR
   \   000201   7014         JNZ     ??compactPage_17
    634            {
    635              erasePage(pgRes);
   \                     ??compactPage_18:
   \   000203                ; Setup parameters for call to function erasePage
   \   000203   90....       MOV     DPTR,#pgRes
   \   000206   E0           MOVX    A,@DPTR
   \   000207   F9           MOV     R1,A
   \   000208   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   00020B   8025         SJMP    ??compactPage_19
    636            }
   \                     ??compactPage_9:
   \   00020D   85..82       MOV     DPL,?XSP + 0
   \   000210   85..83       MOV     DPH,?XSP + 1
   \   000213   E4           CLR     A
   \   000214   F0           MOVX    @DPTR,A
   \   000215   80EC         SJMP    ??compactPage_18
    637            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_17:
   \   000217   E5..         MOV     A,?V2
   \   000219   45..         ORL     A,?V3
   \   00021B   7015         JNZ     ??compactPage_19
    638            {
    639              COMPACT_PAGE_CLEANUP(srcPg);
   \   00021D                ; Setup parameters for call to function setPageUse
   \   00021D   7A01         MOV     R2,#0x1
   \   00021F   90....       MOV     DPTR,#pgRes
   \   000222   E0           MOVX    A,@DPTR
   \   000223   F9           MOV     R1,A
   \   000224   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   000227                ; Setup parameters for call to function erasePage
   \   000227   A9..         MOV     R1,?V0
   \   000229   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   00022C   E5..         MOV     A,?V0
   \   00022E   90....       MOV     DPTR,#pgRes
   \   000231   F0           MOVX    @DPTR,A
    640            }
    641            // else invoking function must cleanup.
    642          
    643            return rtrn;
   \                     ??compactPage_19:
   \   000232   85..82       MOV     DPL,?XSP + 0
   \   000235   85..83       MOV     DPH,?XSP + 1
   \   000238   E0           MOVX    A,@DPTR
   \   000239   F9           MOV     R1,A
   \                     ??compactPage_2:
   \   00023A   7409         MOV     A,#0x9
   \   00023C   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    644          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002                REQUIRE ??Subroutine41_0
   \   000002                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   AA..         MOV     R2,?V6
   \   000005   AB..         MOV     R3,?V7
   \   000007   90....       MOV     DPTR,#pgRes
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   EA           MOV     A,R2
   \   000004   6C           XRL     A,R4
   \   000005   22           RET
    645          
    646          /*********************************************************************
    647           * @fn      findItem
    648           *
    649           * @brief   Find an item Id in NV and return the page and offset to its data.
    650           *
    651           * @param   id - Valid NV item Id.
    652           *
    653           * @return  Offset of data corresponding to item Id, if found;
    654           *          otherwise OSAL_NV_ITEM_NULL.
    655           *
    656           *          The page containing the item, if found;
    657           *          otherwise no valid assignment made - left equal to item Id.
    658           *
    659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          static uint16 findItem( uint16 id )
   \                     findItem:
    661          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    662            uint16 off;
    663            uint8 pg;
    664          
    665            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    666            {
    667              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    668              {
    669                findPg = pg;
    670                return off;
    671              }
    672            }
    673          
    674            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    675            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    676            {
    677              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    678            }
   \   00000E   75..79       MOV     ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0
   \   000019   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   6008         JZ      ??findItem_3
   \   000020   E5..         MOV     A,?V0
   \   000022   90....       MOV     DPTR,#findPg
   \   000025   F0           MOVX    @DPTR,A
   \   000026   8015         SJMP    ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC     ?V0
   \   00002A   E5..         MOV     A,?V0
   \   00002C   C3           CLR     C
   \   00002D   947F         SUBB    A,#0x7f
   \   00002F   40E0         JC      ??findItem_2
   \   000031   EF           MOV     A,R7
   \   000032   5480         ANL     A,#0x80
   \   000034   60D4         JZ      ??findItem_1
    679            else
    680            {
    681              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV     DPTR,#findPg
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
    682              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV     R2,A
   \   00003C   FB           MOV     R3,A
    683            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP    ??Subroutine38_0 & 0xFFFF
    684          }
    685          
    686          /*********************************************************************
    687           * @fn      initItem
    688           *
    689           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    690           *
    691           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    692           *                 (i.e. if invoked from osal_nv_item_init() ).
    693           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    694           *                 is ok to use as a return value of the page number to be cleaned with
    695           *                 COMPACT_PAGE_CLEANUP().
    696           *                 (i.e. if invoked from osal_nv_write() ).
    697           * @param   id  - Valid NV item Id.
    698           * @param   len - Item data length.
    699           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    700           *
    701           * @return  The OSAL Nv page number if item write and read back checksums ok;
    702           *          OSAL_NV_PAGE_NULL otherwise.
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    705          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   8C..         MOV     ?V0,R4
   \   000012   8D..         MOV     ?V1,R5
    706            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR     C
   \   000015   EC           MOV     A,R4
   \   000016   94F4         SUBB    A,#-0xc
   \   000018   ED           MOV     A,R5
   \   000019   94FF         SUBB    A,#-0x1
   \   00001B   400E         JC      ??initItem_0
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   74FC         MOV     A,#-0x4
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74FF         MOV     A,#-0x1
   \   000029   8019         SJMP    ??initItem_1
   \                     ??initItem_0:
   \   00002B   EC           MOV     A,R4
   \   00002C   2403         ADD     A,#0x3
   \   00002E   F8           MOV     R0,A
   \   00002F   E4           CLR     A
   \   000030   35..         ADDC    A,?V1
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   54FC         ANL     A,#0xfc
   \   000036   2408         ADD     A,#0x8
   \   000038   5001         JNC     ??initItem_2
   \   00003A   09           INC     R1
   \                     ??initItem_2:
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E9           MOV     A,R1
   \                     ??initItem_1:
   \   000044   F0           MOVX    @DPTR,A
    707            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000045   7F00         MOV     R7,#0x0
    708            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000047   7C06         MOV     R4,#0x6
    709            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000049   90....       MOV     DPTR,#pgRes
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   04           INC     A
   \   00004E   FE           MOV     R6,A
    710          
    711            do {
    712              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_3:
   \   00004F   EE           MOV     A,R6
   \   000050   C3           CLR     C
   \   000051   947F         SUBB    A,#0x7f
   \   000053   4002         JC      ??initItem_4
    713              {
    714                pg = OSAL_NV_PAGE_BEG;
   \   000055   7E79         MOV     R6,#0x79
    715              }
    716              if ( pg != pgRes )
   \                     ??initItem_4:
   \   000057   90....       MOV     DPTR,#pgRes
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6E           XRL     A,R6
   \   00005C   6031         JZ      ??initItem_5
    717              {
    718                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   00005E   7487         MOV     A,#-0x79
   \   000060   2E           ADD     A,R6
   \   000061   F8           MOV     R0,A
    719                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000062   25E0         ADD     A,0xE0 /* A   */
   \   000064   F8           MOV     R0,A
   \   000065   E4           CLR     A
   \   000066   33           RLC     A
   \   000067   F9           MOV     R1,A
   \   000068   74..         MOV     A,#pgOff & 0xff
   \   00006A   28           ADD     A,R0
   \   00006B   F582         MOV     DPL,A
   \   00006D   74..         MOV     A,#(pgOff >> 8) & 0xff
   \   00006F   12....       LCALL   ?Subroutine14 & 0xFFFF
    720                {
    721                  break;
    722                }
    723              }
   \                     ??CrossCallReturnLabel_86:
   \   000072   E4           CLR     A
   \   000073   C3           CLR     C
   \   000074   9A           SUBB    A,R2
   \   000075   FA           MOV     R2,A
   \   000076   7408         MOV     A,#0x8
   \   000078   9B           SUBB    A,R3
   \   000079   FB           MOV     R3,A
   \   00007A   74..         MOV     A,#pgLost & 0xff
   \   00007C   28           ADD     A,R0
   \   00007D   F582         MOV     DPL,A
   \   00007F   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000081   39           ADDC    A,R1
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   2A           ADD     A,R2
   \   000086   FA           MOV     R2,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   3B           ADDC    A,R3
   \   00008A   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00008D   5008         JNC     ??initItem_6
    724              pg++;
   \                     ??initItem_5:
   \   00008F   0E           INC     R6
    725            } while (--cnt);
   \   000090   1C           DEC     R4
   \   000091   EC           MOV     A,R4
   \   000092   70BB         JNZ     ??initItem_3
   \   000094   02....       LJMP    ??initItem_7 & 0xFFFF
    726          
    727            if (cnt)
   \                     ??initItem_6:
   \   000097   EC           MOV     A,R4
   \   000098   7003         JNZ     $+5
   \   00009A   02....       LJMP    ??initItem_7 & 0xFFFF
   \   00009D   741C         MOV     A,#0x1c
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F5..         MOV     ?V6,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F5..         MOV     ?V7,A
    728            {
    729              // Item fits if an old page is compacted.
    730              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   0000A9   EE           MOV     A,R6
   \   0000AA   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000AD   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000B0   FA           MOV     R2,A
   \   0000B1   7408         MOV     A,#0x8
   \   0000B3   99           SUBB    A,R1
   \   0000B4   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000B7   4003         JC      $+5
   \   0000B9   02....       LJMP    ??initItem_8 & 0xFFFF
    731              {
    732                osalNvPgHdr_t pgHdr;
    733          
    734                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    735                 * OSAL_Nv interruptions caused by resets.
    736                 */
    737                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000BC                ; Setup parameters for call to function HalFlashRead
   \   0000BC   75..08       MOV     ?V8,#0x8
   \   0000BF   8F..         MOV     ?V9,R7
   \   0000C1   78..         MOV     R0,#?V8
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   7404         MOV     A,#0x4
   \   0000C8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000CB   7A00         MOV     R2,#0x0
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   EE           MOV     A,R6
   \   0000D0   F9           MOV     R1,A
   \   0000D1   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
    738                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000D9   7406         MOV     A,#0x6
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F4           CPL     A
   \   0000E0   7003         JNZ     ??initItem_9
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F4           CPL     A
   \                     ??initItem_9:
   \   0000E5   700B         JNZ     ??initItem_10
    739                {
    740                  // Mark the old page as being in process of compaction.
    741                  sz = OSAL_NV_ZEROED_ID;
   \   0000E7   12....       LCALL   ?Subroutine9 & 0xFFFF
    742                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    743                }
   \                     ??CrossCallReturnLabel_73:
   \   0000EA   7A04         MOV     R2,#0x4
   \   0000EC   FB           MOV     R3,A
   \   0000ED   EE           MOV     A,R6
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
    744          
    745                /* First the old page is compacted, then the new item will be the last one written to what
    746                 * had been the reserved page.
    747                 */
    748                if (compactPage( pg, id ))
   \                     ??initItem_10:
   \   0000F2                ; Setup parameters for call to function compactPage
   \   0000F2   AA..         MOV     R2,?V4
   \   0000F4   AB..         MOV     R3,?V5
   \   0000F6   EE           MOV     A,R6
   \   0000F7   F9           MOV     R1,A
   \   0000F8   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   0000FB   E9           MOV     A,R1
   \   0000FC   6071         JZ      ??initItem_7
    749                {
    750                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0000FE                ; Setup parameters for call to function writeItem
   \   0000FE   E5..         MOV     A,?V2
   \   000100   F5..         MOV     ?V3,A
   \   000102   78..         MOV     R0,#?V3
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000107   78..         MOV     R0,#?V6
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010C   AC..         MOV     R4,?V0
   \   00010E   AD..         MOV     R5,?V1
   \   000110   AA..         MOV     R2,?V4
   \   000112   AB..         MOV     R3,?V5
   \   000114   90....       MOV     DPTR,#pgRes
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F9           MOV     R1,A
   \   000119   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   00011C   7403         MOV     A,#0x3
   \   00011E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000121   E9           MOV     A,R1
   \   000122   6005         JZ      ??initItem_11
    751                  {
    752                    rtrn = pgRes;
   \   000124   90....       MOV     DPTR,#pgRes
   \   000127   E0           MOVX    A,@DPTR
   \   000128   FF           MOV     R7,A
    753                  }
    754          
    755                  if ( flag == FALSE )
   \                     ??initItem_11:
   \   000129   E5..         MOV     A,?V2
   \   00012B   7009         JNZ     ??initItem_12
    756                  {
    757                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    758                     * the old page to be cleaned up.
    759                     */
    760                    *(uint8 *)buf = pg;
   \   00012D   EE           MOV     A,R6
   \   00012E   85..82       MOV     DPL,?V6
   \   000131   85..83       MOV     DPH,?V7
   \   000134   8013         SJMP    ??initItem_13
    761                  }
    762                  else
    763                  {
    764                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    765                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    766                     */
    767                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_12:
   \   000136                ; Setup parameters for call to function setPageUse
   \   000136   7A01         MOV     R2,#0x1
   \   000138   90....       MOV     DPTR,#pgRes
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F9           MOV     R1,A
   \   00013D   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   000140                ; Setup parameters for call to function erasePage
   \   000140   EE           MOV     A,R6
   \   000141   F9           MOV     R1,A
   \   000142   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   000145   EE           MOV     A,R6
   \   000146   90....       MOV     DPTR,#pgRes
   \                     ??initItem_13:
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   8023         SJMP    ??initItem_7
    768                  }
    769                }
    770              }
    771              else
    772              {
    773                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_8:
   \   00014C                ; Setup parameters for call to function writeItem
   \   00014C   E5..         MOV     A,?V2
   \   00014E   F5..         MOV     ?V3,A
   \   000150   78..         MOV     R0,#?V3
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000155   78..         MOV     R0,#?V6
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   AC..         MOV     R4,?V0
   \   00015C   AA..         MOV     R2,?V4
   \   00015E   AB..         MOV     R3,?V5
   \   000160   EE           MOV     A,R6
   \   000161   F9           MOV     R1,A
   \   000162   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   000165   7403         MOV     A,#0x3
   \   000167   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016A   E9           MOV     A,R1
   \   00016B   6002         JZ      ??initItem_7
    774                {
    775                  rtrn = pg;
   \   00016D   EE           MOV     A,R6
   \   00016E   FF           MOV     R7,A
    776                }
    777              }
    778            }
    779          
    780            return rtrn;
   \                     ??initItem_7:
   \   00016F   EF           MOV     A,R7
   \   000170   F9           MOV     R1,A
   \   000171   740A         MOV     A,#0xa
   \   000173   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   FB           MOV     R3,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00000A   C3           CLR     C
   \   00000B   EA           MOV     A,R2
   \   00000C   98           SUBB    A,R0
   \   00000D   EB           MOV     A,R3
   \   00000E   99           SUBB    A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine42_0
   \   000007                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   E4           CLR     A
   \   000004   C3           CLR     C
   \   000005   98           SUBB    A,R0
   \   000006   22           RET
    782          
    783          /*********************************************************************
    784           * @fn      setItem
    785           *
    786           * @brief   Set an item Id or status to mark its state.
    787           *
    788           * @param   pg - Valid NV page.
    789           * @param   offset - Valid offset into the page of the item data - the header
    790           *                   offset is calculated from this.
    791           * @param   stat - Valid enum value for the item status.
    792           *
    793           * @return  none
    794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    795          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    796          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8C..         MOV     ?V0,R4
    797            osalNvHdr_t hdr;
    798          
    799            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV     A,R2
   \   00000F   24F8         ADD     A,#-0x8
   \   000011   F5..         MOV     ?V2,A
   \   000013   EB           MOV     A,R3
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V3,A
    800            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV     ?V4,#0x8
   \   00001B   75..00       MOV     ?V5,#0x0
   \   00001E   78..         MOV     R0,#?V4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP102_8
   \   000028   AA..         MOV     R2,?V2
   \   00002A   AB..         MOV     R3,?V3
   \   00002C   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
    801          
    802            if ( stat == eNvXfer )
   \   000034   E5..         MOV     A,?V0
   \   000036   7022         JNZ     ??setItem_0
    803            {
    804              hdr.stat = OSAL_NV_ACTIVE;
   \   000038   7406         MOV     A,#0x6
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
    805              /* Write status to flash. Total of 4 bytes written to Flash 
    806               * ( 2 bytes of checksum and 2 bytes of status) 
    807               */
    808              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000041                ; Setup parameters for call to function writeWord
   \   000041   7404         MOV     A,#0x4
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   AC82         MOV     R4,DPL
   \   000048   AD83         MOV     R5,DPH
   \   00004A   E5..         MOV     A,?V2
   \   00004C   2404         ADD     A,#0x4
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   35..         ADDC    A,?V3
   \   000052   FB           MOV     R3,A
   \   000053   A9..         MOV     R1,?V1
   \   000055   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   \   000058   8031         SJMP    ??CrossCallReturnLabel_77
    809            }
    810            else // if ( stat == eNvZero )
    811            {
    812              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    813                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   2403         ADD     A,#0x3
   \   000062   F8           MOV     R0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   3400         ADDC    A,#0x0
   \   000067   F9           MOV     R1,A
   \   000068   E8           MOV     A,R0
   \   000069   12....       LCALL   ?Subroutine30 & 0xFFFF
    814              hdr.id = 0;
   \                     ??CrossCallReturnLabel_46:
   \   00006C   12....       LCALL   ?Subroutine9 & 0xFFFF
    815              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_74:
   \   00006F   AA..         MOV     R2,?V2
   \   000071   AB..         MOV     R3,?V3
   \   000073   A9..         MOV     R1,?V1
   \   000075   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    816              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000078   A8..         MOV     R0,?V1
   \   00007A   E8           MOV     A,R0
   \   00007B   28           ADD     A,R0
   \   00007C   F8           MOV     R0,A
   \   00007D   E4           CLR     A
   \   00007E   33           RLC     A
   \   00007F   F9           MOV     R1,A
   \   000080   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000082   28           ADD     A,R0
   \   000083   F582         MOV     DPL,A
   \   000085   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000087   39           ADDC    A,R1
   \   000088   12....       LCALL   ?Subroutine18 & 0xFFFF
    817            }
    818          }
   \                     ??CrossCallReturnLabel_77:
   \   00008B   7408         MOV     A,#0x8
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090                REQUIRE ?Subroutine3
   \   000090                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2E           ADD     A,R6
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3F           ADDC    A,R7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   54FC         ANL     A,#0xfc
   \   000002   2408         ADD     A,#0x8
   \   000004   FE           MOV     R6,A
   \   000005   E4           CLR     A
   \   000006   39           ADDC    A,R1
   \   000007   FF           MOV     R7,A
   \   000008   22           RET
    819          
    820          /*********************************************************************
    821           * @fn      setChk
    822           *
    823           * @brief   Set the item header checksum given the data buffer offset.
    824           *
    825           * @param   pg - Valid NV page.
    826           * @param   offset - Valid offset into the page of the item data - the header
    827           *                   offset is calculated from this.
    828           * @param   chk - The checksum to set.
    829           *
    830           * @return  The checksum read back.
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine37_0
   \   000002                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0,R1
   \   000017   EA           MOV     A,R2
   \   000018   FE           MOV     R6,A
   \   000019   EB           MOV     A,R3
   \   00001A   FF           MOV     R7,A
    834            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   24FC         ADD     A,#-0x4
   \   00001E   FE           MOV     R6,A
   \   00001F   EF           MOV     A,R7
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   FF           MOV     R7,A
    835            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   AC..         MOV     R4,?XSP + 0
   \   000025   AD..         MOV     R5,?XSP + 1
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
    836            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   75..02       MOV     ?V2,#0x2
   \   000031   75..00       MOV     ?V3,#0x0
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP102_8
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   A9..         MOV     R1,?V0
   \   000044   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
    837          
    838            return chk;
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000055   02....       LJMP    ?Subroutine0 & 0xFFFF
    839          }
    840          
    841          /*********************************************************************
    842           * @fn      calcChkB
    843           *
    844           * @brief   Calculates the data checksum over the 'buf' parameter.
    845           *
    846           * @param   len - Byte count of the data to be checksummed.
    847           * @param   buf - Data buffer to be checksummed.
    848           *
    849           * @return  Calculated checksum of the data bytes.
    850           */
    851          static uint16 calcChkB( uint16 len, uint8 *buf )
    852          {
    853            uint8 fill = len % OSAL_NV_WORD_SIZE;
    854            uint16 chk;
    855          
    856            if ( !buf )
    857            {
    858              chk = len * OSAL_NV_ERASED;
    859            }
    860            else
    861            {
    862              chk = 0;
    863              while ( len-- )
    864              {
    865                chk += *buf++;
    866              }
    867            }
    868          
    869            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    870            if ( fill )
    871            {
    872              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    873            }
    874          
    875            return chk;
    876          }
    877          
    878          /*********************************************************************
    879           * @fn      calcChkF
    880           *
    881           * @brief   Calculates the data checksum by reading the data bytes from NV.
    882           *
    883           * @param   pg - A valid NV Flash page.
    884           * @param   offset - A valid offset into the page.
    885           * @param   len - Byte count of the data to be checksummed.
    886           *
    887           * @return  Calculated checksum of the data bytes.
    888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    889          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    890          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V4,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    891            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0,#0x0
   \   000017   75..00       MOV     ?V1,#0x0
    892          
    893            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V6,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V7,A
   \   000023   7402         MOV     A,#0x2
   \   000025   78..         MOV     R0,#?V6
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   AE..         MOV     R6,?V6
   \   00002C   AF..         MOV     R7,?V7
    894          
    895            while ( len-- )
   \                     ??calcChkF_0:
   \   00002E   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000031   6045         JZ      ??calcChkF_1
    896            {
    897              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    898          
    899              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000033                ; Setup parameters for call to function HalFlashRead
   \   000033   75..04       MOV     ?V6,#0x4
   \   000036   75..00       MOV     ?V7,#0x0
   \   000039   78..         MOV     R0,#?V6
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?XSTACK_DISP102_8
   \   000043   AA..         MOV     R2,?V2
   \   000045   AB..         MOV     R3,?V3
   \   000047   A9..         MOV     R1,?V4
   \   000049   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    900              offset += OSAL_NV_WORD_SIZE;
   \   000051   E5..         MOV     A,?V2
   \   000053   2404         ADD     A,#0x4
   \   000055   F5..         MOV     ?V2,A
   \   000057   E4           CLR     A
   \   000058   35..         ADDC    A,?V3
   \   00005A   F5..         MOV     ?V3,A
    901          
    902              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   00005C   7A00         MOV     R2,#0x0
    903              {
    904                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   00005E   EA           MOV     A,R2
   \   00005F   F8           MOV     R0,A
   \   000060   12....       LCALL   ?Subroutine26 & 0xFFFF
    905              }
   \                     ??CrossCallReturnLabel_37:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   E5..         MOV     A,?V0
   \   000067   28           ADD     A,R0
   \   000068   F5..         MOV     ?V0,A
   \   00006A   E4           CLR     A
   \   00006B   35..         ADDC    A,?V1
   \   00006D   F5..         MOV     ?V1,A
   \   00006F   0A           INC     R2
   \   000070   EA           MOV     A,R2
   \   000071   C3           CLR     C
   \   000072   9404         SUBB    A,#0x4
   \   000074   50B8         JNC     ??calcChkF_0
   \   000076   80E6         SJMP    ??calcChkF_2
    906            }
    907          
    908            return chk;
   \                     ??calcChkF_1:
   \   000078   AA..         MOV     R2,?V0
   \   00007A   AB..         MOV     R3,?V1
   \   00007C   7404         MOV     A,#0x4
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081                REQUIRE ?Subroutine4
   \   000081                ; // Fall through to label ?Subroutine4
    909          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   3583         ADDC    A,DPH
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   1E           DEC     R6
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FF           MOV     R7,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   22           RET
    910          
    911          /*********************************************************************
    912           * @fn      writeWord
    913           *
    914           * @brief   Writes a Flash-WORD to NV.
    915           *
    916           * @param   pg - A valid NV Flash page.
    917           * @param   offset - A valid offset into the page.
    918           * @param   buf - Pointer to source buffer.
    919           *
    920           * @return  none
    921           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    922          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    923          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    924            offset = (offset / HAL_FLASH_WORD_SIZE) +
    925                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    926          
    927            HalFlashWrite(offset, buf, 1);
   \   000007                ; Setup parameters for call to function HalFlashWrite
   \   000007   75..01       MOV     ?V0,#0x1
   \   00000A   75..00       MOV     ?V1,#0x0
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   8A..         MOV     ?V0,R2
   \   000014   8B..         MOV     ?V1,R3
   \   000016   7402         MOV     A,#0x2
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?US_SHR
   \   00001D   8E..         MOV     ?V2,R6
   \   00001F   F5..         MOV     ?V3,A
   \   000021   7409         MOV     A,#0x9
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?S_SHL
   \   000028   E5..         MOV     A,?V0
   \   00002A   2400         ADD     A,#0x0
   \   00002C   FA           MOV     R2,A
   \   00002D   E5..         MOV     A,?V1
   \   00002F   35..         ADDC    A,?V3
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000035   02....       LJMP    ?Subroutine0 & 0xFFFF
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      writeWordM
    932           *
    933           * @brief   Writes multiple Flash-WORDs to NV.
    934           *
    935           * @param   pg - A valid NV Flash page.
    936           * @param   offset - A valid offset into the page.
    937           * @param   buf - Pointer to source buffer.
    938           * @param   cnt - Number of 4-byte blocks to write.
    939           *
    940           * @return  none
    941           */
    942          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    943          {
    944            offset = (offset / HAL_FLASH_WORD_SIZE) +
    945                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    946            HalFlashWrite(offset, buf, cnt);
    947          }
    948          
    949          /*********************************************************************
    950           * @fn      writeWordH
    951           *
    952           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    953           *
    954           * @param   pg - A valid NV Flash page.
    955           * @param   offset - A valid offset into the page.
    956           * @param   buf - Pointer to source buffer.
    957           *
    958           * @return  none
    959           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    960          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    961          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    962            uint8 tmp[4];
    963          
    964            tmp[0] = buf[0];
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    965            tmp[1] = buf[1];
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    966            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    967            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74FF         MOV     A,#-0x1
   \   000035   F0           MOVX    @DPTR,A
    968          
    969            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV     R4,?XSP + 0
   \   000038   AD..         MOV     R5,?XSP + 1
   \   00003A   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    970          }
   \   00003D   7404         MOV     A,#0x4
   \   00003F   02....       LJMP    ?Subroutine1 & 0xFFFF
    971          
    972          /*********************************************************************
    973           * @fn      writeBuf
    974           *
    975           * @brief   Writes a data buffer to NV.
    976           *
    977           * @param   dstPg - A valid NV Flash page.
    978           * @param   offset - A valid offset into the page.
    979           * @param   len  - Byte count of the data to write.
    980           * @param   buf  - The data to write.
    981           *
    982           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V4,R4
   \   000012   8D..         MOV     ?V5,R5
    986            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EE           MOV     A,R6
   \   000015   5403         ANL     A,#0x3
   \   000017   F5..         MOV     ?V0,A
   \   000019   7416         MOV     A,#0x16
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V3,A
    987            uint8 tmp[OSAL_NV_WORD_SIZE];
    988          
    989            if ( rem )
   \   000025   E5..         MOV     A,?V0
   \   000027   6060         JZ      ??writeBuf_0
    990            {
    991              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000029   74FC         MOV     A,#-0x4
   \   00002B   5E           ANL     A,R6
   \   00002C   FE           MOV     R6,A
    992              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00002D                ; Setup parameters for call to function HalFlashRead
   \   00002D   75..04       MOV     ?V6,#0x4
   \   000030   75..00       MOV     ?V7,#0x0
   \   000033   78..         MOV     R0,#?V6
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP102_8
   \   00003D   EE           MOV     A,R6
   \   00003E   FA           MOV     R2,A
   \   00003F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??writeBuf_1:
   \   000047   E5..         MOV     A,?V4
   \   000049   45..         ORL     A,?V5
   \   00004B   6028         JZ      ??writeBuf_2
    993          
    994              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    995              {
    996                tmp[rem++] = *buf++;
   \   00004D   85..82       MOV     DPL,?V2
   \   000050   85..83       MOV     DPH,?V3
   \   000053   E0           MOVX    A,@DPTR
   \   000054   C0E0         PUSH    A
   \   000056   A8..         MOV     R0,?V0
   \   000058   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00005B   D0E0         POP     A
   \   00005D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000060   05..         INC     ?V0
    997                len--;
   \   000062   E5..         MOV     A,?V4
   \   000064   24FF         ADD     A,#-0x1
   \   000066   F5..         MOV     ?V4,A
   \   000068   E5..         MOV     A,?V5
   \   00006A   34FF         ADDC    A,#-0x1
   \   00006C   F5..         MOV     ?V5,A
    998              }
   \   00006E   E5..         MOV     A,?V0
   \   000070   C3           CLR     C
   \   000071   9404         SUBB    A,#0x4
   \   000073   40D2         JC      ??writeBuf_1
    999          
   1000              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   000075                ; Setup parameters for call to function writeWord
   \   000075   AC..         MOV     R4,?XSP + 0
   \   000077   AD..         MOV     R5,?XSP + 1
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FB           MOV     R3,A
   \   00007D   A9..         MOV     R1,?V1
   \   00007F   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1001              dstOff += OSAL_NV_WORD_SIZE;
   \   000082   EE           MOV     A,R6
   \   000083   2404         ADD     A,#0x4
   \   000085   FE           MOV     R6,A
   \   000086   E4           CLR     A
   \   000087   3F           ADDC    A,R7
   \   000088   FF           MOV     R7,A
   1002            }
   1003          
   1004            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   000089   E5..         MOV     A,?V4
   \   00008B   5403         ANL     A,#0x3
   \   00008D   F5..         MOV     ?V0,A
   1005            len /= OSAL_NV_WORD_SIZE;
   \   00008F   85....       MOV     ?V6,?V4
   \   000092   85....       MOV     ?V7,?V5
   \   000095   7402         MOV     A,#0x2
   \   000097   78..         MOV     R0,#?V6
   \   000099   12....       LCALL   ?US_SHR
   \   00009C   85....       MOV     ?V4,?V6
   \   00009F   85....       MOV     ?V5,?V7
   1006          
   1007            if ( len )
   \   0000A2   E5..         MOV     A,?V4
   \   0000A4   45..         ORL     A,?V5
   \   0000A6   6046         JZ      ??CrossCallReturnLabel_45
   1008            {
   1009              writeWordM( dstPg, dstOff, buf, len );
   \   0000A8                ; Setup parameters for call to function HalFlashWrite
   \   0000A8   78..         MOV     R0,#?V4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   AC..         MOV     R4,?V2
   \   0000AF   AD..         MOV     R5,?V3
   \   0000B1   8E..         MOV     ?V8,R6
   \   0000B3   8F..         MOV     ?V9,R7
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   78..         MOV     R0,#?V8
   \   0000B9   12....       LCALL   ?US_SHR
   \   0000BC   85....       MOV     ?V6,?V1
   \   0000BF   F5..         MOV     ?V7,A
   \   0000C1   7409         MOV     A,#0x9
   \   0000C3   78..         MOV     R0,#?V6
   \   0000C5   12....       LCALL   ?S_SHL
   \   0000C8   E5..         MOV     A,?V8
   \   0000CA   2400         ADD     A,#0x0
   \   0000CC   FA           MOV     R2,A
   \   0000CD   E5..         MOV     A,?V9
   \   0000CF   35..         ADDC    A,?V7
   \   0000D1   FB           MOV     R3,A
   \   0000D2   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   1010              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000DA   7402         MOV     A,#0x2
   \   0000DC   78..         MOV     R0,#?V4
   \   0000DE   12....       LCALL   ?S_SHL
   \   0000E1   A8..         MOV     R0,?V4
   \   0000E3   A9..         MOV     R1,?V5
   \   0000E5   EE           MOV     A,R6
   \   0000E6   28           ADD     A,R0
   \   0000E7   FE           MOV     R6,A
   \   0000E8   EF           MOV     A,R7
   \   0000E9   39           ADDC    A,R1
   \   0000EA   FF           MOV     R7,A
   1011              buf += OSAL_NV_WORD_SIZE * len;
   \   0000EB   12....       LCALL   ?Subroutine29 & 0xFFFF
   1012            }
   1013          
   1014            if ( rem )
   \                     ??CrossCallReturnLabel_45:
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   6051         JZ      ??writeBuf_3
   1015            {
   1016              uint8 idx = 0;
   \   0000F2   75..00       MOV     ?V4,#0x0
   1017              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000F5                ; Setup parameters for call to function HalFlashRead
   \   0000F5   75..04       MOV     ?V6,#0x4
   \   0000F8   75..00       MOV     ?V7,#0x0
   \   0000FB   78..         MOV     R0,#?V6
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?XSTACK_DISP102_8
   \   000105   EE           MOV     A,R6
   \   000106   FA           MOV     R2,A
   \   000107   EF           MOV     A,R7
   \   000108   FB           MOV     R3,A
   \   000109   A9..         MOV     R1,?V1
   \   00010B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00010E   7402         MOV     A,#0x2
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   8015         SJMP    ??writeBuf_4
   1018              while ( rem-- )
   1019              {
   1020                tmp[idx++] = *buf++;
   \                     ??writeBuf_5:
   \   000115   85..82       MOV     DPL,?V2
   \   000118   85..83       MOV     DPH,?V3
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C0E0         PUSH    A
   \   00011E   A8..         MOV     R0,?V4
   \   000120   12....       LCALL   ?Subroutine26 & 0xFFFF
   1021              }
   \                     ??CrossCallReturnLabel_39:
   \   000123   D0E0         POP     A
   \   000125   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000128   05..         INC     ?V4
   \                     ??writeBuf_4:
   \   00012A   85....       MOV     ?V5,?V0
   \   00012D   74FF         MOV     A,#-0x1
   \   00012F   25..         ADD     A,?V5
   \   000131   F5..         MOV     ?V0,A
   \   000133   04           INC     A
   \   000134   70DF         JNZ     ??writeBuf_5
   1022              writeWord( dstPg, dstOff, tmp );
   \   000136                ; Setup parameters for call to function writeWord
   \   000136   AC..         MOV     R4,?XSP + 0
   \   000138   AD..         MOV     R5,?XSP + 1
   \   00013A   EE           MOV     A,R6
   \   00013B   FA           MOV     R2,A
   \   00013C   EF           MOV     A,R7
   \   00013D   FB           MOV     R3,A
   \   00013E   A9..         MOV     R1,?V1
   \   000140   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1023            }
   1024          }
   \                     ??writeBuf_3:
   \   000143   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   8582..       MOV     ?V2,DPL
   \   00000B   8583..       MOV     ?V3,DPH
   \   00000E   22           RET
   1025          
   1026          /*********************************************************************
   1027           * @fn      xferBuf
   1028           *
   1029           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V6,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   8C..         MOV     ?V3,R4
   \   000012   7416         MOV     A,#0x16
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine19 & 0xFFFF
   1035            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_21:
   \   00001A   E5..         MOV     A,?V0
   \   00001C   5403         ANL     A,#0x3
   \   00001E   F5..         MOV     ?V2,A
   \   000020   7418         MOV     A,#0x18
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FE           MOV     R6,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FF           MOV     R7,A
   1036            uint8 tmp[OSAL_NV_WORD_SIZE];
   1037          
   1038            if ( rem )
   \   00002A   E5..         MOV     A,?V2
   \   00002C   6072         JZ      ??CrossCallReturnLabel_52
   1039            {
   1040              dstOff -= rem;
   \   00002E   F8           MOV     R0,A
   \   00002F   C3           CLR     C
   \   000030   E5..         MOV     A,?V0
   \   000032   98           SUBB    A,R0
   \   000033   F5..         MOV     ?V0,A
   \   000035   E5..         MOV     A,?V1
   \   000037   9400         SUBB    A,#0x0
   \   000039   F5..         MOV     ?V1,A
   1041              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00003B                ; Setup parameters for call to function HalFlashRead
   \   00003B   75..04       MOV     ?V8,#0x4
   \   00003E   75..00       MOV     ?V9,#0x0
   \   000041   78..         MOV     R0,#?V8
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?XSTACK_DISP102_8
   \   00004B   AA..         MOV     R2,?V0
   \   00004D   AB..         MOV     R3,?V1
   \   00004F   A9..         MOV     R1,?V3
   \   000051   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   6033         JZ      ??xferBuf_1
   1042          
   1043              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1044              {
   1045                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   00005D                ; Setup parameters for call to function HalFlashRead
   \   00005D   75..01       MOV     ?V8,#0x1
   \   000060   78..         MOV     R0,#?V8
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   A8..         MOV     R0,?V2
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00006F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   1046                srcOff++;
   \   000077   05..         INC     ?V4
   \   000079   E5..         MOV     A,?V4
   \   00007B   7002         JNZ     ??xferBuf_2
   \   00007D   05..         INC     ?V5
   1047                rem++;
   \                     ??xferBuf_2:
   \   00007F   05..         INC     ?V2
   1048                len--;
   \   000081   EE           MOV     A,R6
   \   000082   24FF         ADD     A,#-0x1
   \   000084   1E           DEC     R6
   \   000085   EF           MOV     A,R7
   \   000086   34FF         ADDC    A,#-0x1
   \   000088   FF           MOV     R7,A
   1049              }
   \   000089   E5..         MOV     A,?V2
   \   00008B   C3           CLR     C
   \   00008C   9404         SUBB    A,#0x4
   \   00008E   40C9         JC      ??xferBuf_0
   1050          
   1051              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   000090                ; Setup parameters for call to function writeWord
   \   000090   AC..         MOV     R4,?XSP + 0
   \   000092   AD..         MOV     R5,?XSP + 1
   \   000094   AA..         MOV     R2,?V0
   \   000096   AB..         MOV     R3,?V1
   \   000098   A9..         MOV     R1,?V3
   \   00009A   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1052              dstOff += OSAL_NV_WORD_SIZE;
   \   00009D   12....       LCALL   ?Subroutine32 & 0xFFFF
   1053            }
   1054          
   1055            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_52:
   \   0000A0   EE           MOV     A,R6
   \   0000A1   5403         ANL     A,#0x3
   \   0000A3   F5..         MOV     ?V2,A
   1056            len /= OSAL_NV_WORD_SIZE;
   \   0000A5   8E..         MOV     ?V8,R6
   \   0000A7   8F..         MOV     ?V9,R7
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   78..         MOV     R0,#?V8
   \   0000AD   12....       LCALL   ?US_SHR
   \   0000B0   AE..         MOV     R6,?V8
   \   0000B2   AF..         MOV     R7,?V9
   \   0000B4   8039         SJMP    ??CrossCallReturnLabel_53
   1057          
   1058            while ( len-- )
   1059            {
   1060              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000B6                ; Setup parameters for call to function HalFlashRead
   \   0000B6   75..04       MOV     ?V8,#0x4
   \   0000B9   75..00       MOV     ?V9,#0x0
   \   0000BC   78..         MOV     R0,#?V8
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   7402         MOV     A,#0x2
   \   0000C3   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C6   AA..         MOV     R2,?V4
   \   0000C8   AB..         MOV     R3,?V5
   \   0000CA   A9..         MOV     R1,?V6
   \   0000CC   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
   1061              srcOff += OSAL_NV_WORD_SIZE;
   \   0000D4   E5..         MOV     A,?V4
   \   0000D6   2404         ADD     A,#0x4
   \   0000D8   F5..         MOV     ?V4,A
   \   0000DA   E4           CLR     A
   \   0000DB   35..         ADDC    A,?V5
   \   0000DD   F5..         MOV     ?V5,A
   1062              writeWord( dstPg, dstOff, tmp );
   \   0000DF                ; Setup parameters for call to function writeWord
   \   0000DF   AC..         MOV     R4,?XSP + 0
   \   0000E1   AD..         MOV     R5,?XSP + 1
   \   0000E3   AA..         MOV     R2,?V0
   \   0000E5   AB..         MOV     R3,?V1
   \   0000E7   A9..         MOV     R1,?V3
   \   0000E9   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1063              dstOff += OSAL_NV_WORD_SIZE;
   \   0000EC   12....       LCALL   ?Subroutine32 & 0xFFFF
   1064            }
   \                     ??CrossCallReturnLabel_53:
   \   0000EF   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000F2   70C2         JNZ     ??xferBuf_3
   1065          
   1066            if ( rem )
   \   0000F4   E5..         MOV     A,?V2
   \   0000F6   605B         JZ      ??xferBuf_4
   1067            {
   1068              uint8 idx = 0;
   \   0000F8   7E00         MOV     R6,#0x0
   1069              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000FA                ; Setup parameters for call to function HalFlashRead
   \   0000FA   75..04       MOV     ?V8,#0x4
   \   0000FD   8E..         MOV     ?V9,R6
   \   0000FF   78..         MOV     R0,#?V8
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000104   7402         MOV     A,#0x2
   \   000106   12....       LCALL   ?XSTACK_DISP102_8
   \   000109   AA..         MOV     R2,?V0
   \   00010B   AB..         MOV     R3,?V1
   \   00010D   A9..         MOV     R1,?V3
   \   00010F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000112   7402         MOV     A,#0x2
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   8023         SJMP    ??xferBuf_5
   1070              while ( rem-- )
   1071              {
   1072                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   000119                ; Setup parameters for call to function HalFlashRead
   \   000119   75..01       MOV     ?V8,#0x1
   \   00011C   78..         MOV     R0,#?V8
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   EE           MOV     A,R6
   \   000122   F8           MOV     R0,A
   \   000123   7402         MOV     A,#0x2
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00012B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00012E   7402         MOV     A,#0x2
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   1073                srcOff++;
   \   000133   05..         INC     ?V4
   \   000135   E5..         MOV     A,?V4
   \   000137   7002         JNZ     ??xferBuf_7
   \   000139   05..         INC     ?V5
   1074                idx++;
   \                     ??xferBuf_7:
   \   00013B   0E           INC     R6
   1075              }
   \                     ??xferBuf_5:
   \   00013C   AF..         MOV     R7,?V2
   \   00013E   74FF         MOV     A,#-0x1
   \   000140   2F           ADD     A,R7
   \   000141   F5..         MOV     ?V2,A
   \   000143   04           INC     A
   \   000144   70D3         JNZ     ??xferBuf_6
   1076              writeWord( dstPg, dstOff, tmp );
   \   000146                ; Setup parameters for call to function writeWord
   \   000146   AC..         MOV     R4,?XSP + 0
   \   000148   AD..         MOV     R5,?XSP + 1
   \   00014A   AA..         MOV     R2,?V0
   \   00014C   AB..         MOV     R3,?V1
   \   00014E   A9..         MOV     R1,?V3
   \   000150   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1077            }
   1078          }
   \                     ??xferBuf_4:
   \   000153   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E5..         MOV     A,?V0
   \   000002   2404         ADD     A,#0x4
   \   000004   F5..         MOV     ?V0,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F5..         MOV     ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3583         ADDC    A,DPH
   \   000007   FD           MOV     R5,A
   \   000008   AA..         MOV     R2,?V4
   \   00000A   AB..         MOV     R3,?V5
   \   00000C   A9..         MOV     R1,?V6
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET
   1079          
   1080          /*********************************************************************
   1081           * @fn      writeItem
   1082           *
   1083           * @brief   Writes an item header/data combo to the specified NV page.
   1084           *
   1085           * @param   pg - Valid NV Flash page.
   1086           * @param   id - Valid NV item Id.
   1087           * @param   len  - Byte count of the data to write.
   1088           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1089           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1090           *
   1091           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V4,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   1095            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000014   E9           MOV     A,R1
   \   000015   29           ADD     A,R1
   \   000016   F5..         MOV     ?V0,A
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   F5..         MOV     ?V1,A
   \   00001C   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00001E   25..         ADD     A,?V0
   \   000020   F5..         MOV     ?V8,A
   \   000022   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000024   35..         ADDC    A,?V1
   \   000026   F5..         MOV     ?V9,A
   \   000028   85..82       MOV     DPL,?V8
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   1096            uint8 rtrn = FALSE;
   \   000034   75..00       MOV     ?V5,#0x0
   1097            osalNvHdr_t hdr;
   1098          
   1099            hdr.id = id;
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   EA           MOV     A,R2
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EB           MOV     A,R3
   \   000041   F0           MOVX    @DPTR,A
   1100            hdr.len = len;
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   EE           MOV     A,R6
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   EF           MOV     A,R7
   \   00004B   F0           MOVX    @DPTR,A
   1101          
   1102            writeWord( pg, offset, (uint8 *)&hdr );
   \   00004C                ; Setup parameters for call to function writeWord
   \   00004C   AC..         MOV     R4,?XSP + 0
   \   00004E   AD..         MOV     R5,?XSP + 1
   \   000050   AA..         MOV     R2,?V2
   \   000052   AB..         MOV     R3,?V3
   \   000054   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1103            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000057                ; Setup parameters for call to function HalFlashRead
   \   000057   75..08       MOV     ?V10,#0x8
   \   00005A   75..00       MOV     ?V11,#0x0
   \   00005D   78..         MOV     R0,#?V10
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP102_8
   \   000067   AA..         MOV     R2,?V2
   \   000069   AB..         MOV     R3,?V3
   \   00006B   A9..         MOV     R1,?V4
   \   00006D   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000070   7402         MOV     A,#0x2
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   1104          
   1105            if ( (hdr.id == id) && (hdr.len == len) )
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   E0           MOVX    A,@DPTR
   \   000084   65..         XRL     A,?V6
   \   000086   7004         JNZ     ??writeItem_0
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   65..         XRL     A,?V7
   \                     ??writeItem_0:
   \   00008C   6003         JZ      $+5
   \   00008E   02....       LJMP    ??writeItem_1 & 0xFFFF
   \   000091   EE           MOV     A,R6
   \   000092   68           XRL     A,R0
   \   000093   7002         JNZ     ??writeItem_2
   \   000095   EF           MOV     A,R7
   \   000096   69           XRL     A,R1
   \                     ??writeItem_2:
   \   000097   6003         JZ      $+5
   \   000099   02....       LJMP    ??writeItem_1 & 0xFFFF
   1106            {
   1107              if ( flag )
   \   00009C   741E         MOV     A,#0x1e
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   7003         JNZ     $+5
   \   0000A4   02....       LJMP    ??writeItem_3 & 0xFFFF
   \   0000A7   741C         MOV     A,#0x1c
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine19 & 0xFFFF
   1108              {
   1109                hdr.chk = calcChkB( len, buf );
   \                     ??CrossCallReturnLabel_22:
   \   0000AF   85..82       MOV     DPL,?V0
   \   0000B2   F583         MOV     DPH,A
   \   0000B4   EE           MOV     A,R6
   \   0000B5   F8           MOV     R0,A
   \   0000B6   EF           MOV     A,R7
   \   0000B7   F9           MOV     R1,A
   \   0000B8   E8           MOV     A,R0
   \   0000B9   5403         ANL     A,#0x3
   \   0000BB   FC           MOV     R4,A
   \   0000BC   E582         MOV     A,DPL
   \   0000BE   4583         ORL     A,DPH
   \   0000C0   7015         JNZ     ??writeItem_4
   \   0000C2   E8           MOV     A,R0
   \   0000C3   75F0FF       MOV     B,#-0x1
   \   0000C6   A4           MUL     AB
   \   0000C7   F8           MOV     R0,A
   \   0000C8   AAF0         MOV     R2,B
   \   0000CA   75F0FF       MOV     B,#-0x1
   \   0000CD   E9           MOV     A,R1
   \   0000CE   A4           MUL     AB
   \   0000CF   2A           ADD     A,R2
   \   0000D0   F9           MOV     R1,A
   \   0000D1   E8           MOV     A,R0
   \   0000D2   FA           MOV     R2,A
   \   0000D3   E9           MOV     A,R1
   \   0000D4   FB           MOV     R3,A
   \   0000D5   8025         SJMP    ??writeItem_5
   \                     ??writeItem_4:
   \   0000D7   7A00         MOV     R2,#0x0
   \   0000D9   7B00         MOV     R3,#0x0
   \   0000DB   800B         SJMP    ??writeItem_6
   \                     ??writeItem_7:
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F5..         MOV     ?V6,A
   \   0000E0   EA           MOV     A,R2
   \   0000E1   25..         ADD     A,?V6
   \   0000E3   FA           MOV     R2,A
   \   0000E4   E4           CLR     A
   \   0000E5   3B           ADDC    A,R3
   \   0000E6   FB           MOV     R3,A
   \   0000E7   A3           INC     DPTR
   \                     ??writeItem_6:
   \   0000E8   88..         MOV     ?V6,R0
   \   0000EA   89..         MOV     ?V7,R1
   \   0000EC   E5..         MOV     A,?V6
   \   0000EE   24FF         ADD     A,#-0x1
   \   0000F0   18           DEC     R0
   \   0000F1   E5..         MOV     A,?V7
   \   0000F3   34FF         ADDC    A,#-0x1
   \   0000F5   F9           MOV     R1,A
   \   0000F6   E5..         MOV     A,?V6
   \   0000F8   45..         ORL     A,?V7
   \   0000FA   70E1         JNZ     ??writeItem_7
   \                     ??writeItem_5:
   \   0000FC   EC           MOV     A,R4
   \   0000FD   601E         JZ      ??writeItem_8
   \   0000FF   F8           MOV     R0,A
   \   000100   7404         MOV     A,#0x4
   \   000102   C3           CLR     C
   \   000103   98           SUBB    A,R0
   \   000104   F8           MOV     R0,A
   \   000105   95E0         SUBB    A,0xE0 /* A   */
   \   000107   F9           MOV     R1,A
   \   000108   E8           MOV     A,R0
   \   000109   75F0FF       MOV     B,#-0x1
   \   00010C   A4           MUL     AB
   \   00010D   F8           MOV     R0,A
   \   00010E   ACF0         MOV     R4,B
   \   000110   75F0FF       MOV     B,#-0x1
   \   000113   E9           MOV     A,R1
   \   000114   A4           MUL     AB
   \   000115   2C           ADD     A,R4
   \   000116   F9           MOV     R1,A
   \   000117   EA           MOV     A,R2
   \   000118   28           ADD     A,R0
   \   000119   FA           MOV     R2,A
   \   00011A   EB           MOV     A,R3
   \   00011B   39           ADDC    A,R1
   \   00011C   FB           MOV     R3,A
   \                     ??writeItem_8:
   \   00011D   7404         MOV     A,#0x4
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   EA           MOV     A,R2
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A3           INC     DPTR
   \   000125   EB           MOV     A,R3
   \   000126   F0           MOVX    @DPTR,A
   1110          
   1111                offset += OSAL_NV_HDR_SIZE;
   \   000127   E5..         MOV     A,?V2
   \   000129   2408         ADD     A,#0x8
   \   00012B   F5..         MOV     ?V2,A
   \   00012D   E4           CLR     A
   \   00012E   35..         ADDC    A,?V3
   \   000130   F5..         MOV     ?V3,A
   1112                if ( buf != NULL )
   \   000132   E5..         MOV     A,?V0
   \   000134   45..         ORL     A,?V1
   \   000136   6017         JZ      ??writeItem_9
   1113                {
   1114                  writeBuf( pg, offset, len, buf );
   \   000138                ; Setup parameters for call to function writeBuf
   \   000138   78..         MOV     R0,#?V0
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013D   EE           MOV     A,R6
   \   00013E   FC           MOV     R4,A
   \   00013F   EF           MOV     A,R7
   \   000140   FD           MOV     R5,A
   \   000141   AA..         MOV     R2,?V2
   \   000143   AB..         MOV     R3,?V3
   \   000145   A9..         MOV     R1,?V4
   \   000147   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   1115                }
   1116          
   1117                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_9:
   \   00014F                ; Setup parameters for call to function calcChkF
   \   00014F   EE           MOV     A,R6
   \   000150   FC           MOV     R4,A
   \   000151   EF           MOV     A,R7
   \   000152   FD           MOV     R5,A
   \   000153   AA..         MOV     R2,?V2
   \   000155   AB..         MOV     R3,?V3
   \   000157   A9..         MOV     R1,?V4
   \   000159   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   00015C   7404         MOV     A,#0x4
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000164   7002         JNZ     ??writeItem_10
   \   000166   EB           MOV     A,R3
   \   000167   6D           XRL     A,R5
   \                     ??writeItem_10:
   \   000168   7034         JNZ     ??writeItem_11
   1118                {
   1119                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   00016A                ; Setup parameters for call to function setChk
   \   00016A   AA..         MOV     R2,?V2
   \   00016C   AB..         MOV     R3,?V3
   \   00016E   A9..         MOV     R1,?V4
   \   000170   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   000173   8A..         MOV     ?V0,R2
   \   000175   8B..         MOV     ?V1,R3
   \   000177   A8..         MOV     R0,?V0
   \   000179   A9..         MOV     R1,?V1
   \   00017B   7404         MOV     A,#0x4
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   E0           MOVX    A,@DPTR
   \   000181   68           XRL     A,R0
   \   000182   7003         JNZ     ??writeItem_12
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   69           XRL     A,R1
   \                     ??writeItem_12:
   \   000187   7015         JNZ     ??writeItem_11
   1120                  {
   1121                    hotItemUpdate(pg, offset, hdr.id);
   \   000189                ; Setup parameters for call to function hotItemUpdate
   \   000189   85..82       MOV     DPL,?XSP + 0
   \   00018C   85..83       MOV     DPH,?XSP + 1
   \   00018F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000192   AA..         MOV     R2,?V2
   \   000194   AB..         MOV     R3,?V3
   \   000196   A9..         MOV     R1,?V4
   \   000198   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1122                    rtrn = TRUE;
   1123                  }
   1124                }
   1125              }
   1126              else
   1127              {
   1128                rtrn = TRUE;
   \                     ??writeItem_3:
   \   00019B   75..01       MOV     ?V5,#0x1
   1129              }
   1130          
   1131              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_11:
   \   00019E   7402         MOV     A,#0x2
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   12....       LCALL   ?Subroutine23 & 0xFFFF
   1132            }
   \                     ??CrossCallReturnLabel_33:
   \   0001A6   C3           CLR     C
   \   0001A7   E8           MOV     A,R0
   \   0001A8   94F4         SUBB    A,#-0xc
   \   0001AA   E9           MOV     A,R1
   \   0001AB   94FF         SUBB    A,#-0x1
   \   0001AD   4006         JC      ??writeItem_13
   \   0001AF   7EFC         MOV     R6,#-0x4
   \   0001B1   7FFF         MOV     R7,#-0x1
   \   0001B3   8049         SJMP    ??CrossCallReturnLabel_78
   \                     ??writeItem_13:
   \   0001B5   E8           MOV     A,R0
   \   0001B6   2403         ADD     A,#0x3
   \   0001B8   5001         JNC     ??writeItem_14
   \   0001BA   09           INC     R1
   \                     ??writeItem_14:
   \   0001BB   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0001BE   803E         SJMP    ??CrossCallReturnLabel_78
   1133            else
   1134            {
   1135              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001C0   C3           CLR     C
   \   0001C1   E8           MOV     A,R0
   \   0001C2   94F4         SUBB    A,#-0xc
   \   0001C4   E9           MOV     A,R1
   \   0001C5   94FF         SUBB    A,#-0x1
   \   0001C7   4006         JC      ??writeItem_15
   \   0001C9   7EFC         MOV     R6,#-0x4
   \   0001CB   7FFF         MOV     R7,#-0x1
   \   0001CD   8009         SJMP    ??CrossCallReturnLabel_48
   \                     ??writeItem_15:
   \   0001CF   E8           MOV     A,R0
   \   0001D0   2403         ADD     A,#0x3
   \   0001D2   5001         JNC     ??writeItem_16
   \   0001D4   09           INC     R1
   \                     ??writeItem_16:
   \   0001D5   12....       LCALL   ?Subroutine30 & 0xFFFF
   1136          
   1137              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_48:
   \   0001D8   85..82       MOV     DPL,?V8
   \   0001DB   85..83       MOV     DPH,?V9
   \   0001DE   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001E1   F8           MOV     R0,A
   \   0001E2   7408         MOV     A,#0x8
   \   0001E4   99           SUBB    A,R1
   \   0001E5   F9           MOV     R1,A
   \   0001E6   C3           CLR     C
   \   0001E7   E8           MOV     A,R0
   \   0001E8   9E           SUBB    A,R6
   \   0001E9   E9           MOV     A,R1
   \   0001EA   9F           SUBB    A,R7
   \   0001EB   5004         JNC     ??writeItem_17
   1138              {
   1139                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001ED   E8           MOV     A,R0
   \   0001EE   FE           MOV     R6,A
   \   0001EF   E9           MOV     A,R1
   \   0001F0   FF           MOV     R7,A
   1140              }
   1141          
   1142              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_17:
   \   0001F1   74..         MOV     A,#(pgLost + 14) & 0xff
   \   0001F3   25..         ADD     A,?V0
   \   0001F5   F582         MOV     DPL,A
   \   0001F7   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   0001F9   35..         ADDC    A,?V1
   \   0001FB   12....       LCALL   ?Subroutine18 & 0xFFFF
   1143            }
   1144            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_78:
   \   0001FE   85..82       MOV     DPL,?V8
   \   000201   85..83       MOV     DPH,?V9
   \   000204   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   1145          
   1146            return rtrn;
   \                     ??CrossCallReturnLabel_76:
   \   000207   A9..         MOV     R1,?V5
   \   000209   7408         MOV     A,#0x8
   \   00020B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020E   7F0C         MOV     R7,#0xc
   \   000210   02....       LJMP    ?BANKED_LEAVE_XDATA
   1147          }
   1148          
   1149          /*********************************************************************
   1150           * @fn      hotItem
   1151           *
   1152           * @brief   Look for the parameter 'id' in the hot items array.
   1153           *
   1154           * @param   id - A valid NV item Id.
   1155           *
   1156           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1158          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1159          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1160            uint8 hotIdx;
   1161          
   1162            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV     R1,#0x0
   1163            {
   1164              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV     A,R1
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   FC           MOV     R4,A
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   FD           MOV     R5,A
   \   00000D   74..         MOV     A,#hotIds & 0xff
   \   00000F   2C           ADD     A,R4
   \   000010   F582         MOV     DPL,A
   \   000012   74..         MOV     A,#(hotIds >> 8) & 0xff
   \   000014   3D           ADDC    A,R5
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6A           XRL     A,R2
   \   000019   7003         JNZ     ??hotItem_1
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6B           XRL     A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ      ??hotItem_2
   1165              {
   1166                break;
   1167              }
   1168            }
   \   000020   09           INC     R1
   \   000021   E9           MOV     A,R1
   \   000022   C3           CLR     C
   \   000023   9403         SUBB    A,#0x3
   \   000025   40DF         JC      ??hotItem_0
   1169          
   1170            return hotIdx;
   \                     ??hotItem_2:
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1171          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1172          
   1173          /*********************************************************************
   1174           * @fn      hotItemUpdate
   1175           *
   1176           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1177           *
   1178           * @param   pg - The new NV page corresponding to the hot item.
   1179           * @param   off - The new NV page offset corresponding to the hot item.
   1180           * @param   id - A valid NV item Id.
   1181           *
   1182           * @return  none
   1183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1184          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FA           MOV     R2,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FB           MOV     R3,A
   1186            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000012   E9           MOV     A,R1
   \   000013   F8           MOV     R0,A
   1187          
   1188            if (hotIdx < OSAL_NV_MAX_HOT)
   \   000014   C3           CLR     C
   \   000015   9403         SUBB    A,#0x3
   \   000017   500E         JNC     ??hotItemUpdate_0
   1189            {
   1190              {
   1191                hotPg[hotIdx] = pg;
   \   000019   12....       LCALL   ?Subroutine33 & 0xFFFF
   1192                hotOff[hotIdx] = off;
   1193              }
   1194            }
   \                     ??CrossCallReturnLabel_54:
   \   00001C   EE           MOV     A,R6
   \   00001D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000020   E5..         MOV     A,?V0
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V1
   \   000026   F0           MOVX    @DPTR,A
   1195          }
   \                     ??hotItemUpdate_0:
   \   000027                REQUIRE ?Subroutine6
   \   000027                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   74..         MOV     A,#hotPg & 0xff
   \   000002   29           ADD     A,R1
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#(hotPg >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   29           ADD     A,R1
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   33           RLC     A
   \   000004   F9           MOV     R1,A
   \   000005   74..         MOV     A,#hotOff & 0xff
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   00000C   39           ADDC    A,R1
   \   00000D   F583         MOV     DPH,A
   \   00000F   22           RET
   1196          
   1197          /*********************************************************************
   1198           * @fn      osal_nv_init
   1199           *
   1200           * @brief   Initialize NV service.
   1201           *
   1202           * @param   p - Not used.
   1203           *
   1204           * @return  none
   1205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1206          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1207          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1208            (void)p;  // Suppress Lint warning.
   1209            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   `??initNV::?relay`   ; Banked call to: initNV
   1210          }
   \   000007   80..         SJMP    ?Subroutine5
   1211          
   1212          /*********************************************************************
   1213           * @fn      osal_nv_item_init
   1214           *
   1215           * @brief   If the NV item does not already exist, it is created and
   1216           *          initialized with the data passed to the function, if any.
   1217           *          This function must be called before calling osal_nv_read() or
   1218           *          osal_nv_write().
   1219           *
   1220           * @param   id  - Valid NV item Id.
   1221           * @param   len - Item length.
   1222           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1223           *
   1224           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1225           *          SUCCESS        - Id already existed, no action taken.
   1226           *          NV_OPER_FAILED - Failure to find or create Id.
   1227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1228          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1229          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1230            uint16 offset;
   1231          
   1232            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV     R1,#0x4e
   \   00000F   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV     A,R1
   \   000013   603C         JZ      ??osal_nv_item_init_0
   1233            {
   1234              return NV_OPER_FAILED;
   1235            }
   1236            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \   000015                ; Setup parameters for call to function findItem
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   6010         JZ      ??osal_nv_item_init_1
   1237            {
   1238              // Re-populate the NV hot item data if the corresponding items are already established.
   1239              hotItemUpdate(findPg, offset, id);
   \   000020                ; Setup parameters for call to function hotItemUpdate
   \   000020   EE           MOV     A,R6
   \   000021   FC           MOV     R4,A
   \   000022   EF           MOV     A,R7
   \   000023   FD           MOV     R5,A
   \   000024   90....       MOV     DPTR,#findPg
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1240          
   1241              return SUCCESS;
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   8023         SJMP    ??osal_nv_item_init_2
   1242            }
   1243            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_1:
   \   000030                ; Setup parameters for call to function initItem
   \   000030   740C         MOV     A,#0xc
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000038   AC..         MOV     R4,?V0
   \   00003A   AD..         MOV     R5,?V1
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   7901         MOV     R1,#0x1
   \   000042   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   6004         JZ      ??osal_nv_item_init_0
   1244            {
   1245              return NV_ITEM_UNINIT;
   \   00004D   7909         MOV     R1,#0x9
   \   00004F   8002         SJMP    ??osal_nv_item_init_2
   1246            }
   1247            else
   1248            {
   1249              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_0:
   \   000051   790A         MOV     R1,#0xa
   1250            }
   \                     ??osal_nv_item_init_2:
   \   000053   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1251          }
   1252          
   1253          /*********************************************************************
   1254           * @fn      osal_nv_item_len
   1255           *
   1256           * @brief   Get the data length of the item stored in NV memory.
   1257           *
   1258           * @param   id  - Valid NV item Id.
   1259           *
   1260           * @return  Item length, if found; zero otherwise.
   1261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1262          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1264            osalNvHdr_t hdr;
   1265            uint16 offset;
   1266            uint8 hotIdx;
   1267          
   1268            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000011   E9           MOV     A,R1
   \   000012   F8           MOV     R0,A
   \   000013   C3           CLR     C
   \   000014   9403         SUBB    A,#0x3
   \   000016   5042         JNC     ??osal_nv_item_len_0
   1269            {
   1270              findPg = hotPg[hotIdx];
   \   000018   12....       LCALL   ?Subroutine33 & 0xFFFF
   1271              offset = hotOff[hotIdx];
   1272            }
   \                     ??CrossCallReturnLabel_55:
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   90....       MOV     DPTR,#findPg
   \   00001F   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000022   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   1273            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1274            {
   1275              return 0;
   1276            }
   1277          
   1278            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_81:
   \   000025                ; Setup parameters for call to function HalFlashRead
   \   000025   75..08       MOV     ?V0,#0x8
   \   000028   75..00       MOV     ?V1,#0x0
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?XSTACK_DISP102_8
   \   000035   EA           MOV     A,R2
   \   000036   24F8         ADD     A,#-0x8
   \   000038   FA           MOV     R2,A
   \   000039   EB           MOV     A,R3
   \   00003A   34FF         ADDC    A,#-0x1
   \   00003C   FB           MOV     R3,A
   \   00003D   90....       MOV     DPTR,#findPg
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   1279            return hdr.len;
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000052   7408         MOV     A,#0x8
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   02....       LJMP    ?Subroutine6 & 0xFFFF
   \                     ??osal_nv_item_len_0:
   \   00005A                ; Setup parameters for call to function findItem
   \   00005A   EE           MOV     A,R6
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000061   8B..         MOV     ?V1,R3
   \   000063   A9..         MOV     R1,?V1
   \   000065   EA           MOV     A,R2
   \   000066   49           ORL     A,R1
   \   000067   70BC         JNZ     ??CrossCallReturnLabel_81
   \   000069   7A00         MOV     R2,#0x0
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   80E3         SJMP    ??CrossCallReturnLabel_82
   1280          }
   1281          
   1282          /*********************************************************************
   1283           * @fn      osal_nv_write
   1284           *
   1285           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1286           *          an element of an item by indexing into the item with an offset.
   1287           *
   1288           * @param   id  - Valid NV item Id.
   1289           * @param   ndx - Index offset into item
   1290           * @param   len - Length of data to write.
   1291           * @param  *buf - Data to write.
   1292           *
   1293           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1294           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1296          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   740B         MOV     A,#0xb
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V6,R4
   \   000016   8D..         MOV     ?V7,R5
   1298            uint8 rtrn = SUCCESS;
   \   000018   75..00       MOV     ?V11,#0x0
   1299          
   1300            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001B                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001B   794E         MOV     R1,#0x4e
   \   00001D   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000020   E9           MOV     A,R1
   \   000021   607E         JZ      ??osal_nv_write_0
   \   000023   7425         MOV     A,#0x25
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V14,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V15,A
   1301            {
   1302              return NV_OPER_FAILED;
   1303            }
   1304            else if ( len != 0 )
   \   00002F   E5..         MOV     A,?V14
   \   000031   45..         ORL     A,?V15
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1305            {
   1306              osalNvHdr_t hdr;
   1307              uint16 origOff, srcOff;
   1308              uint16 cnt, chk;
   1309              uint8 *ptr, srcPg;
   1310          
   1311              origOff = srcOff = findItem( id );
   \   000038                ; Setup parameters for call to function findItem
   \   000038   740B         MOV     A,#0xb
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000040   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000043   7401         MOV     A,#0x1
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   EA           MOV     A,R2
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   EB           MOV     A,R3
   \   00004C   F0           MOVX    @DPTR,A
   1312              srcPg = findPg;
   \   00004D   90....       MOV     DPTR,#findPg
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V10,A
   1313              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00005B   7005         JNZ     ??osal_nv_write_2
   1314              {
   1315                return NV_ITEM_UNINIT;
   \   00005D   7909         MOV     R1,#0x9
   \   00005F   02....       LJMP    ??osal_nv_write_3 & 0xFFFF
   1316              }
   1317          
   1318              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_2:
   \   000062                ; Setup parameters for call to function HalFlashRead
   \   000062   75..08       MOV     ?V0,#0x8
   \   000065   75..00       MOV     ?V1,#0x0
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   7405         MOV     A,#0x5
   \   00006F   12....       LCALL   ?XSTACK_DISP102_8
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   24F8         ADD     A,#-0x8
   \   00007A   FA           MOV     R2,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   34FF         ADDC    A,#-0x1
   \   00007F   FB           MOV     R3,A
   \   000080   A9..         MOV     R1,?V10
   \   000082   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   1319              if ( hdr.len < (ndx + len) )
   \   00008A   7405         MOV     A,#0x5
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E5..         MOV     A,?V6
   \   000091   25..         ADD     A,?V14
   \   000093   F8           MOV     R0,A
   \   000094   E5..         MOV     A,?V7
   \   000096   35..         ADDC    A,?V15
   \   000098   F9           MOV     R1,A
   \   000099   C3           CLR     C
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   98           SUBB    A,R0
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   99           SUBB    A,R1
   \   00009F   5005         JNC     ??osal_nv_write_4
   1320              {
   1321                return NV_OPER_FAILED;
   \                     ??osal_nv_write_0:
   \   0000A1   790A         MOV     R1,#0xa
   \   0000A3   02....       LJMP    ??osal_nv_write_3 & 0xFFFF
   1322              }
   1323          
   1324              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   25..         ADD     A,?V6
   \   0000AE   F5..         MOV     ?V2,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   35..         ADDC    A,?V7
   \   0000B4   F5..         MOV     ?V3,A
   \   0000B6   85....       MOV     ?V8,?V2
   \   0000B9   F5..         MOV     ?V9,A
   1325              ptr = buf;
   \   0000BB   7427         MOV     A,#0x27
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F5..         MOV     ?V4,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F5..         MOV     ?V5,A
   1326              cnt = len;
   \   0000C7   AE..         MOV     R6,?V14
   \   0000C9   AF..         MOV     R7,?V15
   1327              chk = 0;
   \   0000CB   75..00       MOV     ?V0,#0x0
   \   0000CE   806B         SJMP    ??osal_nv_write_5
   1328              while ( cnt-- )
   1329              {
   1330                uint8 tmp;
   1331                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_6:
   \   0000D0                ; Setup parameters for call to function HalFlashRead
   \   0000D0   75..01       MOV     ?V12,#0x1
   \   0000D3   75..00       MOV     ?V13,#0x0
   \   0000D6   78..         MOV     R0,#?V12
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   12....       LCALL   ?XSTACK_DISP102_8
   \   0000E0   AA..         MOV     R2,?V8
   \   0000E2   AB..         MOV     R3,?V9
   \   0000E4   A9..         MOV     R1,?V10
   \   0000E6   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   1332                if ( tmp != *ptr )
   \   0000EE   85..82       MOV     DPL,?XSP + 0
   \   0000F1   85..83       MOV     DPH,?XSP + 1
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   85..82       MOV     DPL,?V4
   \   0000F9   85..83       MOV     DPH,?V5
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   68           XRL     A,R0
   \   0000FE   6026         JZ      ??osal_nv_write_7
   1333                {
   1334                  chk = 1;  // Mark that at least one byte is different.
   \   000100   75..01       MOV     ?V0,#0x1
   1335                  // Calculate expected checksum after transferring old data and writing new data.
   1336                  hdr.chk -= tmp;
   \   000103   7407         MOV     A,#0x7
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   C3           CLR     C
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   98           SUBB    A,R0
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   9400         SUBB    A,#0x0
   \   000110   F0           MOVX    @DPTR,A
   1337                  hdr.chk += *ptr;
   \   000111   85..82       MOV     DPL,?V4
   \   000114   85..83       MOV     DPH,?V5
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F8           MOV     R0,A
   \   000119   7407         MOV     A,#0x7
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   28           ADD     A,R0
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   3400         ADDC    A,#0x0
   \   000125   F0           MOVX    @DPTR,A
   1338                }
   1339                srcOff++;
   \                     ??osal_nv_write_7:
   \   000126   05..         INC     ?V8
   \   000128   E5..         MOV     A,?V8
   \   00012A   7002         JNZ     ??osal_nv_write_8
   \   00012C   05..         INC     ?V9
   1340                ptr++;
   \                     ??osal_nv_write_8:
   \   00012E   85..82       MOV     DPL,?V4
   \   000131   85..83       MOV     DPH,?V5
   \   000134   A3           INC     DPTR
   \   000135   8582..       MOV     ?V4,DPL
   \   000138   8583..       MOV     ?V5,DPH
   1341              }
   \                     ??osal_nv_write_5:
   \   00013B   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00013E   7090         JNZ     ??osal_nv_write_6
   1342          
   1343              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   000140   E5..         MOV     A,?V0
   \   000142   A2E0         MOV     C,0xE0 /* A   */.0
   \   000144   4003         JC      $+5
   \   000146   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1344              {
   1345                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   000149   85..82       MOV     DPL,?XSP + 0
   \   00014C   85..83       MOV     DPH,?XSP + 1
   \   00014F   E4           CLR     A
   \   000150   F0           MOVX    @DPTR,A
   1346                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000151                ; Setup parameters for call to function initItem
   \   000151   A8..         MOV     R0,?XSP + 0
   \   000153   A9..         MOV     R1,?XSP + 1
   \   000155   88..         MOV     ?V0,R0
   \   000157   89..         MOV     ?V1,R1
   \   000159   78..         MOV     R0,#?V0
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   7407         MOV     A,#0x7
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000166   740D         MOV     A,#0xd
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00016E   7900         MOV     R1,#0x0
   \   000170   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   000173   7402         MOV     A,#0x2
   \   000175   12....       LCALL   ?DEALLOC_XSTACK8
   \   000178   E9           MOV     A,R1
   \   000179   F5..         MOV     ?V4,A
   1347          
   1348                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   00017B   7003         JNZ     $+5
   \   00017D   02....       LJMP    ??osal_nv_write_9 & 0xFFFF
   1349                {
   1350                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000180   7405         MOV     A,#0x5
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000188   C3           CLR     C
   \   000189   E8           MOV     A,R0
   \   00018A   94FC         SUBB    A,#-0x4
   \   00018C   E9           MOV     A,R1
   \   00018D   94FF         SUBB    A,#-0x1
   \   00018F   4008         JC      ??osal_nv_write_10
   \   000191   75..FC       MOV     ?V0,#-0x4
   \   000194   75..FF       MOV     ?V1,#-0x1
   \   000197   800D         SJMP    ??osal_nv_write_11
   \                     ??osal_nv_write_10:
   \   000199   E8           MOV     A,R0
   \   00019A   2403         ADD     A,#0x3
   \   00019C   5001         JNC     ??osal_nv_write_12
   \   00019E   09           INC     R1
   \                     ??osal_nv_write_12:
   \   00019F   54FC         ANL     A,#0xfc
   \   0001A1   F5..         MOV     ?V0,A
   \   0001A3   E9           MOV     A,R1
   \   0001A4   F5..         MOV     ?V1,A
   1351                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_11:
   \   0001A6   A8..         MOV     R0,?V4
   \   0001A8   E8           MOV     A,R0
   \   0001A9   28           ADD     A,R0
   \   0001AA   F8           MOV     R0,A
   \   0001AB   E4           CLR     A
   \   0001AC   33           RLC     A
   \   0001AD   F9           MOV     R1,A
   \   0001AE   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0001B0   28           ADD     A,R0
   \   0001B1   F5..         MOV     ?V12,A
   \   0001B3   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0001B5   39           ADDC    A,R1
   \   0001B6   F5..         MOV     ?V13,A
   \   0001B8   85..82       MOV     DPL,?V12
   \   0001BB   F583         MOV     DPH,A
   \   0001BD   12....       LCALL   ?Subroutine21 & 0xFFFF
   1352                  srcOff = origOff;
   1353          
   1354                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1355                   * OSAL_Nv interruptions caused by resets.
   1356                   */
   1357                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_26:
   \   0001C0   7409         MOV     A,#0x9
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F4           CPL     A
   \   0001C7   7003         JNZ     ??osal_nv_write_13
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F4           CPL     A
   \                     ??osal_nv_write_13:
   \   0001CC   700D         JNZ     ??osal_nv_write_14
   1358                  {
   1359                    setItem( srcPg, srcOff, eNvXfer );
   \   0001CE                ; Setup parameters for call to function setItem
   \   0001CE   7C00         MOV     R4,#0x0
   \   0001D0   7401         MOV     A,#0x1
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   12....       LCALL   ?Subroutine13 & 0xFFFF
   1360                  }
   \                     ??CrossCallReturnLabel_10:
   \   0001D8   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1361          
   1362                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_14:
   \   0001DB                ; Setup parameters for call to function xferBuf
   \   0001DB   78..         MOV     R0,#?V6
   \   0001DD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E0   8E..         MOV     ?V8,R6
   \   0001E2   8F..         MOV     ?V9,R7
   \   0001E4   78..         MOV     R0,#?V8
   \   0001E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E9   AC..         MOV     R4,?V4
   \   0001EB   7405         MOV     A,#0x5
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001F3   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   0001F6   7404         MOV     A,#0x4
   \   0001F8   12....       LCALL   ?DEALLOC_XSTACK8
   1363                  srcOff += ndx;
   1364                  dstOff += ndx;
   \   0001FB   EE           MOV     A,R6
   \   0001FC   25..         ADD     A,?V6
   \   0001FE   FE           MOV     R6,A
   \   0001FF   EF           MOV     A,R7
   \   000200   35..         ADDC    A,?V7
   \   000202   FF           MOV     R7,A
   1365          
   1366                  writeBuf( dstPg, dstOff, len, buf );
   \   000203                ; Setup parameters for call to function writeBuf
   \   000203   7427         MOV     A,#0x27
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00020B   AC..         MOV     R4,?V14
   \   00020D   AD..         MOV     R5,?V15
   \   00020F   EE           MOV     A,R6
   \   000210   FA           MOV     R2,A
   \   000211   EF           MOV     A,R7
   \   000212   FB           MOV     R3,A
   \   000213   A9..         MOV     R1,?V4
   \   000215   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   000218   7402         MOV     A,#0x2
   \   00021A   12....       LCALL   ?DEALLOC_XSTACK8
   1367                  srcOff += len;
   1368                  dstOff += len;
   1369          
   1370                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   00021D                ; Setup parameters for call to function xferBuf
   \   00021D   7405         MOV     A,#0x5
   \   00021F   12....       LCALL   ?XSTACK_DISP0_8
   \   000222   E0           MOVX    A,@DPTR
   \   000223   C3           CLR     C
   \   000224   95..         SUBB    A,?V6
   \   000226   F8           MOV     R0,A
   \   000227   A3           INC     DPTR
   \   000228   E0           MOVX    A,@DPTR
   \   000229   95..         SUBB    A,?V7
   \   00022B   F9           MOV     R1,A
   \   00022C   E8           MOV     A,R0
   \   00022D   C3           CLR     C
   \   00022E   95..         SUBB    A,?V14
   \   000230   F5..         MOV     ?V6,A
   \   000232   E9           MOV     A,R1
   \   000233   95..         SUBB    A,?V15
   \   000235   F5..         MOV     ?V7,A
   \   000237   78..         MOV     R0,#?V6
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   EE           MOV     A,R6
   \   00023D   25..         ADD     A,?V14
   \   00023F   F5..         MOV     ?V6,A
   \   000241   EF           MOV     A,R7
   \   000242   35..         ADDC    A,?V15
   \   000244   F5..         MOV     ?V7,A
   \   000246   78..         MOV     R0,#?V6
   \   000248   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024B   AC..         MOV     R4,?V4
   \   00024D   E5..         MOV     A,?V2
   \   00024F   25..         ADD     A,?V14
   \   000251   FA           MOV     R2,A
   \   000252   E5..         MOV     A,?V3
   \   000254   35..         ADDC    A,?V15
   \   000256   FB           MOV     R3,A
   \   000257   A9..         MOV     R1,?V10
   \   000259   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   00025C   7404         MOV     A,#0x4
   \   00025E   12....       LCALL   ?DEALLOC_XSTACK8
   1371          
   1372                  // Calculate and write the new checksum.
   1373                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000261   85..82       MOV     DPL,?V12
   \   000264   85..83       MOV     DPH,?V13
   \   000267   12....       LCALL   ?Subroutine21 & 0xFFFF
   1374          
   1375                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_27:
   \   00026A                ; Setup parameters for call to function calcChkF
   \   00026A   7405         MOV     A,#0x5
   \   00026C   12....       LCALL   ?XSTACK_DISP0_8
   \   00026F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000272   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000275   7407         MOV     A,#0x7
   \   000277   12....       LCALL   ?XSTACK_DISP0_8
   \   00027A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00027D   7002         JNZ     ??osal_nv_write_15
   \   00027F   EB           MOV     A,R3
   \   000280   6D           XRL     A,R5
   \                     ??osal_nv_write_15:
   \   000281   702C         JNZ     ??osal_nv_write_9
   1376                  {
   1377                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   000283                ; Setup parameters for call to function setChk
   \   000283   EE           MOV     A,R6
   \   000284   FA           MOV     R2,A
   \   000285   EF           MOV     A,R7
   \   000286   FB           MOV     R3,A
   \   000287   A9..         MOV     R1,?V4
   \   000289   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   00028C   8A..         MOV     ?V0,R2
   \   00028E   8B..         MOV     ?V1,R3
   \   000290   A8..         MOV     R0,?V0
   \   000292   A9..         MOV     R1,?V1
   \   000294   7407         MOV     A,#0x7
   \   000296   12....       LCALL   ?XSTACK_DISP0_8
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   68           XRL     A,R0
   \   00029B   7003         JNZ     ??osal_nv_write_16
   \   00029D   A3           INC     DPTR
   \   00029E   E0           MOVX    A,@DPTR
   \   00029F   69           XRL     A,R1
   \                     ??osal_nv_write_16:
   \   0002A0   700D         JNZ     ??osal_nv_write_9
   1378                    {
   1379                      rtrn = NV_OPER_FAILED;
   1380                    }
   1381                    else
   1382                    {
   1383                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \   0002A2                ; Setup parameters for call to function hotItemUpdate
   \   0002A2   7403         MOV     A,#0x3
   \   0002A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A7   12....       LCALL   ?Subroutine17 & 0xFFFF
   1384                    }
   1385                  }
   1386                  else
   1387                  {
   1388                    rtrn = NV_OPER_FAILED;
   1389                  }
   1390                }
   \                     ??CrossCallReturnLabel_20:
   \   0002AA   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   0002AD   8003         SJMP    ??osal_nv_write_17
   1391                else
   1392                {
   1393                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   0002AF   75..0A       MOV     ?V11,#0xa
   1394                }
   1395          
   1396                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_17:
   \   0002B2   85..82       MOV     DPL,?XSP + 0
   \   0002B5   85..83       MOV     DPH,?XSP + 1
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   6034         JZ      ??osal_nv_write_18
   1397                {
   1398                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1399                   * page and writing the new value failed, then the compaction must be aborted.
   1400                   */
   1401                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   0002BB   65..         XRL     A,?V10
   \   0002BD   7010         JNZ     ??osal_nv_write_19
   \   0002BF   740A         MOV     A,#0xa
   \   0002C1   65..         XRL     A,?V11
   \   0002C3   700A         JNZ     ??osal_nv_write_19
   1402                  {
   1403                    erasePage( pgRes );
   \   0002C5                ; Setup parameters for call to function erasePage
   \   0002C5   90....       MOV     DPTR,#pgRes
   \   0002C8   E0           MOVX    A,@DPTR
   \   0002C9   F9           MOV     R1,A
   \   0002CA   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0002CD   803D         SJMP    ??osal_nv_write_1
   1404                  }
   1405                  else
   1406                  {
   1407                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_19:
   \   0002CF                ; Setup parameters for call to function setPageUse
   \   0002CF   7A01         MOV     R2,#0x1
   \   0002D1   90....       MOV     DPTR,#pgRes
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   F9           MOV     R1,A
   \   0002D6   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   0002D9                ; Setup parameters for call to function erasePage
   \   0002D9   85..82       MOV     DPL,?XSP + 0
   \   0002DC   85..83       MOV     DPH,?XSP + 1
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   F9           MOV     R1,A
   \   0002E1   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0002E4   85..82       MOV     DPL,?XSP + 0
   \   0002E7   85..83       MOV     DPH,?XSP + 1
   \   0002EA   E0           MOVX    A,@DPTR
   \   0002EB   90....       MOV     DPTR,#pgRes
   \   0002EE   F0           MOVX    @DPTR,A
   1408                  }
   1409                }
   1410          
   1411                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1412                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1413                 */
   1414                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_18:
   \   0002EF   85..82       MOV     DPL,?XSP + 0
   \   0002F2   85..83       MOV     DPH,?XSP + 1
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   65..         XRL     A,?V10
   \   0002F8   6012         JZ      ??osal_nv_write_1
   \   0002FA   740A         MOV     A,#0xa
   \   0002FC   65..         XRL     A,?V11
   \   0002FE   600C         JZ      ??osal_nv_write_1
   1415                {
   1416                  setItem( srcPg, origOff, eNvZero );
   \   000300                ; Setup parameters for call to function setItem
   \   000300   7C01         MOV     R4,#0x1
   \   000302   EC           MOV     A,R4
   \   000303   12....       LCALL   ?XSTACK_DISP0_8
   \   000306   12....       LCALL   ?Subroutine13 & 0xFFFF
   1417                }
   1418              }
   1419            }
   \                     ??CrossCallReturnLabel_12:
   \   000309   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1420          
   1421            return rtrn;
   \                     ??osal_nv_write_1:
   \   00030C   A9..         MOV     R1,?V11
   \                     ??osal_nv_write_3:
   \   00030E   740D         MOV     A,#0xd
   \   000310   12....       LCALL   ?DEALLOC_XSTACK8
   \   000313   7F10         MOV     R7,#0x10
   \   000315   02....       LJMP    ?BANKED_LEAVE_XDATA
   1422          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   95..         SUBB    A,?V0
   \   000004   FE           MOV     R6,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   95..         SUBB    A,?V1
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   FB           MOV     R3,A
   \   000007   A9..         MOV     R1,?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   A9..         MOV     R1,?V10
   \   000007   22           RET
   1423          
   1424          /*********************************************************************
   1425           * @fn      osal_nv_read
   1426           *
   1427           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1428           *          an element of an item by indexing into the item with an offset.
   1429           *          Read data is copied into *buf.
   1430           *
   1431           * @param   id  - Valid NV item Id.
   1432           * @param   ndx - Index offset into item
   1433           * @param   len - Length of data to read.
   1434           * @param  *buf - Data is read into this buffer.
   1435           *
   1436           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1437           *          Otherwise, NV_OPER_FAILED for failure.
   1438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1439          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1441            uint16 offset;
   1442            uint8 hotIdx;
   1443          
   1444            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000010   E9           MOV     A,R1
   \   000011   F8           MOV     R0,A
   \   000012   7410         MOV     A,#0x10
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V4,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V5,A
   \   00001E   7412         MOV     A,#0x12
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000026   E8           MOV     A,R0
   \   000027   C3           CLR     C
   \   000028   9403         SUBB    A,#0x3
   \   00002A   5024         JNC     ??osal_nv_read_0
   1445            {
   1446              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002C   E8           MOV     A,R0
   \   00002D   FE           MOV     R6,A
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   78..         MOV     R0,#?V4
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   AC..         MOV     R4,?V0
   \   000035   AD..         MOV     R5,?V1
   \   000037   EE           MOV     A,R6
   \   000038   12....       LCALL   ?Subroutine36 & 0xFFFF
   1447              return SUCCESS;
   1448            }
   \                     ??CrossCallReturnLabel_67:
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   25..         ADD     A,?V2
   \   00003E   FA           MOV     R2,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   35..         ADDC    A,?V3
   \   000043   FB           MOV     R3,A
   \   000044   74..         MOV     A,#hotPg & 0xff
   \   000046   2E           ADD     A,R6
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   34..         ADDC    A,#(hotPg >> 8) & 0xff
   \   00004C   F583         MOV     DPH,A
   \   00004E   8023         SJMP    ??osal_nv_read_1
   1449          
   1450            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000050                ; Setup parameters for call to function findItem
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   FB           MOV     R3,A
   \   000054   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000057   EA           MOV     A,R2
   \   000058   4B           ORL     A,R3
   \   000059   7004         JNZ     ??osal_nv_read_2
   1451            {
   1452              return NV_OPER_FAILED;
   \   00005B   790A         MOV     R1,#0xa
   \   00005D   8020         SJMP    ??osal_nv_read_3
   1453            }
   1454            else
   1455            {
   1456              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   00005F                ; Setup parameters for call to function HalFlashRead
   \   00005F   78..         MOV     R0,#?V4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   EA           MOV     A,R2
   \   000069   25..         ADD     A,?V2
   \   00006B   FA           MOV     R2,A
   \   00006C   EB           MOV     A,R3
   \   00006D   35..         ADDC    A,?V3
   \   00006F   FB           MOV     R3,A
   \   000070   90....       MOV     DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   1457              return SUCCESS;
   \   00007D   7900         MOV     R1,#0x0
   1458            }
   \                     ??osal_nv_read_3:
   \   00007F   02....       LJMP    ?Subroutine4 & 0xFFFF
   1459          }
   1460          
   1461          /*********************************************************************
   1462           * @fn      osal_nv_delete
   1463           *
   1464           * @brief   Delete item from NV. This function will fail if the length
   1465           *          parameter does not match the length of the item in NV.
   1466           *
   1467           * @param   id  - Valid NV item Id.
   1468           * @param   len - Length of item to delete.
   1469           *
   1470           * @return  SUCCESS if item was deleted,
   1471           *          NV_ITEM_UNINIT if item did not exist in NV,
   1472           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1473           *          NV_OPER_FAILED if attempted deletion failed.
   1474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1475          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1477            uint16 length;
   1478            uint16 offset;
   1479          
   1480            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000010   8A..         MOV     ?V0,R2
   \   000012   8B..         MOV     ?V1,R3
   1481            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V1
   \   000017   7004         JNZ     ??osal_nv_delete_0
   1482            {
   1483              // NV item does not exist
   1484              return NV_ITEM_UNINIT;
   \   000019   7909         MOV     R1,#0x9
   \   00001B   803D         SJMP    ??osal_nv_delete_1
   1485            }
   1486          
   1487            length = osal_nv_item_len( id );
   1488            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001D                ; Setup parameters for call to function osal_nv_item_len
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000024   8A..         MOV     ?V4,R2
   \   000026   8B..         MOV     ?V5,R3
   \   000028   E5..         MOV     A,?V2
   \   00002A   65..         XRL     A,?V4
   \   00002C   7004         JNZ     ??osal_nv_delete_2
   \   00002E   E5..         MOV     A,?V3
   \   000030   65..         XRL     A,?V5
   \                     ??osal_nv_delete_2:
   \   000032   6004         JZ      ??osal_nv_delete_3
   1489            {
   1490              // NV item has different length
   1491              return NV_BAD_ITEM_LEN;
   \   000034   790C         MOV     R1,#0xc
   \   000036   8022         SJMP    ??osal_nv_delete_1
   1492            }
   1493          
   1494            // Set item header ID to zero to 'delete' the item
   1495            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000038                ; Setup parameters for call to function setItem
   \   000038   7C01         MOV     R4,#0x1
   \   00003A   AA..         MOV     R2,?V0
   \   00003C   AB..         MOV     R3,?V1
   \   00003E   90....       MOV     DPTR,#findPg
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1496          
   1497            // Verify that item has been removed
   1498            offset = findItem( id );
   1499            if ( offset != OSAL_NV_ITEM_NULL )
   \   000046                ; Setup parameters for call to function findItem
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00004D   8B..         MOV     ?V1,R3
   \   00004F   EA           MOV     A,R2
   \   000050   45..         ORL     A,?V1
   \   000052   6004         JZ      ??osal_nv_delete_4
   1500            {
   1501              // Still there
   1502              return NV_OPER_FAILED;
   \   000054   790A         MOV     R1,#0xa
   \   000056   8002         SJMP    ??osal_nv_delete_1
   1503            }
   1504            else
   1505            {
   1506              // Yes, it's gone
   1507              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000058   7900         MOV     R1,#0x0
   1508            }
   \                     ??osal_nv_delete_1:
   \   00005A   02....       LJMP    ?Subroutine3 & 0xFFFF
   1509          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setPageUse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setChk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWord::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItemUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_delete
   1510          
   1511          /*********************************************************************
   1512           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     59   calcChkF
        0     22   -> HalFlashRead
      0     59   compactPage
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> erasePage
        0     27   -> hotItemUpdate
        0     27   -> setChk
        0     27   -> setItem
        0     27   -> setPageUse
        0     30   -> writeItem
        0     31   -> xferBuf
      0     46   erasePage
        0      9   -> HalFlashErase
      0     49   findItem
        0     12   -> initPage
      2     18   hotItem
      1     47   hotItemUpdate
        0     10   -> hotItem
      1     70   initItem
        0     30   -> HalFlashRead
        0     28   -> compactPage
        0     28   -> erasePage
        0     28   -> setPageUse
        0     31   -> writeItem
        0     28   -> writeWordH
      0     22   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     34   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     22   osal_nv_read
        0     18   -> HalFlashRead
        0     16   -> findItem
        0     16   -> hotItem
      0     45   osal_nv_write
        0     37   -> HalAdcCheckVdd
        0     39   -> HalFlashRead
        0     37   -> calcChkF
        0     37   -> erasePage
        0     37   -> findItem
        0     37   -> hotItemUpdate
        0     39   -> initItem
        0     37   -> setChk
        0     37   -> setItem
        0     37   -> setPageUse
        0     39   -> writeBuf
        0     41   -> xferBuf
      0     53   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     61   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     54   setPageUse
        0     17   -> writeWord
      1     63   writeBuf
        0     24   -> HalFlashRead
        0     24   -> HalFlashWrite
        0     22   -> writeWord
      0     61   writeItem
        0     30   -> HalFlashRead
        0     28   -> calcChkF
        0     28   -> hotItemUpdate
        0     28   -> setChk
        0     30   -> writeBuf
        0     28   -> writeWord
      0     42   writeWord
        0     14   -> HalFlashWrite
      1     41   writeWordH
        0     13   -> writeWord
      0     65   xferBuf
        0     24   -> HalFlashRead
        0     22   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ??Subroutine37_0
       5  ??Subroutine38_0
       5  ??Subroutine39_0
       8  ??Subroutine40_0
      15  ??Subroutine41_0
       8  ??Subroutine42_0
       8  ??Subroutine43_0
       6  ??Subroutine44_0
       2  ?Subroutine0
       3  ?Subroutine1
      12  ?Subroutine10
      13  ?Subroutine11
      11  ?Subroutine12
       8  ?Subroutine13
       3  ?Subroutine14
       6  ?Subroutine15
       6  ?Subroutine16
      10  ?Subroutine17
       2  ?Subroutine18
       8  ?Subroutine19
       2  ?Subroutine2
      16  ?Subroutine20
      11  ?Subroutine21
       7  ?Subroutine22
       4  ?Subroutine23
       2  ?Subroutine24
      14  ?Subroutine25
      17  ?Subroutine26
      15  ?Subroutine27
      11  ?Subroutine28
      11  ?Subroutine29
       5  ?Subroutine3
       9  ?Subroutine30
      15  ?Subroutine31
      12  ?Subroutine32
      11  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
      16  ?Subroutine36
       5  ?Subroutine4
       7  ?Subroutine5
       5  ?Subroutine6
       6  ?Subroutine7
      15  ?Subroutine8
       7  ?Subroutine9
   12288  _nvBuf
     129  calcChkF
       6  calcChkF::?relay
     575  compactPage
       6  compactPage::?relay
      30  erasePage
       6  erasePage::?relay
      64  findItem
       6  findItem::?relay
       1  findPg
       6  hotIds
      39  hotItem
       6  hotItem::?relay
      39  hotItemUpdate
       6  hotItemUpdate::?relay
       6  hotOff
       3  hotPg
     374  initItem
       6  initItem::?relay
     281  initNV
       6  initNV::?relay
     432  initPage
       6  initPage::?relay
      93  osal_nv_delete
       6  osal_nv_delete::?relay
       9  osal_nv_init
       6  osal_nv_init::?relay
      86  osal_nv_item_init
       6  osal_nv_item_init::?relay
     111  osal_nv_item_len
       6  osal_nv_item_len::?relay
     130  osal_nv_read
       6  osal_nv_read::?relay
     792  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
      88  setChk
       6  setChk::?relay
     144  setItem
       6  setItem::?relay
      52  setPageUse
       6  setPageUse::?relay
     326  writeBuf
       6  writeBuf::?relay
     531  writeItem
       6  writeItem::?relay
      56  writeWord
       6  writeWord::?relay
      66  writeWordH
       6  writeWordH::?relay
     342  xferBuf
       6  xferBuf::?relay

 
  5 166 bytes in segment BANKED_CODE
    138 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  5 304 bytes of CODE  memory
      6 bytes of CONST memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
