###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                28/Aug/2016  20:48:30
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_general.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_general.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D HOLD_AUTO_START -D
#        BUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -D DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zcl_general.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\zcl_general.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_general.c
      1          /**************************************************************************************************
      2            Filename:       zcl_general.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "zcl.h"
     46          #include "zcl_general.h"
     47          //#include "ZDApp.h"
     48          #include "zcl_ezmode.h"
     49          
     50          #if defined ( INTER_PAN )
     51            #include "stub_aps.h"
     52          #endif
     53          
     54          /*********************************************************************
     55           * MACROS
     56           */
     57          #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
     58          #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
     59          #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
     60          
     61          #ifdef ZCL_SCENES
     62          #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
     63          #endif // ZCL_SCENES
     64          
     65          /*********************************************************************
     66           * CONSTANTS
     67           */
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct zclGenCBRec
     73          {
     74            struct zclGenCBRec        *next;
     75            uint8                     endpoint; // Used to link it into the endpoint descriptor
     76            zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
     77          } zclGenCBRec_t;
     78          
     79          typedef struct zclGenSceneItem
     80          {
     81            struct zclGenSceneItem    *next;
     82            uint8                     endpoint; // Used to link it into the endpoint descriptor
     83            zclGeneral_Scene_t        scene;    // Scene info
     84          } zclGenSceneItem_t;
     85          
     86          typedef struct zclGenAlarmItem
     87          {
     88            struct zclGenAlarmItem    *next;
     89            uint8                     endpoint; // Used to link it into the endpoint descriptor
     90            zclGeneral_Alarm_t        alarm;    // Alarm info
     91          } zclGenAlarmItem_t;
     92          
     93          // Scene NV types
     94          typedef struct
     95          {
     96            uint16                    numRecs;
     97          } nvGenScenesHdr_t;
     98          
     99          typedef struct zclGenSceneNVItem
    100          {
    101            uint8                     endpoint;
    102            zclGeneral_Scene_t        scene;
    103          } zclGenSceneNVItem_t;
    104          
    105          /*********************************************************************
    106           * GLOBAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * GLOBAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
   \                     zclGenCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static uint8 zclGenPluginRegisted = FALSE;
   \                     zclGenPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          
    119          #if defined( ZCL_SCENES )
    120            #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121              static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
   \                     zclGenSceneTable:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122            #endif
    123          #endif // ZCL_SCENES
    124          
    125          #ifdef ZCL_ALARMS
    126          static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
    127          #endif // ZCL_ALARMS
    128          
    129          /*********************************************************************
    130           * LOCAL FUNCTIONS
    131           */
    132          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
    133          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    134          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
    135          
    136          // Device Configuration and Installation clusters
    137          #ifdef ZCL_BASIC
    138          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    139          #endif // ZCL_BASIC
    140          
    141          #ifdef ZCL_IDENTIFY
    142          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    143          #endif // ZCL_IDENTIFY
    144          
    145          // Groups and Scenes clusters
    146          #ifdef ZCL_GROUPS
    147          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
    148          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    149          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
    150          #endif // ZCL_GROUPS
    151          
    152          #ifdef ZCL_SCENES
    153          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    154          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    155          #endif // ZCL_SCENES
    156          
    157          // On/Off and Level Control Configuration clusters
    158          #ifdef ZCL_ON_OFF
    159          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    160          #endif // ZCL_ONOFF
    161          
    162          #ifdef ZCL_LEVEL_CTRL
    163          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    164          #endif // ZCL_LEVEL_CTRL
    165          
    166          // Alarms cluster
    167          #ifdef ZCL_ALARMS
    168          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    169          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    170          #endif // ZCL_ALARMS
    171          
    172          // Location cluster
    173          #ifdef ZCL_LOCATION
    174          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    175          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    176          #endif // ZCL_LOCATION
    177          
    178          #ifdef ZCL_SCENES
    179            #if !defined ( ZCL_STANDALONE )
    180              static uint8 zclGeneral_ScenesInitNV( void );
    181              static void zclGeneral_ScenesSetDefaultNV( void );
    182              static void zclGeneral_ScenesWriteNV( void );
    183              static uint16 zclGeneral_ScenesRestoreFromNV( void );
    184            #endif
    185          #endif // ZCL_SCENES
    186          
    187          /*********************************************************************
    188           * @fn      zclGeneral_RegisterCmdCallbacks
    189           *
    190           * @brief   Register an applications command callbacks
    191           *
    192           * @param   endpoint - application's endpoint
    193           * @param   callbacks - pointer to the callback record.
    194           *
    195           * @return  ZMemError if not able to allocate
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
   \                     zclGeneral_RegisterCmdCallbacks:
    198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    199            zclGenCBRec_t *pNewItem;
    200            zclGenCBRec_t *pLoop;
    201          
    202            // Register as a ZCL Plugin
    203            if ( zclGenPluginRegisted == FALSE )
   \   00000B   90....       MOV     DPTR,#zclGenPluginRegisted
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7024         JNZ     ??zclGeneral_RegisterCmdCallbacks_0
    204            {
    205              zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
    206                                  ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    207                                  zclGeneral_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV     ?V2,#`??zclGeneral_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV     ?V3,#(`??zclGeneral_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV     R0,#?V2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C14         MOV     R4,#0x14
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
    208          
    209          #ifdef ZCL_SCENES
    210              // Initialize the Scenes Table
    211              zclGeneral_ScenesInit();
   \   00002C                ; Setup parameters for call to function zclGeneral_ScenesInit
   \   00002C   12....       LCALL   `??zclGeneral_ScenesInit::?relay`; Banked call to: zclGeneral_ScenesInit
    212          #endif // ZCL_SCENES
    213          
    214              zclGenPluginRegisted = TRUE;
   \   00002F   90....       MOV     DPTR,#zclGenPluginRegisted
   \   000032   7401         MOV     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
    215            }
    216          
    217            // Fill in the new profile list
    218            pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
   \                     ??zclGeneral_RegisterCmdCallbacks_0:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   7A05         MOV     R2,#0x5
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV     ?V2,R2
   \   00003E   8B..         MOV     ?V3,R3
   \   000040   A8..         MOV     R0,?V2
   \   000042   A9..         MOV     R1,?V3
    219            if ( pNewItem == NULL )
   \   000044   E8           MOV     A,R0
   \   000045   49           ORL     A,R1
   \   000046   7004         JNZ     ??zclGeneral_RegisterCmdCallbacks_1
    220              return (ZMemError);
   \   000048   7910         MOV     R1,#0x10
   \   00004A   8044         SJMP    ??zclGeneral_RegisterCmdCallbacks_2
    221          
    222            pNewItem->next = (zclGenCBRec_t *)NULL;
   \                     ??zclGeneral_RegisterCmdCallbacks_1:
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   F0           MOVX    @DPTR,A
    223            pNewItem->endpoint = endpoint;
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E5..         MOV     A,?V0
   \   00005C   F0           MOVX    @DPTR,A
    224            pNewItem->CBs = callbacks;
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   EE           MOV     A,R6
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   EF           MOV     A,R7
   \   000068   F0           MOVX    @DPTR,A
    225          
    226            // Find spot in list
    227            if (  zclGenCBs == NULL )
   \   000069   90....       MOV     DPTR,#zclGenCBs
   \   00006C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00006F   90....       MOV     DPTR,#zclGenCBs
   \   000072   6017         JZ      ??zclGeneral_RegisterCmdCallbacks_3
    228            {
    229              zclGenCBs = pNewItem;
    230            }
    231            else
    232            {
    233              // Look for end of list
    234              pLoop = zclGenCBs;
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FC           MOV     R4,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   8003         SJMP    ??zclGeneral_RegisterCmdCallbacks_4
    235              while ( pLoop->next != NULL )
    236                pLoop = pLoop->next;
   \                     ??zclGeneral_RegisterCmdCallbacks_5:
   \   00007A   EA           MOV     A,R2
   \   00007B   FC           MOV     R4,A
   \   00007C   EB           MOV     A,R3
   \                     ??zclGeneral_RegisterCmdCallbacks_4:
   \   00007D   FD           MOV     R5,A
   \   00007E   8C82         MOV     DPL,R4
   \   000080   8D83         MOV     DPH,R5
   \   000082   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000085   70F3         JNZ     ??zclGeneral_RegisterCmdCallbacks_5
    237          
    238              // Put new item at end of list
    239              pLoop->next = pNewItem;
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
    240            }
   \                     ??zclGeneral_RegisterCmdCallbacks_3:
   \   00008B   12....       LCALL   ?Subroutine51 & 0xFFFF
    241          
    242            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_105:
   \   00008E   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RegisterCmdCallbacks_2:
   \   000090   02....       LJMP    ??Subroutine76_0 & 0xFFFF
    243          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    244          
    245          #ifdef ZCL_IDENTIFY
    246          /*********************************************************************
    247           * @fn      zclGeneral_SendIdentify
    248           *
    249           * @brief   Call to send out an Identify Command
    250           *
    251           * @param   srcEP - Sending application's endpoint
    252           * @param   dstAddr - where you want the message to go
    253           * @param   identifyTime - how long the device will continue to identify itself (in seconds)
    254           * @param   seqNum - identification number for the transaction
    255           *
    256           * @return  ZStatus_t
    257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    258          ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentify:
    259                                             uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    261            uint8 buf[2];
    262          
    263            buf[0] = LO_UINT16( identifyTime );
   \   00000C   EC           MOV     A,R4
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    264            buf[1] = HI_UINT16( identifyTime );
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine46 & 0xFFFF
    265          
    266            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    267                                    COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    268                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_156:
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0,#0x2
   \   000022   75..00       MOV     ?V1,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV     A,#0x11
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR     A
   \   000036   F5..         MOV     ?V0,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV     A,#0x13
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   75..00       MOV     ?V0,#0x0
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV     ?V0,#0x1
   \   000053   02....       LJMP    ?Subroutine1 & 0xFFFF
    269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   ED           MOV     A,R5
   \   000001                REQUIRE ??Subroutine73_0
   \   000001                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   78..         MOV     R0,#?V0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   7C03         MOV     R4,#0x3
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   EE           MOV     A,R6
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000016   740B         MOV     A,#0xb
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   7402         MOV     A,#0x2
   \   00001D                REQUIRE ??Subroutine81_0
   \   00001D                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine82_0
   \   000003                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    270          
    271          /*********************************************************************
    272           * @fn      zclGeneral_SendIdentifyEZModeInvoke
    273           *
    274           * @brief   Call to send out an Identify EZ-Mode Invoke Command
    275           *
    276           * @param   srcEP - Sending application's endpoint
    277           * @param   dstAddr - where you want the message to go
    278           * @param   action - describes the EZ-Mode action to be performed
    279           * @param   seqNum - identification number for the transaction
    280           *
    281           * @return  ZStatus_t
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyEZModeInvoke:
    284                                                         uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
    285          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
    286            uint8 buf[1];
    287          
    288            buf[0] = action;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   12....       LCALL   ??Subroutine74_0 & 0xFFFF
    289          
    290            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    291                                    COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    292                                    disableDefaultRsp, 0, seqNum, 1, buf );
   \                     ??CrossCallReturnLabel_161:
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV     ?V2,#0x1
   \   00001C   75..00       MOV     ?V3,#0x0
   \   00001F   78..         MOV     R0,#?V2
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7411         MOV     A,#0x11
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   E4           CLR     A
   \   000030   F5..         MOV     ?V2,A
   \   000032   78..         MOV     R0,#?V2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   ED           MOV     A,R5
   \   000038   F5..         MOV     ?V1,A
   \   00003A   78..         MOV     R0,#?V1
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V1
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV     ?V1,#0x1
   \   00004A   78..         MOV     R0,#?V1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV     ?V1,#0x2
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7C03         MOV     R4,#0x3
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   EE           MOV     A,R6
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000060   740B         MOV     A,#0xb
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   7401         MOV     A,#0x1
   \   000067   02....       LJMP    ??Subroutine75_0 & 0xFFFF
    293          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V2,R0
   \   000007   89..         MOV     ?V3,R1
   \   000009   78..         MOV     R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine76_0
   \   000003                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V1,A
   \   000003   78..         MOV     R0,#?V1
   \   000005   22           RET
    294          
    295          /*********************************************************************
    296           * @fn      zclGeneral_SendIdentifyUpdateCommState
    297           *
    298           * @brief   Call to send out an Identify Update Commission State Command
    299           *
    300           * @param   srcEP - Sending application's endpoint
    301           * @param   dstAddr - where you want the message to go
    302           * @param   action - describes the EZ-Mode action to be performed
    303           * @param   commissionStateMask - updates the device's commission state
    304           * @param   seqNum - identification number for the transaction
    305           *
    306           * @return  ZStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyUpdateCommState:
    309                                                            uint8 action, uint8 commissionStateMask,
    310                                                            uint8 disableDefaultRsp, uint8 seqNum )
    311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
    312            uint8 buf[2];
    313          
    314            buf[0] = action;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    315            buf[1] = commissionStateMask;
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   ED           MOV     A,R5
   \   00001A   12....       LCALL   ??Subroutine74_0 & 0xFFFF
    316          
    317            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    318                                    COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    319                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_162:
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV     ?V2,#0x2
   \   000023   75..00       MOV     ?V3,#0x0
   \   000026   78..         MOV     R0,#?V2
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7413         MOV     A,#0x13
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   E4           CLR     A
   \   000037   F5..         MOV     ?V2,A
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV     A,#0x15
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV     ?V1,#0x0
   \   00004C   78..         MOV     R0,#?V1
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV     ?V1,#0x1
   \   000054   78..         MOV     R0,#?V1
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..03       MOV     ?V1,#0x3
   \   00005C   78..         MOV     R0,#?V1
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   7C03         MOV     R4,#0x3
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EE           MOV     A,R6
   \   000066   F9           MOV     R1,A
   \   000067                REQUIRE ?Subroutine8
   \   000067                ; // Fall through to label ?Subroutine8
    320          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV     A,#0xb
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7402         MOV     A,#0x2
   \   00000A   02....       LJMP    ??Subroutine75_0 & 0xFFFF
    321          
    322          #ifdef ZCL_LIGHT_LINK_ENHANCE
    323          /*********************************************************************
    324           * @fn      zclGeneral_SendIdentifyTriggerEffect
    325           *
    326           * @brief   Call to send out a Trigger Effect Command
    327           *
    328           * @param   srcEP - Sending application's endpoint
    329           * @param   dstAddr - where you want the message to go
    330           * @param   effectId - identify effect to use
    331           * @param   effectVariant - which variant of effect to be triggered
    332           * @param   disableDefaultRsp - whether to disable the Default Response command
    333           * @param   seqNum - identification number for the transaction
    334           *
    335           * @return  ZStatus_t
    336           */
    337          ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
    338                                                          uint8 effectId, uint8 effectVariant,
    339                                                          uint8 disableDefaultRsp, uint8 seqNum )
    340          {
    341            uint8 buf[2];
    342          
    343            buf[0] = effectId;
    344            buf[1] = effectVariant;
    345          
    346            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    347                                    COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    348                                    disableDefaultRsp, 0, seqNum, 2, buf );
    349          }
    350          #endif // ZCL_LIGHT_LINK_ENHANCE
    351          
    352          /*********************************************************************
    353           * @fn      zclGeneral_SendIdentifyQueryResponse
    354           *
    355           * @brief   Call to send out an Identify Query Response Command
    356           *
    357           * @param   srcEP - Sending application's endpoint
    358           * @param   dstAddr - where you want the message to go
    359           * @param   timeout - how long the device will continue to identify itself (in seconds)
    360           * @param   seqNum - identification number for the transaction
    361           *
    362           * @return  ZStatus_t
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyQueryResponse:
    365                                                          uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
    366          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    367            uint8 buf[2];
    368          
    369            buf[0] = LO_UINT16( timeout );
   \   00000C   EC           MOV     A,R4
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    370            buf[1] = HI_UINT16( timeout );
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine46 & 0xFFFF
    371          
    372            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    373                                    COMMAND_IDENTIFY_QUERY_RSP, TRUE,
    374                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_157:
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0,#0x2
   \   000022   75..00       MOV     ?V1,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV     A,#0x11
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR     A
   \   000036   F5..         MOV     ?V0,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV     A,#0x13
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   75..01       MOV     ?V0,#0x1
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   02....       LJMP    ?Subroutine1 & 0xFFFF
    375          }
    376          #endif // ZCL_IDENTIFY
    377          
    378          #ifdef ZCL_GROUPS
    379          /*********************************************************************
    380           * @fn      zclGeneral_SendGroupRequest
    381           *
    382           * @brief   Send a Group Request to a device.  You can also use the
    383           *          appropriate macro.
    384           *
    385           * @param   srcEP - Sending Apps endpoint
    386           * @param   dstAddr - where to send the request
    387           * @param   cmd - one of the following:
    388           *              COMMAND_GROUP_VIEW
    389           *              COMMAND_GROUP_REMOVE
    390           * @param   groupID -
    391           *
    392           * @return  ZStatus_t
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupRequest:
    395                                                 uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   740E         MOV     A,#0xe
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine25 & 0xFFFF
    397            uint8 buf[2];
    398          
    399            buf[0] = LO_UINT16( groupID );
    400            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_48:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine45 & 0xFFFF
    401          
    402            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    403                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    404                                      disableDefaultRsp, 0, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_159:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   75..02       MOV     ?V2,#0x2
   \   000024   75..00       MOV     ?V3,#0x0
   \   000027   78..         MOV     R0,#?V2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7414         MOV     A,#0x14
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   E4           CLR     A
   \   000038   F5..         MOV     ?V2,A
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   EF           MOV     A,R7
   \   000040   F5..         MOV     ?V1,A
   \   000042   78..         MOV     R0,#?V1
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..00       MOV     ?V1,#0x0
   \   00004A   78..         MOV     R0,#?V1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..01       MOV     ?V1,#0x1
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   EE           MOV     A,R6
   \   000058   F5..         MOV     ?V1,A
   \   00005A   78..         MOV     R0,#?V1
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   7C04         MOV     R4,#0x4
   \   000061   7D00         MOV     R5,#0x0
   \   000063   A9..         MOV     R1,?V0
   \   000065   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine74_0
   \   000001                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   22           RET
    405          }
    406          
    407          /*********************************************************************
    408           * @fn      zclGeneral_SendAddGroupRequest
    409           *
    410           * @brief   Send the Add Group Request to a device
    411           *
    412           * @param   srcEP - Sending Apps endpoint
    413           * @param   dstAddr - where to send the request
    414           * @param   cmd - one of the following:
    415           *                COMMAND_GROUP_ADD
    416           *                COMMAND_GROUP_ADD_IF_IDENTIFYING
    417           * @param   groupID - pointer to the group structure
    418           * @param   groupName - pointer to Group Name.  This is a Zigbee
    419           *          string data type, so the first byte is the length of the
    420           *          name (in bytes), then the name.
    421           *
    422           * @return  ZStatus_t
    423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddGroupRequest:
    425                                                    uint8 cmd, uint16 groupID, uint8 *groupName,
    426                                                    uint8 disableDefaultRsp, uint8 seqNum )
    427          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V7,R1
   \   000007   8A..         MOV     ?V10,R2
   \   000009   8B..         MOV     ?V11,R3
   \   00000B   8C..         MOV     ?V9,R4
   \   00000D   8D..         MOV     ?V8,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine28 & 0xFFFF
    428            uint8 *buf;
    429            uint8 *pBuf;
    430            uint8 len;
    431            ZStatus_t status;
    432          
    433            len = 2;    // Group ID
    434            len += groupName[0] + 1;  // String + 1 for length
   \                     ??CrossCallReturnLabel_52:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
    435          
    436            buf = zcl_mem_alloc( len );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV     ?V0,R2
   \   000023   8B..         MOV     ?V1,R3
    437            if ( buf )
   \   000025   EA           MOV     A,R2
   \   000026   45..         ORL     A,?V1
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
   \   00002D   7414         MOV     A,#0x14
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine36 & 0xFFFF
    438            {
    439              pBuf = buf;
    440              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_75:
   \   000035   F0           MOVX    @DPTR,A
    441              *pBuf++ = HI_UINT16( groupID );
   \   000036   E9           MOV     A,R1
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
    442              *pBuf++ = groupName[0]; // string length
   \   000039   85..82       MOV     DPL,?V2
   \   00003C   85..83       MOV     DPH,?V3
   \   00003F   12....       LCALL   ??Subroutine79_0 & 0xFFFF
    443              zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
   \                     ??CrossCallReturnLabel_185:
   \   000042                ; Setup parameters for call to function osal_memcpy
   \   000042   85..82       MOV     DPL,?V2
   \   000045   85..83       MOV     DPH,?V3
   \   000048   A3           INC     DPTR
   \   000049   A982         MOV     R1,DPL
   \   00004B   AA83         MOV     R2,DPH
   \   00004D   89..         MOV     ?V4,R1
   \   00004F   8A..         MOV     ?V5,R2
   \   000051   75..00       MOV     ?V6,#0x0
   \   000054   78..         MOV     R0,#?V4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   85..82       MOV     DPL,?V2
   \   00005C   85..83       MOV     DPH,?V3
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FC           MOV     R4,A
   \   000061   7D00         MOV     R5,#0x0
   \   000063   E5..         MOV     A,?V0
   \   000065   2403         ADD     A,#0x3
   \   000067   FA           MOV     R2,A
   \   000068   E4           CLR     A
   \   000069   35..         ADDC    A,?V1
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
    444          
    445              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    446                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    447                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   000074                ; Setup parameters for call to function zcl_SendCommand
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   8E..         MOV     ?V2,R6
   \   00007B   75..00       MOV     ?V3,#0x0
   \   00007E   78..         MOV     R0,#?V2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   741C         MOV     A,#0x1c
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008E   E4           CLR     A
   \   00008F   F5..         MOV     ?V2,A
   \   000091   78..         MOV     R0,#?V2
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   E5..         MOV     A,?V8
   \   000098   F5..         MOV     ?V2,A
   \   00009A   78..         MOV     R0,#?V2
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009F   75..00       MOV     ?V2,#0x0
   \   0000A2   78..         MOV     R0,#?V2
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   75..01       MOV     ?V2,#0x1
   \   0000AA   78..         MOV     R0,#?V2
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AF   E5..         MOV     A,?V9
   \   0000B1   F5..         MOV     ?V2,A
   \   0000B3   78..         MOV     R0,#?V2
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   7C04         MOV     R4,#0x4
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   AA..         MOV     R2,?V10
   \   0000BE   AB..         MOV     R3,?V11
   \   0000C0   A9..         MOV     R1,?V7
   \   0000C2   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000C5   740B         MOV     A,#0xb
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   E9           MOV     A,R1
   \   0000CB   FE           MOV     R6,A
    448              zcl_mem_free( buf );
   \   0000CC                ; Setup parameters for call to function osal_mem_free
   \   0000CC   AA..         MOV     R2,?V0
   \   0000CE   AB..         MOV     R3,?V1
   \   0000D0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D3   8002         SJMP    ??zclGeneral_SendAddGroupRequest_1
    449            }
    450            else
    451              status = ZMemError;
   \                     ??zclGeneral_SendAddGroupRequest_0:
   \   0000D5   7E10         MOV     R6,#0x10
    452          
    453            return ( status );
   \                     ??zclGeneral_SendAddGroupRequest_1:
   \   0000D7   EE           MOV     A,R6
   \   0000D8   F9           MOV     R1,A
   \   0000D9                REQUIRE ?Subroutine2
   \   0000D9                ; // Fall through to label ?Subroutine2
    454          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   78..         MOV     R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   85..82       MOV     DPL,?V2
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
    455          
    456          /*********************************************************************
    457           * @fn      zclGeneral_SendGroupGetMembershipRequest
    458           *
    459           * @brief   Send a Get Group Membership (Resposne) Command to a device
    460           *
    461           * @param   srcEP - Sending Apps endpoint
    462           * @param   dstAddr - where to send the request
    463           * @param   cmd - one of the following:
    464           *                COMMAND_GROUP_GET_MEMBERSHIP
    465           *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
    466           * @param   groupID - pointer to the group structure
    467           * @param   groupName - pointer to Group Name.  This is a Zigbee
    468           *          string data type, so the first byte is the length of the
    469           *          name (in bytes), then the name.
    470           *
    471           * @return  ZStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupGetMembershipRequest:
    474                                                              uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
    475                                                              uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    477            uint8 *buf;
    478            uint8 *pBuf;
    479            uint8 len = 0;
   \   00000F   7800         MOV     R0,#0x0
    480            uint8 i;
    481            ZStatus_t status;
    482          
    483            if ( rspCmd )
   \   000011   6002         JZ      ??zclGeneral_SendGroupGetMembershipRequest_0
    484              len++;  // Capacity
   \   000013   7801         MOV     R0,#0x1
   \                     ??zclGeneral_SendGroupGetMembershipRequest_0:
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V3,A
    485          
    486            len++;  // Group Count
    487            len += sizeof ( uint16 ) * grpCnt;  // Group List
   \   00001D   C3           CLR     C
   \   00001E   33           RLC     A
   \   00001F   04           INC     A
   \   000020   28           ADD     A,R0
   \   000021   F8           MOV     R0,A
    488          
    489            buf = zcl_mem_alloc( len );
   \   000022   88..         MOV     ?V4,R0
   \   000024   75..00       MOV     ?V5,#0x0
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   FA           MOV     R2,A
   \   000028   AB..         MOV     R3,?V5
   \   00002A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
    490            if ( buf )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V1
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
    491            {
    492              pBuf = buf;
   \   000039   A8..         MOV     R0,?V0
   \   00003B   A9..         MOV     R1,?V1
    493              if ( rspCmd )
   \   00003D   EF           MOV     A,R7
   \   00003E   6008         JZ      ??CrossCallReturnLabel_69
    494                *pBuf++ = capacity;
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine32 & 0xFFFF
    495          
    496              *pBuf++ = grpCnt;
   \                     ??CrossCallReturnLabel_69:
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   E5..         MOV     A,?V3
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   A882         MOV     R0,DPL
   \   000052   A983         MOV     R1,DPH
    497              for ( i = 0; i < grpCnt; i++ )
   \   000054   75..00       MOV     ?V8,#0x0
   \   000057   7417         MOV     A,#0x17
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00005F   EA           MOV     A,R2
   \   000060   FC           MOV     R4,A
   \   000061   EB           MOV     A,R3
   \   000062   FD           MOV     R5,A
   \   000063   8029         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_2
    498              {
    499                *pBuf++ = LO_UINT16( grpList[i] );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_3:
   \   000065   AA..         MOV     R2,?V8
   \   000067   EA           MOV     A,R2
   \   000068   2A           ADD     A,R2
   \   000069   FA           MOV     R2,A
   \   00006A   E4           CLR     A
   \   00006B   33           RLC     A
   \   00006C   FB           MOV     R3,A
   \   00006D   EC           MOV     A,R4
   \   00006E   2A           ADD     A,R2
   \   00006F   FA           MOV     R2,A
   \   000070   ED           MOV     A,R5
   \   000071   3B           ADDC    A,R3
   \   000072   FB           MOV     R3,A
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00007A   F0           MOVX    @DPTR,A
    500                *pBuf++ = HI_UINT16( grpList[i] );
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ?Subroutine65 & 0xFFFF
    501              }
   \                     ??CrossCallReturnLabel_141:
   \   000083   A3           INC     DPTR
   \   000084   F0           MOVX    @DPTR,A
   \   000085   E8           MOV     A,R0
   \   000086   2402         ADD     A,#0x2
   \   000088   F8           MOV     R0,A
   \   000089   5001         JNC     ??zclGeneral_SendGroupGetMembershipRequest_4
   \   00008B   09           INC     R1
   \                     ??zclGeneral_SendGroupGetMembershipRequest_4:
   \   00008C   05..         INC     ?V8
   \                     ??zclGeneral_SendGroupGetMembershipRequest_2:
   \   00008E   E5..         MOV     A,?V8
   \   000090   C3           CLR     C
   \   000091   95..         SUBB    A,?V3
   \   000093   40D0         JC      ??zclGeneral_SendGroupGetMembershipRequest_3
    502          
    503              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    504                                        cmd, TRUE, direction,
    505                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   000095                ; Setup parameters for call to function zcl_SendCommand
   \   000095   78..         MOV     R0,#?V0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   78..         MOV     R0,#?V4
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   741E         MOV     A,#0x1e
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   E4           CLR     A
   \   0000AB   F5..         MOV     ?V4,A
   \   0000AD   78..         MOV     R0,#?V4
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   7420         MOV     A,#0x20
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   741C         MOV     A,#0x1c
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   75..01       MOV     ?V3,#0x1
   \   0000CB   78..         MOV     R0,#?V3
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   EE           MOV     A,R6
   \   0000D1   F5..         MOV     ?V3,A
   \   0000D3   78..         MOV     R0,#?V3
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   7C04         MOV     R4,#0x4
   \   0000DA   7D00         MOV     R5,#0x0
   \   0000DC   AA..         MOV     R2,?V6
   \   0000DE   AB..         MOV     R3,?V7
   \   0000E0   A9..         MOV     R1,?V2
   \   0000E2   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000E5   740B         MOV     A,#0xb
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   F5..         MOV     ?V3,A
    506              zcl_mem_free( buf );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV     R2,?V0
   \   0000EF   AB..         MOV     R3,?V1
   \   0000F1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F4   8003         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_5
    507            }
    508            else
    509              status = ZMemError;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_1:
   \   0000F6   75..10       MOV     ?V3,#0x10
    510          
    511            return ( status );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_5:
   \   0000F9   A9..         MOV     R1,?V3
   \   0000FB   02....       LJMP    ?Subroutine2 & 0xFFFF
    512          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   A882         MOV     R0,DPL
   \   000007   A983         MOV     R1,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V3,A
   \   000003   78..         MOV     R0,#?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET
    513          
    514          /*********************************************************************
    515           * @fn      zclGeneral_SendGroupResponse
    516           *
    517           * @brief   Send Group Response (not Group View Response)
    518           *
    519           * @param   srcEP - Sending application's endpoint
    520           * @param   dstAddr - where you want the message to go
    521           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    522           * @param   status - group command status
    523           * @param   groupID - what group
    524           *
    525           * @return  ZStatus_t
    526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000007   740B         MOV     A,#0xb
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7403         MOV     A,#0x3
   \   00000E                REQUIRE ??Subroutine75_0
   \   00000E                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupResponse:
    528                                                  uint8 cmd, uint8 status, uint16 groupID,
    529                                                  uint8 disableDefaultRsp, uint8 seqNum )
    530          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    531            uint8 buf[3];
    532          
    533            buf[0] = status;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   \   000016   740F         MOV     A,#0xf
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine38 & 0xFFFF
    534            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_77:
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E8           MOV     A,R0
   \   000024   F0           MOVX    @DPTR,A
    535            buf[2] = HI_UINT16( groupID );
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine45 & 0xFFFF
    536          
    537            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    538                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    539                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_160:
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV     ?V2,#0x3
   \   000033   75..00       MOV     ?V3,#0x0
   \   000036   78..         MOV     R0,#?V2
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7416         MOV     A,#0x16
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   78..         MOV     R0,#?V2
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7418         MOV     A,#0x18
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV     ?V1,#0x1
   \   00005C   78..         MOV     R0,#?V1
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV     R0,#?V1
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   EF           MOV     A,R7
   \   000067   F5..         MOV     ?V1,A
   \   000069   78..         MOV     R0,#?V1
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   7C04         MOV     R4,#0x4
   \   000070   02....       LJMP    ?Subroutine0 & 0xFFFF
    540          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    541          
    542          /*********************************************************************
    543           * @fn      zclGeneral_SendGroupViewResponse
    544           *
    545           * @brief   Call to send Group Response Command
    546           *
    547           * @param   srcEP - Sending application's endpoint
    548           * @param   dstAddr - where you want the message to go
    549           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    550           * @param   status - group command status
    551           * @param   grp - group info
    552           *
    553           * @return  ZStatus_t
    554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    555          ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupViewResponse:
    556                                                      uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
    557          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V8,R1
   \   000007   8A..         MOV     ?V12,R2
   \   000009   8B..         MOV     ?V13,R3
   \   00000B   8C..         MOV     ?V7,R4
   \   00000D   8D..         MOV     ?V9,R5
    558            uint8 *buf;
    559            uint8 len;
    560            ZStatus_t stat;
    561          
    562            len = 1 + 2 + 1; // Status + Group ID + name length
   \   00000F   7E04         MOV     R6,#0x4
   \   000011   7416         MOV     A,#0x16
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V4,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V5,A
    563          
    564            if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   E5..         MOV     A,?V4
   \   00001F   2402         ADD     A,#0x2
   \   000021   F5..         MOV     ?V2,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V5
   \   000026   F5..         MOV     ?V3,A
   \   000028   EC           MOV     A,R4
   \   000029   7009         JNZ     ??zclGeneral_SendGroupViewResponse_0
    565            {
    566              len += grp->name[0];  // String length
   \   00002B   85..82       MOV     DPL,?V2
   \   00002E   85..83       MOV     DPH,?V3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2E           ADD     A,R6
   \   000033   FE           MOV     R6,A
    567            }
    568          
    569            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendGroupViewResponse_0:
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   EE           MOV     A,R6
   \   000035   FA           MOV     R2,A
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8B..         MOV     ?V1,R3
    570            if ( buf )
   \   00003F   EA           MOV     A,R2
   \   000040   45..         ORL     A,?V1
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
    571            {
    572              buf[0] = status;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E5..         MOV     A,?V7
   \   00004D   12....       LCALL   ?Subroutine49 & 0xFFFF
    573              buf[1] = LO_UINT16( grp->ID );
   \                     ??CrossCallReturnLabel_99:
   \   000050   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000053   12....       LCALL   ?Subroutine49 & 0xFFFF
    574              buf[2] = HI_UINT16( grp->ID );
   \                     ??CrossCallReturnLabel_100:
   \   000056   12....       LCALL   ?Subroutine20 & 0xFFFF
    575          
    576              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_186:
   \   000059   EA           MOV     A,R2
   \   00005A   2403         ADD     A,#0x3
   \   00005C   F8           MOV     R0,A
   \   00005D   E4           CLR     A
   \   00005E   35..         ADDC    A,?V1
   \   000060   F9           MOV     R1,A
   \   000061   E5..         MOV     A,?V7
   \   000063   703C         JNZ     ??zclGeneral_SendGroupViewResponse_2
    577              {
    578                buf[3] = grp->name[0]; // string length
   \   000065   85..82       MOV     DPL,?V2
   \   000068   85..83       MOV     DPH,?V3
   \   00006B   12....       LCALL   ?Subroutine65 & 0xFFFF
    579                zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
    580              }
   \                     ??CrossCallReturnLabel_142:
   \   00006E   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A982         MOV     R1,DPL
   \   000076   AA83         MOV     R2,DPH
   \   000078   89..         MOV     ?V4,R1
   \   00007A   8A..         MOV     ?V5,R2
   \   00007C   75..00       MOV     ?V6,#0x0
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   85..82       MOV     DPL,?V2
   \   000087   85..83       MOV     DPH,?V3
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FC           MOV     R4,A
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   E5..         MOV     A,?V0
   \   000090   2404         ADD     A,#0x4
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   35..         ADDC    A,?V1
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009A   7403         MOV     A,#0x3
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   8006         SJMP    ??zclGeneral_SendGroupViewResponse_3
    581              else //ZCL_STATUS_NOT_FOUND
    582              {
    583                buf[3] = 0;
   \                     ??zclGeneral_SendGroupViewResponse_2:
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
    584              }
    585          
    586              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    587                                      COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    588                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendGroupViewResponse_3:
   \   0000A7                ; Setup parameters for call to function zcl_SendCommand
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   8E..         MOV     ?V2,R6
   \   0000AE   75..00       MOV     ?V3,#0x0
   \   0000B1   78..         MOV     R0,#?V2
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   741C         MOV     A,#0x1c
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   E4           CLR     A
   \   0000C2   F5..         MOV     ?V2,A
   \   0000C4   78..         MOV     R0,#?V2
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   E5..         MOV     A,?V9
   \   0000CB   F5..         MOV     ?V2,A
   \   0000CD   78..         MOV     R0,#?V2
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   75..01       MOV     ?V2,#0x1
   \   0000D5   78..         MOV     R0,#?V2
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   78..         MOV     R0,#?V2
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   78..         MOV     R0,#?V2
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E4   7C04         MOV     R4,#0x4
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   AA..         MOV     R2,?V12
   \   0000EA   AB..         MOV     R3,?V13
   \   0000EC   A9..         MOV     R1,?V8
   \   0000EE   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000F1   740B         MOV     A,#0xb
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F6   E9           MOV     A,R1
   \   0000F7   FE           MOV     R6,A
    589              zcl_mem_free( buf );
   \   0000F8                ; Setup parameters for call to function osal_mem_free
   \   0000F8   AA..         MOV     R2,?V0
   \   0000FA   AB..         MOV     R3,?V1
   \   0000FC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000FF   8002         SJMP    ??zclGeneral_SendGroupViewResponse_4
    590            }
    591            else
    592            {
    593              stat = ZMemError;
   \                     ??zclGeneral_SendGroupViewResponse_1:
   \   000101   7E10         MOV     R6,#0x10
    594            }
    595          
    596            return ( stat );
   \                     ??zclGeneral_SendGroupViewResponse_4:
   \   000103   EE           MOV     A,R6
   \   000104   F9           MOV     R1,A
   \   000105   02....       LJMP    ??Subroutine87_0 & 0xFFFF
    597          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine79_0
   \   000001                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    598          #endif // ZCL_GROUPS
    599          
    600          #ifdef ZCL_SCENES
    601          /*********************************************************************
    602           * @fn      zclGeneral_SendAddSceneRequest
    603           *
    604           * @brief   Send the (Enhanced) Add Scene Request to a device. You can
    605           *           also use the appropriate macro.
    606           *
    607           * @param   srcEP - Sending Apps endpoint
    608           * @param   dstAddr - where to send the request
    609           * @param   scene - pointer to the scene structure
    610           * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
    611           * @param   disableDefaultRsp - whether to disable the Default Response command
    612           * @param   seqNum - sequence number
    613           *
    614           * @return  ZStatus_t
    615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    616          ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddSceneRequest:
    617                                                    uint8 cmd, zclGeneral_Scene_t *scene,
    618                                                    uint8 disableDefaultRsp, uint8 seqNum )
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00000D   89..         MOV     ?V7,R1
   \   00000F   8C..         MOV     ?V15,R4
   \   000011   8D..         MOV     ?V14,R5
   \   000013   741A         MOV     A,#0x1a
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine21 & 0xFFFF
    620            uint8 *buf;
    621            uint8 *pBuf;
    622            uint8 len;
    623            ZStatus_t status;
    624          
    625            len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
    626            len += scene->name[0] + 1; // String + 1 for length
    627          
    628            // Add something for the extension field length
    629            len += scene->extLen;
   \                     ??CrossCallReturnLabel_30:
   \   00001B   F5..         MOV     ?V8,A
   \   00001D   E4           CLR     A
   \   00001E   3F           ADDC    A,R7
   \   00001F   F5..         MOV     ?V9,A
   \   000021   85..82       MOV     DPL,?V12
   \   000024   85..83       MOV     DPH,?V13
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V8
   \   00002C   85..83       MOV     DPH,?V9
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   28           ADD     A,R0
   \   000031   2406         ADD     A,#0x6
   \   000033   F5..         MOV     ?V2,A
    630          
    631            buf = zcl_mem_alloc( len );
   \   000035   75..00       MOV     ?V3,#0x0
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   FA           MOV     R2,A
   \   000039   AB..         MOV     R3,?V3
   \   00003B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003E   8A..         MOV     ?V0,R2
   \   000040   8B..         MOV     ?V1,R3
    632            if ( buf )
   \   000042   EA           MOV     A,R2
   \   000043   45..         ORL     A,?V1
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??zclGeneral_SendAddSceneRequest_0 & 0xFFFF
    633            {
    634              pBuf = buf;
    635              *pBuf++ = LO_UINT16( scene->groupID );
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   12....       LCALL   ?Subroutine68 & 0xFFFF
    636              *pBuf++ = HI_UINT16( scene->groupID );
   \                     ??CrossCallReturnLabel_146:
   \   000056   12....       LCALL   ?Subroutine33 & 0xFFFF
    637              *pBuf++ = scene->ID;
   \                     ??CrossCallReturnLabel_71:
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ?Subroutine20 & 0xFFFF
    638              *pBuf++ = LO_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_187:
   \   00005D   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000060   12....       LCALL   ?Subroutine39 & 0xFFFF
    639              *pBuf++ = HI_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_87:
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00006B   F0           MOVX    @DPTR,A
    640              *pBuf++ = scene->name[0]; // string length
   \   00006C   85..82       MOV     DPL,?V8
   \   00006F   85..83       MOV     DPH,?V9
   \   000072   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   \   000077   EA           MOV     A,R2
   \   000078   2406         ADD     A,#0x6
   \   00007A   F5..         MOV     ?V10,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V1
   \   00007F   F5..         MOV     ?V11,A
    641              zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   85..82       MOV     DPL,?V8
   \   00008A   85..83       MOV     DPH,?V9
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FC           MOV     R4,A
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   AA..         MOV     R2,?V10
   \   000093   AB..         MOV     R3,?V11
   \   000095   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000098   7403         MOV     A,#0x3
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
    642              pBuf += scene->name[0]; // move pass name
    643          
    644              // Add the extension fields
    645              if ( scene->extLen > 0 )
   \   00009D   85..82       MOV     DPL,?V12
   \   0000A0   85..83       MOV     DPH,?V13
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FC           MOV     R4,A
   \   0000A5   6028         JZ      ??zclGeneral_SendAddSceneRequest_1
    646                zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   0000A7                ; Setup parameters for call to function osal_memcpy
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2418         ADD     A,#0x18
   \   0000AA   F5..         MOV     ?V4,A
   \   0000AC   E4           CLR     A
   \   0000AD   3F           ADDC    A,R7
   \   0000AE   F5..         MOV     ?V5,A
   \   0000B0   78..         MOV     R0,#?V4
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   85..82       MOV     DPL,?V8
   \   0000BA   85..83       MOV     DPH,?V9
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E5..         MOV     A,?V10
   \   0000C1   28           ADD     A,R0
   \   0000C2   FA           MOV     R2,A
   \   0000C3   E4           CLR     A
   \   0000C4   35..         ADDC    A,?V11
   \   0000C6   FB           MOV     R3,A
   \   0000C7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CA   7403         MOV     A,#0x3
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
    647          
    648              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    649                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    650                                        disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendAddSceneRequest_1:
   \   0000CF                ; Setup parameters for call to function zcl_SendCommand
   \   0000CF   78..         MOV     R0,#?V0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   78..         MOV     R0,#?V2
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   7420         MOV     A,#0x20
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E4   E4           CLR     A
   \   0000E5   F5..         MOV     ?V2,A
   \   0000E7   78..         MOV     R0,#?V2
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   E5..         MOV     A,?V14
   \   0000EE   F5..         MOV     ?V2,A
   \   0000F0   78..         MOV     R0,#?V2
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F5   75..00       MOV     ?V2,#0x0
   \   0000F8   78..         MOV     R0,#?V2
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   75..01       MOV     ?V2,#0x1
   \   000100   78..         MOV     R0,#?V2
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000105   E5..         MOV     A,?V15
   \   000107   F5..         MOV     ?V2,A
   \   000109   78..         MOV     R0,#?V2
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010E   7C05         MOV     R4,#0x5
   \   000110   7D00         MOV     R5,#0x0
   \   000112   740B         MOV     A,#0xb
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00011A   A9..         MOV     R1,?V7
   \   00011C   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00011F   740B         MOV     A,#0xb
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   \   000124   E9           MOV     A,R1
   \   000125   FE           MOV     R6,A
    651              zcl_mem_free( buf );
   \   000126                ; Setup parameters for call to function osal_mem_free
   \   000126   AA..         MOV     R2,?V0
   \   000128   AB..         MOV     R3,?V1
   \   00012A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012D   8002         SJMP    ??zclGeneral_SendAddSceneRequest_2
    652            }
    653            else
    654              status = ZMemError;
   \                     ??zclGeneral_SendAddSceneRequest_0:
   \   00012F   7E10         MOV     R6,#0x10
    655          
    656            return ( status );
   \                     ??zclGeneral_SendAddSceneRequest_2:
   \   000131                REQUIRE ?Subroutine4
   \   000131                ; // Fall through to label ?Subroutine4
    657          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7402         MOV     A,#0x2
   \   000004   12....       LCALL   ?DEALLOC_XSTACK8
   \   000007   7F10         MOV     R7,#0x10
   \   000009   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EE           MOV     A,R6
   \   000001   2408         ADD     A,#0x8
   \   000003                REQUIRE ??Subroutine78_0
   \   000003                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   F5..         MOV     ?V4,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F5..         MOV     ?V5,A
   \   000006   75..00       MOV     ?V6,#0x0
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   EE           MOV     A,R6
   \   000004   2417         ADD     A,#0x17
   \   000006   F5..         MOV     ?V12,A
   \   000008   E4           CLR     A
   \   000009   3F           ADDC    A,R7
   \   00000A   F5..         MOV     ?V13,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2407         ADD     A,#0x7
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   EE           MOV     A,R6
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine88_0
   \   000006                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    658          
    659          /*********************************************************************
    660           * @fn      zclGeneral_SendSceneRequest
    661           *
    662           * @brief   Send a Scene Request to a device.  You can also use the
    663           *          appropriate macro.
    664           *
    665           * @param   srcEP - Sending Apps endpoint
    666           * @param   dstAddr - where to send the request
    667           * @param   cmd - one of the following:
    668           *              COMMAND_SCENE_VIEW
    669           *              COMMAND_SCENE_REMOVE
    670           *              COMMAND_SCENE_REMOVE_ALL
    671           *              COMMAND_SCENE_STORE
    672           *              COMMAND_SCENE_RECALL
    673           *              COMMAND_SCENE_GET_MEMBERSHIP
    674           *              COMMAND_SCENE_ENHANCED_VIEW
    675           * @param   groupID - group ID
    676           * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
    677           *                    COMMAND_SCENE_GET_MEMBERSHIP)
    678           * @param   disableDefaultRsp - whether to disable the Default Response command
    679           * @param   seqNum - sequence number
    680           * @return  ZStatus_t
    681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    682          ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneRequest:
    683                                                 uint8 cmd, uint16 groupID, uint8 sceneID,
    684                                                 uint8 disableDefaultRsp, uint8 seqNum )
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    686            uint8 buf[3];
    687            uint8 len = 2;
   \   00000E   7C02         MOV     R4,#0x2
   \   000010   740F         MOV     A,#0xf
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine25 & 0xFFFF
    688          
    689            buf[0] = LO_UINT16( groupID );
    690            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_49:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    691          
    692            if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
   \   00001D   7403         MOV     A,#0x3
   \   00001F   6F           XRL     A,R7
   \   000020   600D         JZ      ??zclGeneral_SendSceneRequest_0
   \   000022   7406         MOV     A,#0x6
   \   000024   6F           XRL     A,R7
   \   000025   6008         JZ      ??zclGeneral_SendSceneRequest_0
    693            {
    694              buf[2] = sceneID;
   \   000027   EC           MOV     A,R4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   ED           MOV     A,R5
   \   00002C   F0           MOVX    @DPTR,A
    695              len++;
   \   00002D   7C03         MOV     R4,#0x3
    696            }
    697          
    698            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    699                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    700                                      disableDefaultRsp, 0, seqNum, len, buf ) );
   \                     ??zclGeneral_SendSceneRequest_0:
   \   00002F                ; Setup parameters for call to function zcl_SendCommand
   \   00002F   A8..         MOV     R0,?XSP + 0
   \   000031   A9..         MOV     R1,?XSP + 1
   \   000033   88..         MOV     ?V2,R0
   \   000035   89..         MOV     ?V3,R1
   \   000037   78..         MOV     R0,#?V2
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   8C..         MOV     ?V2,R4
   \   00003E   75..00       MOV     ?V3,#0x0
   \   000041   78..         MOV     R0,#?V2
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7416         MOV     A,#0x16
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   E4           CLR     A
   \   000052   F5..         MOV     ?V2,A
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7418         MOV     A,#0x18
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   75..00       MOV     ?V1,#0x0
   \   000067   78..         MOV     R0,#?V1
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   75..01       MOV     ?V1,#0x1
   \   00006F   78..         MOV     R0,#?V1
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   EF           MOV     A,R7
   \   000075   F5..         MOV     ?V1,A
   \   000077   78..         MOV     R0,#?V1
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   7C05         MOV     R4,#0x5
   \   00007E   02....       LJMP    ?Subroutine0 & 0xFFFF
    701          }
    702          
    703          /*********************************************************************
    704           * @fn      zclGeneral_SendSceneResponse
    705           *
    706           * @brief   Send Group Response (not Group View Response)
    707           *
    708           * @param   srcEP - Sending application's endpoint
    709           * @param   dstAddr - where you want the message to go
    710           * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
    711           *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
    712           * @param   status - scene command status
    713           * @param   groupID - what group
    714           * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
    715           *
    716           * @return  ZStatus_t
    717           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    718          ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneResponse:
    719                                                  uint8 cmd, uint8 status, uint16 groupID,
    720                                                  uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
    721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    722            uint8 buf[4];
    723            uint8 len = 1 + 2; // Status + Group ID
   \   00000E   7C03         MOV     R4,#0x3
    724          
    725            buf[0] = status;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   ED           MOV     A,R5
   \   000017   F0           MOVX    @DPTR,A
   \   000018   7410         MOV     A,#0x10
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine38 & 0xFFFF
    726            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_78:
   \   000020   7401         MOV     A,#0x1
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
    727            buf[2] = HI_UINT16( groupID );
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E9           MOV     A,R1
   \   00002D   F0           MOVX    @DPTR,A
    728          
    729            if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   00002E   EC           MOV     A,R4
   \   00002F   6F           XRL     A,R7
   \   000030   6011         JZ      ??zclGeneral_SendSceneResponse_0
    730            {
    731              buf[3] = sceneID;
   \   000032   7412         MOV     A,#0x12
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   EC           MOV     A,R4
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
    732              len++;
   \   000041   7C04         MOV     R4,#0x4
    733            }
    734          
    735            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    736                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    737                                    disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneResponse_0:
   \   000043                ; Setup parameters for call to function zcl_SendCommand
   \   000043   A8..         MOV     R0,?XSP + 0
   \   000045   A9..         MOV     R1,?XSP + 1
   \   000047   88..         MOV     ?V2,R0
   \   000049   89..         MOV     ?V3,R1
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   8C..         MOV     ?V2,R4
   \   000052   75..00       MOV     ?V3,#0x0
   \   000055   78..         MOV     R0,#?V2
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7418         MOV     A,#0x18
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   E4           CLR     A
   \   000066   F5..         MOV     ?V2,A
   \   000068   78..         MOV     R0,#?V2
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   741A         MOV     A,#0x1a
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   75..01       MOV     ?V1,#0x1
   \   00007B   78..         MOV     R0,#?V1
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   78..         MOV     R0,#?V1
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   EF           MOV     A,R7
   \   000086   F5..         MOV     ?V1,A
   \   000088   78..         MOV     R0,#?V1
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008D   7C05         MOV     R4,#0x5
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   EE           MOV     A,R6
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000096   740B         MOV     A,#0xb
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   7404         MOV     A,#0x4
   \   00009D   02....       LJMP    ??Subroutine75_0 & 0xFFFF
    738          }
    739          
    740          /*********************************************************************
    741           * @fn      zclGeneral_SendSceneViewResponse
    742           *
    743           * @brief   Call to send Scene (Enahced) View Response Command. You can
    744           *           also use the appropriate macro.
    745           *
    746           * @param   srcEP - Sending application's endpoint
    747           * @param   dstAddr - where you want the message to go
    748           * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
    749           * @param   status - scene command status
    750           * @param   scene - scene info
    751           *
    752           * @return  ZStatus_t
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneViewRsp:
    755                                                 uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
    756                                                 uint8 disableDefaultRsp, uint8 seqNum )
    757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00000D   89..         MOV     ?V15,R1
   \   00000F   8C..         MOV     ?V14,R4
   \   000011   8D..         MOV     ?V7,R5
    758            uint8 *buf;
    759            uint8 *pBuf;
    760            uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
   \   000013   7804         MOV     R0,#0x4
   \   000015   741A         MOV     A,#0x1a
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine21 & 0xFFFF
    761            ZStatus_t stat;
    762          
    763            if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_31:
   \   00001D   F5..         MOV     ?V10,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V11,A
   \   000023   ED           MOV     A,R5
   \   000024   7013         JNZ     ??zclGeneral_SendSceneViewRsp_0
    764            {
    765              len += 2; // Transition Time
    766              len += scene->name[0] + 1; // string + 1 for length
    767          
    768              // Add something for the extension field length
    769              len += scene->extLen;
   \   000026   85..82       MOV     DPL,?V12
   \   000029   85..83       MOV     DPH,?V13
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   85..82       MOV     DPL,?V10
   \   000031   85..83       MOV     DPH,?V11
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   2407         ADD     A,#0x7
   \   000038   F8           MOV     R0,A
    770            }
    771          
    772            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneViewRsp_0:
   \   000039   88..         MOV     ?V2,R0
   \   00003B   75..00       MOV     ?V3,#0x0
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   AA..         MOV     R2,?V2
   \   000040   AB..         MOV     R3,?V3
   \   000042   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8A..         MOV     ?V0,R2
   \   000047   8B..         MOV     ?V1,R3
    773            if ( buf )
   \   000049   EA           MOV     A,R2
   \   00004A   45..         ORL     A,?V1
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??zclGeneral_SendSceneViewRsp_1 & 0xFFFF
    774            {
    775              pBuf = buf;
    776              *pBuf++ = status;
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   E5..         MOV     A,?V7
   \   000057   F0           MOVX    @DPTR,A
    777              *pBuf++ = LO_UINT16( scene->groupID );
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   12....       LCALL   ?Subroutine33 & 0xFFFF
    778              *pBuf++ = HI_UINT16( scene->groupID );
   \                     ??CrossCallReturnLabel_72:
   \   00005F   12....       LCALL   ?Subroutine20 & 0xFFFF
    779              *pBuf++ = scene->ID;
   \                     ??CrossCallReturnLabel_188:
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine39 & 0xFFFF
    780              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_88:
   \   00006B   E5..         MOV     A,?V7
   \   00006D   6003         JZ      $+5
   \   00006F   02....       LJMP    ??zclGeneral_SendSceneViewRsp_2 & 0xFFFF
    781              {
    782                uint16 transTime = scene->transTime;
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ?Subroutine38 & 0xFFFF
    783                if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
   \                     ??CrossCallReturnLabel_79:
   \   00007C   7441         MOV     A,#0x41
   \   00007E   65..         XRL     A,?V14
   \   000080   701F         JNZ     ??zclGeneral_SendSceneViewRsp_3
    784                {
    785                  // Transition time is in 1/10s
    786                  transTime *= 10;
    787                  transTime += scene->transTime100ms;
   \   000082   E8           MOV     A,R0
   \   000083   75F00A       MOV     B,#0xa
   \   000086   A4           MUL     AB
   \   000087   F8           MOV     R0,A
   \   000088   AAF0         MOV     R2,B
   \   00008A   75F00A       MOV     B,#0xa
   \   00008D   E9           MOV     A,R1
   \   00008E   A4           MUL     AB
   \   00008F   2A           ADD     A,R2
   \   000090   F9           MOV     R1,A
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   28           ADD     A,R0
   \   00009C   F8           MOV     R0,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   39           ADDC    A,R1
   \   0000A0   F9           MOV     R1,A
    788                }
    789          
    790                *pBuf++ = LO_UINT16( transTime );
   \                     ??zclGeneral_SendSceneViewRsp_3:
   \   0000A1   E8           MOV     A,R0
   \   0000A2   85..82       MOV     DPL,?V0
   \   0000A5   8B83         MOV     DPH,R3
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   F0           MOVX    @DPTR,A
    791                *pBuf++ = HI_UINT16( transTime );
   \   0000AC   E9           MOV     A,R1
   \   0000AD   85..82       MOV     DPL,?V0
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   F0           MOVX    @DPTR,A
    792                *pBuf++ = scene->name[0]; // string length
   \   0000B8   85..82       MOV     DPL,?V10
   \   0000BB   85..83       MOV     DPH,?V11
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   E5..         MOV     A,?V0
   \   0000CD   2407         ADD     A,#0x7
   \   0000CF   F5..         MOV     ?V8,A
   \   0000D1   E4           CLR     A
   \   0000D2   35..         ADDC    A,?V1
   \   0000D4   F5..         MOV     ?V9,A
    793                if ( scene->name[0] != 0 )
   \   0000D6   85..82       MOV     DPL,?V10
   \   0000D9   85..83       MOV     DPH,?V11
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FC           MOV     R4,A
   \   0000DE   6026         JZ      ??zclGeneral_SendSceneViewRsp_4
    794                {
    795                  zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   0000E0                ; Setup parameters for call to function osal_memcpy
   \   0000E0   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   AA..         MOV     R2,?V8
   \   0000EA   AB..         MOV     R3,?V9
   \   0000EC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EF   7403         MOV     A,#0x3
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
    796                  pBuf += scene->name[0]; // move pass name
   \   0000F4   85..82       MOV     DPL,?V10
   \   0000F7   85..83       MOV     DPH,?V11
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F8           MOV     R0,A
   \   0000FC   E5..         MOV     A,?V8
   \   0000FE   28           ADD     A,R0
   \   0000FF   F5..         MOV     ?V8,A
   \   000101   E4           CLR     A
   \   000102   35..         ADDC    A,?V9
   \   000104   F5..         MOV     ?V9,A
    797                }
    798          
    799                // Add the extension fields
    800                if ( scene->extLen > 0 )
   \                     ??zclGeneral_SendSceneViewRsp_4:
   \   000106   85..82       MOV     DPL,?V12
   \   000109   85..83       MOV     DPH,?V13
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   FC           MOV     R4,A
   \   00010E   6017         JZ      ??zclGeneral_SendSceneViewRsp_2
    801                  zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   000110                ; Setup parameters for call to function osal_memcpy
   \   000110   EE           MOV     A,R6
   \   000111   2418         ADD     A,#0x18
   \   000113   12....       LCALL   ??Subroutine78_0 & 0xFFFF
    802              }
   \                     ??CrossCallReturnLabel_182:
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000119   7D00         MOV     R5,#0x0
   \   00011B   AA..         MOV     R2,?V8
   \   00011D   AB..         MOV     R3,?V9
   \   00011F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000122   7403         MOV     A,#0x3
   \   000124   12....       LCALL   ?DEALLOC_XSTACK8
    803          
    804              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    805                                      cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    806                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneViewRsp_2:
   \   000127                ; Setup parameters for call to function zcl_SendCommand
   \   000127   78..         MOV     R0,#?V0
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012C   78..         MOV     R0,#?V2
   \   00012E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000131   7421         MOV     A,#0x21
   \   000133   12....       LCALL   ?XSTACK_DISP0_8
   \   000136   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013C   E4           CLR     A
   \   00013D   F5..         MOV     ?V2,A
   \   00013F   78..         MOV     R0,#?V2
   \   000141   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000144   7423         MOV     A,#0x23
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014F   75..01       MOV     ?V2,#0x1
   \   000152   78..         MOV     R0,#?V2
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000157   78..         MOV     R0,#?V2
   \   000159   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015C   E5..         MOV     A,?V14
   \   00015E   F5..         MOV     ?V2,A
   \   000160   78..         MOV     R0,#?V2
   \   000162   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000165   7C05         MOV     R4,#0x5
   \   000167   7D00         MOV     R5,#0x0
   \   000169   740B         MOV     A,#0xb
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000171   A9..         MOV     R1,?V15
   \   000173   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000176   740B         MOV     A,#0xb
   \   000178   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017B   E9           MOV     A,R1
   \   00017C   FE           MOV     R6,A
    807              zcl_mem_free( buf );
   \   00017D                ; Setup parameters for call to function osal_mem_free
   \   00017D   AA..         MOV     R2,?V0
   \   00017F   AB..         MOV     R3,?V1
   \   000181   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000184   8002         SJMP    ??zclGeneral_SendSceneViewRsp_5
    808            }
    809            else
    810              stat = ZMemError;
   \                     ??zclGeneral_SendSceneViewRsp_1:
   \   000186   7E10         MOV     R6,#0x10
    811          
    812            return ( stat );
   \                     ??zclGeneral_SendSceneViewRsp_5:
   \   000188   02....       LJMP    ?Subroutine4 & 0xFFFF
    813          }
    814          
    815          /*********************************************************************
    816           * @fn      zclGeneral_SendSceneGetMembershipResponse
    817           *
    818           * @brief   Call to send Scene Get Membership Response Command
    819           *
    820           * @param   srcEP - Sending application's endpoint
    821           * @param   dstAddr - where you want the message to go
    822           * @param   status - scene command status
    823           * @param   capacity - remaining capacity of the scene table
    824           * @param   sceneCnt - number of scenes in the scene list
    825           * @param   sceneList - list of scene IDs
    826           * @param   groupID - group ID that scene belongs to
    827           * @param   seqNum - sequence number
    828           *
    829           * @return  ZStatus_t
    830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    831          ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneGetMembershipResponse:
    832                                                               uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
    833                                                               uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    834          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    835            uint8 *buf;
    836            uint8 *pBuf;
    837            uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
   \   00000F   7804         MOV     R0,#0x4
   \   000011   7412         MOV     A,#0x12
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
    838            uint8 i;
    839            ZStatus_t stat;
    840          
    841            if ( status == ZCL_STATUS_SUCCESS )
   \   000019   EE           MOV     A,R6
   \   00001A   7005         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_0
    842            {
    843              len++; // Scene Count
    844              len += sceneCnt; // Scene List (Scene ID is a single octet)
   \   00001C   7405         MOV     A,#0x5
   \   00001E   25..         ADD     A,?V3
   \   000020   F8           MOV     R0,A
    845            }
    846          
    847            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_0:
   \   000021   88..         MOV     ?V4,R0
   \   000023   75..00       MOV     ?V5,#0x0
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   AA..         MOV     R2,?V4
   \   000028   AB..         MOV     R3,?V5
   \   00002A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
    848            if ( buf )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V1
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??zclGeneral_SendSceneGetMembershipResponse_1 & 0xFFFF
    849            {
    850              pBuf = buf;
    851              *pBuf++ = status;
   \   000039   EE           MOV     A,R6
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   F0           MOVX    @DPTR,A
    852              *pBuf++ = capacity;
   \   00003F   EF           MOV     A,R7
   \   000040   A3           INC     DPTR
   \   000041   F0           MOVX    @DPTR,A
   \   000042   7415         MOV     A,#0x15
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ?Subroutine36 & 0xFFFF
    853              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_76:
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   F0           MOVX    @DPTR,A
    854              *pBuf++ = HI_UINT16( groupID );
   \   00004D   E9           MOV     A,R1
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   F0           MOVX    @DPTR,A
    855              if ( status == ZCL_STATUS_SUCCESS )
   \   000056   EE           MOV     A,R6
   \   000057   7036         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_2
    856              {
    857                *pBuf++ = sceneCnt;
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E5..         MOV     A,?V3
   \   000063   F0           MOVX    @DPTR,A
   \   000064   EA           MOV     A,R2
   \   000065   2405         ADD     A,#0x5
   \   000067   F8           MOV     R0,A
   \   000068   E4           CLR     A
   \   000069   35..         ADDC    A,?V1
   \   00006B   F9           MOV     R1,A
    858                for ( i = 0; i < sceneCnt; i++ )
   \   00006C   75..00       MOV     ?V8,#0x0
   \   00006F   7413         MOV     A,#0x13
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000077   800F         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_3
    859                  *pBuf++ = sceneList[i];
   \                     ??zclGeneral_SendSceneGetMembershipResponse_4:
   \   000079   AC..         MOV     R4,?V8
   \   00007B   EA           MOV     A,R2
   \   00007C   2C           ADD     A,R4
   \   00007D   F582         MOV     DPL,A
   \   00007F   E4           CLR     A
   \   000080   3B           ADDC    A,R3
   \   000081   F583         MOV     DPH,A
   \   000083   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000086   05..         INC     ?V8
   \                     ??zclGeneral_SendSceneGetMembershipResponse_3:
   \   000088   E5..         MOV     A,?V8
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V3
   \   00008D   40EA         JC      ??zclGeneral_SendSceneGetMembershipResponse_4
    860              }
    861          
    862              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    863                                      COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
    864                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_2:
   \   00008F                ; Setup parameters for call to function zcl_SendCommand
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   741C         MOV     A,#0x1c
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A4   E4           CLR     A
   \   0000A5   F5..         MOV     ?V4,A
   \   0000A7   78..         MOV     R0,#?V4
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   741E         MOV     A,#0x1e
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B7   75..01       MOV     ?V3,#0x1
   \   0000BA   78..         MOV     R0,#?V3
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   78..         MOV     R0,#?V3
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   75..06       MOV     ?V3,#0x6
   \   0000C7   78..         MOV     R0,#?V3
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   7C05         MOV     R4,#0x5
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   AA..         MOV     R2,?V6
   \   0000D2   AB..         MOV     R3,?V7
   \   0000D4   A9..         MOV     R1,?V2
   \   0000D6   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D9   740B         MOV     A,#0xb
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F5..         MOV     ?V3,A
    865              zcl_mem_free( buf );
   \   0000E1                ; Setup parameters for call to function osal_mem_free
   \   0000E1   AA..         MOV     R2,?V0
   \   0000E3   AB..         MOV     R3,?V1
   \   0000E5   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E8   8003         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_5
    866            }
    867            else
    868              stat = ZMemError;
   \                     ??zclGeneral_SendSceneGetMembershipResponse_1:
   \   0000EA   75..10       MOV     ?V3,#0x10
    869          
    870            return ( stat );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_5:
   \   0000ED   A9..         MOV     R1,?V3
   \   0000EF   7F0A         MOV     R7,#0xa
   \   0000F1   02....       LJMP    ?BANKED_LEAVE_XDATA
    871          }
    872          
    873          #ifdef ZCL_LIGHT_LINK_ENHANCE
    874          /*********************************************************************
    875           * @fn      zclGeneral_SendSceneCopy
    876           *
    877           * @brief   Send Scene Copy Request to a device
    878           *
    879           * @param   srcEP - sending application's endpoint
    880           * @param   dstAddr - where to send the request
    881           * @param   mode - how scene copy is to proceed
    882           * @param   groupIDFrom - group from which scene to be copied
    883           * @param   sceneIDFrom - scene from which scene to be copied
    884           * @param   groupIDTo - group to which scene to be copied
    885           * @param   sceneIDTo - scene to which scene to be copied
    886           * @param   disableDefaultRsp - disable Default Response command
    887           * @param   seqNum - the identification number for the transaction
    888           *
    889           * @return  ZStatus_t
    890           */
    891          ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
    892                                              uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
    893                                              uint16 groupIDTo, uint8 sceneIDTo,
    894                                              uint8 disableDefaultRsp, uint8 seqNum )
    895          {
    896            uint8 buf[7];
    897          
    898            buf[0] = mode;
    899            buf[1] = LO_UINT16( groupIDFrom );
    900            buf[2] = HI_UINT16( groupIDFrom );
    901            buf[3] = sceneIDFrom;
    902            buf[4] = LO_UINT16( groupIDTo );
    903            buf[5] = HI_UINT16( groupIDTo );
    904            buf[6] = sceneIDTo;
    905          
    906            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    907                                      COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    908                                      disableDefaultRsp, 0, seqNum, 7, buf ) );
    909          }
    910          
    911          /*********************************************************************
    912           * @fn      zclGeneral_SendSceneCopyResponse
    913           *
    914           * @brief   Send Scene Copy Response to a device
    915           *
    916           * @param   srcEP - sending application's endpoint
    917           * @param   dstAddr - where to send the request
    918           * @param   status - status of copy scene attemp
    919           * @param   groupIDFrom - group from which scene was copied
    920           * @param   sceneIDFrom - scene from which scene was copied
    921           * @param   disableDefaultRsp - disable Default Response command
    922           * @param   seqNum - the identification number for the transaction
    923           *
    924           * @return  ZStatus_t
    925           */
    926          ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
    927                                                      uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
    928                                                      uint8 disableDefaultRsp, uint8 seqNum )
    929          {
    930            uint8 buf[4];
    931          
    932            buf[0] = status;
    933            buf[1] = LO_UINT16( groupIDFrom );
    934            buf[2] = HI_UINT16( groupIDFrom );
    935            buf[3] = sceneIDFrom;
    936          
    937            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    938                                      COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    939                                      disableDefaultRsp, 0, seqNum, 4, buf ) );
    940          }
    941          #endif // ZCL_LIGHT_LINK_ENHANCE
    942          #endif // ZCL_SCENES
    943          
    944          #ifdef ZCL_ON_OFF
    945          #ifdef ZCL_LIGHT_LINK_ENHANCE
    946          /*********************************************************************
    947           * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
    948           *
    949           * @brief   Call to send out an Off with Effect Command.
    950           *
    951           * @param   srcEP - Sending application's endpoint
    952           * @param   dstAddr - where you want the message to go
    953           * @param   effectId - fading effect to use when switching light off
    954           * @param   effectVariant - which variant of effect to be triggered
    955           * @param   disableDefaultRsp - whether to disable the Default Response command
    956           * @param   seqNum - sequence number
    957           *
    958           * @return  ZStatus_t
    959           */
    960          ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
    961                                                           uint8 effectId, uint8 effectVariant,
    962                                                           uint8 disableDefaultRsp, uint8 seqNum )
    963          {
    964            uint8 buf[2];
    965          
    966            buf[0] = effectId;
    967            buf[1] = effectVariant;
    968          
    969            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
    970                                    COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    971                                    disableDefaultRsp, 0, seqNum, 2, buf );
    972          }
    973          
    974          /*********************************************************************
    975           * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
    976           *
    977           * @brief   Call to send out an On with Timed Off Command.
    978           *
    979           * @param   srcEP - Sending application's endpoint
    980           * @param   dstAddr - where you want the message to go
    981           * @param   onOffCtrl - how the lamp is to be operated
    982           * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
    983           * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
    984           * @param   disableDefaultRsp - whether to disable the Default Response command
    985           * @param   seqNum - sequence number
    986           *
    987           * @return  ZStatus_t
    988           */
    989          ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
    990                                                             zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
    991                                                             uint8 disableDefaultRsp, uint8 seqNum )
    992          {
    993            uint8 buf[5];
    994          
    995            buf[0] = onOffCtrl.byte;
    996            buf[1] = LO_UINT16( onTime );
    997            buf[2] = HI_UINT16( onTime );
    998            buf[3] = LO_UINT16( offWaitTime );
    999            buf[4] = HI_UINT16( offWaitTime );
   1000          
   1001            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
   1002                                    COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1003                                    disableDefaultRsp, 0, seqNum, 5, buf );
   1004          }
   1005          #endif // ZCL_LIGHT_LINK_ENHANCE
   1006          #endif // ZCL_ON_OFF
   1007          
   1008          #ifdef ZCL_LEVEL_CTRL
   1009          /*********************************************************************
   1010           * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
   1011           *
   1012           * @brief   Call to send out a Level Control Request. You can also use
   1013           *          the appropriate macro.
   1014           *
   1015           * @param   srcEP - Sending application's endpoint
   1016           * @param   dstAddr - where you want the message to go
   1017           * @param   cmd - one of the following:
   1018           *              COMMAND_LEVEL_MOVE_TO_LEVEL or
   1019           *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
   1020           * @param   level - what level to move to
   1021           * @param   transitionTime - how long to take to get to the level (in seconds)
   1022           *
   1023           * @return  ZStatus_t
   1024           */
   1025          ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1026                                                                   uint8 cmd, uint8 level, uint16 transTime,
   1027                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   1028          {
   1029            uint8 buf[3];
   1030          
   1031            buf[0] = level;
   1032            buf[1] = LO_UINT16( transTime );
   1033            buf[2] = HI_UINT16( transTime );
   1034          
   1035            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1036                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1037                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1038          }
   1039          
   1040          /*********************************************************************
   1041           * @fn      zclGeneral_SendLevelControlMoveRequest
   1042           *
   1043           * @brief   Call to send out a Level Control Request. You can also use
   1044           *          the appropriate macro.
   1045           *
   1046           * @param   srcEP - Sending application's endpoint
   1047           * @param   dstAddr - where you want the message to go
   1048           * @param   cmd - one of the following:
   1049           *              COMMAND_LEVEL_MOVE or
   1050           *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
   1051           * @param   moveMode - LEVEL_MOVE_UP or
   1052           *                     LEVEL_MOVE_DOWN
   1053           * @param   rate - number of steps to take per second
   1054           *
   1055           * @return  ZStatus_t
   1056           */
   1057          ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1058                                                            uint8 cmd, uint8 moveMode, uint8 rate,
   1059                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1060          {
   1061            uint8 buf[2];
   1062          
   1063            buf[0] = moveMode;
   1064            buf[1] = rate;
   1065          
   1066            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1067                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1068                                    disableDefaultRsp, 0, seqNum, 2, buf );
   1069          }
   1070          
   1071          /*********************************************************************
   1072           * @fn      zclGeneral_SendLevelControlStepRequest
   1073           *
   1074           * @brief   Call to send out a Level Control Request. You can also use
   1075           *          the appropriate macro.
   1076           *
   1077           * @param   srcEP - Sending application's endpoint
   1078           * @param   dstAddr - where you want the message to go
   1079           * @param   cmd - one of the following:
   1080           *              COMMAND_LEVEL_STEP
   1081           *              COMMAND_LEVEL_STEP_WITH_ON_OFF
   1082           * @param   stepMode - LEVEL_STEP_UP or
   1083           *                     LEVEL_STEP_DOWN
   1084           * @param   amount - number of levels to step
   1085           * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
   1086           *
   1087           * @return  ZStatus_t
   1088           */
   1089          ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1090                                                            uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
   1091                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1092          {
   1093            uint8 buf[4];
   1094          
   1095            buf[0] = stepMode;
   1096            buf[1] = stepSize;
   1097            buf[2] = LO_UINT16( transTime );
   1098            buf[3] = HI_UINT16( transTime );
   1099          
   1100            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1101                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1102                                    disableDefaultRsp, 0, seqNum, 4, buf );
   1103          }
   1104          
   1105          /*********************************************************************
   1106           * @fn      zclGeneral_SendLevelControlStepRequest
   1107           *
   1108           * @brief   Call to send out a Level Control Request. You can also use
   1109           *          the appropriate macro.
   1110           *
   1111           * @param   srcEP - Sending application's endpoint
   1112           * @param   dstAddr - where you want the message to go
   1113           * @param   cmd - one of the following:
   1114           *              COMMAND_LEVEL_STOP
   1115           *              COMMAND_LEVEL_STOP_WITH_ON_OFF
   1116           *
   1117           * @return  ZStatus_t
   1118           */
   1119          ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1120                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1121          {
   1122            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1123                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1124                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   1125          }
   1126          #endif // ZCL_LEVEL_CTRL
   1127          
   1128          #ifdef ZCL_ALARMS
   1129          /*********************************************************************
   1130           * @fn      zclGeneral_SendAlarm
   1131           *
   1132           * @brief   Call to send out an Alarm Request Command
   1133           *
   1134           * @param   srcEP - Sending application's endpoint
   1135           * @param   dstAddr - where you want the message to go
   1136           * @param   cmd - COMMAND_ALARMS_ALARM
   1137           * @param   alarmCode - code for the cause of the alarm
   1138           * @param   clusterID - cluster whose attribute generate the alarm
   1139           *
   1140           * @return  ZStatus_t
   1141           */
   1142          ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
   1143                                          uint8 alarmCode, uint16 clusterID,
   1144                                          uint8 disableDefaultRsp, uint8 seqNum )
   1145          {
   1146            uint8 buf[3];
   1147          
   1148            buf[0] = alarmCode;
   1149            buf[1] = LO_UINT16( clusterID );
   1150            buf[2] = HI_UINT16( clusterID );
   1151          
   1152            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1153                                    COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1154                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1155          }
   1156          
   1157          /*********************************************************************
   1158           * @fn      zclGeneral_SendAlarmReset
   1159           *
   1160           * @brief   Call to send out an Alarm Reset Command
   1161           *
   1162           * @param   srcEP - Sending application's endpoint
   1163           * @param   dstAddr - where you want the message to go
   1164           * @param   alarmCode - code for the cause of the alarm
   1165           * @param   clusterID - cluster whose attribute generate the alarm
   1166           *
   1167           * @return  ZStatus_t
   1168          */
   1169          ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
   1170                                               uint8 alarmCode, uint16 clusterID,
   1171                                               uint8 disableDefaultRsp, uint8 seqNum )
   1172          {
   1173            uint8 buf[3];
   1174          
   1175            buf[0] = alarmCode;
   1176            buf[1] = LO_UINT16( clusterID );
   1177            buf[2] = HI_UINT16( clusterID );
   1178          
   1179            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1180                                    COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1181                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1182          }
   1183          
   1184          /*********************************************************************
   1185           * @fn      zclGeneral_SendAlarmGetResponse
   1186           *
   1187           * @brief   Call to send out an Alarm Get Response Command
   1188           *
   1189           * @param   srcEP - Sending application's endpoint
   1190           * @param   dstAddr - where you want the message to go
   1191           * @param   status - SUCCESS or NOT_FOUND
   1192           * @param   alarmCode - code for the cause of the alarm
   1193           * @param   clusterID - cluster whose attribute generate the alarm
   1194           * @param   timeStamp - time at which the alarm occured
   1195           *
   1196           * @return  ZStatus_t
   1197           */
   1198          ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1199                                                     uint8 status, uint8 alarmCode, uint16 clusterID,
   1200                                                     uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
   1201          {
   1202            uint8 buf[8];
   1203            uint8 len = 1; // Status
   1204          
   1205            buf[0] = status;
   1206            if ( status == ZCL_STATUS_SUCCESS )
   1207            {
   1208              len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
   1209              buf[1] = alarmCode;
   1210              buf[2] = LO_UINT16( clusterID );
   1211              buf[3] = HI_UINT16( clusterID );
   1212              zcl_buffer_uint32( &buf[4], timeStamp );
   1213            }
   1214          
   1215            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1216                                    COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1217                                    disableDefaultRsp, 0, seqNum, len, buf );
   1218          }
   1219          
   1220          #ifdef SE_UK_EXT
   1221          /*********************************************************************
   1222           * @fn      zclGeneral_SendAlarmGetEventLog
   1223           *
   1224           * @brief   Call to send out an Alarm Get Event Log Command
   1225           *
   1226           * @param   srcEP - Sending application's endpoint
   1227           * @param   dstAddr - where you want the message to go
   1228           * @param   pEventLog - pointer to Get Event Log Command
   1229           * @param   disableDefaultRsp - disable default response
   1230           * @param   seqNum - ZCL sequence number
   1231           *
   1232           * @return  ZStatus_t
   1233           */
   1234          ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1235                                                     zclGetEventLog_t *pEventLog,
   1236                                                     uint8 disableDefaultRsp, uint8 seqNum )
   1237          {
   1238            uint8 buf[10];
   1239          
   1240            buf[0] = pEventLog->logID;
   1241            zcl_buffer_uint32( &buf[1], pEventLog->startTime );
   1242            zcl_buffer_uint32( &buf[5], pEventLog->endTime );
   1243            buf[9] = pEventLog->numEvents;
   1244          
   1245            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1246                                    COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1247                                    disableDefaultRsp, 0, seqNum, 10, buf );
   1248          }
   1249          
   1250          /*********************************************************************
   1251           * @fn      zclGeneral_SendAlarmPublishEventLog
   1252           *
   1253           * @brief   Call to send out an Alarm Publish Event Log Command
   1254           *
   1255           * @param   srcEP - Sending application's endpoint
   1256           * @param   dstAddr - where you want the message to go
   1257           * @param   pEventLog - pointer to Publish Event Log Command
   1258           * @param   disableDefaultRsp - disable default response
   1259           * @param   seqNum - ZCL sequence number
   1260           *
   1261           * @return  ZStatus_t
   1262           */
   1263          ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1264                                                         zclPublishEventLog_t *pEventLog,
   1265                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1266          {
   1267            uint8 *buf;
   1268            uint8 *pBuf;
   1269            uint8 bufLen;
   1270          
   1271            // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
   1272            bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
   1273          
   1274            buf = zcl_mem_alloc( bufLen );
   1275            if ( buf == NULL )
   1276            {
   1277              return (ZMemError);
   1278            }
   1279          
   1280            pBuf = buf;
   1281            *pBuf++ = pEventLog->logID;
   1282            *pBuf++ = pEventLog->cmdIndex;
   1283            *pBuf++ = pEventLog->totalCmds;
   1284          
   1285            for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
   1286            {
   1287              zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
   1288          
   1289              *pBuf++ = pLogs->eventId;
   1290              pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
   1291            }
   1292          
   1293            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1294                                    COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1295                                    disableDefaultRsp, 0, seqNum, bufLen, buf );
   1296          }
   1297          #endif // SE_UK_EXT
   1298          #endif // ZCL_ALARMS
   1299          
   1300          #ifdef ZCL_LOCATION
   1301          /*********************************************************************
   1302           * @fn      zclGeneral_SendLocationSetAbsolute
   1303           *
   1304           * @brief   Call to send out a Set Absolute Location Command
   1305           *
   1306           * @param   srcEP - Sending application's endpoint
   1307           * @param   dstAddr - where you want the message to go
   1308           * @param   absLoc - absolute location info
   1309           *
   1310           * @return  ZStatus_t
   1311           */
   1312          ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
   1313                                                        zclLocationAbsolute_t *absLoc,
   1314                                                        uint8 disableDefaultRsp, uint8 seqNum )
   1315          {
   1316             uint8 buf[10]; // 5 fields (2 octects each)
   1317          
   1318             buf[0] = LO_UINT16( absLoc->coordinate1 );
   1319             buf[1] = HI_UINT16( absLoc->coordinate1 );
   1320             buf[2] = LO_UINT16( absLoc->coordinate2 );
   1321             buf[3] = HI_UINT16( absLoc->coordinate2 );
   1322             buf[4] = LO_UINT16( absLoc->coordinate3 );
   1323             buf[5] = HI_UINT16( absLoc->coordinate3 );
   1324             buf[6] = LO_UINT16( absLoc->power );
   1325             buf[7] = HI_UINT16( absLoc->power );
   1326             buf[8] = LO_UINT16( absLoc->pathLossExponent );
   1327             buf[9] = HI_UINT16( absLoc->pathLossExponent );
   1328          
   1329             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1330                                     COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
   1331                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
   1332          }
   1333          
   1334          /*********************************************************************
   1335           * @fn      zclGeneral_SendLocationSetDevCfg
   1336           *
   1337           * @brief   Call to send out a Set Device Configuration Command
   1338           *
   1339           * @param   srcEP - Sending application's endpoint
   1340           * @param   dstAddr - where you want the message to go
   1341           * @param   devCfg - device configuration info
   1342           *
   1343           * @return  ZStatus_t
   1344           */
   1345          ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1346                                                      zclLocationDevCfg_t *devCfg,
   1347                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1348          {
   1349             uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
   1350          
   1351             buf[0] = LO_UINT16( devCfg->power );
   1352             buf[1] = HI_UINT16( devCfg->power );
   1353             buf[2] = LO_UINT16( devCfg->pathLossExponent );
   1354             buf[3] = HI_UINT16( devCfg->pathLossExponent );
   1355             buf[4] = LO_UINT16( devCfg->calcPeriod );
   1356             buf[5] = HI_UINT16( devCfg->calcPeriod );
   1357             buf[6] = devCfg->numMeasurements;
   1358             buf[7] = LO_UINT16( devCfg->reportPeriod );
   1359             buf[8] = HI_UINT16( devCfg->reportPeriod );
   1360          
   1361             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1362                                     COMMAND_LOCATION_SET_DEV_CFG, TRUE,
   1363                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
   1364          }
   1365          
   1366          /*********************************************************************
   1367           * @fn      zclGeneral_SendLocationGetDevCfg
   1368           *
   1369           * @brief   Call to send out a Get Device Configuration Command
   1370           *
   1371           * @param   srcEP - Sending application's endpoint
   1372           * @param   dstAddr - where you want the message to go
   1373           * @param   targetAddr - device for which location parameters are being requested
   1374           *
   1375           * @return  ZStatus_t
   1376           */
   1377          ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1378                                                      uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
   1379          {
   1380            uint8 buf[8];
   1381          
   1382            zcl_memcpy( buf, targetAddr, 8 );
   1383          
   1384            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1385                                    COMMAND_LOCATION_GET_DEV_CFG, TRUE,
   1386                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
   1387          }
   1388          
   1389          /*********************************************************************
   1390           * @fn      zclGeneral_SendLocationGetData
   1391           *
   1392           * @brief   Call to send out a Get Location Data Command
   1393           *
   1394           * @param   srcEP - Sending application's endpoint
   1395           * @param   dstAddr - where you want the message to go
   1396           * @param   locaData - location information and channel parameters that are requested.
   1397           *
   1398           * @return  ZStatus_t
   1399           */
   1400          ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
   1401                                                    zclLocationGetData_t *locData,
   1402                                                    uint8 disableDefaultRsp, uint8 seqNum )
   1403          {
   1404            uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
   1405            uint8 *pBuf = buf;
   1406            uint8 len = 2; // bitmap + number responses
   1407          
   1408            *pBuf  = locData->absoluteOnly;
   1409            *pBuf |= locData->recalculate << 1;
   1410            *pBuf |= locData->brdcastIndicator << 2;
   1411            *pBuf |= locData->brdcastResponse << 3;
   1412            *pBuf |= locData->compactResponse << 4;
   1413            pBuf++;  // move past the bitmap field
   1414          
   1415            *pBuf++ = locData->numResponses;
   1416          
   1417            if ( locData->brdcastIndicator == 0 )
   1418            {
   1419              zcl_memcpy( pBuf, locData->targetAddr, 8 );
   1420              len += 8; // ieee addr
   1421            }
   1422          
   1423            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1424                                    COMMAND_LOCATION_GET_DATA, TRUE,
   1425                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1426          }
   1427          
   1428          /*********************************************************************
   1429           * @fn      zclGeneral_SendLocationDevCfgResponse
   1430           *
   1431           * @brief   Call to send out a Device Configuration Response Command
   1432           *
   1433           * @param   srcEP - Sending application's endpoint
   1434           * @param   dstAddr - where you want the message to go
   1435           * @param   devCfg - device's location parameters that are requested
   1436           *
   1437           * @return  ZStatus_t
   1438           */
   1439          ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1440                                                           zclLocationDevCfgRsp_t *devCfg,
   1441                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1442          {
   1443            uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
   1444            uint8 len = 1; // Status
   1445          
   1446            buf[0] = devCfg->status;
   1447            if ( devCfg->status == ZCL_STATUS_SUCCESS )
   1448            {
   1449              buf[1] = LO_UINT16( devCfg->data.power );
   1450              buf[2] = HI_UINT16( devCfg->data.power );
   1451              buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
   1452              buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
   1453              buf[5] = LO_UINT16( devCfg->data.calcPeriod );
   1454              buf[6] = HI_UINT16( devCfg->data.calcPeriod );
   1455              buf[7] = devCfg->data.numMeasurements;
   1456              buf[8] = LO_UINT16( devCfg->data.reportPeriod );
   1457              buf[9] = HI_UINT16( devCfg->data.reportPeriod );
   1458              len += 9;
   1459            }
   1460          
   1461            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1462                                    COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
   1463                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1464          }
   1465          
   1466          /*********************************************************************
   1467           * @fn      zclGeneral_SendLocationData
   1468           *
   1469           * @brief   Call to send out location data
   1470           *
   1471           * @param   srcEP - Sending application's endpoint
   1472           * @param   dstAddr - where you want the message to go
   1473           * @param   status - indicates whether response to request was successful or not
   1474           * @param   locData - location information and channel parameters being sent
   1475           *
   1476           * @return  ZStatus_t
   1477           */
   1478          ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1479                                                 uint8 status, zclLocationData_t *locData,
   1480                                                 uint8 disableDefaultRsp, uint8 seqNum )
   1481          {
   1482            uint8 buf[16];
   1483            uint8 *pBuf = buf;
   1484            uint8 len = 0;
   1485          
   1486            if ( cmd == COMMAND_LOCATION_DATA_RSP )
   1487            {
   1488              // Only response command includes a status field
   1489              *pBuf++ = status;
   1490              len++;
   1491            }
   1492          
   1493            if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
   1494            {
   1495              // Notification or Response with successful status
   1496              *pBuf++ = locData->type;
   1497              *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
   1498              *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
   1499              *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
   1500              *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
   1501              len += 5;
   1502          
   1503              if ( locationType2D(locData->type) == 0 )
   1504              {
   1505                // 2D location doesn't have coordinate 3
   1506                *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
   1507                *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
   1508                len += 2;
   1509              }
   1510          
   1511              if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1512              {
   1513                // Compact notification doesn't include these fields
   1514                *pBuf++ = LO_UINT16( locData->absLoc.power );
   1515                *pBuf++ = HI_UINT16( locData->absLoc.power );
   1516                *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
   1517                *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
   1518                len += 4;
   1519              }
   1520          
   1521              if ( locationTypeAbsolute(locData->type) == 0 )
   1522              {
   1523                // Absolute location doesn't include these fields
   1524                if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1525                {
   1526                  // Compact notification doesn't include this field
   1527                  *pBuf++ = locData->calcLoc.locationMethod;
   1528                  len++;
   1529                }
   1530          
   1531                *pBuf++ = locData->calcLoc.qualityMeasure;
   1532                *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
   1533                *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
   1534                len += 3;
   1535              }
   1536            }
   1537          
   1538            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1539                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1540                                    disableDefaultRsp, 0, seqNum, len, buf );
   1541          }
   1542          #endif // ZCL_LOCATION
   1543          
   1544          /*********************************************************************
   1545           * @fn      zclGeneral_FindCallbacks
   1546           *
   1547           * @brief   Find the callbacks for an endpoint
   1548           *
   1549           * @param   endpoint - endpoint to find the application callbacks for
   1550           *
   1551           * @return  pointer to the callbacks
   1552           */
   1553          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
   1554          {
   1555            zclGenCBRec_t *pCBs;
   1556          
   1557            pCBs = zclGenCBs;
   1558            while ( pCBs )
   1559            {
   1560              if ( pCBs->endpoint == endpoint )
   1561                return ( pCBs->CBs );
   1562              pCBs = pCBs->next;
   1563            }
   1564            return ( (zclGeneral_AppCallbacks_t *)NULL );
   1565          }
   1566          
   1567          /*********************************************************************
   1568           * @fn      zclGeneral_HdlIncoming
   1569           *
   1570           * @brief   Callback from ZCL to process incoming Commands specific
   1571           *          to this cluster library or Profile commands for attributes
   1572           *          that aren't in the attribute list
   1573           *
   1574           *
   1575           * @param   pInMsg - pointer to the incoming message
   1576           *
   1577           * @return  ZStatus_t
   1578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1579          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlIncoming:
   1580          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1581            ZStatus_t stat = ZSuccess;
   1582          
   1583          #if defined ( INTER_PAN )
   1584            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   1585              return ( stat ); // Cluster not supported thru Inter-PAN
   1586          #endif
   1587            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   5407         ANL     A,#0x7
   \   00000D   6401         XRL     A,#0x1
   \   00000F   7007         JNZ     ??zclGeneral_HdlIncoming_0
   1588            {
   1589              // Is this a manufacturer specific command?
   1590              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   1591              {
   1592                stat = zclGeneral_HdlInSpecificCommands( pInMsg );
   \   000011                ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
   \   000011   12....       LCALL   `??zclGeneral_HdlInSpecificCommands::?relay`; Banked call to: zclGeneral_HdlInSpecificCommands
   \   000014   E9           MOV     A,R1
   \   000015   F9           MOV     R1,A
   \   000016   8002         SJMP    ??zclGeneral_HdlIncoming_1
   1593              }
   1594              else
   1595              {
   1596                // We don't support any manufacturer specific command.
   1597                stat = ZFailure;
   1598              }
   1599            }
   1600            else
   1601            {
   1602              // Handle all the normal (Read, Write...) commands -- should never get here
   1603              stat = ZFailure;
   \                     ??zclGeneral_HdlIncoming_0:
   \   000018   7901         MOV     R1,#0x1
   1604            }
   1605            return ( stat );
   \                     ??zclGeneral_HdlIncoming_1:
   \   00001A   02....       LJMP    ?Subroutine5 & 0xFFFF
   1606          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1607          
   1608          /*********************************************************************
   1609           * @fn      zclGeneral_HdlInSpecificCommands
   1610           *
   1611           * @brief   Callback from ZCL to process incoming Commands specific
   1612           *          to this cluster library
   1613          
   1614           * @param   pInMsg - pointer to the incoming message
   1615           *
   1616           * @return  ZStatus_t
   1617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1618          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlInSpecificCommands:
   1619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1620            ZStatus_t stat;
   1621            zclGeneral_AppCallbacks_t *pCBs;
   1622          
   1623            // make sure endpoint exists
   1624            pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
   \   000005   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000008   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00000B   FC           MOV     R4,A
   \   00000C   90....       MOV     DPTR,#zclGenCBs
   \                     ??zclGeneral_HdlInSpecificCommands_0:
   \   00000F   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000012   605A         JZ      ??zclGeneral_HdlInSpecificCommands_1
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6C           XRL     A,R4
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   70ED         JNZ     ??zclGeneral_HdlInSpecificCommands_0
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FD           MOV     R5,A
   1625            if ( pCBs == NULL )
   \   00002A   EC           MOV     A,R4
   \   00002B   4D           ORL     A,R5
   \   00002C   6040         JZ      ??zclGeneral_HdlInSpecificCommands_1
   1626              return ( ZFailure );
   1627          
   1628            switch ( pInMsg->msg->clusterId )
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V1,A
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
   \   000042   0000         DW        0
   \   000044   06           DB        6
   \   000045   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   000047   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   000049   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004B   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004D   ....         DW        ??zclGeneral_HdlInSpecificCommands_3
   \   00004F   ....         DW        ??zclGeneral_HdlInSpecificCommands_4
   \   000051   ....         DW        ??zclGeneral_HdlInSpecificCommands_5
   \   000053   ....         DW        ??zclGeneral_HdlInSpecificCommands_6
   1629            {
   1630          #ifdef ZCL_BASIC
   1631              case ZCL_CLUSTER_ID_GEN_BASIC:
   1632                stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_2:
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   5408         ANL     A,#0x8
   \   00005E   701E         JNZ     ??zclGeneral_HdlInSpecificCommands_7
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6004         JZ      ??zclGeneral_HdlInSpecificCommands_8
   \                     ??zclGeneral_HdlInSpecificCommands_1:
   \   00006E   7901         MOV     R1,#0x1
   \   000070   807B         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   \                     ??zclGeneral_HdlInSpecificCommands_8:
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000079   6003         JZ      ??zclGeneral_HdlInSpecificCommands_7
   \   00007B                ; Setup parameters for indirect call
   \   00007B   12....       LCALL   ?CALL_IND
   \                     ??zclGeneral_HdlInSpecificCommands_7:
   \   00007E   7900         MOV     R1,#0x0
   \   000080   806B         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1633                break;
   1634          #endif // ZCL_BASIC
   1635          
   1636          #ifdef ZCL_IDENTIFY
   1637              case ZCL_CLUSTER_ID_GEN_IDENTIFY:
   1638                stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_3:
   \   000082                ; Setup parameters for call to function zclGeneral_ProcessInIdentity
   \   000082   12....       LCALL   `??zclGeneral_ProcessInIdentity::?relay`; Banked call to: zclGeneral_ProcessInIdentity
   \   000085   8028         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1639                break;
   1640          #endif // ZCL_IDENTIFY
   1641          
   1642          #ifdef ZCL_GROUPS
   1643              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1644                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_4:
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   5408         ANL     A,#0x8
   \   000090   7005         JNZ     ??zclGeneral_HdlInSpecificCommands_11
   1645                  stat = zclGeneral_ProcessInGroupsServer( pInMsg );
   \   000092                ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
   \   000092   12....       LCALL   `??zclGeneral_ProcessInGroupsServer::?relay`; Banked call to: zclGeneral_ProcessInGroupsServer
   \   000095   8018         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1646                else
   1647                  stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_11:
   \   000097                ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
   \   000097   12....       LCALL   `??zclGeneral_ProcessInGroupsClient::?relay`; Banked call to: zclGeneral_ProcessInGroupsClient
   \   00009A   8013         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1648                break;
   1649          #endif // ZCL_GROUPS
   1650          
   1651          #ifdef ZCL_SCENES
   1652              case ZCL_CLUSTER_ID_GEN_SCENES:
   1653                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_5:
   \   00009C   8A82         MOV     DPL,R2
   \   00009E   8B83         MOV     DPH,R3
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   5408         ANL     A,#0x8
   \   0000A5   7005         JNZ     ??zclGeneral_HdlInSpecificCommands_12
   1654                  stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
   \   0000A7                ; Setup parameters for call to function zclGeneral_ProcessInScenesServer
   \   0000A7   12....       LCALL   `??zclGeneral_ProcessInScenesServer::?relay`; Banked call to: zclGeneral_ProcessInScenesServer
   \   0000AA   8003         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1655                else
   1656                  stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_12:
   \   0000AC                ; Setup parameters for call to function zclGeneral_ProcessInScenesClient
   \   0000AC   12....       LCALL   `??zclGeneral_ProcessInScenesClient::?relay`; Banked call to: zclGeneral_ProcessInScenesClient
   \                     ??zclGeneral_HdlInSpecificCommands_10:
   \   0000AF   E9           MOV     A,R1
   \   0000B0   803A         SJMP    ??zclGeneral_HdlInSpecificCommands_13
   1657                break;
   1658          #endif // ZCL_SCENES
   1659          
   1660          #ifdef ZCL_ON_OFF
   1661              case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1662                stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_6:
   \   0000B2   7E00         MOV     R6,#0x0
   \   0000B4   8A82         MOV     DPL,R2
   \   0000B6   8B83         MOV     DPH,R3
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   5408         ANL     A,#0x8
   \   0000BD   702C         JNZ     ??zclGeneral_HdlInSpecificCommands_14
   \   0000BF   8A82         MOV     DPL,R2
   \   0000C1   8B83         MOV     DPH,R3
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FA           MOV     R2,A
   \   0000CC   6006         JZ      ??zclGeneral_HdlInSpecificCommands_15
   \   0000CE   14           DEC     A
   \   0000CF   6003         JZ      ??zclGeneral_HdlInSpecificCommands_15
   \   0000D1   14           DEC     A
   \   0000D2   7015         JNZ     ??zclGeneral_HdlInSpecificCommands_16
   \                     ??zclGeneral_HdlInSpecificCommands_15:
   \   0000D4   EC           MOV     A,R4
   \   0000D5   240C         ADD     A,#0xc
   \   0000D7   F582         MOV     DPL,A
   \   0000D9   E4           CLR     A
   \   0000DA   3D           ADDC    A,R5
   \   0000DB   F583         MOV     DPH,A
   \   0000DD   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000E0   6009         JZ      ??zclGeneral_HdlInSpecificCommands_14
   \   0000E2                ; Setup parameters for indirect call
   \   0000E2   EA           MOV     A,R2
   \   0000E3   F9           MOV     R1,A
   \   0000E4   12....       LCALL   ?CALL_IND
   \   0000E7   8002         SJMP    ??zclGeneral_HdlInSpecificCommands_14
   \                     ??zclGeneral_HdlInSpecificCommands_16:
   \   0000E9   7E01         MOV     R6,#0x1
   \                     ??zclGeneral_HdlInSpecificCommands_14:
   \   0000EB   EE           MOV     A,R6
   \                     ??zclGeneral_HdlInSpecificCommands_13:
   \   0000EC   F9           MOV     R1,A
   1663                break;
   1664          #endif // ZCL_ON_OFF
   1665          
   1666          #ifdef ZCL_LEVEL_CTRL
   1667              case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1668                stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
   1669                break;
   1670          #endif // ZCL_LEVEL_CTRL
   1671          
   1672          #ifdef ZCL_ALARMS
   1673              case ZCL_CLUSTER_ID_GEN_ALARMS:
   1674                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1675                  stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
   1676                else
   1677                  stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
   1678                break;
   1679          #endif // ZCL_ALARMS
   1680          
   1681          #ifdef ZCL_LOCATION
   1682              case ZCL_CLUSTER_ID_GEN_LOCATION:
   1683                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1684                  stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
   1685                else
   1686                  stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
   1687                break;
   1688          #endif // ZCL_LOCATION
   1689          
   1690              case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1691              case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
   1692              case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
   1693              case ZCL_CLUSTER_ID_GEN_TIME:
   1694              default:
   1695                stat = ZFailure;
   1696                break;
   1697            }
   1698          
   1699            return ( stat );
   \                     ??zclGeneral_HdlInSpecificCommands_9:
   \   0000ED   80..         SJMP    ??Subroutine82_0
   1700          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E582         MOV     A,DPL
   \   00000B   4583         ORL     A,DPH
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine80_0
   \   000004                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   1701          
   1702          #ifdef ZCL_BASIC
   1703          /*********************************************************************
   1704           * @fn      zclGeneral_ProcessInBasic
   1705           *
   1706           * @brief   Process in the received Basic Command.
   1707           *
   1708           * @param   pInMsg - pointer to the incoming message
   1709           *
   1710           * @return  ZStatus_t
   1711           */
   1712          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
   1713                                                      zclGeneral_AppCallbacks_t *pCBs )
   1714          {
   1715            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1716            {
   1717              if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
   1718                return ( ZFailure );   // Error ignore the command
   1719          
   1720              if ( pCBs->pfnBasicReset )
   1721                pCBs->pfnBasicReset();
   1722            }
   1723            // no Client command
   1724          
   1725            return ( ZSuccess );
   1726          }
   1727          #endif // ZCL_BASIC
   1728          
   1729          #ifdef ZCL_IDENTIFY
   1730          /*********************************************************************
   1731           * @fn      zclGeneral_ProcessInIdentity
   1732           *
   1733           * @brief   Process in the received Identity Command.
   1734           *
   1735           * @param   pInMsg - pointer to the incoming message
   1736           *
   1737           * @return  ZStatus_t
   1738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1739          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInIdentity:
   1740                                                         zclGeneral_AppCallbacks_t *pCBs )
   1741          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1742            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   EA           MOV     A,R2
   \   00000F   2408         ADD     A,#0x8
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   35..         ADDC    A,?V1
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   FE           MOV     R6,A
   \   000018   E9           MOV     A,R1
   \   000019   FF           MOV     R7,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   5408         ANL     A,#0x8
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   6003         JZ      $+5
   \   000030   02....       LJMP    ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
   1743            {
   1744              if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7007         JNZ     ??zclGeneral_ProcessInIdentity_1
   1745              {
   1746                if ( pCBs->pfnIdentify )
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   02....       LJMP    ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
   1747                {
   1748                  zclIdentify_t cmd;
   1749          
   1750                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1751                  cmd.identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1752          
   1753                  pCBs->pfnIdentify( &cmd );
   1754                }
   1755              }
   1756              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
   \                     ??zclGeneral_ProcessInIdentity_1:
   \   00003E   7401         MOV     A,#0x1
   \   000040   68           XRL     A,R0
   \   000041   6003         JZ      $+5
   \   000043   02....       LJMP    ??zclGeneral_ProcessInIdentity_3 & 0xFFFF
   1757              {
   1758                uint16 identifyTime = 0;
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
   1759          
   1760                // Retrieve Identify Time
   1761                zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   1762                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \   000050   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000053                ; Setup parameters for call to function zcl_ReadAttrData
   \   000053   E4           CLR     A
   \   000054   F5..         MOV     ?V2,A
   \   000056   F5..         MOV     ?V3,A
   \   000058   78..         MOV     R0,#?V2
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP100_8
   \   000062   88..         MOV     ?V2,R0
   \   000064   89..         MOV     ?V3,R1
   \   000066   78..         MOV     R0,#?V2
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00007A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   1763          
   1764                // Is device identifying itself?
   1765                if ( identifyTime > 0 )
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00008F   7003         JNZ     $+5
   \   000091   02....       LJMP    ??zclGeneral_ProcessInIdentity_4 & 0xFFFF
   1766                {
   1767                  zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1768                                                        identifyTime, true, pInMsg->hdr.transSeqNum );
   \   000094   85..82       MOV     DPL,?V0
   \   000097   85..83       MOV     DPH,?V1
   \   00009A   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00009D                ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
   \   00009D   85..82       MOV     DPL,?V0
   \   0000A0   85..83       MOV     DPH,?V1
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AF   75..01       MOV     ?V0,#0x1
   \   0000B2   78..         MOV     R0,#?V0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000BF   12....       LCALL   `??zclGeneral_SendIdentifyQueryResponse::?relay`; Banked call to: zclGeneral_SendIdentifyQueryResponse
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   1769          #ifdef ZCL_EZMODE
   1770                  zcl_EZModeAction( EZMODE_ACTION_IDENTIFY_QUERY, NULL );
   \   0000C7                ; Setup parameters for call to function zcl_EZModeAction
   \   0000C7   7A00         MOV     R2,#0x0
   \   0000C9   7B00         MOV     R3,#0x0
   \   0000CB   7903         MOV     R1,#0x3
   \   0000CD   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   1771          #endif
   1772                  return ( ZCL_STATUS_CMD_HAS_RSP );
   \   0000D0   79FF         MOV     R1,#-0x1
   \   0000D2   02....       LJMP    ??zclGeneral_ProcessInIdentity_5 & 0xFFFF
   1773                }
   1774              }
   1775          #ifdef ZCL_EZMODE
   1776              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_EZMODE_INVOKE )
   \                     ??zclGeneral_ProcessInIdentity_3:
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   68           XRL     A,R0
   \   0000D8   7025         JNZ     ??zclGeneral_ProcessInIdentity_6
   1777              {
   1778                if ( pCBs->pfnIdentifyEZModeInvoke )
   \   0000DA   8C82         MOV     DPL,R4
   \   0000DC   8D83         MOV     DPH,R5
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   0000E5   FA           MOV     R2,A
   \   0000E6   E9           MOV     A,R1
   \   0000E7   FB           MOV     R3,A
   \   0000E8   EA           MOV     A,R2
   \   0000E9   4B           ORL     A,R3
   \   0000EA   7003         JNZ     $+5
   \   0000EC   02....       LJMP    ??zclGeneral_ProcessInIdentity_4 & 0xFFFF
   1779                {
   1780                  pCBs->pfnIdentifyEZModeInvoke( pInMsg->pData[0] );
   \   0000EF                ; Setup parameters for indirect call
   \   0000EF   8E82         MOV     DPL,R6
   \   0000F1   8F83         MOV     DPH,R7
   \   0000F3   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   1781                }
   1782              }
   \                     ??CrossCallReturnLabel_220:
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F9           MOV     R1,A
   \   0000F8   8A82         MOV     DPL,R2
   \   0000FA   8B83         MOV     DPH,R3
   \   0000FC   02....       LJMP    ??zclGeneral_ProcessInIdentity_7 & 0xFFFF
   1783              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE )
   \                     ??zclGeneral_ProcessInIdentity_6:
   \   0000FF   7403         MOV     A,#0x3
   \   000101   68           XRL     A,R0
   \   000102   7035         JNZ     ??zclGeneral_ProcessInIdentity_8
   1784              {
   1785                if ( pCBs->pfnIdentifyUpdateCommState )
   \   000104   EC           MOV     A,R4
   \   000105   2406         ADD     A,#0x6
   \   000107   F8           MOV     R0,A
   \   000108   E4           CLR     A
   \   000109   3D           ADDC    A,R5
   \   00010A   F9           MOV     R1,A
   \   00010B   8882         MOV     DPL,R0
   \   00010D   8983         MOV     DPH,R1
   \   00010F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000112   6070         JZ      ??zclGeneral_ProcessInIdentity_4
   1786                {
   1787                  zclIdentifyUpdateCommState_t cmd;
   1788          
   1789                  cmd.action = pInMsg->pData[0];
   \   000114   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000117   12....       LCALL   ?Subroutine44 & 0xFFFF
   1790                  cmd.commissionStateMask = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_95:
   \   00011A   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   C0E0         PUSH    A
   \   000121   7401         MOV     A,#0x1
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   D0E0         POP     A
   \   000128   F0           MOVX    @DPTR,A
   1791          
   1792                  pCBs->pfnIdentifyUpdateCommState( &cmd );
   \   000129                ; Setup parameters for indirect call
   \   000129   AA..         MOV     R2,?XSP + 0
   \   00012B   AB..         MOV     R3,?XSP + 1
   \   00012D   8882         MOV     DPL,R0
   \   00012F   8983         MOV     DPH,R1
   \   000131   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   1793                }
   1794              }
   1795          #endif
   1796          
   1797          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1798              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
   1799              {
   1800                if ( pCBs->pfnIdentifyTriggerEffect )
   1801                {
   1802                  zclIdentifyTriggerEffect_t cmd;
   1803          
   1804                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1805                  cmd.effectId = pInMsg->pData[0];
   1806                  cmd.effectVariant = pInMsg->pData[1];
   1807          
   1808                  pCBs->pfnIdentifyTriggerEffect( &cmd );
   1809                }
   1810              }
   1811          #endif //ZCL_LIGHT_LINK_ENHANCE
   1812              else
   1813              {
   1814                return ( ZFailure );   // Error ignore the command
   1815              }
   1816            }
   \                     ??CrossCallReturnLabel_221:
   \   000134   804B         SJMP    ??zclGeneral_ProcessInIdentity_7
   1817            else // Client Command
   1818            {
   1819              if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
   \                     ??zclGeneral_ProcessInIdentity_0:
   \   000136   E0           MOVX    A,@DPTR
   \   000137   6004         JZ      ??zclGeneral_ProcessInIdentity_9
   1820                return ( ZFailure );   // Error ignore the command
   \                     ??zclGeneral_ProcessInIdentity_8:
   \   000139   7901         MOV     R1,#0x1
   \   00013B   8049         SJMP    ??zclGeneral_ProcessInIdentity_5
   1821          
   1822              if ( pCBs->pfnIdentifyQueryRsp )
   \                     ??zclGeneral_ProcessInIdentity_9:
   \   00013D   8C82         MOV     DPL,R4
   \   00013F   8D83         MOV     DPH,R5
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \                     ??zclGeneral_ProcessInIdentity_2:
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00014E   FC           MOV     R4,A
   \   00014F   E9           MOV     A,R1
   \   000150   FD           MOV     R5,A
   \   000151   EC           MOV     A,R4
   \   000152   4D           ORL     A,R5
   \   000153   602F         JZ      ??zclGeneral_ProcessInIdentity_4
   1823              {
   1824                zclIdentifyQueryRsp_t rsp;
   1825          
   1826                rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   000155   8A82         MOV     DPL,R2
   \   000157   8B83         MOV     DPH,R3
   \   000159   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00015C   7402         MOV     A,#0x2
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   12....       LCALL   ?Subroutine51 & 0xFFFF
   1827                rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??CrossCallReturnLabel_106:
   \   000164   8E82         MOV     DPL,R6
   \   000166   8F83         MOV     DPH,R7
   \   000168   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00016B   8882         MOV     DPL,R0
   \   00016D   8983         MOV     DPH,R1
   \   00016F   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   12....       LCALL   ?Subroutine51 & 0xFFFF
   1828          
   1829                pCBs->pfnIdentifyQueryRsp( &rsp );
   \                     ??CrossCallReturnLabel_107:
   \   000178                ; Setup parameters for indirect call
   \   000178   7402         MOV     A,#0x2
   \   00017A   12....       LCALL   ?XSTACK_DISP101_8
   \   00017D   8C82         MOV     DPL,R4
   \   00017F   8D83         MOV     DPH,R5
   \                     ??zclGeneral_ProcessInIdentity_7:
   \   000181   12....       LCALL   ?CALL_IND
   1830              }
   1831            }
   1832          
   1833            return ( ZSuccess );
   \                     ??zclGeneral_ProcessInIdentity_4:
   \   000184   7900         MOV     R1,#0x0
   \                     ??zclGeneral_ProcessInIdentity_5:
   \   000186   7406         MOV     A,#0x6
   \   000188   02....       LJMP    ??Subroutine75_0 & 0xFFFF
   1834          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   F583         MOV     DPH,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   7404         MOV     A,#0x4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   EE           MOV     A,R6
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine90_0
   \   000004                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   22           RET
   1835          #endif // ZCL_IDENTIFY
   1836          
   1837          #ifdef ZCL_GROUPS
   1838          
   1839          /*********************************************************************
   1840           * @fn      zclGeneral_AddGroup
   1841           *
   1842           * @brief   Add a Group.
   1843           *
   1844           * @param   endPoint - application endpoint
   1845           * @param   group - group to be added
   1846           * @param   pData - pointer to the group info
   1847           *
   1848           * @return  ZStatus_t
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
   \                     zclGeneral_AddGroup:
   1851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V2,R4
   \   000012   8D..         MOV     ?V3,R5
   1852            uint8 nameLen;
   1853            uint8 nameSupport = FALSE;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
   1854          
   1855            pData += 2;   // Move past group ID
   1856            nameLen = *pData++;
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0,A
   1857          
   1858            // Retrieve Name Support attribute
   1859            zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
   1860                              ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
   \   000025                ; Setup parameters for call to function zcl_ReadAttrData
   \   000025   E4           CLR     A
   \   000026   F5..         MOV     ?V4,A
   \   000028   F5..         MOV     ?V5,A
   \   00002A   78..         MOV     R0,#?V4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP100_8
   \   000034   88..         MOV     ?V4,R0
   \   000036   89..         MOV     ?V5,R1
   \   000038   78..         MOV     R0,#?V4
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A04         MOV     R2,#0x4
   \   000043   7B00         MOV     R3,#0x0
   \   000045   A9..         MOV     R1,?V1
   \   000047   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1861          
   1862            if ( nameSupport )
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   603F         JZ      ??zclGeneral_AddGroup_0
   1863            {
   1864              if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \   000058   E5..         MOV     A,?V0
   \   00005A   C3           CLR     C
   \   00005B   9410         SUBB    A,#0x10
   \   00005D   4003         JC      ??zclGeneral_AddGroup_1
   1865                 nameLen = (APS_GROUP_NAME_LEN-1);
   \   00005F   75..0F       MOV     ?V0,#0xf
   1866              group->name[0] = nameLen;
   \                     ??zclGeneral_AddGroup_1:
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E5..         MOV     A,?V0
   \   00006A   F0           MOVX    @DPTR,A
   1867              zcl_memcpy( &(group->name[1]), pData, nameLen );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   85..82       MOV     DPL,?V2
   \   00006E   85..83       MOV     DPH,?V3
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A982         MOV     R1,DPL
   \   000076   AA83         MOV     R2,DPH
   \   000078   89..         MOV     ?V4,R1
   \   00007A   8A..         MOV     ?V5,R2
   \   00007C   75..00       MOV     ?V6,#0x0
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   AC..         MOV     R4,?V0
   \   000086   7D00         MOV     R5,#0x0
   \   000088   EE           MOV     A,R6
   \   000089   2403         ADD     A,#0x3
   \   00008B   FA           MOV     R2,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000092   7403         MOV     A,#0x3
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   1868            }
   1869          
   1870            return ( aps_AddGroup( endPoint, group ) );
   \                     ??zclGeneral_AddGroup_0:
   \   000097                ; Setup parameters for call to function aps_AddGroup
   \   000097   EE           MOV     A,R6
   \   000098   FA           MOV     R2,A
   \   000099   EF           MOV     A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   A9..         MOV     R1,?V1
   \   00009D   12....       LCALL   `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5                REQUIRE ?Subroutine6
   \   0000A5                ; // Fall through to label ?Subroutine6
   1871          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1872          
   1873          /*********************************************************************
   1874           * @fn      zclGeneral_ProcessInGroupsServer
   1875           *
   1876           * @brief   Process in the received Groups Command.
   1877           *
   1878           * @param   pInMsg - pointer to the incoming message
   1879           *
   1880           * @return  ZStatus_t
   1881           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1882          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
   \                     zclGeneral_ProcessInGroupsServer:
   1883          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV     A,#-0x36
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1884            aps_Group_t group;
   1885            aps_Group_t *pGroup;
   1886            uint8 *pData;
   1887            uint8 status;
   1888            uint8 grpCnt;
   1889            uint8 grpRspCnt = 0;
   \   00000E   75..00       MOV     ?V4,#0x0
   1890            uint16 *grpList;
   1891            uint16 identifyTime = 0;
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   1892            uint8 i;
   1893            ZStatus_t stat = ZSuccess;
   \   00001A   75..00       MOV     ?V0,#0x0
   1894          
   1895            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   00001D                ; Setup parameters for call to function osal_memset
   \   00001D   7C12         MOV     R4,#0x12
   \   00001F   FD           MOV     R5,A
   \   000020   F9           MOV     R1,A
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP101_8
   \   000026   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1896          
   1897            pData = pInMsg->pData;
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine28 & 0xFFFF
   1898            group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_53:
   \   000038   A3           INC     DPTR
   \   000039   A882         MOV     R0,DPL
   \   00003B   A983         MOV     R1,DPH
   \   00003D   85..82       MOV     DPL,?V2
   \   000040   F583         MOV     DPH,A
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FC           MOV     R4,A
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FB           MOV     R3,A
   \   00004A   EC           MOV     A,R4
   \   00004B   FA           MOV     R2,A
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   1899            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_225:
   \   000054   EE           MOV     A,R6
   \   000055   2406         ADD     A,#0x6
   \   000057   F5..         MOV     ?V8,A
   \   000059   E4           CLR     A
   \   00005A   3F           ADDC    A,R7
   \   00005B   F5..         MOV     ?V9,A
   \   00005D   EE           MOV     A,R6
   \   00005E   2407         ADD     A,#0x7
   \   000060   F5..         MOV     ?V6,A
   \   000062   E4           CLR     A
   \   000063   3F           ADDC    A,R7
   \   000064   F5..         MOV     ?V7,A
   \   000066   85..82       MOV     DPL,?V6
   \   000069   F583         MOV     DPH,A
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   601E         JZ      ??zclGeneral_ProcessInGroupsServer_0
   \   00006E   14           DEC     A
   \   00006F   6056         JZ      ??zclGeneral_ProcessInGroupsServer_1
   \   000071   14           DEC     A
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
   \   000077   14           DEC     A
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
   \   00007D   14           DEC     A
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
   \   000083   14           DEC     A
   \   000084   7003         JNZ     $+5
   \   000086   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
   \   000089   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
   1900            {
   1901              case COMMAND_GROUP_ADD:
   1902                status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \                     ??zclGeneral_ProcessInGroupsServer_0:
   \   00008C                ; Setup parameters for call to function zclGeneral_AddGroup
   \   00008C   AC..         MOV     R4,?V2
   \   00008E   AD..         MOV     R5,?V3
   \   000090   7404         MOV     A,#0x4
   \   000092   12....       LCALL   ?XSTACK_DISP101_8
   \   000095   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000098   12....       LCALL   `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
   \   00009B   E9           MOV     A,R1
   \   00009C   FC           MOV     R4,A
   1903                if ( status != ZSuccess )
   \   00009D   600B         JZ      ??zclGeneral_ProcessInGroupsServer_7
   1904                {
   1905                  if ( status == ZApsDuplicateEntry )
   \   00009F   74B8         MOV     A,#-0x48
   \   0000A1   6C           XRL     A,R4
   \   0000A2   7004         JNZ     ??zclGeneral_ProcessInGroupsServer_8
   1906                  {
   1907                    status = ZCL_STATUS_DUPLICATE_EXISTS;
   \   0000A4   7C8A         MOV     R4,#-0x76
   \   0000A6   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_7
   1908                  }
   1909                  else
   1910                  {
   1911                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInGroupsServer_8:
   \   0000A8   7C89         MOV     R4,#-0x77
   1912                  }
   1913                }
   1914          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1915                if ( UNICAST_MSG( pInMsg->msg ) )
   1916          #endif
   1917                {
   1918                  zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1919                                                   status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_7:
   \   0000AA   12....       LCALL   ?Subroutine16 & 0xFFFF
   1920                  stat = ZCL_STATUS_CMD_HAS_RSP;
   1921                }
   \                     ??CrossCallReturnLabel_21:
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..01       MOV     ?V0,#0x1
   \   0000B3   78..         MOV     R0,#?V0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C0   EC           MOV     A,R4
   \   0000C1   FD           MOV     R5,A
   \   0000C2   7C00         MOV     R4,#0x0
   \   0000C4   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   1922                break;
   1923          
   1924              case COMMAND_GROUP_VIEW:
   1925          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1926                if ( UNICAST_MSG( pInMsg->msg ) )
   1927          #endif
   1928                {
   1929                  pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_1:
   \   0000C7                ; Setup parameters for call to function aps_FindGroup
   \   0000C7   7404         MOV     A,#0x4
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   0000CF   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0000D2   8A..         MOV     ?V0,R2
   \   0000D4   8B..         MOV     ?V1,R3
   1930                  if ( pGroup )
   \   0000D6   EA           MOV     A,R2
   \   0000D7   45..         ORL     A,?V1
   \   0000D9   6004         JZ      ??zclGeneral_ProcessInGroupsServer_10
   1931                  {
   1932                    status = ZCL_STATUS_SUCCESS;
   \   0000DB   7C00         MOV     R4,#0x0
   \   0000DD   800B         SJMP    ??zclGeneral_ProcessInGroupsServer_11
   1933                  }
   1934                  else
   1935                  {
   1936                    // Group not found
   1937                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_10:
   \   0000DF   7C8B         MOV     R4,#-0x75
   1938                    pGroup = &group;
   \   0000E1   7404         MOV     A,#0x4
   \   0000E3   12....       LCALL   ?XSTACK_DISP100_8
   \   0000E6   88..         MOV     ?V0,R0
   \   0000E8   89..         MOV     ?V1,R1
   1939                  }
   1940                  zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1941                                                    status, pGroup, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_11:
   \   0000EA   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   78..         MOV     R0,#?V0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   7D01         MOV     R5,#0x1
   \   0000F7   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000FA   12....       LCALL   `??zclGeneral_SendGroupViewResponse::?relay`; Banked call to: zclGeneral_SendGroupViewResponse
   \   0000FD   7403         MOV     A,#0x3
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   1942                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \   000102   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
   1943                }
   1944                break;
   1945          
   1946              case COMMAND_GROUP_GET_MEMBERSHIP:
   1947          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1948                if ( UNICAST_MSG( pInMsg->msg ) )
   1949          #endif
   1950                {
   1951                  grpCnt = *pData++;
   \                     ??zclGeneral_ProcessInGroupsServer_2:
   \   000105   85..82       MOV     DPL,?V2
   \   000108   85..83       MOV     DPH,?V3
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F5..         MOV     ?V10,A
   \   00010E   88..         MOV     ?V2,R0
   \   000110   89..         MOV     ?V3,R1
   1952          
   1953                  // Allocate space for the group list
   1954                  grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
   \   000112                ; Setup parameters for call to function osal_mem_alloc
   \   000112   7A20         MOV     R2,#0x20
   \   000114   7B00         MOV     R3,#0x0
   \   000116   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000119   8A..         MOV     ?V0,R2
   \   00011B   8B..         MOV     ?V1,R3
   1955                  if ( grpList != NULL )
   \   00011D   EA           MOV     A,R2
   \   00011E   45..         ORL     A,?V1
   \   000120   7003         JNZ     $+5
   \   000122   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
   1956                  {
   1957                    if ( grpCnt == 0 )
   \   000125   E5..         MOV     A,?V10
   \   000127   700B         JNZ     ??zclGeneral_ProcessInGroupsServer_14
   1958                    {
   1959                      // Find out all the groups of which the endpoint is a member.
   1960                      grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
   \   000129                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000129   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   1961                    }
   \                     ??CrossCallReturnLabel_256:
   \   00012C   12....       LCALL   `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   00012F   E9           MOV     A,R1
   \   000130   F5..         MOV     ?V4,A
   \   000132   8056         SJMP    ??zclGeneral_ProcessInGroupsServer_15
   1962                    else
   1963                    {
   1964                      // Find out the groups (in the list) of which the endpoint is a member.
   1965                      for ( i = 0; i < grpCnt; i++ )
   \                     ??zclGeneral_ProcessInGroupsServer_14:
   \   000134   F5..         MOV     ?V5,A
   1966                      {
   1967                        group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsServer_16:
   \   000136   85..82       MOV     DPL,?V2
   \   000139   85..83       MOV     DPH,?V3
   \   00013C   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   12....       LCALL   ?Subroutine51 & 0xFFFF
   1968                        pData += 2;
   \                     ??CrossCallReturnLabel_108:
   \   000145   E5..         MOV     A,?V2
   \   000147   2402         ADD     A,#0x2
   \   000149   F5..         MOV     ?V2,A
   \   00014B   5002         JNC     ??zclGeneral_ProcessInGroupsServer_17
   \   00014D   05..         INC     ?V3
   1969          
   1970                        if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??zclGeneral_ProcessInGroupsServer_17:
   \   00014F                ; Setup parameters for call to function aps_FindGroup
   \   00014F   7404         MOV     A,#0x4
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000157   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   00015A   8B..         MOV     ?V7,R3
   \   00015C   EA           MOV     A,R2
   \   00015D   45..         ORL     A,?V7
   \   00015F   601F         JZ      ??zclGeneral_ProcessInGroupsServer_18
   1971                          grpList[grpRspCnt++] = group.ID;
   \   000161   7404         MOV     A,#0x4
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   12....       LCALL   ?Subroutine24 & 0xFFFF
   1972                      }
   \                     ??CrossCallReturnLabel_43:
   \   000169   A8..         MOV     R0,?V4
   \   00016B   E8           MOV     A,R0
   \   00016C   28           ADD     A,R0
   \   00016D   F8           MOV     R0,A
   \   00016E   E4           CLR     A
   \   00016F   33           RLC     A
   \   000170   F9           MOV     R1,A
   \   000171   E5..         MOV     A,?V0
   \   000173   28           ADD     A,R0
   \   000174   F582         MOV     DPL,A
   \   000176   E5..         MOV     A,?V1
   \   000178   39           ADDC    A,R1
   \   000179   F583         MOV     DPH,A
   \   00017B   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00017E   05..         INC     ?V4
   \                     ??zclGeneral_ProcessInGroupsServer_18:
   \   000180   15..         DEC     ?V5
   \   000182   E5..         MOV     A,?V5
   \   000184   70B0         JNZ     ??zclGeneral_ProcessInGroupsServer_16
   \   000186   E5..         MOV     A,?V4
   \   000188   6043         JZ      ??zclGeneral_ProcessInGroupsServer_19
   1973                    }
   1974          
   1975                    if ( grpCnt == 0 ||  grpRspCnt != 0 )
   1976                    {
   1977                      zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1978                                                                 aps_GroupsRemaingCapacity(), grpRspCnt,
   1979                                                                 grpList, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_15:
   \   00018A                ; Setup parameters for call to function aps_CountAllGroups
   \   00018A   12....       LCALL   `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
   \   00018D   E9           MOV     A,R1
   \   00018E   F9           MOV     R1,A
   \   00018F   12....       LCALL   ?Subroutine22 & 0xFFFF
   1980                    }
   \                     ??CrossCallReturnLabel_33:
   \   000192   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000195   75..01       MOV     ?V2,#0x1
   \   000198   78..         MOV     R0,#?V2
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019D   78..         MOV     R0,#?V0
   \   00019F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A2   E5..         MOV     A,?V4
   \   0001A4   F5..         MOV     ?V2,A
   \   0001A6   78..         MOV     R0,#?V2
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AB   7410         MOV     A,#0x10
   \   0001AD   C3           CLR     C
   \   0001AE   99           SUBB    A,R1
   \   0001AF   F5..         MOV     ?V2,A
   \   0001B1   78..         MOV     R0,#?V2
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B6   75..01       MOV     ?V2,#0x1
   \   0001B9   78..         MOV     R0,#?V2
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001BE   7D01         MOV     R5,#0x1
   \   0001C0   7C02         MOV     R4,#0x2
   \   0001C2   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0001C5   12....       LCALL   `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
   \   0001C8   7407         MOV     A,#0x7
   \   0001CA   12....       LCALL   ?DEALLOC_XSTACK8
   1981          
   1982                    zcl_mem_free( grpList );
   \                     ??zclGeneral_ProcessInGroupsServer_19:
   \   0001CD                ; Setup parameters for call to function osal_mem_free
   \   0001CD   AA..         MOV     R2,?V0
   \   0001CF   AB..         MOV     R3,?V1
   \   0001D1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001D4   804F         SJMP    ??zclGeneral_ProcessInGroupsServer_20
   1983                  }
   1984                  else
   1985                  {
   1986                    // Couldn't allocate space for the group list -- send a Default Response command back.
   1987                    zclDefaultRspCmd_t defaultRspCmd;
   1988          
   1989                    defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \                     ??zclGeneral_ProcessInGroupsServer_13:
   \   0001D6   85..82       MOV     DPL,?V6
   \   0001D9   85..83       MOV     DPH,?V7
   \   0001DC   12....       LCALL   ?Subroutine44 & 0xFFFF
   1990                    defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??CrossCallReturnLabel_96:
   \   0001DF   7401         MOV     A,#0x1
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   7489         MOV     A,#-0x77
   \   0001E6   F0           MOVX    @DPTR,A
   1991                    zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   1992                                           pInMsg->msg->clusterId, &defaultRspCmd,
   1993                                           ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   0001E7   12....       LCALL   ?Subroutine16 & 0xFFFF
   1994                  }
   \                     ??CrossCallReturnLabel_22:
   \   0001EA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001ED   E4           CLR     A
   \   0001EE   F5..         MOV     ?V0,A
   \   0001F0   F5..         MOV     ?V1,A
   \   0001F2   78..         MOV     R0,#?V0
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F7   75..01       MOV     ?V0,#0x1
   \   0001FA   78..         MOV     R0,#?V0
   \   0001FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001FF   78..         MOV     R0,#?V0
   \   000201   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000204   7405         MOV     A,#0x5
   \   000206   12....       LCALL   ?XSTACK_DISP100_8
   \   000209   88..         MOV     ?V0,R0
   \   00020B   89..         MOV     ?V1,R1
   \   00020D   78..         MOV     R0,#?V0
   \   00020F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000212   8E82         MOV     DPL,R6
   \   000214   8F83         MOV     DPH,R7
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00021D   12....       LCALL   `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000220   7407         MOV     A,#0x7
   \   000222   12....       LCALL   ?DEALLOC_XSTACK8
   1995          
   1996                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_20:
   \   000225   8044         SJMP    ??zclGeneral_ProcessInGroupsServer_12
   1997                }
   1998                break;
   1999          
   2000              case COMMAND_GROUP_REMOVE:
   2001          #if defined ( ZCL_SCENES )
   2002                zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_3:
   \   000227                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   000227   7404         MOV     A,#0x4
   \   000229   12....       LCALL   ?XSTACK_DISP0_8
   \   00022C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00022F   12....       LCALL   `??zclGeneral_RemoveAllScenes::?relay`; Banked call to: zclGeneral_RemoveAllScenes
   2003          #endif
   2004                if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
   \   000232                ; Setup parameters for call to function aps_RemoveGroup
   \   000232   7404         MOV     A,#0x4
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00023A   12....       LCALL   `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   00023D   E9           MOV     A,R1
   \   00023E   6004         JZ      ??zclGeneral_ProcessInGroupsServer_21
   2005                {
   2006                  status = ZCL_STATUS_SUCCESS;
   \   000240   7C00         MOV     R4,#0x0
   \   000242   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_22
   2007                }
   2008                else
   2009                {
   2010                  status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_21:
   \   000244   7C8B         MOV     R4,#-0x75
   2011                }
   2012          
   2013          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   2014                if ( UNICAST_MSG( pInMsg->msg ) )
   2015          #endif
   2016                {
   2017                  zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2018                                                      status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_22:
   \   000246   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000249   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00024C   75..01       MOV     ?V0,#0x1
   \   00024F   78..         MOV     R0,#?V0
   \   000251   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000254   7406         MOV     A,#0x6
   \   000256   12....       LCALL   ?XSTACK_DISP0_8
   \   000259   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00025C   EC           MOV     A,R4
   \   00025D   FD           MOV     R5,A
   \   00025E   7C03         MOV     R4,#0x3
   \                     ??zclGeneral_ProcessInGroupsServer_9:
   \   000260   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000263   12....       LCALL   `??zclGeneral_SendGroupResponse::?relay`; Banked call to: zclGeneral_SendGroupResponse
   \   000266   7404         MOV     A,#0x4
   \   000268   12....       LCALL   ?DEALLOC_XSTACK8
   2019                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_12:
   \   00026B   75..FF       MOV     ?V0,#-0x1
   2020                }
   2021                break;
   \   00026E   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_23 & 0xFFFF
   2022          
   2023              case COMMAND_GROUP_REMOVE_ALL:
   2024                {
   2025                  uint8 numGroups;
   2026                  uint16 groupList[APS_MAX_GROUPS];
   2027          
   2028                  if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
   \                     ??zclGeneral_ProcessInGroupsServer_4:
   \   000271                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000271   7416         MOV     A,#0x16
   \   000273   12....       LCALL   ?XSTACK_DISP101_8
   \   000276   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000279   12....       LCALL   `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   00027C   E9           MOV     A,R1
   \   00027D   F5..         MOV     ?V2,A
   \   00027F   607A         JZ      ??zclGeneral_ProcessInGroupsServer_23
   2029                  {
   2030                    for ( i = 0; i < numGroups; i++ )
   \   000281   75..00       MOV     ?V1,#0x0
   2031                    {
   2032          #if defined ( ZCL_SCENES )
   2033                      zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
   \                     ??zclGeneral_ProcessInGroupsServer_24:
   \   000284                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   000284   A8..         MOV     R0,?V1
   \   000286   E8           MOV     A,R0
   \   000287   28           ADD     A,R0
   \   000288   F8           MOV     R0,A
   \   000289   E4           CLR     A
   \   00028A   33           RLC     A
   \   00028B   F9           MOV     R1,A
   \   00028C   7416         MOV     A,#0x16
   \   00028E   12....       LCALL   ?XSTACK_DISP0_8
   \   000291   E582         MOV     A,DPL
   \   000293   28           ADD     A,R0
   \   000294   F582         MOV     DPL,A
   \   000296   E583         MOV     A,DPH
   \   000298   39           ADDC    A,R1
   \   000299   F583         MOV     DPH,A
   \   00029B   12....       LCALL   ?Subroutine10 & 0xFFFF
   2034          #endif
   2035                    }
   \                     ??CrossCallReturnLabel_2:
   \   00029E   12....       LCALL   `??zclGeneral_RemoveAllScenes::?relay`; Banked call to: zclGeneral_RemoveAllScenes
   \   0002A1   05..         INC     ?V1
   \   0002A3   E5..         MOV     A,?V1
   \   0002A5   C3           CLR     C
   \   0002A6   95..         SUBB    A,?V2
   \   0002A8   40DA         JC      ??zclGeneral_ProcessInGroupsServer_24
   2036          
   2037                    aps_RemoveAllGroup( pInMsg->msg->endPoint );
   \   0002AA                ; Setup parameters for call to function aps_RemoveAllGroup
   \   0002AA   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   2038                  }
   2039                }
   \                     ??CrossCallReturnLabel_258:
   \   0002AD   12....       LCALL   `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
   \   0002B0   8049         SJMP    ??zclGeneral_ProcessInGroupsServer_23
   2040                break;
   2041          
   2042              case COMMAND_GROUP_ADD_IF_IDENTIFYING:
   2043                // Retrieve Identify Time
   2044                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2045                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \                     ??zclGeneral_ProcessInGroupsServer_5:
   \   0002B2                ; Setup parameters for call to function zcl_ReadAttrData
   \   0002B2   E4           CLR     A
   \   0002B3   F5..         MOV     ?V6,A
   \   0002B5   F5..         MOV     ?V7,A
   \   0002B7   78..         MOV     R0,#?V6
   \   0002B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002BC   7404         MOV     A,#0x4
   \   0002BE   12....       LCALL   ?XSTACK_DISP100_8
   \   0002C1   88..         MOV     ?V6,R0
   \   0002C3   89..         MOV     ?V7,R1
   \   0002C5   78..         MOV     R0,#?V6
   \   0002C7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CA   7C00         MOV     R4,#0x0
   \   0002CC   7D00         MOV     R5,#0x0
   \   0002CE   7A03         MOV     R2,#0x3
   \   0002D0   7B00         MOV     R3,#0x0
   \   0002D2   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0002D5   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   0002D8   7404         MOV     A,#0x4
   \   0002DA   12....       LCALL   ?DEALLOC_XSTACK8
   2046          
   2047                // Is device identifying itself?
   2048                if ( identifyTime > 0 )
   \   0002DD   7402         MOV     A,#0x2
   \   0002DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E2   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0002E5   6014         JZ      ??zclGeneral_ProcessInGroupsServer_23
   2049                {
   2050                  zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \   0002E7                ; Setup parameters for call to function zclGeneral_AddGroup
   \   0002E7   AC..         MOV     R4,?V2
   \   0002E9   AD..         MOV     R5,?V3
   \   0002EB   7404         MOV     A,#0x4
   \   0002ED   12....       LCALL   ?XSTACK_DISP101_8
   \   0002F0   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   2051                }
   \                     ??CrossCallReturnLabel_260:
   \   0002F3   12....       LCALL   `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
   \   0002F6   8003         SJMP    ??zclGeneral_ProcessInGroupsServer_23
   2052                break;
   2053          
   2054              default:
   2055                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsServer_6:
   \   0002F8   75..01       MOV     ?V0,#0x1
   2056                break;
   2057            }
   2058          
   2059            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsServer_23:
   \   0002FB   A9..         MOV     R1,?V0
   \   0002FD   7436         MOV     A,#0x36
   \   0002FF   02....       LJMP    ?Subroutine3 & 0xFFFF
   2060          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   F5..         MOV     ?V2,A
   \   000005   78..         MOV     R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   F5..         MOV     ?V0,A
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000003                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000003   85..82       MOV     DPL,?V8
   \   000006   85..83       MOV     DPH,?V9
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine83_0
   \   000004                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine87_0
   \   000003                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine92_0
   \   000002                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C8           XCH     A,R0
   \   000009   2414         ADD     A,#0x14
   \   00000B   F582         MOV     DPL,A
   \   00000D   E4           CLR     A
   \   00000E   38           ADDC    A,R0
   \   00000F   F583         MOV     DPH,A
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   22           RET
   2061          
   2062          /*********************************************************************
   2063           * @fn      zclGeneral_ProcessInGroupsClient
   2064           *
   2065           * @brief   Process in the received Groups Command.
   2066           *
   2067           * @param   pInMsg - pointer to the incoming message
   2068           *
   2069           * @return  ZStatus_t
   2070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2071          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInGroupsClient:
   2072                                                             zclGeneral_AppCallbacks_t *pCBs )
   2073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   2074            aps_Group_t group;
   2075            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL   ?Subroutine34 & 0xFFFF
   2076            uint8 grpCnt;
   2077            uint8 nameLen;
   2078            zclGroupRsp_t rsp;
   2079            uint8 i;
   2080            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_249:
   \   000015   75..00       MOV     ?V11,#0x0
   2081          
   2082            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C12         MOV     R4,#0x12
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2083            zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?XSP + 0
   \   00002E   AB..         MOV     R3,?XSP + 1
   \   000030   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2084          
   2085            switch ( pInMsg->hdr.commandID )
   \   000033   EE           MOV     A,R6
   \   000034   2402         ADD     A,#0x2
   \   000036   FA           MOV     R2,A
   \   000037   E4           CLR     A
   \   000038   3F           ADDC    A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   E5..         MOV     A,?V0
   \   00003C   2414         ADD     A,#0x14
   \   00003E   F5..         MOV     ?V0,A
   \   000040   5002         JNC     ??zclGeneral_ProcessInGroupsClient_0
   \   000042   05..         INC     ?V1
   \                     ??zclGeneral_ProcessInGroupsClient_0:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A882         MOV     R0,DPL
   \   00004B   A983         MOV     R1,DPH
   \   00004D   E5..         MOV     A,?V6
   \   00004F   2407         ADD     A,#0x7
   \   000051   F5..         MOV     ?V2,A
   \   000053   E4           CLR     A
   \   000054   35..         ADDC    A,?V7
   \   000056   F5..         MOV     ?V3,A
   \   000058   85..82       MOV     DPL,?V2
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   600F         JZ      ??zclGeneral_ProcessInGroupsClient_1
   \   000060   14           DEC     A
   \   000061   600C         JZ      ??zclGeneral_ProcessInGroupsClient_1
   \   000063   14           DEC     A
   \   000064   7003         JNZ     $+5
   \   000066   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
   \   000069   14           DEC     A
   \   00006A   6003         JZ      $+5
   \   00006C   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_3 & 0xFFFF
   2086            {
   2087              case COMMAND_GROUP_ADD_RSP:
   2088              case COMMAND_GROUP_VIEW_RSP:
   2089              case COMMAND_GROUP_REMOVE_RSP:
   2090                rsp.status = *pData++;
   \                     ??zclGeneral_ProcessInGroupsClient_1:
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V4,A
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E5..         MOV     A,?V4
   \   00007D   12....       LCALL   ?Subroutine54 & 0xFFFF
   2091                group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_122:
   \   000080   E0           MOVX    A,@DPTR
   \   000081   FC           MOV     R4,A
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   EC           MOV     A,R4
   \   000089   F8           MOV     R0,A
   \   00008A   740A         MOV     A,#0xa
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ?Subroutine51 & 0xFFFF
   2092          
   2093                if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
   \                     ??CrossCallReturnLabel_109:
   \   000092   E5..         MOV     A,?V4
   \   000094   7059         JNZ     ??CrossCallReturnLabel_110
   \   000096   85..82       MOV     DPL,?V2
   \   000099   85..83       MOV     DPH,?V3
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6401         XRL     A,#0x1
   \   00009F   704E         JNZ     ??CrossCallReturnLabel_110
   2094                {
   2095                  pData += 2;   // Move past ID
   2096                  nameLen = *pData++;
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FC           MOV     R4,A
   \   0000A9   EE           MOV     A,R6
   \   0000AA   2403         ADD     A,#0x3
   \   0000AC   FE           MOV     R6,A
   \   0000AD   5001         JNC     ??zclGeneral_ProcessInGroupsClient_4
   \   0000AF   0F           INC     R7
   2097                  if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \                     ??zclGeneral_ProcessInGroupsClient_4:
   \   0000B0   EC           MOV     A,R4
   \   0000B1   C3           CLR     C
   \   0000B2   9410         SUBB    A,#0x10
   \   0000B4   4002         JC      ??zclGeneral_ProcessInGroupsClient_5
   2098                    nameLen = (APS_GROUP_NAME_LEN-1);
   \   0000B6   7C0F         MOV     R4,#0xf
   2099                  group.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInGroupsClient_5:
   \   0000B8   740C         MOV     A,#0xc
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   EC           MOV     A,R4
   \   0000BE   F0           MOVX    @DPTR,A
   2100                  zcl_memcpy( &(group.name[1]), pData, nameLen );
   \   0000BF                ; Setup parameters for call to function osal_memcpy
   \   0000BF   8E..         MOV     ?V8,R6
   \   0000C1   8F..         MOV     ?V9,R7
   \   0000C3   75..00       MOV     ?V10,#0x0
   \   0000C6   78..         MOV     R0,#?V8
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   7410         MOV     A,#0x10
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   AA82         MOV     R2,DPL
   \   0000D4   AB83         MOV     R3,DPH
   \   0000D6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   2101                  rsp.grpName = group.name;
   \   0000DE   740C         MOV     A,#0xc
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   A882         MOV     R0,DPL
   \   0000E5   A983         MOV     R1,DPH
   \   0000E7   7408         MOV     A,#0x8
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine51 & 0xFFFF
   2102                }
   2103          
   2104                if ( pCBs->pfnGroupRsp )
   \                     ??CrossCallReturnLabel_110:
   \   0000EF   85..82       MOV     DPL,?V0
   \   0000F2   85..83       MOV     DPH,?V1
   \   0000F5   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2105                {
   2106                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000FD   12....       LCALL   ?Subroutine17 & 0xFFFF
   2107                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_24:
   \   000100   C0E0         PUSH    A
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
   2108                  rsp.grpCnt = 1;
   \   00010A   7404         MOV     A,#0x4
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   7401         MOV     A,#0x1
   \   000111   F0           MOVX    @DPTR,A
   2109                  rsp.grpList = &group.ID;
   \   000112   740A         MOV     A,#0xa
   \   000114   12....       LCALL   ?XSTACK_DISP100_8
   \   000117   7405         MOV     A,#0x5
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   12....       LCALL   ?Subroutine51 & 0xFFFF
   2110                  rsp.capacity = 0;
   \                     ??CrossCallReturnLabel_111:
   \   00011F   7407         MOV     A,#0x7
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E4           CLR     A
   \   000125   12....       LCALL   ?Subroutine52 & 0xFFFF
   2111          
   2112                  pCBs->pfnGroupRsp( &rsp );
   2113                }
   \                     ??CrossCallReturnLabel_118:
   \   000128   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00012B   12....       LCALL   ?CALL_IND
   \   00012E   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2114                break;
   2115          
   2116              case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
   2117                {
   2118                  uint16 *grpList = NULL;
   \                     ??zclGeneral_ProcessInGroupsClient_2:
   \   000131   75..00       MOV     ?V4,#0x0
   \   000134   75..00       MOV     ?V5,#0x0
   2119                  rsp.capacity = *pData++;
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   C0E0         PUSH    A
   \   00013E   7407         MOV     A,#0x7
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   D0E0         POP     A
   \   000145   F0           MOVX    @DPTR,A
   2120                  grpCnt = *pData++;
   \   000146   8882         MOV     DPL,R0
   \   000148   8983         MOV     DPH,R1
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   F5..         MOV     ?V8,A
   \   00014D   0E           INC     R6
   \   00014E   0E           INC     R6
   \   00014F   EB           MOV     A,R3
   \   000150   FF           MOV     R7,A
   2121          
   2122                  if ( grpCnt > 0 )
   \   000151   E5..         MOV     A,?V8
   \   000153   604C         JZ      ??zclGeneral_ProcessInGroupsClient_7
   2123                  {
   2124                    // Allocate space for the group list
   2125                    grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
   \   000155                ; Setup parameters for call to function osal_mem_alloc
   \   000155   25E0         ADD     A,0xE0 /* A   */
   \   000157   FA           MOV     R2,A
   \   000158   E4           CLR     A
   \   000159   33           RLC     A
   \   00015A   FB           MOV     R3,A
   \   00015B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00015E   8A..         MOV     ?V4,R2
   \   000160   8B..         MOV     ?V5,R3
   2126                    if ( grpList != NULL )
   \   000162   EA           MOV     A,R2
   \   000163   45..         ORL     A,?V5
   \   000165   603A         JZ      ??zclGeneral_ProcessInGroupsClient_7
   2127                    {
   2128                      rsp.grpCnt = grpCnt;
   \   000167   7404         MOV     A,#0x4
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   E5..         MOV     A,?V8
   \   00016E   F0           MOVX    @DPTR,A
   2129                      for ( i = 0; i < grpCnt; i++ )
   \   00016F   7C00         MOV     R4,#0x0
   \   000171   8028         SJMP    ??zclGeneral_ProcessInGroupsClient_8
   2130                      {
   2131                        grpList[i] = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsClient_9:
   \   000173   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000176   F8           MOV     R0,A
   \   000177   E4           CLR     A
   \   000178   C8           XCH     A,R0
   \   000179   F9           MOV     R1,A
   \   00017A   EA           MOV     A,R2
   \   00017B   28           ADD     A,R0
   \   00017C   E4           CLR     A
   \   00017D   39           ADDC    A,R1
   \   00017E   FB           MOV     R3,A
   \   00017F   EC           MOV     A,R4
   \   000180   25E0         ADD     A,0xE0 /* A   */
   \   000182   F8           MOV     R0,A
   \   000183   E4           CLR     A
   \   000184   33           RLC     A
   \   000185   F9           MOV     R1,A
   \   000186   E5..         MOV     A,?V4
   \   000188   28           ADD     A,R0
   \   000189   F582         MOV     DPL,A
   \   00018B   E5..         MOV     A,?V5
   \   00018D   39           ADDC    A,R1
   \   00018E   F583         MOV     DPH,A
   \   000190   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   2132                        pData += 2;
   \                     ??CrossCallReturnLabel_227:
   \   000193   EE           MOV     A,R6
   \   000194   2402         ADD     A,#0x2
   \   000196   FE           MOV     R6,A
   \   000197   5001         JNC     ??zclGeneral_ProcessInGroupsClient_10
   \   000199   0F           INC     R7
   2133                      }
   \                     ??zclGeneral_ProcessInGroupsClient_10:
   \   00019A   0C           INC     R4
   \                     ??zclGeneral_ProcessInGroupsClient_8:
   \   00019B   EC           MOV     A,R4
   \   00019C   C3           CLR     C
   \   00019D   95..         SUBB    A,?V8
   \   00019F   40D2         JC      ??zclGeneral_ProcessInGroupsClient_9
   2134                    }
   2135                  }
   2136          
   2137                  if ( pCBs->pfnGroupRsp )
   \                     ??zclGeneral_ProcessInGroupsClient_7:
   \   0001A1   85..82       MOV     DPL,?V0
   \   0001A4   85..83       MOV     DPH,?V1
   \   0001A7   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0001AA   6021         JZ      ??zclGeneral_ProcessInGroupsClient_11
   2138                  {
   2139                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001AC   12....       LCALL   ?Subroutine17 & 0xFFFF
   2140                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_25:
   \   0001AF   C0E0         PUSH    A
   \   0001B1   7402         MOV     A,#0x2
   \   0001B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B6   D0E0         POP     A
   \   0001B8   F0           MOVX    @DPTR,A
   2141                    rsp.grpList = grpList;
   \   0001B9   7405         MOV     A,#0x5
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   E5..         MOV     A,?V4
   \   0001C0   F0           MOVX    @DPTR,A
   \   0001C1   A3           INC     DPTR
   \   0001C2   E5..         MOV     A,?V5
   \   0001C4   12....       LCALL   ?Subroutine52 & 0xFFFF
   2142          
   2143                    pCBs->pfnGroupRsp( &rsp );
   2144                  }
   \                     ??CrossCallReturnLabel_119:
   \   0001C7   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0001CA   12....       LCALL   ?CALL_IND
   2145          
   2146                  if ( grpList != NULL )
   \                     ??zclGeneral_ProcessInGroupsClient_11:
   \   0001CD   E5..         MOV     A,?V4
   \   0001CF   45..         ORL     A,?V5
   \   0001D1   600C         JZ      ??zclGeneral_ProcessInGroupsClient_6
   2147                  {
   2148                    zcl_mem_free( grpList );
   \   0001D3                ; Setup parameters for call to function osal_mem_free
   \   0001D3   AA..         MOV     R2,?V4
   \   0001D5   AB..         MOV     R3,?V5
   \   0001D7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001DA   8003         SJMP    ??zclGeneral_ProcessInGroupsClient_6
   2149                  }
   2150                }
   2151                break;
   2152          
   2153              default:
   2154                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsClient_3:
   \   0001DC   75..01       MOV     ?V11,#0x1
   2155                break;
   2156            }
   2157          
   2158            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsClient_6:
   \   0001DF   A9..         MOV     R1,?V11
   \   0001E1   741C         MOV     A,#0x1c
   \   0001E3   02....       LJMP    ?Subroutine3 & 0xFFFF
   2159          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   85..82       MOV     DPL,?V0
   \   000008   85..83       MOV     DPH,?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?V6
   \   000003   85..83       MOV     DPH,?V7
   \   000006   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine91_0
   \   00000C                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   FE           MOV     R6,A
   \   000003   E9           MOV     A,R1
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET
   2160          #endif // ZCL_GROUPS
   2161          
   2162          #if defined( ZCL_SCENES )
   2163          #if !defined ( ZCL_STANDALONE )
   2164          /*********************************************************************
   2165           * @fn      zclGeneral_AddScene
   2166           *
   2167           * @brief   Add a scene for an endpoint
   2168           *
   2169           * @param   endpoint -
   2170           * @param   scene - new scene item
   2171           *
   2172           * @return  ZStatus_t
   2173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2174          ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
   \                     zclGeneral_AddScene:
   2175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   2176            zclGenSceneItem_t *pNewItem;
   2177            zclGenSceneItem_t *pLoop;
   2178          
   2179            // Fill in the new profile list
   2180            pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A3A         MOV     R2,#0x3a
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V4,R2
   \   000014   8B..         MOV     ?V5,R3
   \   000016   AE..         MOV     R6,?V4
   \   000018   AF..         MOV     R7,?V5
   2181            if ( pNewItem == NULL )
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   7004         JNZ     ??zclGeneral_AddScene_0
   2182              return ( ZMemError );
   \   00001E   7910         MOV     R1,#0x10
   \   000020   8058         SJMP    ??zclGeneral_AddScene_1
   2183          
   2184            // Fill in the plugin record.
   2185            pNewItem->next = (zclGenSceneItem_t *)NULL;
   \                     ??zclGeneral_AddScene_0:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine50 & 0xFFFF
   2186            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_102:
   \   00002C   12....       LCALL   ?Subroutine47 & 0xFFFF
   2187            zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
   \                     ??CrossCallReturnLabel_97:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000032   7C37         MOV     R4,#0x37
   \   000034   7D00         MOV     R5,#0x0
   \   000036   EE           MOV     A,R6
   \   000037   2403         ADD     A,#0x3
   \   000039   FA           MOV     R2,A
   \   00003A   E4           CLR     A
   \   00003B   3F           ADDC    A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   2188          
   2189            // Find spot in list
   2190            if (  zclGenSceneTable == NULL )
   \   000045   90....       MOV     DPTR,#zclGenSceneTable
   \   000048   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00004B   90....       MOV     DPTR,#zclGenSceneTable
   \   00004E   7006         JNZ     ??zclGeneral_AddScene_2
   2191            {
   2192              zclGenSceneTable = pNewItem;
   \   000050   EE           MOV     A,R6
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EF           MOV     A,R7
   \   000054   801E         SJMP    ??zclGeneral_AddScene_3
   2193            }
   2194            else
   2195            {
   2196              // Look for end of list
   2197              pLoop = zclGenSceneTable;
   \                     ??zclGeneral_AddScene_2:
   \   000056   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000059   8003         SJMP    ??zclGeneral_AddScene_4
   2198              while ( pLoop->next != NULL )
   2199                pLoop = pLoop->next;
   \                     ??zclGeneral_AddScene_5:
   \   00005B   E8           MOV     A,R0
   \   00005C   FA           MOV     R2,A
   \   00005D   E9           MOV     A,R1
   \                     ??zclGeneral_AddScene_4:
   \   00005E   FB           MOV     R3,A
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000066   70F3         JNZ     ??zclGeneral_AddScene_5
   2200          
   2201              // Put new item at end of list
   2202              pLoop->next = pNewItem;
   \   000068   EE           MOV     A,R6
   \   000069   F8           MOV     R0,A
   \   00006A   EF           MOV     A,R7
   \   00006B   F9           MOV     R1,A
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   E8           MOV     A,R0
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   E9           MOV     A,R1
   \                     ??zclGeneral_AddScene_3:
   \   000074   F0           MOVX    @DPTR,A
   2203            }
   2204          
   2205            // Update NV
   2206            zclGeneral_ScenesWriteNV();
   \   000075                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000075   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2207          
   2208            return ( ZSuccess );
   \   000078   7900         MOV     R1,#0x0
   \                     ??zclGeneral_AddScene_1:
   \   00007A   02....       LJMP    ?Subroutine6 & 0xFFFF
   2209          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E5..         MOV     A,?V2
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   85....       MOV     ?V4,?V0
   \   000006   85....       MOV     ?V5,?V1
   \   000009   75..00       MOV     ?V6,#0x0
   \   00000C   78..         MOV     R0,#?V4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   2210          #endif // ZCL_STANDALONE
   2211          
   2212          #if !defined ( ZCL_STANDALONE )
   2213          /*********************************************************************
   2214           * @fn      zclGeneral_FindScene
   2215           *
   2216           * @brief   Find a scene with endpoint and sceneID
   2217           *
   2218           * @param   endpoint -
   2219           * @param   groupID - what group the scene belongs to
   2220           * @param   sceneID - ID to look for scene
   2221           *
   2222           * @return  a pointer to the scene information, NULL if not found
   2223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2224          zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_FindScene:
   2225          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   2226            zclGenSceneItem_t *pLoop;
   2227          
   2228            // Look for end of list
   2229            pLoop = zclGenSceneTable;
   \   000007   90....       MOV     DPTR,#zclGenSceneTable
   \   00000A   8004         SJMP    ??zclGeneral_FindScene_0
   2230            while ( pLoop )
   2231            {
   2232              if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
   2233                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2234              {
   2235                return ( &(pLoop->scene) );
   2236              }
   2237              pLoop = pLoop->next;
   \                     ??zclGeneral_FindScene_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \                     ??zclGeneral_FindScene_0:
   \   000010   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   602E         JZ      ??zclGeneral_FindScene_2
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6D           XRL     A,R5
   \   00001F   6005         JZ      ??zclGeneral_FindScene_3
   \   000021   74FF         MOV     A,#-0x1
   \   000023   6D           XRL     A,R5
   \   000024   70E6         JNZ     ??zclGeneral_FindScene_1
   \                     ??zclGeneral_FindScene_3:
   \   000026   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6A           XRL     A,R2
   \   00002B   7003         JNZ     ??zclGeneral_FindScene_4
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6B           XRL     A,R3
   \                     ??zclGeneral_FindScene_4:
   \   000030   70DA         JNZ     ??zclGeneral_FindScene_1
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6C           XRL     A,R4
   \   00003D   70CD         JNZ     ??zclGeneral_FindScene_1
   \   00003F   E8           MOV     A,R0
   \   000040   FA           MOV     R2,A
   \   000041   E9           MOV     A,R1
   \   000042   FB           MOV     R3,A
   \   000043   8004         SJMP    ??zclGeneral_FindScene_5
   2238            }
   2239          
   2240            return ( (zclGeneral_Scene_t *)NULL );
   \                     ??zclGeneral_FindScene_2:
   \   000045   7A00         MOV     R2,#0x0
   \   000047   7B00         MOV     R3,#0x0
   \                     ??zclGeneral_FindScene_5:
   \   000049                REQUIRE ?Subroutine7
   \   000049                ; // Fall through to label ?Subroutine7
   2241          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2242          #endif // ZCL_STANDALONE
   2243          
   2244          #if !defined ( ZCL_STANDALONE )
   2245          /*********************************************************************
   2246           * @fn      zclGeneral_FindAllScenesForGroup
   2247           *
   2248           * @brief   Find all the scenes with groupID
   2249           *
   2250           * @param   endpoint - endpoint to look for
   2251           * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
   2252           *
   2253           * @return  number of scenes copied to sceneList
   2254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2255          uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
   \                     zclGeneral_FindAllScenesForGroup:
   2256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   2257            zclGenSceneItem_t *pLoop;
   2258            uint8 cnt = 0;
   \   000007   75..00       MOV     ?V0,#0x0
   2259          
   2260            // Look for end of list
   2261            pLoop = zclGenSceneTable;
   \   00000A   90....       MOV     DPTR,#zclGenSceneTable
   \   00000D   803A         SJMP    ??zclGeneral_FindAllScenesForGroup_0
   2262            while ( pLoop )
   2263            {
   2264              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   \                     ??zclGeneral_FindAllScenesForGroup_1:
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   65..         XRL     A,?V1
   \   000018   702B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6A           XRL     A,R2
   \   000023   7003         JNZ     ??zclGeneral_FindAllScenesForGroup_3
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6B           XRL     A,R3
   \                     ??zclGeneral_FindAllScenesForGroup_3:
   \   000028   701B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   2265                sceneList[cnt++] = pLoop->scene.ID;
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C0E0         PUSH    A
   \   000036   AE..         MOV     R6,?V0
   \   000038   EC           MOV     A,R4
   \   000039   2E           ADD     A,R6
   \   00003A   F582         MOV     DPL,A
   \   00003C   E4           CLR     A
   \   00003D   3D           ADDC    A,R5
   \   00003E   F583         MOV     DPH,A
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   05..         INC     ?V0
   2266              pLoop = pLoop->next;
   \                     ??zclGeneral_FindAllScenesForGroup_2:
   \   000045   8882         MOV     DPL,R0
   \   000047   8983         MOV     DPH,R1
   2267            }
   \                     ??zclGeneral_FindAllScenesForGroup_0:
   \   000049   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00004C   70C1         JNZ     ??zclGeneral_FindAllScenesForGroup_1
   2268            return ( cnt );
   \   00004E                REQUIRE ?Subroutine9
   \   00004E                ; // Fall through to label ?Subroutine9
   2269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A9..         MOV     R1,?V0
   \   000002   02....       LJMP    ??Subroutine82_0 & 0xFFFF
   2270          #endif // ZCL_STANDALONE
   2271          
   2272          #if !defined ( ZCL_STANDALONE )
   2273          /*********************************************************************
   2274           * @fn      zclGeneral_RemoveScene
   2275           *
   2276           * @brief   Remove a scene with endpoint and sceneID
   2277           *
   2278           * @param   endpoint -
   2279           * @param   groupID - what group the scene belongs to
   2280           * @param   sceneID - ID to look for scene
   2281           *
   2282           * @return  TRUE if removed, FALSE if not found
   2283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2284          uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_RemoveScene:
   2285          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
   2286            zclGenSceneItem_t *pLoop;
   2287            zclGenSceneItem_t *pPrev;
   2288          
   2289            // Look for end of list
   2290            pLoop = zclGenSceneTable;
   \   000009   90....       MOV     DPTR,#zclGenSceneTable
   \   00000C   12....       LCALL   ?Subroutine38 & 0xFFFF
   2291            pPrev = NULL;
   \                     ??CrossCallReturnLabel_81:
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   800B         SJMP    ??CrossCallReturnLabel_82
   2292            while ( pLoop )
   2293            {
   2294              if ( pLoop->endpoint == endpoint
   2295                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2296              {
   2297                if ( pPrev == NULL )
   2298                  zclGenSceneTable = pLoop->next;
   2299                else
   2300                  pPrev->next = pLoop->next;
   2301          
   2302                // Free the memory
   2303                zcl_mem_free( pLoop );
   2304          
   2305                // Update NV
   2306                zclGeneral_ScenesWriteNV();
   2307          
   2308                return ( TRUE );
   2309              }
   2310              pPrev = pLoop;
   \                     ??zclGeneral_RemoveScene_0:
   \   000015   E8           MOV     A,R0
   \   000016   FC           MOV     R4,A
   \   000017   E9           MOV     A,R1
   \   000018   FD           MOV     R5,A
   2311              pLoop = pLoop->next;
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   604C         JZ      ??zclGeneral_RemoveScene_1
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6E           XRL     A,R6
   \   00002C   70E7         JNZ     ??zclGeneral_RemoveScene_0
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6A           XRL     A,R2
   \   000037   7003         JNZ     ??zclGeneral_RemoveScene_2
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6B           XRL     A,R3
   \                     ??zclGeneral_RemoveScene_2:
   \   00003C   70D7         JNZ     ??zclGeneral_RemoveScene_0
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6F           XRL     A,R7
   \   000049   70CA         JNZ     ??zclGeneral_RemoveScene_0
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000052   EC           MOV     A,R4
   \   000053   4D           ORL     A,R5
   \   000054   7005         JNZ     ??zclGeneral_RemoveScene_3
   \   000056   90....       MOV     DPTR,#zclGenSceneTable
   \   000059   8004         SJMP    ??zclGeneral_RemoveScene_4
   \                     ??zclGeneral_RemoveScene_3:
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \                     ??zclGeneral_RemoveScene_4:
   \   00005F   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000062                ; Setup parameters for call to function osal_mem_free
   \   000062   E8           MOV     A,R0
   \   000063   FA           MOV     R2,A
   \   000064   E9           MOV     A,R1
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000069                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000069   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   8002         SJMP    ??zclGeneral_RemoveScene_5
   2312            }
   2313          
   2314            return ( FALSE );
   \                     ??zclGeneral_RemoveScene_1:
   \   000070   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RemoveScene_5:
   \   000072   02....       LJMP    ?Subroutine7 & 0xFFFF
   2315          }
   2316          #endif // ZCL_STANDALONE
   2317          
   2318          #if !defined ( ZCL_STANDALONE )
   2319          /*********************************************************************
   2320           * @fn      zclGeneral_RemoveAllScenes
   2321           *
   2322           * @brief   Remove all scenes with endpoint and group Id
   2323           *
   2324           * @param   endpoint -
   2325           * @param   groupID - ID to look for group
   2326           *
   2327           * @return  none
   2328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2329          void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
   \                     zclGeneral_RemoveAllScenes:
   2330          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   2331            zclGenSceneItem_t *pLoop;
   2332            zclGenSceneItem_t *pPrev;
   2333            zclGenSceneItem_t *pNext;
   2334          
   2335            // Look for end of list
   2336            pLoop = zclGenSceneTable;
   \   00000B   90....       MOV     DPTR,#zclGenSceneTable
   \   00000E   12....       LCALL   ?Subroutine24 & 0xFFFF
   2337            pPrev = NULL;
   \                     ??CrossCallReturnLabel_45:
   \   000011   7E00         MOV     R6,#0x0
   \   000013   7F00         MOV     R7,#0x0
   \   000015   8019         SJMP    ??zclGeneral_RemoveAllScenes_0
   2338            while ( pLoop )
   2339            {
   2340              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   2341              {
   2342                if ( pPrev == NULL )
   2343                  zclGenSceneTable = pLoop->next;
   2344                else
   2345                  pPrev->next = pLoop->next;
   \                     ??zclGeneral_RemoveAllScenes_1:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \                     ??zclGeneral_RemoveAllScenes_2:
   \   00001B   12....       LCALL   ?Subroutine51 & 0xFFFF
   2346                pNext = pLoop->next;
   \                     ??CrossCallReturnLabel_112:
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V3,A
   2347          
   2348                // Free the memory
   2349                zcl_mem_free( pLoop );
   \   000029                ; Setup parameters for call to function osal_mem_free
   \   000029   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2350                pLoop = pNext;
   \   00002C   AA..         MOV     R2,?V2
   \   00002E   AB..         MOV     R3,?V3
   \                     ??zclGeneral_RemoveAllScenes_0:
   \   000030   EA           MOV     A,R2
   \   000031   4B           ORL     A,R3
   \   000032   603A         JZ      ??zclGeneral_RemoveAllScenes_3
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   65..         XRL     A,?V4
   \   00003D   7022         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   65..         XRL     A,?V0
   \   000049   7004         JNZ     ??zclGeneral_RemoveAllScenes_5
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   65..         XRL     A,?V1
   \                     ??zclGeneral_RemoveAllScenes_5:
   \   00004F   7010         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000058   EE           MOV     A,R6
   \   000059   4F           ORL     A,R7
   \   00005A   70BB         JNZ     ??zclGeneral_RemoveAllScenes_1
   \   00005C   90....       MOV     DPTR,#zclGenSceneTable
   \   00005F   80BA         SJMP    ??zclGeneral_RemoveAllScenes_2
   2351              }
   2352              else
   2353              {
   2354                pPrev = pLoop;
   \                     ??zclGeneral_RemoveAllScenes_4:
   \   000061   EA           MOV     A,R2
   \   000062   FE           MOV     R6,A
   \   000063   EB           MOV     A,R3
   \   000064   FF           MOV     R7,A
   2355                pLoop = pLoop->next;
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   12....       LCALL   ?Subroutine24 & 0xFFFF
   2356              }
   2357            }
   \                     ??CrossCallReturnLabel_46:
   \   00006C   80C2         SJMP    ??zclGeneral_RemoveAllScenes_0
   2358          
   2359            // Update NV
   2360            zclGeneral_ScenesWriteNV();
   \                     ??zclGeneral_RemoveAllScenes_3:
   \   00006E                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   00006E   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2361          }
   \   000071   7F05         MOV     R7,#0x5
   \   000073   02....       LJMP    ?BANKED_LEAVE_XDATA
   2362          #endif // ZCL_STANDALONE
   2363          
   2364          #if !defined ( ZCL_STANDALONE )
   2365          /*********************************************************************
   2366           * @fn      zclGeneral_CountScenes
   2367           *
   2368           * @brief   Count the number of scenes for an endpoint
   2369           *
   2370           * @param   endpoint -
   2371           *
   2372           * @return  number of scenes assigned to an endpoint
   2373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2374          uint8 zclGeneral_CountScenes( uint8 endpoint )
   \                     zclGeneral_CountScenes:
   2375          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2376            zclGenSceneItem_t *pLoop;
   2377            uint8 cnt = 0;
   \   000006   7900         MOV     R1,#0x0
   2378          
   2379            // Look for end of list
   2380            pLoop = zclGenSceneTable;
   \   000008   90....       MOV     DPTR,#zclGenSceneTable
   \   00000B   800F         SJMP    ??zclGeneral_CountScenes_0
   2381            while ( pLoop )
   2382            {
   2383              if ( pLoop->endpoint == endpoint  )
   \                     ??zclGeneral_CountScenes_1:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   68           XRL     A,R0
   \   000015   7001         JNZ     ??zclGeneral_CountScenes_2
   2384                cnt++;
   \   000017   09           INC     R1
   2385              pLoop = pLoop->next;
   \                     ??zclGeneral_CountScenes_2:
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   2386            }
   \                     ??zclGeneral_CountScenes_0:
   \   00001C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00001F   70EC         JNZ     ??zclGeneral_CountScenes_1
   2387            return ( cnt );
   \   000021   80..         SJMP    ?Subroutine5
   2388          }
   2389          #endif
   2390          
   2391          #if !defined ( ZCL_STANDALONE )
   2392          /*********************************************************************
   2393           * @fn      zclGeneral_CountAllScenes
   2394           *
   2395           * @brief   Count the total number of scenes
   2396           *
   2397           * @param   none
   2398           *
   2399           * @return  number of scenes
   2400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2401          uint8 zclGeneral_CountAllScenes( void )
   \                     zclGeneral_CountAllScenes:
   2402          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2403            zclGenSceneItem_t *pLoop;
   2404            uint8 cnt = 0;
   \   000004   7900         MOV     R1,#0x0
   2405          
   2406            // Look for end of list
   2407            pLoop = zclGenSceneTable;
   \   000006   90....       MOV     DPTR,#zclGenSceneTable
   \   000009   8001         SJMP    ??zclGeneral_CountAllScenes_0
   2408            while ( pLoop )
   2409            {
   2410              cnt++;
   \                     ??zclGeneral_CountAllScenes_1:
   \   00000B   09           INC     R1
   2411              pLoop = pLoop->next;
   2412            }
   \                     ??zclGeneral_CountAllScenes_0:
   \   00000C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   70F2         JNZ     ??zclGeneral_CountAllScenes_1
   2413            return ( cnt );
   \   000019                REQUIRE ?Subroutine5
   \   000019                ; // Fall through to label ?Subroutine5
   2414          }
   2415          #endif // ZCL_STANDALONE
   2416          
   2417          /*********************************************************************
   2418           * @fn      zclGeneral_ReadSceneCountCB
   2419           *
   2420           * @brief   Read the number of scenes currently in the device's
   2421           *          scene table (i.e., the Scene Count attribute).
   2422           *
   2423           *          Note: This function gets called only when the pointer
   2424           *                'dataPtr' to the Scene Count attribute value is
   2425           *                NULL in the attribute database registered with
   2426           *                the ZCL.
   2427           *
   2428           * @param   clusterId - cluster that attribute belongs to
   2429           * @param   attrId - attribute to be read or written
   2430           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
   2431           * @param   pValue - pointer to attribute value
   2432           * @param   pLen - pointer to length of attribute value read
   2433           *
   2434           * @return  status
   2435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2436          ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
   \                     zclGeneral_ReadSceneCountCB:
   2437                                                 uint8 oper, uint8 *pValue, uint16 *pLen )
   2438          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   2439            ZStatus_t status = ZCL_STATUS_SUCCESS;
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   2440          
   2441            // This callback function should only be called for the Scene Count attribute
   2442            switch ( oper )
   \                     ??CrossCallReturnLabel_192:
   \   000012   E5..         MOV     A,?V1
   \   000014   6014         JZ      ??zclGeneral_ReadSceneCountCB_0
   \   000016   14           DEC     A
   \   000017   701D         JNZ     ??zclGeneral_ReadSceneCountCB_1
   2443            {
   2444              case ZCL_OPER_LEN:
   2445                *pLen = 1; // uint8
   2446                break;
   2447          
   2448              case ZCL_OPER_READ:
   2449                *pValue = zclGeneral_CountAllScenes();
   \   000019                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000019   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   00001C   740A         MOV     A,#0xa
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000024   E9           MOV     A,R1
   \   000025   F0           MOVX    @DPTR,A
   2450          
   2451                if ( pLen != NULL )
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   600F         JZ      ??zclGeneral_ReadSceneCountCB_2
   2452                {
   2453                  *pLen = 1;
   \                     ??zclGeneral_ReadSceneCountCB_0:
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   8003         SJMP    ??zclGeneral_ReadSceneCountCB_2
   2454                }
   2455                break;
   2456          
   2457              case ZCL_OPER_WRITE:
   2458                // Fall through
   2459          
   2460              default:
   2461                status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
   \                     ??zclGeneral_ReadSceneCountCB_1:
   \   000036   75..C1       MOV     ?V0,#-0x3f
   2462                break;
   2463            }
   2464          
   2465            return ( status );
   \                     ??zclGeneral_ReadSceneCountCB_2:
   \   000039   02....       LJMP    ?Subroutine9 & 0xFFFF
   2466          }
   2467          
   2468          /*********************************************************************
   2469           * @fn      zclGeneral_ProcessInScenesServer
   2470           *
   2471           * @brief   Process in the received Scenes Command.
   2472           *
   2473           * @param   pInMsg - pointer to the incoming message
   2474           *
   2475           * @return  ZStatus_t
   2476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?V12
   \   000003   85..83       MOV     DPH,?V13
   \   000006                REQUIRE ??Subroutine77_0
   \   000006                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine84_0
   \   000004                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine85_0
   \   000002                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2477          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesServer:
   2478                                                             zclGeneral_AppCallbacks_t *pCBs )
   2479          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 60
   \   000005   74C4         MOV     A,#-0x3c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
   2480            zclGeneral_Scene_t scene;
   2481            zclGeneral_Scene_t *pScene;
   2482            uint8 *pData = pInMsg->pData;
   \   000012   EE           MOV     A,R6
   \   000013   2408         ADD     A,#0x8
   \   000015   F5..         MOV     ?V8,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F5..         MOV     ?V9,A
   \   00001B   85..82       MOV     DPL,?V8
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V1,A
   2483            uint8 nameLen;
   2484            uint8 status;
   2485            uint8 sceneCnt = 0;
   \   000027   75..00       MOV     ?V5,#0x0
   2486            uint8 *sceneList = NULL;
   \   00002A   75..00       MOV     ?V2,#0x0
   \   00002D   75..00       MOV     ?V3,#0x0
   2487            uint8 sendRsp = TRUE;
   2488            uint8 nameSupport = FALSE;
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   2489            ZStatus_t stat = ZSuccess;
   \   000038   75..00       MOV     ?V4,#0x0
   2490          
   2491            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C37         MOV     R4,#0x37
   \   00003D   FD           MOV     R5,A
   \   00003E   F9           MOV     R1,A
   \   00003F   7405         MOV     A,#0x5
   \   000041   12....       LCALL   ?XSTACK_DISP101_8
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2492          
   2493            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \   000047   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00004A   7405         MOV     A,#0x5
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine51 & 0xFFFF
   2494            pData += 2;   // Move past group ID
   2495            scene.ID = *pData++;
   \                     ??CrossCallReturnLabel_113:
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FC           MOV     R4,A
   \   00005C   7407         MOV     A,#0x7
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   EC           MOV     A,R4
   \   000062   F0           MOVX    @DPTR,A
   \   000063   E5..         MOV     A,?V0
   \   000065   2403         ADD     A,#0x3
   \   000067   F5..         MOV     ?V0,A
   \   000069   5002         JNC     ??zclGeneral_ProcessInScenesServer_0
   \   00006B   05..         INC     ?V1
   2496          
   2497            switch ( pInMsg->hdr.commandID )
   \                     ??zclGeneral_ProcessInScenesServer_0:
   \   00006D   EE           MOV     A,R6
   \   00006E   2406         ADD     A,#0x6
   \   000070   F5..         MOV     ?V12,A
   \   000072   E4           CLR     A
   \   000073   3F           ADDC    A,R7
   \   000074   F5..         MOV     ?V13,A
   \   000076   EE           MOV     A,R6
   \   000077   2407         ADD     A,#0x7
   \   000079   F5..         MOV     ?V10,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   F5..         MOV     ?V11,A
   \   00007F   85..82       MOV     DPL,?V10
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6027         JZ      ??zclGeneral_ProcessInScenesServer_1
   \   000087   14           DEC     A
   \   000088   7003         JNZ     $+5
   \   00008A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_2 & 0xFFFF
   \   00008D   14           DEC     A
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??zclGeneral_ProcessInScenesServer_3 & 0xFFFF
   \   000093   14           DEC     A
   \   000094   7003         JNZ     $+5
   \   000096   02....       LJMP    ??zclGeneral_ProcessInScenesServer_4 & 0xFFFF
   \   000099   14           DEC     A
   \   00009A   7003         JNZ     $+5
   \   00009C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_5 & 0xFFFF
   \   00009F   14           DEC     A
   \   0000A0   7003         JNZ     $+5
   \   0000A2   02....       LJMP    ??zclGeneral_ProcessInScenesServer_6 & 0xFFFF
   \   0000A5   14           DEC     A
   \   0000A6   7003         JNZ     $+5
   \   0000A8   02....       LJMP    ??zclGeneral_ProcessInScenesServer_7 & 0xFFFF
   \   0000AB   02....       LJMP    ??zclGeneral_ProcessInScenesServer_8 & 0xFFFF
   2498            {
   2499              case COMMAND_SCENE_ADD:
   2500          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2501              case COMMAND_SCENE_ENHANCED_ADD:
   2502          #endif // ZCL_LIGHT_LINK_ENHANCE
   2503                // Parse the rest of the incoming message
   2504                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesServer_1:
   \   0000AE   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000B1   7408         MOV     A,#0x8
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?Subroutine51 & 0xFFFF
   2505                pData += 2;
   2506          
   2507                if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
   \                     ??CrossCallReturnLabel_114:
   \   0000B9   85..82       MOV     DPL,?V10
   \   0000BC   85..83       MOV     DPH,?V11
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6440         XRL     A,#0x40
   \   0000C2   702D         JNZ     ??CrossCallReturnLabel_115
   2508                {
   2509                  // Received transition time is in 1/10 second
   2510                  scene.transTime100ms = scene.transTime % 10;
   \   0000C4   7408         MOV     A,#0x8
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F8           MOV     R0,A
   \   0000CB   7A0A         MOV     R2,#0xa
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ?US_DIV_MOD
   \   0000D2   740A         MOV     A,#0xa
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   2511                  scene.transTime /= 10;
   \                     ??CrossCallReturnLabel_229:
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL   ?Subroutine38 & 0xFFFF
   2512                }
   \                     ??CrossCallReturnLabel_84:
   \   0000E2   7A0A         MOV     R2,#0xa
   \   0000E4   7B00         MOV     R3,#0x0
   \   0000E6   12....       LCALL   ?US_DIV_MOD
   \   0000E9   7408         MOV     A,#0x8
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL   ?Subroutine51 & 0xFFFF
   2513          
   2514                nameLen= *pData++; // Name length
   \                     ??CrossCallReturnLabel_115:
   \   0000F1   85..82       MOV     DPL,?V0
   \   0000F4   85..83       MOV     DPH,?V1
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V2,A
   \   0000FC   E5..         MOV     A,?V0
   \   0000FE   2403         ADD     A,#0x3
   \   000100   F5..         MOV     ?V0,A
   \   000102   5002         JNC     ??zclGeneral_ProcessInScenesServer_9
   \   000104   05..         INC     ?V1
   2515          
   2516                // Retrieve Name Support attribute
   2517                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
   2518                                  ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
   \                     ??zclGeneral_ProcessInScenesServer_9:
   \   000106                ; Setup parameters for call to function zcl_ReadAttrData
   \   000106   78..         MOV     R0,#?V4
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7402         MOV     A,#0x2
   \   00010D   12....       LCALL   ?XSTACK_DISP100_8
   \   000110   88..         MOV     ?V4,R0
   \   000112   89..         MOV     ?V5,R1
   \   000114   78..         MOV     R0,#?V4
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   7C04         MOV     R4,#0x4
   \   00011B   7D00         MOV     R5,#0x0
   \   00011D   7A05         MOV     R2,#0x5
   \   00011F   7B00         MOV     R3,#0x0
   \   000121   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000124   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   000127   7404         MOV     A,#0x4
   \   000129   12....       LCALL   ?DEALLOC_XSTACK8
   2519          
   2520                if ( nameSupport )
   \   00012C   85..82       MOV     DPL,?XSP + 0
   \   00012F   85..83       MOV     DPH,?XSP + 1
   \   000132   E0           MOVX    A,@DPTR
   \   000133   602A         JZ      ??zclGeneral_ProcessInScenesServer_10
   2521                {
   2522                  if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \   000135   E5..         MOV     A,?V2
   \   000137   C3           CLR     C
   \   000138   9410         SUBB    A,#0x10
   \   00013A   4003         JC      ??zclGeneral_ProcessInScenesServer_11
   2523                    nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   00013C   75..0F       MOV     ?V2,#0xf
   2524                  scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesServer_11:
   \   00013F   740C         MOV     A,#0xc
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   12....       LCALL   ?Subroutine47 & 0xFFFF
   2525                  zcl_memcpy( &(scene.name[1]), pData, nameLen );
   2526                }
   \                     ??CrossCallReturnLabel_98:
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00014A   AC..         MOV     R4,?V2
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   7410         MOV     A,#0x10
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   AA82         MOV     R2,DPL
   \   000155   AB83         MOV     R3,DPH
   \   000157   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00015A   7403         MOV     A,#0x3
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   2527          
   2528                pData += nameLen; // move past name, use original length
   \                     ??zclGeneral_ProcessInScenesServer_10:
   \   00015F   A8..         MOV     R0,?V2
   \   000161   E5..         MOV     A,?V0
   \   000163   28           ADD     A,R0
   \   000164   F5..         MOV     ?V0,A
   \   000166   E4           CLR     A
   \   000167   35..         ADDC    A,?V1
   \   000169   F5..         MOV     ?V1,A
   2529          
   2530                scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
   \   00016B   85..82       MOV     DPL,?V8
   \   00016E   85..83       MOV     DPH,?V9
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F8           MOV     R0,A
   \   000173   A9..         MOV     R1,?V0
   \   000175   8E82         MOV     DPL,R6
   \   000177   8F83         MOV     DPH,R7
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   C3           CLR     C
   \   000185   99           SUBB    A,R1
   \   000186   28           ADD     A,R0
   \   000187   F8           MOV     R0,A
   \   000188   741C         MOV     A,#0x1c
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   E8           MOV     A,R0
   \   00018E   F0           MOVX    @DPTR,A
   2531                if ( scene.extLen > 0 )
   \   00018F   602A         JZ      ??zclGeneral_ProcessInScenesServer_12
   2532                {
   2533                  // Copy the extention field(s)
   2534                  if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
   \   000191   C3           CLR     C
   \   000192   9420         SUBB    A,#0x20
   \   000194   4003         JC      ??zclGeneral_ProcessInScenesServer_13
   2535                  {
   2536                    scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
   \   000196   741F         MOV     A,#0x1f
   \   000198   F0           MOVX    @DPTR,A
   2537                  }
   2538                  zcl_memcpy( scene.extField, pData, scene.extLen );
   \                     ??zclGeneral_ProcessInScenesServer_13:
   \   000199                ; Setup parameters for call to function osal_memcpy
   \   000199   75..00       MOV     ?V2,#0x0
   \   00019C   78..         MOV     R0,#?V0
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A1   741F         MOV     A,#0x1f
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FC           MOV     R4,A
   \   0001A8   7D00         MOV     R5,#0x0
   \   0001AA   7420         MOV     A,#0x20
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   AA82         MOV     R2,DPL
   \   0001B1   AB83         MOV     R3,DPH
   \   0001B3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B6   7403         MOV     A,#0x3
   \   0001B8   12....       LCALL   ?DEALLOC_XSTACK8
   2539                }
   2540          
   2541                if ( scene.groupID == 0x0000 ||
   2542                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_12:
   \   0001BB   7405         MOV     A,#0x5
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0001C3   6015         JZ      ??zclGeneral_ProcessInScenesServer_14
   \   0001C5                ; Setup parameters for call to function aps_FindGroup
   \   0001C5   7405         MOV     A,#0x5
   \   0001C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001CD   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0001D0   8B..         MOV     ?V1,R3
   \   0001D2   EA           MOV     A,R2
   \   0001D3   45..         ORL     A,?V1
   \   0001D5   7003         JNZ     $+5
   \   0001D7   02....       LJMP    ??zclGeneral_ProcessInScenesServer_15 & 0xFFFF
   2543                {
   2544                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2545                  // does and the corresponding Group exits
   2546                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_14:
   \   0001DA                ; Setup parameters for call to function zclGeneral_FindScene
   \   0001DA   7407         MOV     A,#0x7
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   FC           MOV     R4,A
   \   0001E1   7405         MOV     A,#0x5
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001E9   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   0001EC   8A..         MOV     ?V2,R2
   \   0001EE   8B..         MOV     ?V3,R3
   2547                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   0001F0   EA           MOV     A,R2
   \   0001F1   45..         ORL     A,?V3
   \   0001F3   700C         JNZ     ??zclGeneral_ProcessInScenesServer_16
   \   0001F5                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   0001F5   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   0001F8   E9           MOV     A,R1
   \   0001F9   C3           CLR     C
   \   0001FA   9410         SUBB    A,#0x10
   \   0001FC   4003         JC      $+5
   \   0001FE   02....       LJMP    ??zclGeneral_ProcessInScenesServer_17 & 0xFFFF
   2548                  {
   2549                    status = ZCL_STATUS_SUCCESS;
   \                     ??zclGeneral_ProcessInScenesServer_16:
   \   000201   75..00       MOV     ?V0,#0x0
   2550                    if ( pScene != NULL )
   \   000204   E5..         MOV     A,?V2
   \   000206   45..         ORL     A,?V3
   \   000208   7003         JNZ     $+5
   \   00020A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_18 & 0xFFFF
   2551                    {
   2552                      // The Scene already exists so update it
   2553                      pScene->transTime = scene.transTime;
   \   00020D   7408         MOV     A,#0x8
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000215   85..82       MOV     DPL,?V2
   \   000218   85..83       MOV     DPH,?V3
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   12....       LCALL   ?Subroutine51 & 0xFFFF
   2554                      zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
   \                     ??CrossCallReturnLabel_116:
   \   000221                ; Setup parameters for call to function osal_memcpy
   \   000221   740C         MOV     A,#0xc
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   A982         MOV     R1,DPL
   \   000228   AA83         MOV     R2,DPH
   \   00022A   89..         MOV     ?V4,R1
   \   00022C   8A..         MOV     ?V5,R2
   \   00022E   75..00       MOV     ?V6,#0x0
   \   000231   78..         MOV     R0,#?V4
   \   000233   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000236   7C10         MOV     R4,#0x10
   \   000238   7D00         MOV     R5,#0x0
   \   00023A   E5..         MOV     A,?V2
   \   00023C   2407         ADD     A,#0x7
   \   00023E   FA           MOV     R2,A
   \   00023F   E4           CLR     A
   \   000240   35..         ADDC    A,?V3
   \   000242   FB           MOV     R3,A
   \   000243   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000246   7403         MOV     A,#0x3
   \   000248   12....       LCALL   ?DEALLOC_XSTACK8
   2555          
   2556                      // Use the new extention field(s)
   2557                      zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
   \   00024B                ; Setup parameters for call to function osal_memcpy
   \   00024B   741D         MOV     A,#0x1d
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   A982         MOV     R1,DPL
   \   000252   AA83         MOV     R2,DPH
   \   000254   89..         MOV     ?V4,R1
   \   000256   8A..         MOV     ?V5,R2
   \   000258   78..         MOV     R0,#?V4
   \   00025A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00025D   741F         MOV     A,#0x1f
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   E0           MOVX    A,@DPTR
   \   000263   FC           MOV     R4,A
   \   000264   7D00         MOV     R5,#0x0
   \   000266   E5..         MOV     A,?V2
   \   000268   2418         ADD     A,#0x18
   \   00026A   FA           MOV     R2,A
   \   00026B   E4           CLR     A
   \   00026C   35..         ADDC    A,?V3
   \   00026E   FB           MOV     R3,A
   \   00026F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000272   7403         MOV     A,#0x3
   \   000274   12....       LCALL   ?DEALLOC_XSTACK8
   2558                      pScene->extLen = scene.extLen;
   \   000277   741C         MOV     A,#0x1c
   \   000279   12....       LCALL   ?XSTACK_DISP0_8
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   C0E0         PUSH    A
   \   00027F   E5..         MOV     A,?V2
   \   000281   2417         ADD     A,#0x17
   \   000283   F582         MOV     DPL,A
   \   000285   E4           CLR     A
   \   000286   35..         ADDC    A,?V3
   \   000288   F583         MOV     DPH,A
   \   00028A   D0E0         POP     A
   \   00028C   F0           MOVX    @DPTR,A
   2559          
   2560                      // Save Scenes
   2561                      zclGeneral_ScenesSave();
   \   00028D                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   00028D   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2562                    }
   \   000290   8015         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2563                    else
   2564                    {
   2565                      // The Scene doesn't exist so add it
   2566                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \                     ??zclGeneral_ProcessInScenesServer_18:
   \   000292                ; Setup parameters for call to function zclGeneral_AddScene
   \   000292   7405         MOV     A,#0x5
   \   000294   12....       LCALL   ?XSTACK_DISP101_8
   \   000297   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   2567                    }
   2568                  }
   \                     ??CrossCallReturnLabel_262:
   \   00029A   12....       LCALL   `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \   00029D   8008         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2569                  else
   2570                  {
   2571                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_17:
   \   00029F   75..89       MOV     ?V0,#-0x77
   \   0002A2   8003         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2572                  }
   2573                }
   2574                else
   2575                {
   2576                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_15:
   \   0002A4   75..85       MOV     ?V0,#-0x7b
   2577                }
   2578          
   2579                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_19:
   \   0002A7   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002AA   6003         JZ      $+5
   \   0002AC   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   0002AF   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0002B2   6003         JZ      $+5
   \   0002B4   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2580                {
   2581                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
   \   0002B7   85..82       MOV     DPL,?V10
   \   0002BA   85..83       MOV     DPH,?V11
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   6003         JZ      $+5
   \   0002C0   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2582                  {
   2583                    zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2584                                                    status, scene.groupID, scene.ID,
   2585                                                    true, pInMsg->hdr.transSeqNum );
   \   0002C3                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0002C3   12....       LCALL   ?Subroutine14 & 0xFFFF
   2586                  }
   2587          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2588                  else // COMMAND_SCENE_ENHANCED_ADD
   2589                  {
   2590                    zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2591                                                            status, scene.groupID, scene.ID,
   2592                                                            true, pInMsg->hdr.transSeqNum );
   2593                  }
   2594          #endif // ZCL_LIGHT_LINK_ENHANCE
   2595                }
   \                     ??CrossCallReturnLabel_176:
   \   0002C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002C9   75..01       MOV     ?V1,#0x1
   \   0002CC   78..         MOV     R0,#?V1
   \   0002CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002D1   7409         MOV     A,#0x9
   \   0002D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D6   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0002D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002DC   7408         MOV     A,#0x8
   \   0002DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002E4   AD..         MOV     R5,?V0
   \   0002E6   7C00         MOV     R4,#0x0
   \   0002E8   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2596                stat = ZCL_STATUS_CMD_HAS_RSP;
   2597          
   2598                break;
   2599          
   2600              case COMMAND_SCENE_VIEW:
   2601          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2602              case COMMAND_SCENE_ENHANCED_VIEW:
   2603          #endif // ZCL_LIGHT_LINK_ENHANCE
   2604                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_2:
   \   0002EB                ; Setup parameters for call to function zclGeneral_FindScene
   \   0002EB   7405         MOV     A,#0x5
   \   0002ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0002F3   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   0002F6   8A..         MOV     ?V2,R2
   \   0002F8   8B..         MOV     ?V3,R3
   2605                if ( pScene != NULL )
   \   0002FA   EA           MOV     A,R2
   \   0002FB   45..         ORL     A,?V3
   \   0002FD   6005         JZ      ??zclGeneral_ProcessInScenesServer_22
   2606                {
   2607                  status = ZCL_STATUS_SUCCESS;
   \   0002FF   75..00       MOV     ?V0,#0x0
   \   000302   802D         SJMP    ??zclGeneral_ProcessInScenesServer_23
   2608                }
   2609                else
   2610                {
   2611                  // Scene not found
   2612                  if ( scene.groupID != 0x0000 &&
   2613                       aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_22:
   \   000304   7405         MOV     A,#0x5
   \   000306   12....       LCALL   ?XSTACK_DISP0_8
   \   000309   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00030C   6017         JZ      ??zclGeneral_ProcessInScenesServer_24
   \   00030E                ; Setup parameters for call to function aps_FindGroup
   \   00030E   7405         MOV     A,#0x5
   \   000310   12....       LCALL   ?XSTACK_DISP0_8
   \   000313   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000316   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000319   8B..         MOV     ?V1,R3
   \   00031B   EA           MOV     A,R2
   \   00031C   45..         ORL     A,?V1
   \   00031E   7005         JNZ     ??zclGeneral_ProcessInScenesServer_24
   2614                  {
   2615                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \   000320   75..85       MOV     ?V0,#-0x7b
   \   000323   8003         SJMP    ??zclGeneral_ProcessInScenesServer_25
   2616                  }
   2617                  else
   2618                  {
   2619                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_24:
   \   000325   75..8B       MOV     ?V0,#-0x75
   2620                  }
   2621                  pScene = &scene;
   \                     ??zclGeneral_ProcessInScenesServer_25:
   \   000328   7405         MOV     A,#0x5
   \   00032A   12....       LCALL   ?XSTACK_DISP100_8
   \   00032D   88..         MOV     ?V2,R0
   \   00032F   89..         MOV     ?V3,R1
   2622                }
   2623          
   2624                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_23:
   \   000331   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000334   6003         JZ      $+5
   \   000336   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000339   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00033C   6003         JZ      $+5
   \   00033E   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2625                {
   2626                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
   \   000341   85..82       MOV     DPL,?V10
   \   000344   85..83       MOV     DPH,?V11
   \   000347   E0           MOVX    A,@DPTR
   \   000348   6401         XRL     A,#0x1
   \   00034A   6003         JZ      $+5
   \   00034C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2627                  {
   2628                    zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2629                                                     status, pScene, true, pInMsg->hdr.transSeqNum );
   \   00034F                ; Setup parameters for call to function zclGeneral_SendSceneViewRsp
   \   00034F   12....       LCALL   ?Subroutine14 & 0xFFFF
   2630                  }
   2631          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2632                  else
   2633                  {
   2634                    zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2635                                                             status, pScene, true, pInMsg->hdr.transSeqNum );
   2636                  }
   2637          #endif // ZCL_LIGHT_LINK_ENHANCE
   2638                }
   \                     ??CrossCallReturnLabel_177:
   \   000352   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000355   75..01       MOV     ?V1,#0x1
   \   000358   78..         MOV     R0,#?V1
   \   00035A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035D   78..         MOV     R0,#?V2
   \   00035F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000362   AD..         MOV     R5,?V0
   \   000364   7C01         MOV     R4,#0x1
   \   000366   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000369   12....       LCALL   `??zclGeneral_SendSceneViewRsp::?relay`; Banked call to: zclGeneral_SendSceneViewRsp
   \   00036C   7404         MOV     A,#0x4
   \   00036E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000371   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2639                stat = ZCL_STATUS_CMD_HAS_RSP;
   2640                break;
   2641          
   2642              case COMMAND_SCENE_REMOVE:
   2643                if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
   \                     ??zclGeneral_ProcessInScenesServer_3:
   \   000374                ; Setup parameters for call to function zclGeneral_RemoveScene
   \   000374   7405         MOV     A,#0x5
   \   000376   12....       LCALL   ?XSTACK_DISP0_8
   \   000379   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00037C   12....       LCALL   `??zclGeneral_RemoveScene::?relay`; Banked call to: zclGeneral_RemoveScene
   \   00037F   E9           MOV     A,R1
   \   000380   6005         JZ      ??zclGeneral_ProcessInScenesServer_26
   2644                {
   2645                  status = ZCL_STATUS_SUCCESS;
   \   000382   75..00       MOV     ?V0,#0x0
   \   000385   801A         SJMP    ??zclGeneral_ProcessInScenesServer_27
   2646                }
   2647                else
   2648                {
   2649                  // Scene not found
   2650                  if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_26:
   \   000387                ; Setup parameters for call to function aps_FindGroup
   \   000387   7405         MOV     A,#0x5
   \   000389   12....       LCALL   ?XSTACK_DISP0_8
   \   00038C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00038F   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000392   8B..         MOV     ?V1,R3
   \   000394   EA           MOV     A,R2
   \   000395   45..         ORL     A,?V1
   \   000397   7005         JNZ     ??zclGeneral_ProcessInScenesServer_28
   2651                  {
   2652                    // The Group is not in the Group Table
   2653                    status = ZCL_STATUS_INVALID_FIELD;
   \   000399   75..85       MOV     ?V0,#-0x7b
   \   00039C   8003         SJMP    ??zclGeneral_ProcessInScenesServer_27
   2654                  }
   2655                  else
   2656                  {
   2657                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_28:
   \   00039E   75..8B       MOV     ?V0,#-0x75
   2658                  }
   2659                }
   2660          
   2661                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_27:
   \   0003A1   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0003A4   6003         JZ      $+5
   \   0003A6   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   0003A9   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0003AC   6003         JZ      $+5
   \   0003AE   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2662                {
   2663                  // Addressed to this device (not to a group) - send a response back
   2664                  zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2665                                                      status, scene.groupID,
   2666                                                      scene.ID, true, pInMsg->hdr.transSeqNum );
   \   0003B1                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0003B1   12....       LCALL   ?Subroutine14 & 0xFFFF
   2667                }
   \                     ??CrossCallReturnLabel_178:
   \   0003B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B7   75..01       MOV     ?V1,#0x1
   \   0003BA   78..         MOV     R0,#?V1
   \   0003BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003BF   7409         MOV     A,#0x9
   \   0003C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C4   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0003C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003CA   7408         MOV     A,#0x8
   \   0003CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003D2   AD..         MOV     R5,?V0
   \   0003D4   7C02         MOV     R4,#0x2
   \   0003D6   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2668                stat = ZCL_STATUS_CMD_HAS_RSP;
   2669                break;
   2670          
   2671              case COMMAND_SCENE_REMOVE_ALL:
   2672                if ( scene.groupID == 0x0000 ||
   2673                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_4:
   \   0003D9   7405         MOV     A,#0x5
   \   0003DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DE   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0003E1   6012         JZ      ??zclGeneral_ProcessInScenesServer_29
   \   0003E3                ; Setup parameters for call to function aps_FindGroup
   \   0003E3   7405         MOV     A,#0x5
   \   0003E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0003EB   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0003EE   8B..         MOV     ?V1,R3
   \   0003F0   EA           MOV     A,R2
   \   0003F1   45..         ORL     A,?V1
   \   0003F3   6010         JZ      ??zclGeneral_ProcessInScenesServer_30
   2674                {
   2675                  zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
   \                     ??zclGeneral_ProcessInScenesServer_29:
   \   0003F5                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   0003F5   7405         MOV     A,#0x5
   \   0003F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0003FD   12....       LCALL   `??zclGeneral_RemoveAllScenes::?relay`; Banked call to: zclGeneral_RemoveAllScenes
   2676                  status = ZCL_STATUS_SUCCESS;
   \   000400   75..00       MOV     ?V0,#0x0
   \   000403   8003         SJMP    ??zclGeneral_ProcessInScenesServer_31
   2677                }
   2678                else
   2679                {
   2680                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_30:
   \   000405   75..85       MOV     ?V0,#-0x7b
   2681                }
   2682          
   2683                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_31:
   \   000408   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00040B   6003         JZ      $+5
   \   00040D   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000410   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000413   6003         JZ      $+5
   \   000415   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2684                {
   2685                  // Addressed to this device (not to a group) - send a response back
   2686                  zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2687                                                         status, scene.groupID, true, pInMsg->hdr.transSeqNum );
   \   000418                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   000418   12....       LCALL   ?Subroutine14 & 0xFFFF
   2688                }
   \                     ??CrossCallReturnLabel_179:
   \   00041B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00041E   75..01       MOV     ?V1,#0x1
   \   000421   78..         MOV     R0,#?V1
   \   000423   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000426   75..00       MOV     ?V1,#0x0
   \   000429   78..         MOV     R0,#?V1
   \   00042B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00042E   7408         MOV     A,#0x8
   \   000430   12....       LCALL   ?XSTACK_DISP0_8
   \   000433   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000436   AD..         MOV     R5,?V0
   \   000438   7C03         MOV     R4,#0x3
   \   00043A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2689                stat = ZCL_STATUS_CMD_HAS_RSP;
   2690                break;
   2691          
   2692              case COMMAND_SCENE_STORE:
   2693                if ( scene.groupID == 0x0000 ||
   2694                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_5:
   \   00043D   7405         MOV     A,#0x5
   \   00043F   12....       LCALL   ?XSTACK_DISP0_8
   \   000442   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000445   6015         JZ      ??zclGeneral_ProcessInScenesServer_32
   \   000447                ; Setup parameters for call to function aps_FindGroup
   \   000447   7405         MOV     A,#0x5
   \   000449   12....       LCALL   ?XSTACK_DISP0_8
   \   00044C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00044F   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000452   8B..         MOV     ?V1,R3
   \   000454   EA           MOV     A,R2
   \   000455   45..         ORL     A,?V1
   \   000457   7003         JNZ     $+5
   \   000459   02....       LJMP    ??zclGeneral_ProcessInScenesServer_33 & 0xFFFF
   2695                {
   2696                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2697                  // does and the corresponding Group exits
   2698                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_32:
   \   00045C                ; Setup parameters for call to function zclGeneral_FindScene
   \   00045C   7407         MOV     A,#0x7
   \   00045E   12....       LCALL   ?XSTACK_DISP0_8
   \   000461   E0           MOVX    A,@DPTR
   \   000462   FC           MOV     R4,A
   \   000463   7405         MOV     A,#0x5
   \   000465   12....       LCALL   ?XSTACK_DISP0_8
   \   000468   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00046B   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   00046E   8A..         MOV     ?V2,R2
   \   000470   8B..         MOV     ?V3,R3
   2699                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   000472   EA           MOV     A,R2
   \   000473   45..         ORL     A,?V3
   \   000475   7009         JNZ     ??zclGeneral_ProcessInScenesServer_34
   \   000477                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000477   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   00047A   E9           MOV     A,R1
   \   00047B   C3           CLR     C
   \   00047C   9410         SUBB    A,#0x10
   \   00047E   5079         JNC     ??zclGeneral_ProcessInScenesServer_35
   2700                  {
   2701                    uint8 sceneChanged = FALSE;
   \                     ??zclGeneral_ProcessInScenesServer_34:
   \   000480   75..00       MOV     ?V1,#0x0
   2702          
   2703                    status = ZCL_STATUS_SUCCESS;
   \   000483   75..00       MOV     ?V0,#0x0
   2704                    if ( pScene == NULL )
   \   000486   E5..         MOV     A,?V2
   \   000488   45..         ORL     A,?V3
   \   00048A   7009         JNZ     ??zclGeneral_ProcessInScenesServer_36
   2705                    {
   2706                      // Haven't been added yet
   2707                      pScene = &scene;
   \   00048C   7405         MOV     A,#0x5
   \   00048E   12....       LCALL   ?XSTACK_DISP100_8
   \   000491   88..         MOV     ?V2,R0
   \   000493   89..         MOV     ?V3,R1
   2708                    }
   2709          
   2710                    if ( pCBs->pfnSceneStoreReq )
   \                     ??zclGeneral_ProcessInScenesServer_36:
   \   000495   E5..         MOV     A,?V6
   \   000497   2416         ADD     A,#0x16
   \   000499   F582         MOV     DPL,A
   \   00049B   E4           CLR     A
   \   00049C   35..         ADDC    A,?V7
   \   00049E   F583         MOV     DPH,A
   \   0004A0   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0004A3   6027         JZ      ??zclGeneral_ProcessInScenesServer_37
   2711                    {
   2712                      zclSceneReq_t req;
   2713          
   2714                      req.srcAddr = &(pInMsg->msg->srcAddr);
   \   0004A5   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0004A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0004AB   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   2715                      req.scene = pScene;
   \                     ??CrossCallReturnLabel_230:
   \   0004AE   7403         MOV     A,#0x3
   \   0004B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B3   E5..         MOV     A,?V2
   \   0004B5   F0           MOVX    @DPTR,A
   \   0004B6   A3           INC     DPTR
   \   0004B7   E5..         MOV     A,?V3
   \   0004B9   F0           MOVX    @DPTR,A
   2716          
   2717                      // Get the latest Scene info
   2718                      if ( pCBs->pfnSceneStoreReq( &req ) )
   \   0004BA                ; Setup parameters for indirect call
   \   0004BA   7401         MOV     A,#0x1
   \   0004BC   12....       LCALL   ?XSTACK_DISP101_8
   \   0004BF   8882         MOV     DPL,R0
   \   0004C1   8983         MOV     DPH,R1
   \   0004C3   12....       LCALL   ?CALL_IND
   \   0004C6   E9           MOV     A,R1
   \   0004C7   6003         JZ      ??zclGeneral_ProcessInScenesServer_37
   2719                      {
   2720                        sceneChanged = TRUE;
   \   0004C9   75..01       MOV     ?V1,#0x1
   2721                      }
   2722                    }
   2723          
   2724                    if ( pScene == &scene )
   \                     ??zclGeneral_ProcessInScenesServer_37:
   \   0004CC   7405         MOV     A,#0x5
   \   0004CE   12....       LCALL   ?XSTACK_DISP100_8
   \   0004D1   88..         MOV     ?V4,R0
   \   0004D3   89..         MOV     ?V5,R1
   \   0004D5   E5..         MOV     A,?V2
   \   0004D7   65..         XRL     A,?V4
   \   0004D9   7004         JNZ     ??zclGeneral_ProcessInScenesServer_38
   \   0004DB   E5..         MOV     A,?V3
   \   0004DD   65..         XRL     A,?V5
   \                     ??zclGeneral_ProcessInScenesServer_38:
   \   0004DF   700D         JNZ     ??zclGeneral_ProcessInScenesServer_39
   2725                    {
   2726                      // The Scene doesn't exist so add it
   2727                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \   0004E1                ; Setup parameters for call to function zclGeneral_AddScene
   \   0004E1   7405         MOV     A,#0x5
   \   0004E3   12....       LCALL   ?XSTACK_DISP101_8
   \   0004E6   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   2728                    }
   \                     ??CrossCallReturnLabel_263:
   \   0004E9   12....       LCALL   `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \   0004EC   8013         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2729                    else if ( sceneChanged )
   \                     ??zclGeneral_ProcessInScenesServer_39:
   \   0004EE   E5..         MOV     A,?V1
   \   0004F0   A2E0         MOV     C,0xE0 /* A   */.0
   \   0004F2   500D         JNC     ??zclGeneral_ProcessInScenesServer_40
   2730                    {
   2731                      // The Scene already exists so update only NV
   2732                      zclGeneral_ScenesSave();
   \   0004F4                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   0004F4   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2733                    }
   2734                  }
   \   0004F7   8008         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2735                  else
   2736                  {
   2737                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_35:
   \   0004F9   75..89       MOV     ?V0,#-0x77
   \   0004FC   8003         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2738                  }
   2739                }
   2740                else
   2741                {
   2742                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_33:
   \   0004FE   75..85       MOV     ?V0,#-0x7b
   2743                }
   2744          
   2745                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_40:
   \   000501   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000504   6003         JZ      $+5
   \   000506   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000509   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00050C   6003         JZ      $+5
   \   00050E   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2746                {
   2747                  // Addressed to this device (not to a group) - send a response back
   2748                  zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2749                                                     status, scene.groupID, scene.ID,
   2750                                                     true, pInMsg->hdr.transSeqNum );
   \   000511                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   000511   12....       LCALL   ?Subroutine14 & 0xFFFF
   2751                }
   \                     ??CrossCallReturnLabel_180:
   \   000514   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000517   75..01       MOV     ?V1,#0x1
   \   00051A   78..         MOV     R0,#?V1
   \   00051C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00051F   7409         MOV     A,#0x9
   \   000521   12....       LCALL   ?XSTACK_DISP0_8
   \   000524   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000527   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00052A   7408         MOV     A,#0x8
   \   00052C   12....       LCALL   ?XSTACK_DISP0_8
   \   00052F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000532   AD..         MOV     R5,?V0
   \   000534   7C04         MOV     R4,#0x4
   \                     ??zclGeneral_ProcessInScenesServer_21:
   \   000536   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000539   12....       LCALL   `??zclGeneral_SendSceneResponse::?relay`; Banked call to: zclGeneral_SendSceneResponse
   \   00053C   7405         MOV     A,#0x5
   \   00053E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000541   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2752                stat = ZCL_STATUS_CMD_HAS_RSP;
   2753                break;
   2754          
   2755              case COMMAND_SCENE_RECALL:
   2756                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_6:
   \   000544                ; Setup parameters for call to function zclGeneral_FindScene
   \   000544   7405         MOV     A,#0x5
   \   000546   12....       LCALL   ?XSTACK_DISP0_8
   \   000549   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00054C   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   00054F   8A..         MOV     ?V2,R2
   \   000551   8B..         MOV     ?V3,R3
   2757                if ( pScene && pCBs->pfnSceneRecallReq )
   \   000553   EA           MOV     A,R2
   \   000554   45..         ORL     A,?V3
   \   000556   7003         JNZ     $+5
   \   000558   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   \   00055B   E5..         MOV     A,?V6
   \   00055D   2418         ADD     A,#0x18
   \   00055F   F582         MOV     DPL,A
   \   000561   E4           CLR     A
   \   000562   35..         ADDC    A,?V7
   \   000564   F583         MOV     DPH,A
   \   000566   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000569   7003         JNZ     $+5
   \   00056B   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2758                {
   2759                  zclSceneReq_t req;
   2760          
   2761                  req.srcAddr = &(pInMsg->msg->srcAddr);
   \   00056E   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000571   12....       LCALL   ?XSTACK_DISP0_8
   \   000574   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   2762                  req.scene = pScene;
   \                     ??CrossCallReturnLabel_231:
   \   000577   7403         MOV     A,#0x3
   \   000579   12....       LCALL   ?XSTACK_DISP0_8
   \   00057C   E5..         MOV     A,?V2
   \   00057E   F0           MOVX    @DPTR,A
   \   00057F   A3           INC     DPTR
   \   000580   E5..         MOV     A,?V3
   \   000582   F0           MOVX    @DPTR,A
   2763          
   2764                  pCBs->pfnSceneRecallReq( &req );
   \   000583                ; Setup parameters for indirect call
   \   000583   7401         MOV     A,#0x1
   \   000585   12....       LCALL   ?XSTACK_DISP101_8
   \   000588   8882         MOV     DPL,R0
   \   00058A   8983         MOV     DPH,R1
   \   00058C   12....       LCALL   ?CALL_IND
   \   00058F   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2765                }
   2766                // No response
   2767                break;
   2768          
   2769              case COMMAND_SCENE_GET_MEMBERSHIP:
   2770                // Find all the Scenes corresponding to the Group ID
   2771                if ( scene.groupID == 0x0000 ||
   2772                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_7:
   \   000592   7405         MOV     A,#0x5
   \   000594   12....       LCALL   ?XSTACK_DISP0_8
   \   000597   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00059A   6012         JZ      ??zclGeneral_ProcessInScenesServer_42
   \   00059C                ; Setup parameters for call to function aps_FindGroup
   \   00059C   7405         MOV     A,#0x5
   \   00059E   12....       LCALL   ?XSTACK_DISP0_8
   \   0005A1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0005A4   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0005A7   8B..         MOV     ?V1,R3
   \   0005A9   EA           MOV     A,R2
   \   0005AA   45..         ORL     A,?V1
   \   0005AC   6047         JZ      ??zclGeneral_ProcessInScenesServer_43
   2773                {
   2774                  // Allocate space for the scene list
   2775                  sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
   \                     ??zclGeneral_ProcessInScenesServer_42:
   \   0005AE                ; Setup parameters for call to function osal_mem_alloc
   \   0005AE   7A10         MOV     R2,#0x10
   \   0005B0   7B00         MOV     R3,#0x0
   \   0005B2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0005B5   8A..         MOV     ?V2,R2
   \   0005B7   8B..         MOV     ?V3,R3
   2776                  if ( sceneList != NULL )
   \   0005B9   EA           MOV     A,R2
   \   0005BA   45..         ORL     A,?V3
   \   0005BC   6032         JZ      ??zclGeneral_ProcessInScenesServer_44
   2777                  {
   2778                    sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2779                                                                 scene.groupID, sceneList );
   \   0005BE                ; Setup parameters for call to function zclGeneral_FindAllScenesForGroup
   \   0005BE   AC..         MOV     R4,?V2
   \   0005C0   AD..         MOV     R5,?V3
   \   0005C2   7405         MOV     A,#0x5
   \   0005C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0005C7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0005CA   12....       LCALL   `??zclGeneral_FindAllScenesForGroup::?relay`; Banked call to: zclGeneral_FindAllScenesForGroup
   \   0005CD   E9           MOV     A,R1
   \   0005CE   F5..         MOV     ?V5,A
   2780                    status = ZCL_STATUS_SUCCESS;
   \   0005D0   75..00       MOV     ?V0,#0x0
   2781                    if ( ! UNICAST_MSG( pInMsg->msg ) )
   \   0005D3   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   0005D6   2415         ADD     A,#0x15
   \   0005D8   F582         MOV     DPL,A
   \   0005DA   E4           CLR     A
   \   0005DB   39           ADDC    A,R1
   \   0005DC   F583         MOV     DPH,A
   \   0005DE   E0           MOVX    A,@DPTR
   \   0005DF   7009         JNZ     ??zclGeneral_ProcessInScenesServer_45
   \   0005E1   8882         MOV     DPL,R0
   \   0005E3   8983         MOV     DPH,R1
   \   0005E5   12....       LCALL   ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0005E8   600E         JZ      ??zclGeneral_ProcessInScenesServer_46
   2782                    {
   2783                      // Addressed to the Group - ONLY send a response if an entry within the
   2784                      // Scene Table corresponds to the Group ID
   2785                      if ( sceneCnt == 0 )
   \                     ??zclGeneral_ProcessInScenesServer_45:
   \   0005EA   E5..         MOV     A,?V5
   \   0005EC   700A         JNZ     ??zclGeneral_ProcessInScenesServer_46
   \   0005EE   8050         SJMP    ??zclGeneral_ProcessInScenesServer_47
   2786                      {
   2787                        sendRsp = FALSE;
   2788                      }
   2789                    }
   2790                  }
   2791                  else
   2792                  {
   2793                    // Couldn't allocate space for the scene list!
   2794                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInScenesServer_44:
   \   0005F0   75..89       MOV     ?V0,#-0x77
   \   0005F3   8003         SJMP    ??zclGeneral_ProcessInScenesServer_46
   2795                  }
   2796                }
   2797                else
   2798                {
   2799                  // The Group is not in the Group Table - send a response back
   2800                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_43:
   \   0005F5   75..85       MOV     ?V0,#-0x7b
   2801                }
   2802          
   2803          #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
   2804                if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
   2805          #else
   2806                if ( sendRsp )
   2807          #endif //ZCL_LIGHT_LINK_ENHANCE
   2808                {
   2809                  zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2810                                              status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
   2811                                              scene.groupID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInScenesServer_46:
   \   0005F8                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   0005F8   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   0005FB   E9           MOV     A,R1
   \   0005FC   F9           MOV     R1,A
   \   0005FD   8E82         MOV     DPL,R6
   \   0005FF   8F83         MOV     DPH,R7
   \   000601   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   2812                }
   \                     ??CrossCallReturnLabel_248:
   \   000604                ; Setup parameters for call to function zclGeneral_SendSceneGetMembershipResponse
   \   000604   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000607   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00060A   75..01       MOV     ?V1,#0x1
   \   00060D   78..         MOV     R0,#?V1
   \   00060F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000612   7407         MOV     A,#0x7
   \   000614   12....       LCALL   ?XSTACK_DISP0_8
   \   000617   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00061A   78..         MOV     R0,#?V2
   \   00061C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00061F   E5..         MOV     A,?V5
   \   000621   F5..         MOV     ?V1,A
   \   000623   78..         MOV     R0,#?V1
   \   000625   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000628   7410         MOV     A,#0x10
   \   00062A   C3           CLR     C
   \   00062B   99           SUBB    A,R1
   \   00062C   FD           MOV     R5,A
   \   00062D   AC..         MOV     R4,?V0
   \   00062F   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000632   12....       LCALL   `??zclGeneral_SendSceneGetMembershipResponse::?r`; Banked call to: zclGeneral_SendSceneGetMembershipResponse
   \   000635   7407         MOV     A,#0x7
   \   000637   12....       LCALL   ?DEALLOC_XSTACK8
   2813          
   2814                if ( sceneList != NULL )
   \   00063A   E5..         MOV     A,?V2
   \   00063C   45..         ORL     A,?V3
   \   00063E   6007         JZ      ??zclGeneral_ProcessInScenesServer_20
   2815                  zcl_mem_free( sceneList );
   \                     ??zclGeneral_ProcessInScenesServer_47:
   \   000640                ; Setup parameters for call to function osal_mem_free
   \   000640   AA..         MOV     R2,?V2
   \   000642   AB..         MOV     R3,?V3
   \   000644   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2816          
   2817                stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInScenesServer_20:
   \   000647   75..FF       MOV     ?V4,#-0x1
   2818                break;
   \   00064A   8003         SJMP    ??zclGeneral_ProcessInScenesServer_41
   2819          
   2820          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2821              case COMMAND_SCENE_COPY:
   2822                {
   2823                  uint8 mode;
   2824                  uint16 groupIDFrom, groupIDTo;
   2825                  uint8 sceneIDFrom, sceneIDTo;
   2826          
   2827                  pData = pInMsg->pData; // different payload format
   2828          
   2829                  mode = *pData++;
   2830                  groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
   2831                  pData += 2;
   2832                  sceneIDFrom = *pData++; // from scene ID
   2833                  groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
   2834                  pData += 2;
   2835                  if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
   2836                  {
   2837                    sceneIDTo = *pData++; // to scene ID
   2838                  }
   2839          
   2840                  // Make sure the groups exist
   2841                  if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
   2842                       ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
   2843                  {
   2844                    // Allocate space for the scene list
   2845                    sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
   2846                    if ( sceneList == NULL )
   2847                    {
   2848                      status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
   2849                    }
   2850                    else
   2851                    {
   2852                      status = ZCL_STATUS_SUCCESS;
   2853                      if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
   2854                      {
   2855                        sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2856                                                                     groupIDFrom, sceneList );
   2857                      }
   2858                      else // Copy single scene
   2859                      {
   2860                        // Make sure the scene exists
   2861                        pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
   2862                        if ( pScene != NULL )
   2863                        {
   2864                          sceneList[0] = sceneIDFrom;
   2865                          sceneCnt = 1;
   2866                        }
   2867                        else
   2868                        {
   2869                          status = ZCL_STATUS_INVALID_FIELD; // Scene not found
   2870                        }
   2871                      }
   2872                    }
   2873          
   2874                    if ( status == ZCL_STATUS_SUCCESS )
   2875                    {
   2876                      uint8 numScenesToAdd = 0;
   2877                      uint8 i;
   2878                      for ( i = 0; i < sceneCnt; i++ )
   2879                      {
   2880                        if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
   2881                        {
   2882                          numScenesToAdd++;
   2883                        }
   2884                      }
   2885                      if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
   2886                      {
   2887                        // Copy the scenes
   2888                        for ( i = 0; i < sceneCnt; i++ )
   2889                        {
   2890                          // Ignore scene ID from and scene ID to fields
   2891                          pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
   2892                          if ( pScene != NULL )
   2893                          {
   2894                            zclGeneral_Scene_t *pToScene;
   2895                            scene = *pScene;
   2896                            scene.groupID = groupIDTo;
   2897                            scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
   2898          
   2899                            pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2900                            if( pToScene != NULL )
   2901                            {
   2902                              zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2903                            }
   2904                            // Add the scene
   2905                            zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   2906                          }
   2907                        }
   2908                      }
   2909                      else
   2910                      {
   2911                        status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   2912                      }
   2913                    }
   2914                  }
   2915                  else
   2916                  {
   2917                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2918                  }
   2919          
   2920                  if ( UNICAST_MSG( pInMsg->msg ) )
   2921                  {
   2922                    if ( pScene == NULL )
   2923                    {
   2924                      pScene = &scene;
   2925                    }
   2926                    // Addressed to this device (not to a group) - send a response back
   2927                    zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2928                                                      status, pScene->groupID, pScene->ID,
   2929                                                      true, pInMsg->hdr.transSeqNum );
   2930                  }
   2931          
   2932                  if ( sceneList != NULL )
   2933                  {
   2934                    zcl_mem_free( sceneList );
   2935                  }
   2936                }
   2937          
   2938                stat = ZCL_STATUS_CMD_HAS_RSP;
   2939                break;
   2940          #endif // ZCL_LIGHT_LINK_ENHANCE
   2941          
   2942              default:
   2943                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesServer_8:
   \   00064C   75..01       MOV     ?V4,#0x1
   2944              break;
   2945            }
   2946          
   2947            return ( stat );
   \                     ??zclGeneral_ProcessInScenesServer_41:
   \   00064F   A9..         MOV     R1,?V4
   \   000651   743C         MOV     A,#0x3c
   \   000653                REQUIRE ?Subroutine3
   \   000653                ; // Fall through to label ?Subroutine3
   2948          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine89_0
   \   000006                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2406         ADD     A,#0x6
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FB           MOV     R3,A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   EE           MOV     A,R6
   \   000004   2415         ADD     A,#0x15
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   3F           ADDC    A,R7
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine93_0
   \   000004                ; // Fall through to label ??Subroutine93_0
   2949          
   2950          /*********************************************************************
   2951           * @fn      zclGeneral_ProcessInScenesClient
   2952           *
   2953           * @brief   Process in the received Scenes Command.
   2954           *
   2955           * @param   pInMsg - pointer to the incoming message
   2956           *
   2957           * @return  ZStatus_t
   2958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for indirect call
   \   000005                ; Setup parameters for indirect call
   \   000005   AA..         MOV     R2,?XSP + 0
   \   000007   AB..         MOV     R3,?XSP + 1
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F                REQUIRE ??Subroutine86_0
   \   00000F                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2959          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesClient:
   2960                                                             zclGeneral_AppCallbacks_t *pCBs )
   2961          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV     A,#-0x41
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   2962            zclGeneral_Scene_t scene;
   2963            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL   ?Subroutine34 & 0xFFFF
   2964            uint8 nameLen;
   2965            zclSceneRsp_t rsp;
   2966            uint8 i;
   2967            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_250:
   \   000015   75..00       MOV     ?V10,#0x0
   2968          
   2969            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C37         MOV     R4,#0x37
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2970            zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?XSP + 0
   \   00002E   AB..         MOV     R3,?XSP + 1
   \   000030   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2971          
   2972            // Get the status field first
   2973            rsp.status = *pData++;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   12....       LCALL   ?Subroutine53 & 0xFFFF
   2974          
   2975            if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
   \                     ??CrossCallReturnLabel_120:
   \   000044   E5..         MOV     A,?V8
   \   000046   2407         ADD     A,#0x7
   \   000048   F5..         MOV     ?V0,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V9
   \   00004D   F5..         MOV     ?V1,A
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6406         XRL     A,#0x6
   \   000057   7014         JNZ     ??zclGeneral_ProcessInScenesClient_0
   2976            {
   2977              rsp.capacity = *pData++;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7407         MOV     A,#0x7
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine68 & 0xFFFF
   2978            }
   \                     ??CrossCallReturnLabel_148:
   \   00006A   0E           INC     R6
   \   00006B   AF83         MOV     R7,DPH
   2979          
   2980            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesClient_0:
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000074   740A         MOV     A,#0xa
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine51 & 0xFFFF
   2981            pData += 2;   // Move past group ID
   \                     ??CrossCallReturnLabel_117:
   \   00007C   EE           MOV     A,R6
   \   00007D   2402         ADD     A,#0x2
   \   00007F   FE           MOV     R6,A
   \   000080   5001         JNC     ??zclGeneral_ProcessInScenesClient_1
   \   000082   0F           INC     R7
   2982          
   2983            switch ( pInMsg->hdr.commandID )
   \                     ??zclGeneral_ProcessInScenesClient_1:
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   A3           INC     DPTR
   \   000088   A882         MOV     R0,DPL
   \   00008A   A983         MOV     R1,DPH
   \   00008C   E5..         MOV     A,?V2
   \   00008E   241A         ADD     A,#0x1a
   \   000090   F5..         MOV     ?V2,A
   \   000092   5002         JNC     ??zclGeneral_ProcessInScenesClient_2
   \   000094   05..         INC     ?V3
   \                     ??zclGeneral_ProcessInScenesClient_2:
   \   000096   85..82       MOV     DPL,?V0
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   607B         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   00009F   14           DEC     A
   \   0000A0   6013         JZ      ??zclGeneral_ProcessInScenesClient_4
   \   0000A2   14           DEC     A
   \   0000A3   6075         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   0000A5   14           DEC     A
   \   0000A6   6072         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   0000A8   14           DEC     A
   \   0000A9   606F         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   0000AB   24FE         ADD     A,#-0x2
   \   0000AD   7003         JNZ     $+5
   \   0000AF   02....       LJMP    ??zclGeneral_ProcessInScenesClient_5 & 0xFFFF
   \   0000B2   02....       LJMP    ??zclGeneral_ProcessInScenesClient_6 & 0xFFFF
   2984            {
   2985              case COMMAND_SCENE_VIEW_RSP:
   2986                // Parse the rest of the incoming message
   2987                scene.ID = *pData++; // Not applicable to Remove All Response command
   \                     ??zclGeneral_ProcessInScenesClient_4:
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   740C         MOV     A,#0xc
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   D0E0         POP     A
   \   0000C3   12....       LCALL   ?Subroutine54 & 0xFFFF
   2988                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_123:
   \   0000C6   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000C9   740D         MOV     A,#0xd
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E8           MOV     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E9           MOV     A,R1
   \   0000D2   12....       LCALL   ?Subroutine50 & 0xFFFF
   2989                pData += 2;
   2990                nameLen = *pData++; // Name length
   \                     ??CrossCallReturnLabel_103:
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F5..         MOV     ?V7,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   2403         ADD     A,#0x3
   \   0000DB   FE           MOV     R6,A
   \   0000DC   5001         JNC     ??zclGeneral_ProcessInScenesClient_7
   \   0000DE   0F           INC     R7
   2991                if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \                     ??zclGeneral_ProcessInScenesClient_7:
   \   0000DF   E5..         MOV     A,?V7
   \   0000E1   C3           CLR     C
   \   0000E2   9410         SUBB    A,#0x10
   \   0000E4   4003         JC      ??zclGeneral_ProcessInScenesClient_8
   2992                  nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   0000E6   75..0F       MOV     ?V7,#0xf
   2993          
   2994                scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesClient_8:
   \   0000E9   7411         MOV     A,#0x11
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   E5..         MOV     A,?V7
   \   0000F0   F0           MOVX    @DPTR,A
   2995                zcl_memcpy( &(scene.name[1]), pData, nameLen );
   \   0000F1                ; Setup parameters for call to function osal_memcpy
   \   0000F1   8E..         MOV     ?V4,R6
   \   0000F3   8F..         MOV     ?V5,R7
   \   0000F5   75..00       MOV     ?V6,#0x0
   \   0000F8   78..         MOV     R0,#?V4
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FD   AC..         MOV     R4,?V7
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   7415         MOV     A,#0x15
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   AA82         MOV     R2,DPL
   \   000108   AB83         MOV     R3,DPH
   \   00010A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010D   7403         MOV     A,#0x3
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   2996          
   2997                pData += nameLen; // move past name, use original length
   \   000112   A8..         MOV     R0,?V7
   \   000114   EE           MOV     A,R6
   \   000115   28           ADD     A,R0
   \   000116   FE           MOV     R6,A
   \   000117   E4           CLR     A
   \   000118   3F           ADDC    A,R7
   \   000119   FF           MOV     R7,A
   2998          
   2999                //*** Do something with the extension field(s)
   3000          
   3001                // Fall through to callback - break is left off intentionally
   3002          
   3003              case COMMAND_SCENE_ADD_RSP:
   3004              case COMMAND_SCENE_REMOVE_RSP:
   3005              case COMMAND_SCENE_REMOVE_ALL_RSP:
   3006              case COMMAND_SCENE_STORE_RSP:
   3007                if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_3:
   \   00011A   85..82       MOV     DPL,?V2
   \   00011D   85..83       MOV     DPH,?V3
   \   000120   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000123   7003         JNZ     $+5
   \   000125   02....       LJMP    ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   3008                {
   3009                  if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   000128   85..82       MOV     DPL,?V0
   \   00012B   85..83       MOV     DPH,?V1
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   6403         XRL     A,#0x3
   \   000131   600F         JZ      ??zclGeneral_ProcessInScenesClient_10
   3010                  {
   3011                    scene.ID = *pData++;
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   740C         MOV     A,#0xc
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
   3012                  }
   3013                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??zclGeneral_ProcessInScenesClient_10:
   \   000142   12....       LCALL   ?Subroutine18 & 0xFFFF
   3014                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_26:
   \   000145   C0E0         PUSH    A
   \   000147   7402         MOV     A,#0x2
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   D0E0         POP     A
   \   00014E   F0           MOVX    @DPTR,A
   3015                  rsp.scene = &scene;
   \   00014F   740A         MOV     A,#0xa
   \   000151   12....       LCALL   ?XSTACK_DISP100_8
   \   000154   7408         MOV     A,#0x8
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   12....       LCALL   ?Subroutine15 & 0xFFFF
   3016          
   3017                  pCBs->pfnSceneRsp( &rsp );
   3018                }
   \                     ??CrossCallReturnLabel_218:
   \   00015C   12....       LCALL   ?CALL_IND
   \   00015F   02....       LJMP    ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   3019                break;
   3020          
   3021              case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
   3022                {
   3023                  uint8 *sceneList = NULL;
   \                     ??zclGeneral_ProcessInScenesClient_5:
   \   000162   75..00       MOV     ?V4,#0x0
   \   000165   75..00       MOV     ?V5,#0x0
   3024          
   3025                  if ( rsp.status == ZCL_STATUS_SUCCESS )
   \   000168   7403         MOV     A,#0x3
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   7048         JNZ     ??zclGeneral_ProcessInScenesClient_11
   3026                  {
   3027                    uint8 sceneCnt = *pData++;
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F5..         MOV     ?V6,A
   \   000177   E8           MOV     A,R0
   \   000178   FE           MOV     R6,A
   \   000179   E9           MOV     A,R1
   \   00017A   FF           MOV     R7,A
   3028          
   3029                    if ( sceneCnt > 0 )
   \   00017B   E5..         MOV     A,?V6
   \   00017D   6039         JZ      ??zclGeneral_ProcessInScenesClient_11
   3030                    {
   3031                      // Allocate space for the scene list
   3032                      sceneList = zcl_mem_alloc( sceneCnt );
   \   00017F                ; Setup parameters for call to function osal_mem_alloc
   \   00017F   FA           MOV     R2,A
   \   000180   7B00         MOV     R3,#0x0
   \   000182   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000185   8A..         MOV     ?V4,R2
   \   000187   8B..         MOV     ?V5,R3
   3033                      if ( sceneList != NULL )
   \   000189   EA           MOV     A,R2
   \   00018A   45..         ORL     A,?V5
   \   00018C   602A         JZ      ??zclGeneral_ProcessInScenesClient_11
   3034                      {
   3035                        rsp.sceneCnt = sceneCnt;
   \   00018E   7404         MOV     A,#0x4
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   E5..         MOV     A,?V6
   \   000195   F0           MOVX    @DPTR,A
   3036                        for ( i = 0; i < sceneCnt; i++ )
   \   000196   7A00         MOV     R2,#0x0
   \   000198   8018         SJMP    ??zclGeneral_ProcessInScenesClient_12
   3037                          sceneList[i] = *pData++;
   \                     ??zclGeneral_ProcessInScenesClient_13:
   \   00019A   8E82         MOV     DPL,R6
   \   00019C   8F83         MOV     DPH,R7
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   C0E0         PUSH    A
   \   0001A1   EA           MOV     A,R2
   \   0001A2   F8           MOV     R0,A
   \   0001A3   E5..         MOV     A,?V4
   \   0001A5   28           ADD     A,R0
   \   0001A6   F582         MOV     DPL,A
   \   0001A8   E4           CLR     A
   \   0001A9   3B           ADDC    A,R3
   \   0001AA   F583         MOV     DPH,A
   \   0001AC   D0E0         POP     A
   \   0001AE   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0001B1   0A           INC     R2
   \                     ??zclGeneral_ProcessInScenesClient_12:
   \   0001B2   EA           MOV     A,R2
   \   0001B3   C3           CLR     C
   \   0001B4   95..         SUBB    A,?V6
   \   0001B6   40E2         JC      ??zclGeneral_ProcessInScenesClient_13
   3038                      }
   3039                    }
   3040                  }
   3041          
   3042                  if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_11:
   \   0001B8   85..82       MOV     DPL,?V2
   \   0001BB   85..83       MOV     DPH,?V3
   \   0001BE   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0001C1   6029         JZ      ??zclGeneral_ProcessInScenesClient_14
   3043                  {
   3044                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001C3   12....       LCALL   ?Subroutine18 & 0xFFFF
   3045                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_27:
   \   0001C6   C0E0         PUSH    A
   \   0001C8   7402         MOV     A,#0x2
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   D0E0         POP     A
   \   0001CF   F0           MOVX    @DPTR,A
   3046                    rsp.sceneList = sceneList;
   \   0001D0   7405         MOV     A,#0x5
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   E5..         MOV     A,?V4
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   A3           INC     DPTR
   \   0001D9   E5..         MOV     A,?V5
   \   0001DB   F0           MOVX    @DPTR,A
   3047                    rsp.scene = &scene;
   \   0001DC   740A         MOV     A,#0xa
   \   0001DE   12....       LCALL   ?XSTACK_DISP100_8
   \   0001E1   7408         MOV     A,#0x8
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   12....       LCALL   ?Subroutine15 & 0xFFFF
   3048          
   3049                    pCBs->pfnSceneRsp( &rsp);
   3050                  }
   \                     ??CrossCallReturnLabel_219:
   \   0001E9   12....       LCALL   ?CALL_IND
   3051          
   3052                  if ( sceneList != NULL )
   \                     ??zclGeneral_ProcessInScenesClient_14:
   \   0001EC   E5..         MOV     A,?V4
   \   0001EE   45..         ORL     A,?V5
   \   0001F0   600C         JZ      ??zclGeneral_ProcessInScenesClient_9
   3053                  {
   3054                    zcl_mem_free( sceneList );
   \   0001F2                ; Setup parameters for call to function osal_mem_free
   \   0001F2   AA..         MOV     R2,?V4
   \   0001F4   AB..         MOV     R3,?V5
   \   0001F6   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001F9   8003         SJMP    ??zclGeneral_ProcessInScenesClient_9
   3055                  }
   3056                }
   3057                break;
   3058          
   3059              default:
   3060                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesClient_6:
   \   0001FB   75..01       MOV     ?V10,#0x1
   3061                break;
   3062            }
   3063          
   3064            return ( stat );
   \                     ??zclGeneral_ProcessInScenesClient_9:
   \   0001FE   A9..         MOV     R1,?V10
   \   000200   7441         MOV     A,#0x41
   \   000202   02....       LJMP    ?Subroutine3 & 0xFFFF
   3065          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
   3066          #endif // ZCL_SCENES
   3067          
   3068          #ifdef ZCL_ON_OFF
   3069          /*********************************************************************
   3070           * @fn      zclGeneral_ProcessInCmdOnOff
   3071           *
   3072           * @brief   Process in the received On/Off Command.
   3073           *
   3074           * @param   pInMsg - pointer to the incoming message
   3075           *
   3076           * @return  ZStatus_t
   3077           */
   3078          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
   3079                                                      zclGeneral_AppCallbacks_t *pCBs )
   3080          {
   3081            ZStatus_t stat = ZSuccess;
   3082          
   3083            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3084            {
   3085              switch ( pInMsg->hdr.commandID )
   3086              {
   3087                case COMMAND_OFF:
   3088                case COMMAND_ON:
   3089                case COMMAND_TOGGLE:
   3090                  if ( pCBs->pfnOnOff )
   3091                  {
   3092                    pCBs->pfnOnOff( pInMsg->hdr.commandID );
   3093                  }
   3094                  break;
   3095          
   3096          #ifdef ZCL_LIGHT_LINK_ENHANCE
   3097                case COMMAND_OFF_WITH_EFFECT:
   3098                  if ( pCBs->pfnOnOff_OffWithEffect )
   3099                  {
   3100                    zclOffWithEffect_t cmd;
   3101          
   3102                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3103                    cmd.effectId = pInMsg->pData[0];
   3104                    cmd.effectVariant = pInMsg->pData[1];
   3105          
   3106                    pCBs->pfnOnOff_OffWithEffect( &cmd );
   3107                  }
   3108                  break;
   3109          
   3110                case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
   3111                  if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
   3112                  {
   3113                    pCBs->pfnOnOff_OnWithRecallGlobalScene();
   3114                  }
   3115                  break;
   3116          
   3117                case COMMAND_ON_WITH_TIMED_OFF:
   3118                  if ( pCBs->pfnOnOff_OnWithTimedOff )
   3119                  {
   3120                    zclOnWithTimedOff_t cmd;
   3121          
   3122                    cmd.onOffCtrl.byte = pInMsg->pData[0];
   3123                    cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3124                    cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   3125                    pCBs->pfnOnOff_OnWithTimedOff( &cmd );
   3126                  }
   3127                  break;
   3128          #endif // ZCL_LIGHT_LINK_ENHANCE
   3129          
   3130                default:
   3131                  stat = ZFailure;
   3132                  break;
   3133              }
   3134            }
   3135            // no Client command
   3136          
   3137            return ( stat );
   3138          }
   3139          #endif // ZCL_ON_OFF
   3140          
   3141          #ifdef ZCL_LEVEL_CTRL
   3142          /*********************************************************************
   3143           * @fn      zclGeneral_ProcessInLevelControl
   3144           *
   3145           * @brief   Process in the received Level Control Command.
   3146           *
   3147           * @param   pInMsg - pointer to the incoming message
   3148           *
   3149           * @return  ZStatus_t
   3150           */
   3151          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
   3152                                                             zclGeneral_AppCallbacks_t *pCBs )
   3153          {
   3154            uint8 withOnOff = FALSE;
   3155            ZStatus_t stat = ZSuccess;
   3156          
   3157            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3158            {
   3159              switch ( pInMsg->hdr.commandID )
   3160              {
   3161                case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
   3162                  withOnOff = TRUE;
   3163                  // fall through
   3164                case COMMAND_LEVEL_MOVE_TO_LEVEL:
   3165                  if ( pCBs->pfnLevelControlMoveToLevel )
   3166                  {
   3167                    zclLCMoveToLevel_t cmd;
   3168          
   3169                    cmd.level = pInMsg->pData[0];
   3170          
   3171                    if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
   3172                         ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
   3173                    {
   3174                      cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3175                      cmd.withOnOff = withOnOff;
   3176          
   3177                      pCBs->pfnLevelControlMoveToLevel( &cmd );
   3178                    }
   3179                    else
   3180                    {
   3181                      // level range requested is invalid
   3182                      stat = ZCL_STATUS_INVALID_VALUE;
   3183                    }
   3184                  }
   3185                  break;
   3186          
   3187                case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
   3188                  withOnOff = TRUE;
   3189                  // fall through
   3190                case COMMAND_LEVEL_MOVE:
   3191                  if ( pCBs->pfnLevelControlMove )
   3192                  {
   3193                    zclLCMove_t cmd;
   3194          
   3195                    cmd.moveMode = pInMsg->pData[0];
   3196                    cmd.rate = pInMsg->pData[1];
   3197                    cmd.withOnOff = withOnOff;
   3198          
   3199                    pCBs->pfnLevelControlMove( &cmd );
   3200                  }
   3201                  break;
   3202          
   3203                case COMMAND_LEVEL_STEP_WITH_ON_OFF:
   3204                  withOnOff = TRUE;
   3205                  // fall through
   3206                case COMMAND_LEVEL_STEP:
   3207                  if ( pCBs->pfnLevelControlStep )
   3208                  {
   3209                    zclLCStep_t cmd;
   3210          
   3211                    cmd.stepMode = pInMsg->pData[0];
   3212                    cmd.amount =  pInMsg->pData[1];
   3213                    cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   3214                    cmd.withOnOff = withOnOff;
   3215          
   3216                    pCBs->pfnLevelControlStep( &cmd );
   3217                  }
   3218                  break;
   3219          
   3220                case COMMAND_LEVEL_STOP:
   3221                case COMMAND_LEVEL_STOP_WITH_ON_OFF:
   3222                  // Both Stop commands are identical
   3223                  if ( pCBs->pfnLevelControlStop )
   3224                  {
   3225                    pCBs->pfnLevelControlStop();
   3226                  }
   3227                  break;
   3228          
   3229                default:
   3230                  stat = ZFailure;
   3231                  break;
   3232              }
   3233            }
   3234            // no Client command
   3235          
   3236            return ( stat );
   3237          }
   3238          #endif // ZCL_LEVEL_CTRL
   3239          
   3240          #ifdef ZCL_ALARMS
   3241          /*********************************************************************
   3242           * @fn      zclGeneral_AddAlarm
   3243           *
   3244           * @brief   Add an alarm for a cluster
   3245           *
   3246           * @param   endpoint -
   3247           * @param   alarm - new alarm item
   3248           *
   3249           * @return  ZStatus_t
   3250           */
   3251          ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
   3252          {
   3253            zclGenAlarmItem_t *pNewItem;
   3254            zclGenAlarmItem_t *pLoop;
   3255          
   3256            // Fill in the new profile list
   3257            pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
   3258            if ( pNewItem == NULL )
   3259              return ( ZMemError );
   3260          
   3261            // Fill in the plugin record.
   3262            pNewItem->next = (zclGenAlarmItem_t *)NULL;
   3263            pNewItem->endpoint =  endpoint;
   3264            zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
   3265          
   3266            // Find spot in list
   3267            if (  zclGenAlarmTable == NULL )
   3268            {
   3269              zclGenAlarmTable = pNewItem;
   3270            }
   3271            else
   3272            {
   3273              // Look for end of list
   3274              pLoop = zclGenAlarmTable;
   3275              while ( pLoop->next != NULL )
   3276                pLoop = pLoop->next;
   3277          
   3278              // Put new item at end of list
   3279              pLoop->next = pNewItem;
   3280            }
   3281          
   3282            return ( ZSuccess );
   3283          }
   3284          
   3285          /*********************************************************************
   3286           * @fn      zclGeneral_FindAlarm
   3287           *
   3288           * @brief   Find an alarm with alarmCode and clusterID
   3289           *
   3290           * @param   endpoint -
   3291           * @param   groupID - what group the scene belongs to
   3292           * @param   sceneID - ID to look for scene
   3293           *
   3294           * @return  a pointer to the alarm information, NULL if not found
   3295           */
   3296          zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3297          {
   3298            zclGenAlarmItem_t *pLoop;
   3299          
   3300            // Look for the alarm
   3301            pLoop = zclGenAlarmTable;
   3302            while ( pLoop )
   3303            {
   3304              if ( pLoop->endpoint == endpoint &&
   3305                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3306              {
   3307                return ( &(pLoop->alarm) );
   3308              }
   3309              pLoop = pLoop->next;
   3310            }
   3311          
   3312            return ( (zclGeneral_Alarm_t *)NULL );
   3313          }
   3314          
   3315          /*********************************************************************
   3316           * @fn      zclGeneral_FindEarliestAlarm
   3317           *
   3318           * @brief   Find an alarm with the earliest timestamp
   3319           *
   3320           * @param   endpoint -
   3321           *
   3322           * @return  a pointer to the alarm information, NULL if not found
   3323           */
   3324          zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
   3325          {
   3326            zclGenAlarmItem_t *pLoop;
   3327            zclGenAlarmItem_t earliestAlarm;
   3328            zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
   3329          
   3330            pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
   3331          
   3332            // Look for alarm with earliest time
   3333            pLoop = zclGenAlarmTable;
   3334            while ( pLoop )
   3335            {
   3336              if ( pLoop->endpoint == endpoint &&
   3337                   pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
   3338              {
   3339                pEarliestAlarm = pLoop;
   3340              }
   3341              pLoop = pLoop->next;
   3342            }
   3343          
   3344            if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
   3345              return ( &(pEarliestAlarm->alarm) );
   3346          
   3347            // No alarm
   3348            return ( (zclGeneral_Alarm_t *)NULL );
   3349          }
   3350          
   3351          /*********************************************************************
   3352           * @fn      zclGeneral_ResetAlarm
   3353           *
   3354           * @brief   Remove an alarm with alarmCode and clusterID
   3355           *
   3356           * @param   endpoint -
   3357           * @param   alarmCode -
   3358           * @param   clusterID -
   3359           *
   3360           * @return  TRUE if removed, FALSE if not found
   3361           */
   3362          void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3363          {
   3364            zclGenAlarmItem_t *pLoop;
   3365            zclGenAlarmItem_t *pPrev;
   3366          
   3367            // Look for end of list
   3368            pLoop = zclGenAlarmTable;
   3369            pPrev = NULL;
   3370            while ( pLoop )
   3371            {
   3372              if ( pLoop->endpoint == endpoint &&
   3373                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3374              {
   3375                if ( pPrev == NULL )
   3376                  zclGenAlarmTable = pLoop->next;
   3377                else
   3378                  pPrev->next = pLoop->next;
   3379          
   3380                // Free the memory
   3381                zcl_mem_free( pLoop );
   3382          
   3383                // Notify the Application so that if the alarm condition still active then
   3384                // a new notification will be generated, and a new alarm record will be
   3385                // added to the alarm log
   3386                // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
   3387                return;
   3388              }
   3389              pPrev = pLoop;
   3390              pLoop = pLoop->next;
   3391            }
   3392          }
   3393          
   3394          /*********************************************************************
   3395           * @fn      zclGeneral_ResetAllAlarms
   3396           *
   3397           * @brief   Remove all alarms with endpoint
   3398           *
   3399           * @param   endpoint -
   3400           * @param   notifyApp -
   3401           *
   3402           * @return  none
   3403           */
   3404          void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
   3405          {
   3406            zclGenAlarmItem_t *pLoop;
   3407            zclGenAlarmItem_t *pPrev;
   3408            zclGenAlarmItem_t *pNext;
   3409          
   3410            // Look for end of list
   3411            pLoop = zclGenAlarmTable;
   3412            pPrev = NULL;
   3413            while ( pLoop )
   3414            {
   3415              if (  pLoop->endpoint == endpoint )
   3416              {
   3417                if ( pPrev == NULL )
   3418                  zclGenAlarmTable = pLoop->next;
   3419                else
   3420                  pPrev->next = pLoop->next;
   3421          
   3422                pNext = pLoop->next;
   3423          
   3424                // Free the memory
   3425                zcl_mem_free( pLoop );
   3426          
   3427                pLoop = pNext;
   3428              }
   3429              else
   3430              {
   3431                pPrev = pLoop;
   3432                pLoop = pLoop->next;
   3433              }
   3434            }
   3435          
   3436            if ( notifyApp )
   3437            {
   3438              // Notify the Application so that if any alarm conditions still active then
   3439              // a new notification will be generated, and a new alarm record will be
   3440              // added to the alarm log
   3441              // zclGeneral_NotifyResetAll(); // callback function?
   3442            }
   3443          }
   3444          
   3445          /*********************************************************************
   3446           * @fn      zclGeneral_ProcessInAlarmsServer
   3447           *
   3448           * @brief   Process in the received Alarms Command.
   3449           *
   3450           * @param   pInMsg - pointer to the incoming message
   3451           *
   3452           * @return  ZStatus_t
   3453           */
   3454          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
   3455                                                             zclGeneral_AppCallbacks_t *pCBs )
   3456          {
   3457            zclAlarm_t alarm;
   3458            zclGeneral_Alarm_t *pAlarm;
   3459            uint8 *pData = pInMsg->pData;
   3460            ZStatus_t stat = ZSuccess;
   3461          
   3462            switch ( pInMsg->hdr.commandID )
   3463            {
   3464              case COMMAND_ALARMS_RESET:
   3465                if ( pCBs->pfnAlarm )
   3466                {
   3467                  alarm.cmdID = pInMsg->hdr.commandID;
   3468                  alarm.alarmCode = pData[0];
   3469                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3470          
   3471                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3472                }
   3473                else
   3474                {
   3475                  stat = ZCL_STATUS_FAILURE;
   3476                }
   3477                break;
   3478          
   3479              case COMMAND_ALARMS_RESET_ALL:
   3480                if ( pCBs->pfnAlarm )
   3481                {
   3482                  alarm.cmdID = pInMsg->hdr.commandID;
   3483          
   3484                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3485                }
   3486                else
   3487                {
   3488                  stat = ZCL_STATUS_FAILURE;
   3489                }
   3490                break;
   3491          
   3492              case COMMAND_ALARMS_GET:
   3493                if ( pCBs->pfnAlarm )
   3494                {
   3495                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3496                  alarm.cmdID = pInMsg->hdr.commandID;
   3497          
   3498                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3499          
   3500                  pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
   3501                  if ( pAlarm )
   3502                  {
   3503                    // Send a response back
   3504                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3505                                                     ZCL_STATUS_SUCCESS, pAlarm->code,
   3506                                                     pAlarm->clusterID, pAlarm->timeStamp,
   3507                                                     true, pInMsg->hdr.transSeqNum );
   3508                    // Remove the entry from the Alarm table
   3509                    zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
   3510                  }
   3511                  else
   3512                  {
   3513                    // Send a response back
   3514                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3515                                                     ZCL_STATUS_NOT_FOUND, 0, 0, 0,
   3516                                                     true, pInMsg->hdr.transSeqNum );
   3517                  }
   3518                  stat = ZCL_STATUS_CMD_HAS_RSP;
   3519                }
   3520                else
   3521                {
   3522                  stat = ZCL_STATUS_FAILURE;
   3523                }
   3524                break;
   3525          
   3526              case COMMAND_ALARMS_RESET_LOG:
   3527                if ( pCBs->pfnAlarm )
   3528                {
   3529                  alarm.cmdID = pInMsg->hdr.commandID;
   3530          
   3531                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3532          
   3533                  zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
   3534                }
   3535                else
   3536                {
   3537                  stat = ZCL_STATUS_FAILURE;
   3538                }
   3539                break;
   3540          
   3541          #ifdef SE_UK_EXT
   3542              case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
   3543                if ( pCBs->pfnPublishEventLog )
   3544                {
   3545                  zclPublishEventLog_t eventLog;
   3546          
   3547                  eventLog.logID = *pData++;
   3548                  eventLog.cmdIndex = *pData++;
   3549                  eventLog.totalCmds = *pData++;
   3550          
   3551                  // First try to find out number of Sub Log Payloads
   3552                  eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
   3553                  if ( eventLog.numSubLogs > 0 )
   3554                  {
   3555                    // Try to alloc space for Log Payload
   3556                    eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
   3557                                                                             eventLog.numSubLogs );
   3558                    if ( eventLog.pLogs != NULL )
   3559                    {
   3560                      // Copy Log Payload
   3561                      for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
   3562                      {
   3563                        eventLog.pLogs[i].eventId = *pData++;
   3564                        eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
   3565                        pData += 4;
   3566                      }
   3567                    }
   3568                    else
   3569                    {
   3570                      stat = ZCL_STATUS_SOFTWARE_FAILURE;
   3571                    }
   3572                  }
   3573                  else
   3574                  {
   3575                    eventLog.pLogs = NULL;
   3576                  }
   3577          
   3578                  if ( stat == ZSuccess )
   3579                  {
   3580                    pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
   3581                  }
   3582          
   3583                  if ( eventLog.pLogs != NULL )
   3584                  {
   3585                    zcl_mem_free( eventLog.pLogs );
   3586                  }
   3587                }
   3588                break;
   3589          #endif // SE_UK_EXT
   3590          
   3591              default:
   3592                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3593                break;
   3594            }
   3595          
   3596            return ( stat );
   3597          }
   3598          
   3599          /*********************************************************************
   3600           * @fn      zclGeneral_ProcessInAlarmsClient
   3601           *
   3602           * @brief   Process in the received Alarms Command.
   3603           *
   3604           * @param   pInMsg - pointer to the incoming message
   3605           *
   3606           * @return  ZStatus_t
   3607           */
   3608          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
   3609                                                             zclGeneral_AppCallbacks_t *pCBs )
   3610          {
   3611            uint8 *pData = pInMsg->pData;
   3612            zclAlarm_t alarm;
   3613            ZStatus_t stat = ZSuccess;
   3614          
   3615            zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
   3616          
   3617            switch ( pInMsg->hdr.commandID )
   3618            {
   3619              case COMMAND_ALARMS_ALARM:
   3620                if ( pCBs->pfnAlarm )
   3621                {
   3622                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3623                  alarm.cmdID = pInMsg->hdr.commandID;
   3624                  alarm.alarmCode = pData[0];
   3625                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3626          
   3627                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3628                }
   3629                else
   3630                {
   3631                  stat = ZCL_STATUS_FAILURE;
   3632                }
   3633                break;
   3634          
   3635              case COMMAND_ALARMS_GET_RSP:
   3636                if ( pCBs->pfnAlarm )
   3637                {
   3638                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3639                  alarm.cmdID = pInMsg->hdr.commandID;
   3640                  alarm.alarmCode = *pData++;
   3641                  alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
   3642          
   3643                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3644                }
   3645                else
   3646                {
   3647                  stat = ZCL_STATUS_FAILURE;
   3648                }
   3649                break;
   3650          
   3651          #ifdef SE_UK_EXT
   3652              case COMMAND_ALARMS_GET_EVENT_LOG:
   3653                if ( pCBs->pfnGetEventLog )
   3654                {
   3655                  zclGetEventLog_t eventLog;
   3656          
   3657                  eventLog.logID = *pData++;
   3658                  eventLog.startTime = zcl_build_uint32( pData, 4 );
   3659                  pData += 4;
   3660                  eventLog.endTime = zcl_build_uint32( pData, 4 );
   3661                  pData += 4;
   3662                  eventLog.numEvents = *pData;
   3663          
   3664                  pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3665                                        &eventLog, pInMsg->hdr.transSeqNum );
   3666                }
   3667                break;
   3668          #endif // SE_UK_EXT
   3669          
   3670              default:
   3671                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3672                break;
   3673            }
   3674          
   3675            return ( stat );
   3676          }
   3677          #endif // ZCL_ALARMS
   3678          
   3679          #ifdef ZCL_LOCATION
   3680          /*********************************************************************
   3681           * @fn      zclGeneral_ProcessInLocationServer
   3682           *
   3683           * @brief   Process in the received Location Command.
   3684           *
   3685           * @param   pInMsg - pointer to the incoming message
   3686           *
   3687           * @return  ZStatus_t
   3688           */
   3689          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
   3690                                                               zclGeneral_AppCallbacks_t *pCBs )
   3691          {
   3692            uint8 *pData = pInMsg->pData;
   3693            zclLocation_t cmd;
   3694            ZStatus_t stat = ZSuccess;
   3695          
   3696            zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
   3697          
   3698            switch ( pInMsg->hdr.commandID )
   3699            {
   3700              case COMMAND_LOCATION_SET_ABSOLUTE:
   3701                cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3702                pData += 2;
   3703                cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3704                pData += 2;
   3705                cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3706                pData += 2;
   3707                cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3708                pData += 2;
   3709                cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3710          
   3711                if ( pCBs->pfnLocation )
   3712                {
   3713                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3714                  cmd.cmdID = pInMsg->hdr.commandID;
   3715          
   3716                  // Update the absolute location info
   3717                  pCBs->pfnLocation( &cmd );
   3718                }
   3719                break;
   3720          
   3721              case COMMAND_LOCATION_SET_DEV_CFG:
   3722                cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
   3723                pData += 2;
   3724                cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3725                pData += 2;
   3726                cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3727                pData += 2;
   3728                cmd.un.devCfg.numMeasurements = *pData++;
   3729                cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3730          
   3731                if ( pCBs->pfnLocation )
   3732                {
   3733                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3734                  cmd.cmdID = pInMsg->hdr.commandID;
   3735          
   3736                  // Update the device configuration info
   3737                  pCBs->pfnLocation( &cmd );
   3738                }
   3739                break;
   3740          
   3741              case COMMAND_LOCATION_GET_DEV_CFG:
   3742                cmd.un.ieeeAddr = pData;
   3743          
   3744                if ( pCBs->pfnLocation )
   3745                {
   3746                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3747                  cmd.cmdID = pInMsg->hdr.commandID;
   3748                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3749          
   3750                  // Retreive the Device Configuration
   3751                  pCBs->pfnLocation( &cmd );
   3752                }
   3753                stat = ZCL_STATUS_CMD_HAS_RSP;
   3754                break;
   3755          
   3756              case COMMAND_LOCATION_GET_DATA:
   3757                cmd.un.loc.bitmap.locByte = *pData++;
   3758                cmd.un.loc.numResponses = *pData++;
   3759          
   3760                if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
   3761                  zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
   3762          
   3763                if ( pCBs->pfnLocation )
   3764                {
   3765                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3766                  cmd.cmdID = pInMsg->hdr.commandID;
   3767                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3768          
   3769                  // Retreive the Location Data
   3770                  pCBs->pfnLocation( &cmd );
   3771                }
   3772                stat = ZCL_STATUS_CMD_HAS_RSP;
   3773                break;
   3774          
   3775              default:
   3776                stat = ZFailure;
   3777                break;
   3778            }
   3779          
   3780            return ( stat );
   3781          }
   3782          
   3783          /*********************************************************************
   3784           * @fn      zclGeneral_ProcessInLocationDataRsp
   3785           *
   3786           * @brief   Process in the received Location Command.
   3787           *
   3788           * @param   pInMsg - pointer to the incoming message
   3789           *
   3790           * @return  ZStatus_t
   3791           */
   3792          static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
   3793                                                           zclGeneral_AppCallbacks_t *pCBs )
   3794          {
   3795            uint8 *pData = pInMsg->pData;
   3796            zclLocationRsp_t rsp;
   3797          
   3798            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3799          
   3800            if ( pCBs->pfnLocationRsp )
   3801            {
   3802              if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
   3803                rsp.un.loc.status = *pData++;
   3804          
   3805              if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
   3806                   rsp.un.loc.status == ZCL_STATUS_SUCCESS )
   3807              {
   3808                rsp.un.loc.data.type = *pData++;
   3809                rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3810                pData += 2;
   3811                rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3812                pData += 2;
   3813          
   3814                if ( locationType2D( rsp.un.loc.data.type ) == 0 )
   3815                {
   3816                  rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3817                  pData += 2;
   3818                }
   3819          
   3820                if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3821                {
   3822                  rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3823                  pData += 2;
   3824                  rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3825                  pData += 2;
   3826                }
   3827          
   3828                if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
   3829                {
   3830                  if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3831                    rsp.un.loc.data.calcLoc.locationMethod = *pData++;
   3832          
   3833                  rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
   3834                  rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
   3835                }
   3836              }
   3837          
   3838              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3839              rsp.cmdID = pInMsg->hdr.commandID;
   3840          
   3841              // Notify the Application
   3842              pCBs->pfnLocationRsp( &rsp );
   3843            }
   3844          }
   3845          
   3846          /*********************************************************************
   3847           * @fn      zclGeneral_ProcessInLocationClient
   3848           *
   3849           * @brief   Process in the received Location Command.
   3850           *
   3851           * @param   pInMsg - pointer to the incoming message
   3852           *
   3853           * @return  ZStatus_t
   3854           */
   3855          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
   3856                                                               zclGeneral_AppCallbacks_t *pCBs )
   3857          {
   3858            uint8 *pData = pInMsg->pData;
   3859            zclLocationRsp_t rsp;
   3860            ZStatus_t stat = ZSuccess;
   3861          
   3862            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3863          
   3864            switch ( pInMsg->hdr.commandID )
   3865            {
   3866              case COMMAND_LOCATION_DEV_CFG_RSP:
   3867                if ( pCBs->pfnLocationRsp )
   3868                {
   3869                  rsp.un.devCfg.status = *pData++;
   3870                  if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
   3871                  {
   3872                    rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
   3873                    pData += 2;
   3874                    rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3875                    pData += 2;
   3876                    rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3877                    pData += 2;
   3878                    rsp.un.devCfg.data.numMeasurements = *pData++;
   3879                    rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3880          
   3881                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3882                    rsp.cmdID = pInMsg->hdr.commandID;
   3883          
   3884                    // Notify the Application
   3885                    pCBs->pfnLocationRsp( &rsp );
   3886                  }
   3887                }
   3888                break;
   3889          
   3890              case COMMAND_LOCATION_DATA_RSP:
   3891              case COMMAND_LOCATION_DATA_NOTIF:
   3892              case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
   3893                zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
   3894                break;
   3895          
   3896              case COMMAND_LOCATION_RSSI_PING:
   3897                if ( pCBs->pfnLocationRsp )
   3898                {
   3899                  rsp.un.locationType = *pData;
   3900          
   3901                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3902                  rsp.cmdID = pInMsg->hdr.commandID;
   3903          
   3904                  // Notify the Application
   3905                  pCBs->pfnLocationRsp( &rsp );
   3906                }
   3907                break;
   3908          
   3909              default:
   3910                stat = ZFailure;
   3911                break;
   3912            }
   3913          
   3914            return ( stat );
   3915          }
   3916          #endif // ZCL_LOCATION
   3917          
   3918          #ifdef ZCL_SCENES
   3919          #if !defined ( ZCL_STANDALONE )
   3920          /*********************************************************************
   3921           * @fn      zclGeneral_ScenesInitNV
   3922           *
   3923           * @brief   Initialize the NV Scene Table Items
   3924           *
   3925           * @param   none
   3926           *
   3927           * @return  number of scenes
   3928           */
   3929          static uint8 zclGeneral_ScenesInitNV( void )
   3930          {
   3931            uint8  status;
   3932            uint16 size;
   3933          
   3934            size = (uint16)((sizeof ( nvGenScenesHdr_t ))
   3935                            + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
   3936          
   3937            status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
   3938          
   3939            if ( status != ZSUCCESS )
   3940            {
   3941              zclGeneral_ScenesSetDefaultNV();
   3942            }
   3943          
   3944            return status;
   3945          }
   3946          #endif // ZCL_STANDALONE
   3947          
   3948          #if !defined ( ZCL_STANDALONE )
   3949          /*********************************************************************
   3950           * @fn          zclGeneral_ScenesSetDefaultNV
   3951           *
   3952           * @brief       Write the defaults to NV
   3953           *
   3954           * @param       none
   3955           *
   3956           * @return      none
   3957           */
   3958          static void zclGeneral_ScenesSetDefaultNV( void )
   3959          {
   3960            nvGenScenesHdr_t hdr;
   3961          
   3962            // Initialize the header
   3963            hdr.numRecs = 0;
   3964          
   3965            // Save off the header
   3966            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   3967          }
   3968          #endif // ZCL_STANDALONE
   3969          
   3970          #if !defined ( ZCL_STANDALONE )
   3971          /*********************************************************************
   3972           * @fn          zclGeneral_ScenesWriteNV
   3973           *
   3974           * @brief       Save the Scene Table in NV
   3975           *
   3976           * @param       none
   3977           *
   3978           * @return      none
   3979           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3980          static void zclGeneral_ScenesWriteNV( void )
   \                     zclGeneral_ScenesWriteNV:
   3981          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3982            nvGenScenesHdr_t hdr;
   3983            zclGenSceneItem_t *pLoop;
   3984            zclGenSceneNVItem_t item;
   3985          
   3986            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   3987          
   3988            // Look for end of list
   3989            pLoop = zclGenSceneTable;
   \   000014   90....       MOV     DPTR,#zclGenSceneTable
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   8079         SJMP    ??zclGeneral_ScenesWriteNV_0
   3990            while ( pLoop )
   3991            {
   3992              // Build the record
   3993              item.endpoint = pLoop->endpoint;
   \                     ??zclGeneral_ScenesWriteNV_1:
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C0E0         PUSH    A
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   12....       LCALL   ?Subroutine50 & 0xFFFF
   3994              zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
   \                     ??CrossCallReturnLabel_104:
   \   000030   A3           INC     DPTR
   \   000031   A982         MOV     R1,DPL
   \   000033   AA83         MOV     R2,DPH
   \   000035   89..         MOV     ?V0,R1
   \   000037   8A..         MOV     ?V1,R2
   \   000039   75..00       MOV     ?V2,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000041   7C37         MOV     R4,#0x37
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7406         MOV     A,#0x6
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   AA82         MOV     R2,DPL
   \   00004C   AB83         MOV     R3,DPH
   \   00004E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   3995          
   3996              // Save the record to NV
   3997              zcl_nv_write( ZCD_NV_SCENE_TABLE,
   3998                      (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
   3999                              sizeof ( zclGenSceneNVItem_t ), &item );
   \   000056                ; Setup parameters for call to function osal_nv_write
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?XSTACK_DISP100_8
   \   00005B   88..         MOV     ?V0,R0
   \   00005D   89..         MOV     ?V1,R1
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   75..38       MOV     ?V0,#0x38
   \   000067   75..00       MOV     ?V1,#0x0
   \   00006A   78..         MOV     R0,#?V0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000077   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00007A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   4000          
   4001              hdr.numRecs++;
   \   000082   85..82       MOV     DPL,?XSP + 0
   \   000085   85..83       MOV     DPH,?XSP + 1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   2401         ADD     A,#0x1
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   3400         ADDC    A,#0x0
   \   000090   F0           MOVX    @DPTR,A
   4002          
   4003              pLoop = pLoop->next;
   \   000091   12....       LCALL   ?Subroutine37 & 0xFFFF
   4004            }
   \                     ??CrossCallReturnLabel_272:
   \   000094   FE           MOV     R6,A
   \   000095   E9           MOV     A,R1
   \                     ??zclGeneral_ScenesWriteNV_0:
   \   000096   FF           MOV     R7,A
   \   000097   EE           MOV     A,R6
   \   000098   4F           ORL     A,R7
   \   000099   7082         JNZ     ??zclGeneral_ScenesWriteNV_1
   4005          
   4006            // Save off the header
   4007            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   \   00009B                ; Setup parameters for call to function osal_nv_write
   \   00009B   A8..         MOV     R0,?XSP + 0
   \   00009D   A9..         MOV     R1,?XSP + 1
   \   00009F   88..         MOV     ?V0,R0
   \   0000A1   89..         MOV     ?V1,R1
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   75..02       MOV     ?V0,#0x2
   \   0000AB   75..00       MOV     ?V1,#0x0
   \   0000AE   78..         MOV     R0,#?V0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   7C00         MOV     R4,#0x0
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   7A91         MOV     R2,#-0x6f
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000BE   7404         MOV     A,#0x4
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
   4008          }
   \   0000C3   743A         MOV     A,#0x3a
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8   7F03         MOV     R7,#0x3
   \   0000CA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   75F038       MOV     B,#0x38
   \   000003   A4           MUL     AB
   \   000004   F8           MOV     R0,A
   \   000005   AAF0         MOV     R2,B
   \   000007   75F038       MOV     B,#0x38
   \   00000A   E9           MOV     A,R1
   \   00000B   A4           MUL     AB
   \   00000C   2A           ADD     A,R2
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   2402         ADD     A,#0x2
   \   000011   FC           MOV     R4,A
   \   000012   E4           CLR     A
   \   000013   39           ADDC    A,R1
   \   000014   FD           MOV     R5,A
   \   000015   7A91         MOV     R2,#-0x6f
   \   000017   7B00         MOV     R3,#0x0
   \   000019   22           RET
   4009          #endif // ZCL_STANDALONE
   4010          
   4011          #if !defined ( ZCL_STANDALONE )
   4012          /*********************************************************************
   4013           * @fn          zclGeneral_ScenesRestoreFromNV
   4014           *
   4015           * @brief       Restore the Scene table from NV
   4016           *
   4017           * @param       none
   4018           *
   4019           * @return      Number of entries restored
   4020           */
   4021          static uint16 zclGeneral_ScenesRestoreFromNV( void )
   4022          {
   4023            uint16 x;
   4024            nvGenScenesHdr_t hdr;
   4025          
   4026            zclGenSceneNVItem_t item;
   4027            uint16 numAdded = 0;
   4028          
   4029            if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
   4030            {
   4031              // Read in the device list
   4032              for ( x = 0; x < hdr.numRecs; x++ )
   4033              {
   4034                if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
   4035                          (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
   4036                                            sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
   4037                {
   4038                  // Add the scene
   4039                  if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
   4040                  {
   4041                    numAdded++;
   4042                  }
   4043                }
   4044              }
   4045            }
   4046          
   4047            return ( numAdded );
   4048          }
   4049          #endif // ZCL_STANDALONE
   4050          
   4051          #if !defined ( ZCL_STANDALONE )
   4052          /*********************************************************************
   4053           * @fn          zclGeneral_ScenesInit
   4054           *
   4055           * @brief       Initialize the scenes table
   4056           *
   4057           * @param       none
   4058           *
   4059           * @return      none
   4060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4061          void zclGeneral_ScenesInit( void )
   \                     zclGeneral_ScenesInit:
   4062          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4063            // Initialize NV items
   4064            zclGeneral_ScenesInitNV();
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C82         MOV     R4,#-0x7e
   \   000016   7D03         MOV     R5,#0x3
   \   000018   7A91         MOV     R2,#-0x6f
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   602A         JZ      ??zclGeneral_ScenesInit_0
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..02       MOV     ?V0,#0x2
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A91         MOV     R2,#-0x6f
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   4065          
   4066            // Restore the Scene table
   4067            zclGeneral_ScenesRestoreFromNV();
   \                     ??zclGeneral_ScenesInit_0:
   \   000051                ; Setup parameters for call to function osal_nv_read
   \   000051   A8..         MOV     R0,?XSP + 0
   \   000053   A9..         MOV     R1,?XSP + 1
   \   000055   88..         MOV     ?V0,R0
   \   000057   89..         MOV     ?V1,R1
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..02       MOV     ?V0,#0x2
   \   000061   75..00       MOV     ?V1,#0x0
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A91         MOV     R2,#-0x6f
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   705A         JNZ     ??zclGeneral_ScenesInit_1
   \   00007C   7E00         MOV     R6,#0x0
   \   00007E   7F00         MOV     R7,#0x0
   \   000080   8044         SJMP    ??zclGeneral_ScenesInit_2
   \                     ??zclGeneral_ScenesInit_3:
   \   000082                ; Setup parameters for call to function osal_nv_read
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP100_8
   \   000087   88..         MOV     ?V0,R0
   \   000089   89..         MOV     ?V1,R1
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   75..38       MOV     ?V0,#0x38
   \   000093   75..00       MOV     ?V1,#0x0
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   EE           MOV     A,R6
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   F9           MOV     R1,A
   \   00009F   E8           MOV     A,R0
   \   0000A0   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000A3   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A6   7404         MOV     A,#0x4
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV     A,R1
   \   0000AC   7013         JNZ     ??zclGeneral_ScenesInit_4
   \   0000AE                ; Setup parameters for call to function zclGeneral_AddScene
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   AA82         MOV     R2,DPL
   \   0000B5   AB83         MOV     R3,DPH
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \                     ??zclGeneral_ScenesInit_4:
   \   0000C1   0E           INC     R6
   \   0000C2   EE           MOV     A,R6
   \   0000C3   7001         JNZ     ??zclGeneral_ScenesInit_2
   \   0000C5   0F           INC     R7
   \                     ??zclGeneral_ScenesInit_2:
   \   0000C6   85..82       MOV     DPL,?XSP + 0
   \   0000C9   85..83       MOV     DPH,?XSP + 1
   \   0000CC   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000CF   C3           CLR     C
   \   0000D0   EE           MOV     A,R6
   \   0000D1   98           SUBB    A,R0
   \   0000D2   EF           MOV     A,R7
   \   0000D3   99           SUBB    A,R1
   \   0000D4   40AC         JC      ??zclGeneral_ScenesInit_3
   4068          }
   \                     ??zclGeneral_ScenesInit_1:
   \   0000D6   743A         MOV     A,#0x3a
   \   0000D8   02....       LJMP    ??Subroutine81_0 & 0xFFFF
   4069          #endif // ZCL_STANDALONE
   4070          
   4071          #if !defined ( ZCL_STANDALONE )
   4072          /*********************************************************************
   4073           * @fn          zclGeneral_ScenesSave
   4074           *
   4075           * @brief       Save the scenes table
   4076           *
   4077           * @param       none
   4078           *
   4079           * @return      none
   4080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4081          void zclGeneral_ScenesSave( void )
   \                     zclGeneral_ScenesSave:
   4082          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   4083            // Update NV
   4084            zclGeneral_ScenesWriteNV();
   \   000004                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000004   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   4085          }
   \   000007   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_RegisterCmdCallbacks::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentifyEZModeInvoke::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyEZModeInvoke

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentifyUpdateCommState::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyUpdateCommState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentifyQueryResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyQueryResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendAddGroupRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupGetMembershipRequest::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupGetMembershipRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupViewResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupViewResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendAddSceneRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneViewRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneViewRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneGetMembershipResponse::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneGetMembershipResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_HdlInSpecificCommands::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlInSpecificCommands

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInIdentity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInIdentity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_AddGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInGroupsServer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInGroupsClient::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_AddScene::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_FindScene::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_FindAllScenesForGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindAllScenesForGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_RemoveScene::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_RemoveAllScenes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_CountScenes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_CountAllScenes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ReadSceneCountCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ReadSceneCountCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInScenesServer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInScenesClient::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ScenesWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ScenesInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ScenesSave::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesSave
   4086          #endif // ZCL_STANDALONE
   4087          
   4088          #endif // ZCL_SCENES
   4089          
   4090          /***************************************************************************
   4091          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     96   zclGeneral_AddGroup
        0     16   -> aps_AddGroup
        0     19   -> osal_memcpy
        0     20   -> zcl_ReadAttrData
      1    100   zclGeneral_AddScene
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
        0     15   -> zclGeneral_ScenesWriteNV
      2     82   zclGeneral_CountAllScenes
      2      0   zclGeneral_CountScenes
      1     92   zclGeneral_FindAllScenesForGroup
      0     91   zclGeneral_FindScene
      0     10   zclGeneral_HdlInSpecificCommands
        0     10   -> zclGeneral_ProcessInGroupsClient
        0     10   -> zclGeneral_ProcessInGroupsServer
        0     10   -> zclGeneral_ProcessInIdentity
        0     10   -> zclGeneral_ProcessInScenesClient
        0     10   -> zclGeneral_ProcessInScenesServer
      2      0   zclGeneral_HdlIncoming
        2      0   -> zclGeneral_HdlInSpecificCommands
      1     63   zclGeneral_ProcessInGroupsClient
        0     50   -> osal_mem_alloc
        0     50   -> osal_mem_free
        0     53   -> osal_memcpy
        0     50   -> osal_memset
      1     93   zclGeneral_ProcessInGroupsServer
        0     76   -> aps_CountAllGroups
        0     76   -> aps_FindAllGroupsForEndpoint
        0     76   -> aps_FindGroup
        0     76   -> aps_RemoveAllGroup
        0     76   -> aps_RemoveGroup
        0     76   -> osal_mem_alloc
        0     76   -> osal_mem_free
        0     76   -> osal_memset
        0     76   -> zclGeneral_AddGroup
        0     76   -> zclGeneral_RemoveAllScenes
        0     83   -> zclGeneral_SendGroupGetMembershipRequest
        0     80   -> zclGeneral_SendGroupResponse
        0     79   -> zclGeneral_SendGroupViewResponse
        0     80   -> zcl_ReadAttrData
        0     83   -> zcl_SendDefaultRspCmd
      1     32   zclGeneral_ProcessInIdentity
        0     20   -> zclGeneral_SendIdentifyQueryResponse
        0     18   -> zcl_EZModeAction
        0     22   -> zcl_ReadAttrData
      1    100   zclGeneral_ProcessInScenesClient
        0     87   -> osal_mem_alloc
        0     87   -> osal_mem_free
        0     90   -> osal_memcpy
        0     87   -> osal_memset
      1     99   zclGeneral_ProcessInScenesServer
        0     82   -> aps_FindGroup
        0     82   -> osal_mem_alloc
        0     82   -> osal_mem_free
        0     85   -> osal_memcpy
        0     82   -> osal_memset
        0     82   -> zclGeneral_AddScene
        0     82   -> zclGeneral_CountAllScenes
        0     82   -> zclGeneral_FindAllScenesForGroup
        0     82   -> zclGeneral_FindScene
        0     82   -> zclGeneral_RemoveAllScenes
        0     82   -> zclGeneral_RemoveScene
        0     82   -> zclGeneral_ScenesWriteNV
        0     89   -> zclGeneral_SendSceneGetMembershipResponse
        0     87   -> zclGeneral_SendSceneResponse
        0     86   -> zclGeneral_SendSceneViewRsp
        0     86   -> zcl_ReadAttrData
      1     14   zclGeneral_ReadSceneCountCB
        0     10   -> zclGeneral_CountAllScenes
      1     14   zclGeneral_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     12   -> zclGeneral_ScenesInit
        0     14   -> zcl_registerPlugin
      0     95   zclGeneral_RemoveAllScenes
        0     13   -> osal_mem_free
        0     13   -> zclGeneral_ScenesWriteNV
      0     91   zclGeneral_RemoveScene
        0      9   -> osal_mem_free
        0      9   -> zclGeneral_ScenesWriteNV
      0     84   zclGeneral_ScenesInit
        0     70   -> osal_nv_item_init
        0     72   -> osal_nv_read
        0     72   -> osal_nv_write
        0     68   -> zclGeneral_AddScene
      2      0   zclGeneral_ScenesSave
        2      0   -> zclGeneral_ScenesWriteNV
      1    155   zclGeneral_ScenesWriteNV
        0     72   -> osal_memcpy
        0     73   -> osal_nv_write
      1     36   zclGeneral_SendAddGroupRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     23   -> osal_memcpy
        0     31   -> zcl_SendCommand
      1     40   zclGeneral_SendAddSceneRequest
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     37   -> zcl_SendCommand
      1    114   zclGeneral_SendGroupGetMembershipRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     28   zclGeneral_SendGroupRequest
        0     25   -> zcl_SendCommand
      1    106   zclGeneral_SendGroupResponse
        0     26   -> zcl_SendCommand
      1    112   zclGeneral_SendGroupViewResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     33   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentify
        0     23   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentifyEZModeInvoke
        0     24   -> zcl_SendCommand
      1     43   zclGeneral_SendIdentifyQueryResponse
        0     23   -> zcl_SendCommand
      1     27   zclGeneral_SendIdentifyUpdateCommState
        0     25   -> zcl_SendCommand
      1    118   zclGeneral_SendSceneGetMembershipResponse
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     29   -> zcl_SendCommand
      1     30   zclGeneral_SendSceneRequest
        0     26   -> zcl_SendCommand
      1    114   zclGeneral_SendSceneResponse
        0     27   -> zcl_SendCommand
      1    123   zclGeneral_SendSceneViewRsp
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     37   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ??Subroutine73_0
      12  ??Subroutine74_0
       3  ??Subroutine75_0
       5  ??Subroutine76_0
       6  ??Subroutine77_0
      12  ??Subroutine78_0
       6  ??Subroutine79_0
       7  ??Subroutine80_0
       3  ??Subroutine81_0
       5  ??Subroutine82_0
       6  ??Subroutine83_0
       2  ??Subroutine84_0
       5  ??Subroutine85_0
       9  ??Subroutine86_0
       5  ??Subroutine87_0
       6  ??Subroutine88_0
       7  ??Subroutine89_0
       5  ??Subroutine90_0
       4  ??Subroutine91_0
       4  ??Subroutine92_0
       4  ??Subroutine93_0
      14  ?Subroutine0
      29  ?Subroutine1
       8  ?Subroutine10
       2  ?Subroutine11
       4  ?Subroutine12
      14  ?Subroutine13
       6  ?Subroutine14
      15  ?Subroutine15
       8  ?Subroutine16
      17  ?Subroutine17
      17  ?Subroutine18
       9  ?Subroutine19
       5  ?Subroutine2
       1  ?Subroutine20
      16  ?Subroutine21
       8  ?Subroutine22
       7  ?Subroutine23
       5  ?Subroutine24
      13  ?Subroutine25
       4  ?Subroutine26
      14  ?Subroutine27
      13  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
       6  ?Subroutine31
      10  ?Subroutine32
       9  ?Subroutine33
      12  ?Subroutine34
      16  ?Subroutine35
       8  ?Subroutine36
       4  ?Subroutine37
       6  ?Subroutine38
       5  ?Subroutine39
      12  ?Subroutine4
       5  ?Subroutine40
       9  ?Subroutine41
       6  ?Subroutine42
       8  ?Subroutine43
       9  ?Subroutine44
       1  ?Subroutine45
       1  ?Subroutine46
      15  ?Subroutine47
       6  ?Subroutine48
       8  ?Subroutine49
       7  ?Subroutine5
       5  ?Subroutine50
       6  ?Subroutine51
      12  ?Subroutine52
       8  ?Subroutine53
      10  ?Subroutine54
      26  ?Subroutine55
      12  ?Subroutine56
       4  ?Subroutine57
       3  ?Subroutine58
       4  ?Subroutine59
       5  ?Subroutine6
      15  ?Subroutine60
       7  ?Subroutine61
      20  ?Subroutine62
      11  ?Subroutine63
       4  ?Subroutine64
       6  ?Subroutine65
       9  ?Subroutine66
       7  ?Subroutine67
       7  ?Subroutine68
      12  ?Subroutine69
       5  ?Subroutine7
       4  ?Subroutine70
      10  ?Subroutine71
      11  ?Subroutine72
      13  ?Subroutine8
       5  ?Subroutine9
       2  zclGenCBs
       1  zclGenPluginRegisted
       2  zclGenSceneTable
     165  zclGeneral_AddGroup
       6  zclGeneral_AddGroup::?relay
     125  zclGeneral_AddScene
       6  zclGeneral_AddScene::?relay
      25  zclGeneral_CountAllScenes
       6  zclGeneral_CountAllScenes::?relay
      35  zclGeneral_CountScenes
       6  zclGeneral_CountScenes::?relay
      78  zclGeneral_FindAllScenesForGroup
       6  zclGeneral_FindAllScenesForGroup::?relay
      73  zclGeneral_FindScene
       6  zclGeneral_FindScene::?relay
     239  zclGeneral_HdlInSpecificCommands
       6  zclGeneral_HdlInSpecificCommands::?relay
      29  zclGeneral_HdlIncoming
       6  zclGeneral_HdlIncoming::?relay
     486  zclGeneral_ProcessInGroupsClient
       6  zclGeneral_ProcessInGroupsClient::?relay
     770  zclGeneral_ProcessInGroupsServer
       6  zclGeneral_ProcessInGroupsServer::?relay
     395  zclGeneral_ProcessInIdentity
       6  zclGeneral_ProcessInIdentity::?relay
     517  zclGeneral_ProcessInScenesClient
       6  zclGeneral_ProcessInScenesClient::?relay
    1619  zclGeneral_ProcessInScenesServer
       6  zclGeneral_ProcessInScenesServer::?relay
      60  zclGeneral_ReadSceneCountCB
       6  zclGeneral_ReadSceneCountCB::?relay
     147  zclGeneral_RegisterCmdCallbacks
       6  zclGeneral_RegisterCmdCallbacks::?relay
     118  zclGeneral_RemoveAllScenes
       6  zclGeneral_RemoveAllScenes::?relay
     117  zclGeneral_RemoveScene
       6  zclGeneral_RemoveScene::?relay
     219  zclGeneral_ScenesInit
       6  zclGeneral_ScenesInit::?relay
      10  zclGeneral_ScenesSave
       6  zclGeneral_ScenesSave::?relay
     205  zclGeneral_ScenesWriteNV
       6  zclGeneral_ScenesWriteNV::?relay
     217  zclGeneral_SendAddGroupRequest
       6  zclGeneral_SendAddGroupRequest::?relay
     305  zclGeneral_SendAddSceneRequest
       6  zclGeneral_SendAddSceneRequest::?relay
     254  zclGeneral_SendGroupGetMembershipRequest
       6  zclGeneral_SendGroupGetMembershipRequest::?relay
     104  zclGeneral_SendGroupRequest
       6  zclGeneral_SendGroupRequest::?relay
     115  zclGeneral_SendGroupResponse
       6  zclGeneral_SendGroupResponse::?relay
     264  zclGeneral_SendGroupViewResponse
       6  zclGeneral_SendGroupViewResponse::?relay
      86  zclGeneral_SendIdentify
       6  zclGeneral_SendIdentify::?relay
     106  zclGeneral_SendIdentifyEZModeInvoke
       6  zclGeneral_SendIdentifyEZModeInvoke::?relay
      83  zclGeneral_SendIdentifyQueryResponse
       6  zclGeneral_SendIdentifyQueryResponse::?relay
     103  zclGeneral_SendIdentifyUpdateCommState
       6  zclGeneral_SendIdentifyUpdateCommState::?relay
     244  zclGeneral_SendSceneGetMembershipResponse
       6  zclGeneral_SendSceneGetMembershipResponse::?relay
     129  zclGeneral_SendSceneRequest
       6  zclGeneral_SendSceneRequest::?relay
     160  zclGeneral_SendSceneResponse
       6  zclGeneral_SendSceneResponse::?relay
     395  zclGeneral_SendSceneViewRsp
       6  zclGeneral_SendSceneViewRsp::?relay

 
 8 773 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
     5 bytes in segment XDATA_Z
 
 8 977 bytes of CODE  memory
     5 bytes of XDATA memory

Errors: none
Warnings: none
