///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Aug/2016  23:48:58
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
//        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zha_project.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zha_project

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zha_project_BasicResetCB::?relay`,0203H
        FUNCTION `??zha_project_HandleKeys::?relay`,0203H
        FUNCTION `??zha_project_IdentifyCB::?relay`,0203H
        FUNCTION `??zha_project_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zha_project_Init::?relay`
        FUNCTION `??zha_project_Init::?relay`,0203H
        FUNCTION `??zha_project_OnOffCB::?relay`,0203H
        FUNCTION `??zha_project_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??zha_project_event_loop::?relay`
        FUNCTION `??zha_project_event_loop::?relay`,0203H
        PUBWEAK __Constant_12c
        PUBWEAK __Constant_1f4
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_64
        PUBLIC ep
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC zclZHAtest_ActiveEP
        PUBLIC zclZHAtest_DstAddr
        PUBLIC zclZHAtest_epDesc
        PUBLIC zha_projectSeqNum
        FUNCTION zha_project_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zha_project_DstAddr
        FUNCTION zha_project_HandleKeys,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zha_project_IdentifyCB,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zha_project_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zha_project_Init
        FUNCTION zha_project_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zha_project_NwkState
        FUNCTION zha_project_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zha_project_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 83, STACK
        PUBLIC zha_project_TaskID
        PUBLIC zha_project_event_loop
        FUNCTION zha_project_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_ParseMgmtBindRsp SYMBOL "ZDO_ParseMgmtBindRsp"
`??ZDO_ParseMgmtBindRsp::?relay` SYMBOL "?relay", ZDO_ParseMgmtBindRsp
ZDO_ParseSimpleDescRsp SYMBOL "ZDO_ParseSimpleDescRsp"
`??ZDO_ParseSimpleDescRsp::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 48>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 48>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
`??zcl_ProcessMessageMSG::?relay` SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_SendRead        SYMBOL "zcl_SendRead"
`??zcl_SendRead::?relay` SYMBOL "?relay", zcl_SendRead
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zha_project_Init    SYMBOL "zha_project_Init"
`??zha_project_Init::?relay` SYMBOL "?relay", zha_project_Init
zha_project_event_loop SYMBOL "zha_project_event_loop"
`??zha_project_event_loop::?relay` SYMBOL "?relay", zha_project_event_loop

        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_ParseMgmtBindRsp::?relay`
        FUNCTION `??ZDO_ParseMgmtBindRsp::?relay`,00H
        EXTERN `??ZDO_ParseSimpleDescRsp::?relay`
        FUNCTION `??ZDO_ParseSimpleDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_ProcessMessageMSG::?relay`
        FUNCTION `??zcl_ProcessMessageMSG::?relay`,00H
        EXTERN `??zcl_SendRead::?relay`
        FUNCTION `??zcl_SendRead::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseMgmtBindRsp
        FUNCTION ZDO_ParseMgmtBindRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescRsp
        FUNCTION ZDO_ParseSimpleDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendRead
        FUNCTION zcl_SendRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zha_project_Attrs
        EXTERN zha_project_IdentifyTime
        EXTERN zha_project_NumAttributes
        EXTERN zha_project_OnOff
        EXTERN zha_project_SimpleDesc

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    1 /**************************************************************************************************
//    2   Filename:       zha_project.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "ZDObject.h"
//   77 #include "ZDProfile.h"
//   78 #include "zcl.h"
//   79 #include "zcl_general.h"
//   80 #include "zcl_ha.h"
//   81 #include "zcl_ss.h"
//   82 #include "zcl_ezmode.h"
//   83 #include "zcl_diagnostic.h"
//   84 
//   85 #include "zha_project.h"
//   86 
//   87 #include "onboard.h"
//   88 
//   89 /* HAL */
//   90 #include "hal_lcd.h"
//   91 #include "hal_led.h"
//   92 #include "hal_key.h"
//   93 
//   94 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   95       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   96 #include "zgp_translationtable.h"
//   97   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   98     #define ZGP_AUTO_TT
//   99   #endif
//  100 #endif
//  101 
//  102 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  103 #include "math.h"
//  104 #include "hal_timer.h"
//  105 #endif
//  106 
//  107 #include "NLMEDE.h"
//  108 
//  109 /*********************************************************************
//  110  * MACROS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * CONSTANTS
//  115  */
//  116 #if (defined HAL_BOARD_ZLIGHT)
//  117 #define LEVEL_MAX                 0xFE
//  118 #define LEVEL_MIN                 0x0
//  119 #define GAMMA_VALUE               2
//  120 #define PWM_FULL_DUTY_CYCLE       1000
//  121 #elif (defined HAL_PWM)
//  122 #define LEVEL_MAX                 0xFE
//  123 #define LEVEL_MIN                 0x0
//  124 #define GAMMA_VALUE               2
//  125 #define PWM_FULL_DUTY_CYCLE       100
//  126 #endif
//  127 
//  128 /*********************************************************************
//  129  * TYPEDEFS
//  130  */
//  131 
//  132 /*********************************************************************
//  133  * GLOBAL VARIABLES
//  134  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 byte zha_project_TaskID;
zha_project_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 zha_projectSeqNum;
zha_projectSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  137 ZDO_ActiveEndpointRsp_t   *zclZHAtest_ActiveEP;
zclZHAtest_ActiveEP:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 endPointDesc_t zclZHAtest_epDesc;
zclZHAtest_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  139 afAddrType_t zclZHAtest_DstAddr;
zclZHAtest_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 static zAddrType_t simpleDescReqAddr;
simpleDescReqAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 ep[5];
ep:
        DS 5
        REQUIRE __INIT_XDATA_Z
//  142 
//  143 /*********************************************************************
//  144  * GLOBAL FUNCTIONS
//  145  */
//  146 
//  147 /*********************************************************************
//  148  * LOCAL VARIABLES
//  149  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 afAddrType_t zha_project_DstAddr;
zha_project_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  151 
//  152 #ifdef ZCL_EZMODE
//  153 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  154 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  155 
//  156 
//  157 // register EZ-Mode with task information (timeout events, callback, etc...)
//  158 //static const zclEZMode_RegisterData_t zha_project_RegisterEZModeData =
//  159 //{
//  160 //  &zha_project_TaskID,
//  161 //  SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  162 //  SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  163 //  &zha_projectSeqNum,
//  164 //  zha_project_EZModeCB
//  165 //};
//  166 
//  167 #else
//  168 uint16 bindingInClusters[] =
//  169 {
//  170   ZCL_CLUSTER_ID_GEN_ON_OFF
//  171 #ifdef ZCL_LEVEL_CTRL
//  172   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  173 #endif
//  174 };
//  175 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  176 
//  177 #endif  // ZCL_EZMODE
//  178 
//  179 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  181 {
//  182   SAMPLELIGHT_ENDPOINT,
//  183   &zha_project_TaskID,
//  184   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  185   (afNetworkLatencyReq_t)0            // No Network Latency req
//  186 };
//  187 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  188 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  189 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  190 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  191 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  192 devStates_t zha_project_NwkState = DEV_INIT;
zha_project_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zha_project_NwkState>`
        REQUIRE __INIT_XDATA_I
//  193 
//  194 #if ZCL_LEVEL_CTRL
//  195 uint8 zha_project_WithOnOff;       // set to TRUE if state machine should set light on/off
//  196 uint8 zha_project_NewLevel;        // new level when done moving
//  197 bool  zha_project_NewLevelUp;      // is direction to new level up or down?
//  198 int32 zha_project_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  199 int32 zha_project_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  200 uint8 zha_project_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  201 #endif
//  202 
//  203 /*********************************************************************
//  204  * LOCAL FUNCTIONS
//  205  */
//  206 
//  207 
//  208 
//  209 static void zha_project_HandleKeys( byte shift, byte keys );
//  210 static void zha_project_BasicResetCB( void );
//  211 static void zha_project_IdentifyCB( zclIdentify_t *pCmd );
//  212 static void zha_project_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  213 static void zha_project_OnOffCB( uint8 cmd );
//  214 #ifdef ZCL_LEVEL_CTRL
//  215 static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  216 static void zha_project_LevelControlMoveCB( zclLCMove_t *pCmd );
//  217 static void zha_project_LevelControlStepCB( zclLCStep_t *pCmd );
//  218 static void zha_project_LevelControlStopCB( void );
//  219 static void zha_project_DefaultMove( void );
//  220 static uint32 zha_project_TimeRateHelper( uint8 newLevel );
//  221 static uint16 zha_project_GetTime ( uint8 level, uint16 time );
//  222 static void zha_project_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  223 static void zha_project_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  224 static void zha_project_AdjustLightLevel( void );
//  225 #endif
//  226 
//  227 // app display functions
//  228 static void zha_project_DisplayLight( void );
//  229 
//  230 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  231 void zha_project_UpdateLampLevel( uint8 level );
//  232 #endif
//  233 
//  234 // Functions to process ZCL Foundation incoming Command/Response messages
//  235 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  236 #ifdef ZCL_READ
//  237 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  238 #endif
//  239 #ifdef ZCL_WRITE
//  240 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  241 #endif
//  242 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  243 #ifdef ZCL_DISCOVER
//  244 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  245 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  246 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  247 #endif
//  248 
//  249 /*********************************************************************
//  250  * STATUS STRINGS
//  251  */
//  252 
//  253 
//  254 /*********************************************************************
//  255  * ZCL General Profile Callback table
//  256  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  257 static zclGeneral_AppCallbacks_t zha_project_CmdCallbacks =
zha_project_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zha_project_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  258 {
//  259   zha_project_BasicResetCB,            // Basic Cluster Reset command
//  260   zha_project_IdentifyCB,              // Identify command
//  261 #ifdef ZCL_EZMODE
//  262   NULL,                                   // Identify EZ-Mode Invoke command
//  263   NULL,                                   // Identify Update Commission State command
//  264 #endif
//  265   NULL,                                   // Identify Trigger Effect command
//  266   zha_project_IdentifyQueryRspCB,      // Identify Query Response command
//  267   zha_project_OnOffCB,                 // On/Off cluster commands
//  268   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  269   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  270   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  271 #ifdef ZCL_LEVEL_CTRL
//  272   zha_project_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  273   zha_project_LevelControlMoveCB,        // Level Control Move command
//  274   zha_project_LevelControlStepCB,        // Level Control Step command
//  275   zha_project_LevelControlStopCB,        // Level Control Stop command
//  276 #endif
//  277 #ifdef ZCL_GROUPS
//  278   NULL,                                   // Group Response commands
//  279 #endif
//  280 #ifdef ZCL_SCENES
//  281   NULL,                                  // Scene Store Request command
//  282   NULL,                                  // Scene Recall Request command
//  283   NULL,                                  // Scene Response command
//  284 #endif
//  285 #ifdef ZCL_ALARMS
//  286   NULL,                                  // Alarm (Response) commands
//  287 #endif
//  288 #ifdef SE_UK_EXT
//  289   NULL,                                  // Get Event Log command
//  290   NULL,                                  // Publish Event Log command
//  291 #endif
//  292   NULL,                                  // RSSI Location command
//  293   NULL                                   // RSSI Location Response command
//  294 };
//  295 
//  296 /*********************************************************************
//  297  * @fn          zha_project_Init
//  298  *
//  299  * @brief       Initialization function for the zclGeneral layer.
//  300  *
//  301  * @param       none
//  302  *
//  303  * @return      none
//  304  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 void zha_project_Init( byte task_id )
zha_project_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zha_project_Init
        CODE
//  306 {
        FUNCALL zha_project_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  307   zha_project_TaskID = task_id;
        MOV     DPTR,#zha_project_TaskID
        MOVX    @DPTR,A
//  308 
//  309   // Set destination address to indirect
//  310   zha_project_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zha_project_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  311   zha_project_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  312   zha_project_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zha_project_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  313 
//  314   // This app is part of the Home Automation Profile
//  315   zclHA_Init( &zha_project_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zha_project_SimpleDesc & 0xff
        MOV     R3,#(zha_project_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  316 
//  317   // Register the ZCL General Cluster Library callback functions
//  318   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zha_project_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zha_project_CmdCallbacks & 0xff
        MOV     R3,#(zha_project_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  319 
//  320   // Register the application's attribute list
//  321   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zha_project_NumAttributes, zha_project_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zha_project_Attrs & 0xff
        MOV     R5,#(zha_project_Attrs >> 8) & 0xff
        MOV     DPTR,#zha_project_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  322 
//  323   // Register the Application to receive the unprocessed Foundation command/response messages
//  324   zcl_registerForMsg( zha_project_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  325 
//  326 #ifdef ZCL_DISCOVER
//  327   // Register the application's command list
//  328   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zha_project_Cmds );
//  329 #endif
//  330 
//  331   // Register for all key events - This app will handle all key events
//  332   RegisterForKeys( zha_project_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  333 
//  334   // Register for a test endpoint
//  335   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  336 
//  337 #ifdef ZCL_EZMODE
//  338   // Register EZ-Mode
//  339   //zcl_RegisterEZMode( &zha_project_RegisterEZModeData );
//  340 
//  341   // Register with the ZDO to receive Match Descriptor Responses
//  342     ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  343     ZDO_RegisterForZDOMsg( task_id, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  344     ZDO_RegisterForZDOMsg( task_id, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  345     ZDO_RegisterForZDOMsg( task_id, Active_EP_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x5
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  346     ZDO_RegisterForZDOMsg( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x4
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  347     ZDO_RegisterForZDOMsg( task_id, Device_annce );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x13
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  348 #endif
//  349 
//  350 
//  351 #ifdef ZCL_DIAGNOSTIC
//  352   // Register the application's callback function to read/write attribute data.
//  353   // This is only required when the attribute data format is unknown to ZCL.
//  354   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  355 
//  356   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  357   {
//  358     // Here the user could start the timer to save Diagnostics to NV
//  359   }
//  360 #endif
//  361 
//  362 #ifdef LCD_SUPPORTED
//  363   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  364 #endif  // LCD_SUPPORTED
//  365 
//  366 #ifdef ZGP_AUTO_TT
//  367   zgpTranslationTable_RegisterEP ( &zha_project_SimpleDesc );
//  368 #endif
//  369 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  370 
//  371 /*********************************************************************
//  372  * @fn          zclSample_event_loop
//  373  *
//  374  * @brief       Event Loop Processor for zclGeneral.
//  375  *
//  376  * @param       none
//  377  *
//  378  * @return      none
//  379  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  380 uint16 zha_project_event_loop( uint8 task_id, uint16 events )
zha_project_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zha_project_event_loop
        CODE
//  381 {
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 53
        MOV     A,#-0x35
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  382   afIncomingMSGPacket_t *MSGpkt;
//  383 
//  384   (void)task_id;  // Intentionally unreferenced parameter
//  385 
//  386     if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??zha_project_event_loop_0 & 0xFFFF
//  387     {
//  388         while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zha_project_TaskID )) )
//  389         {
//  390             switch ( MSGpkt->hdr.event )
//  391             {
//  392                 #ifdef ZCL_EZMODE
//  393                 case ZDO_CB_MSG:
//  394                     zha_project_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  395                     break;
//  396                 #endif
//  397                 case ZCL_INCOMING_MSG:
//  398                 // Incoming ZCL Foundation command/response messages
//  399                     zha_project_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  400                     break;
//  401 
//  402                 case KEY_CHANGE:
//  403                     zha_project_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  404                     break;
//  405                 case AF_INCOMING_MSG_CMD:
//  406                     zcl_ProcessMessageMSG(MSGpkt);
//  407 
//  408                     //ZHAtest_MessageMSGCB( MSGpkt );
//  409                     break;    
//  410                 
//  411 
//  412                 case ZDO_STATE_CHANGE:
//  413                     zha_project_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  414 
//  415                     // now on the network
//  416                     if ( (zha_project_NwkState == DEV_ZB_COORD) ||
//  417                     (zha_project_NwkState == DEV_ROUTER)   ||
//  418                     (zha_project_NwkState == DEV_END_DEVICE) )
//  419                     {
//  420                     giLightScreenMode = LIGHT_MAINMODE;
//  421                     //zha_project_LcdDisplayUpdate();
//  422                     #ifdef ZCL_EZMODE
//  423                     zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  424                     #endif // ZCL_EZMODE
//  425                     }
//  426                 break;
//  427 
//  428                 default:
//  429                     break;
//  430             }
//  431 
//  432           // Release the memory
//  433           osal_msg_deallocate( (uint8 *)MSGpkt );
//  434         }
//  435         return (events ^ SYS_EVENT_MSG);
//  436     }
//  437     if ( events & ZHA_ATTRIBUTE_REQ_EVT )
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??zha_project_event_loop_1
//  438     {
//  439         uint8 i=0;
//  440         afAddrType_t  dscReqAddr;
//  441         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  442         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  443         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  444         zclReadCmd_t BasicAttrsList;
//  445         BasicAttrsList.numAttr = 5;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        MOVX    @DPTR,A
//  446         BasicAttrsList.attrID[0] = ATTRID_BASIC_ZCL_VERSION;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  447         BasicAttrsList.attrID[1] = ATTRID_BASIC_HW_VERSION;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        LCALL   ?Subroutine10 & 0xFFFF
//  448         BasicAttrsList.attrID[2] = ATTRID_BASIC_MODEL_ID;
??CrossCallReturnLabel_17:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        LCALL   ?Subroutine10 & 0xFFFF
//  449         BasicAttrsList.attrID[3] = ATTRID_BASIC_MANUFACTURER_NAME;
??CrossCallReturnLabel_18:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        LCALL   ?Subroutine10 & 0xFFFF
//  450         //BasicAttrsList.attrID[5] = ATTRID_BASIC_DATE_CODE;
//  451         BasicAttrsList.attrID[4] = ATTRID_BASIC_POWER_SOURCE;
??CrossCallReturnLabel_19:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        LCALL   ?Subroutine4 & 0xFFFF
//  452         zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
//  453                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
//  454         
//  455         //return ( events ^ ZHA_ATTRIBUTE_REQ_EVT );
//  456     }  
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  457   
//  458     if(events & ZHA_ATTRIBUTE_POWER_EVT)
??zha_project_event_loop_1:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??zha_project_event_loop_2
//  459     {
//  460         afAddrType_t  dscReqAddr;
//  461         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  462         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  463         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  464         zclReadCmd_t BasicAttrsList;
//  465         BasicAttrsList.numAttr = 2;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  466         BasicAttrsList.attrID[0] = ATTRID_POWER_CFG_BATTERY_VOLTAGE;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x20
        LCALL   ?Subroutine10 & 0xFFFF
//  467         BasicAttrsList.attrID[1] = 0x0021;
??CrossCallReturnLabel_20:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x21
        LCALL   ?Subroutine4 & 0xFFFF
//  468         zcl_SendRead( 1, &dscReqAddr,
//  469                     ZCL_CLUSTER_ID_GEN_POWER_CFG, &BasicAttrsList,
//  470                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
//  471         //return ( events ^ ZHA_ATTRIBUTE_POWER_EVT );    
//  472     }
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  473     if ( events & ZONE_TYPE_EVT )
??zha_project_event_loop_2:
        MOV     A,R6
        ANL     A,#0x20
        JNZ     $+5
        LJMP    ??zha_project_event_loop_3 & 0xFFFF
//  474     {
//  475         afAddrType_t  dscReqAddr;
//  476         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
//  477         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  478         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  479         zclReadCmd_t BasicAttrsList;
//  480         BasicAttrsList.numAttr = 1;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  481         BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine4 & 0xFFFF
//  482         zcl_SendRead( 1, &dscReqAddr,
//  483                     ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
//  484                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x0
        MOV     R5,#0x5
        MOV     A,R5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  485         return ( events ^ ZONE_TYPE_EVT );
        MOV     A,R6
        XRL     A,#0x20
        MOV     R2,A
        MOV     A,R7
        LJMP    ??zha_project_event_loop_4 & 0xFFFF
//  486     } 
??zha_project_event_loop_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zha_project_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zha_project_event_loop_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zha_project_event_loop_6
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zha_project_event_loop_7
??zha_project_event_loop_6:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,A
        MOV     R3,A
        MOV     R1,#0x2
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
??zha_project_event_loop_7:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zha_project_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zha_project_event_loop_8 & 0xFFFF
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JNZ     $+5
        LJMP    ??zha_project_event_loop_9 & 0xFFFF
        ADD     A,#-0x1a
        JZ      ??zha_project_event_loop_10
        ADD     A,#0x74
        JNZ     $+5
        LJMP    ??zha_project_event_loop_11 & 0xFFFF
        ADD     A,#-0x11
        JZ      ??zha_project_event_loop_5
        ADD     A,#-0x2
        JNZ     ??zha_project_event_loop_7
        ; Setup parameters for call to function zha_project_ProcessZDOMsgs
        LCALL   `??zha_project_ProcessZDOMsgs::?relay`; Banked call to: zha_project_ProcessZDOMsgs
        SJMP    ??zha_project_event_loop_7
??zha_project_event_loop_10:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zha_project_event_loop_12
        ADD     A,#-0x3
        JNZ     ??zha_project_event_loop_13
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
??zha_project_event_loop_14:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zha_project_event_loop_13
        INC     R0
        SJMP    ??zha_project_event_loop_14
??zha_project_event_loop_12:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_event_loop>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_event_loop_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_event_loop_15
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_event_loop_16
        CODE
??zha_project_event_loop_16:
        MOV     R0,#0x0
??zha_project_event_loop_17:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zha_project_event_loop_13
        INC     R0
        SJMP    ??zha_project_event_loop_17
??zha_project_event_loop_15:
        MOV     R0,#0x0
        SJMP    ??zha_project_event_loop_18
??zha_project_event_loop_19:
        INC     R0
??zha_project_event_loop_18:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zha_project_event_loop_19
??zha_project_event_loop_13:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     $+5
        LJMP    ??zha_project_event_loop_7 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LJMP    ??zha_project_event_loop_7 & 0xFFFF
??zha_project_event_loop_11:
        ; Setup parameters for call to function zha_project_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zha_project_HandleKeys::?relay`; Banked call to: zha_project_HandleKeys
        LJMP    ??zha_project_event_loop_7 & 0xFFFF
??zha_project_event_loop_9:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        LCALL   `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
        LJMP    ??zha_project_event_loop_7 & 0xFFFF
??zha_project_event_loop_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??zha_project_event_loop_4 & 0xFFFF
//  487     if ( events & ZHA_ACTIVE_EP_EVT )
??zha_project_event_loop_3:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zha_project_event_loop_20
//  488     {
//  489         ZDP_ActiveEPReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr, 0);
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x5
        LCALL   ?Subroutine6 & 0xFFFF
//  490         //return ( events ^ ZHA_ACTIVE_EP_EVT );
//  491     }  
??CrossCallReturnLabel_9:
        LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  492   
//  493   // event to get simple descriptor of the newly joined device
//  494     if ( events & SIMPLE_DESC_QUERY_EVT )
??zha_project_event_loop_20:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??zha_project_event_loop_21
//  495     {
//  496         uint8 i;
//  497         for(i=0;i<=zclZHAtest_ActiveEP->cnt;i++)
        MOV     ?V0,#0x0
        SJMP    ??zha_project_event_loop_22
//  498         {
//  499             if(ep[i]!=0)
??zha_project_event_loop_23:
        MOV     R0,?V0
        MOV     A,#ep & 0xff
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,#(ep >> 8) & 0xff
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        JZ      ??zha_project_event_loop_24
//  500             {
//  501                   ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,
//  502                             ep[i], 0);
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V1,#0x0
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        LCALL   ?Subroutine6 & 0xFFFF
//  503             }
//  504         }
??CrossCallReturnLabel_10:
        LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
??zha_project_event_loop_24:
        INC     ?V0
??zha_project_event_loop_22:
        MOV     DPTR,#zclZHAtest_ActiveEP
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0
        JNC     ??zha_project_event_loop_23
//  505         osal_memset(ep,0,sizeof(ep));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  506         //return ( events ^ SIMPLE_DESC_QUERY_EVT );
//  507     }
//  508 
//  509   // handle processing of timeout event triggered by request fast polling command
//  510 
//  511     if ( events & SIMPLE_DESC_EVT )
??zha_project_event_loop_21:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??zha_project_event_loop_25
//  512     {
//  513         ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,1, 0);
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x1
        LCALL   ?Subroutine6 & 0xFFFF
//  514         //return ( events ^ SIMPLE_DESC_QUERY_EVT );
//  515     }
??CrossCallReturnLabel_11:
        LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  516     if ( events & RESET_EVT )
??zha_project_event_loop_25:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??zha_project_event_loop_26
//  517     {
//  518         Onboard_soft_reset();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  519         return ( events ^ RESET_EVT );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x2
??zha_project_event_loop_4:
        MOV     R3,A
        SJMP    ??zha_project_event_loop_27
//  520     }  
//  521  
//  522   // Discard unknown events
//  523   return 0;
??zha_project_event_loop_26:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zha_project_event_loop_27:
        MOV     A,#0x35
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  524 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zha_project_event_loop
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zha_project_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPTR,#simpleDescReqAddr
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#simpleDescReqAddr & 0xff
        MOV     R3,#(simpleDescReqAddr >> 8) & 0xff
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zha_project_event_loop
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zha_project_event_loop
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function zcl_SendRead
        ; Setup parameters for call to function zcl_SendRead
        ; Setup parameters for call to function zcl_SendRead
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zha_project_event_loop
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zha_project_event_loop
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zha_project_event_loop
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zha_project_event_loop
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_6
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-4
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zha_project_event_loop
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_7
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zha_project_event_loop
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_8
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zha_project_event_loop
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zha_project_event_loop
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPTR,#simpleDescReqAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x9
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  525 
//  526 
//  527 /*********************************************************************
//  528  * @fn      zha_project_HandleKeys
//  529  *
//  530  * @brief   Handles all key events for this device.
//  531  *
//  532  * @param   shift - true if in shift/alt.
//  533  * @param   keys - bit field for key events. Valid entries:
//  534  *                 HAL_KEY_SW_5
//  535  *                 HAL_KEY_SW_4
//  536  *                 HAL_KEY_SW_2
//  537  *                 HAL_KEY_SW_1
//  538  *
//  539  * @return  none
//  540  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  541 static void zha_project_HandleKeys( byte shift, byte keys )
zha_project_HandleKeys:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function zha_project_HandleKeys
        CODE
//  542 {
        FUNCALL zha_project_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, zha_project_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  543   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zha_project_HandleKeys_0
//  544   {
//  545     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  546 
//  547     // toggle local light immediately
//  548     zha_project_OnOff = zha_project_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zha_project_OnOff
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_1
        CLR     A
        SJMP    ??zha_project_HandleKeys_2
??zha_project_HandleKeys_1:
        MOV     A,#0x1
??zha_project_HandleKeys_2:
        MOVX    @DPTR,A
//  549 #ifdef ZCL_LEVEL_CTRL
//  550     zha_project_LevelCurrentLevel = zha_project_OnOff ? zha_project_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  551 #endif
//  552   }
//  553 
//  554   if ( keys & HAL_KEY_SW_2 )
??zha_project_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zha_project_HandleKeys_3
//  555   {
//  556 #if (defined HAL_BOARD_ZLIGHT)
//  557 
//  558     zha_project_BasicResetCB();
//  559 
//  560 #else
//  561 
//  562     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  563 
//  564 #ifdef ZCL_EZMODE
//  565     {
//  566       // Invoke EZ-Mode
//  567       zclEZMode_InvokeData_t ezModeData;
//  568 
//  569       // Invoke EZ-Mode
//  570       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     A
        MOVX    @DPTR,A
//  571       if ( (zha_project_NwkState == DEV_ZB_COORD) ||
//  572           (zha_project_NwkState == DEV_ROUTER)   ||
//  573             (zha_project_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#zha_project_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zha_project_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zha_project_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zha_project_HandleKeys_5
//  574       {
//  575         ezModeData.onNetwork = TRUE;      // node is already on the network
??zha_project_HandleKeys_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zha_project_HandleKeys_6
//  576       }
//  577       else
//  578       {
//  579         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zha_project_HandleKeys_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zha_project_HandleKeys_6:
        MOVX    @DPTR,A
//  580       }
//  581       ezModeData.initiator = FALSE;          // OnOffLight is a target
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  582       ezModeData.numActiveOutClusters = 0;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  583       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  584       ezModeData.numActiveInClusters = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  585       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  586       zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  587     }
//  588 
//  589 #else // NOT EZ-Mode
//  590     {
//  591       zAddrType_t dstAddr;
//  592       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  593 
//  594       // Initiate an End Device Bind Request, this bind request will
//  595       // only use a cluster list that is important to binding.
//  596       dstAddr.addrMode = afAddr16Bit;
//  597       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  598       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  599                            SAMPLELIGHT_ENDPOINT,
//  600                            ZCL_HA_PROFILE_ID,
//  601                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  602                            0, NULL,   // No Outgoing clusters to bind
//  603                            TRUE );
//  604     }
//  605 #endif // ZCL_EZMODE
//  606 #endif // HAL_BOARD_ZLIGHT
//  607   }
//  608 
//  609   if ( keys & HAL_KEY_SW_3 )
??zha_project_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zha_project_HandleKeys_7
//  610   {
//  611     NLME_SendNetworkStatus( zha_project_DstAddr.addr.shortAddr,
//  612                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zha_project_DstAddr
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  613   }
//  614 
//  615   if ( keys & HAL_KEY_SW_4 )
??zha_project_HandleKeys_7:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zha_project_HandleKeys_8
//  616   {
//  617     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  618 
//  619     if ( ( zha_project_NwkState == DEV_ZB_COORD ) ||
//  620           ( zha_project_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zha_project_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zha_project_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zha_project_HandleKeys_8
//  621     {
//  622       zAddrType_t tmpAddr;
//  623 
//  624       tmpAddr.addrMode = Addr16Bit;
??zha_project_HandleKeys_9:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  625       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  626 
//  627       // toggle permit join
//  628       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_10
        CLR     A
        SJMP    ??zha_project_HandleKeys_11
??zha_project_HandleKeys_10:
        MOV     A,#-0x1
??zha_project_HandleKeys_11:
        MOVX    @DPTR,A
//  629 
//  630       // Trust Center significance is always true
//  631       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  632     }
//  633   }
//  634 
//  635   // Shift F5 does a Basic Reset (factory defaults)
//  636   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zha_project_HandleKeys_8:
        MOV     A,R6
        JZ      ??zha_project_HandleKeys_12
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_13
//  637   {
//  638     zha_project_BasicResetCB();
        ; Setup parameters for call to function zha_project_BasicResetCB
        LCALL   `??zha_project_BasicResetCB::?relay`; Banked call to: zha_project_BasicResetCB
        SJMP    ??zha_project_HandleKeys_13
//  639   }
//  640   else if ( keys & HAL_KEY_SW_5 )
??zha_project_HandleKeys_12:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_13
//  641   {
//  642     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_14
        CLR     A
        SJMP    ??zha_project_HandleKeys_15
??zha_project_HandleKeys_14:
        MOV     A,#0x1
??zha_project_HandleKeys_15:
        MOVX    @DPTR,A
//  643   }
//  644 
//  645   // update the display, including the light
//  646   //zha_project_LcdDisplayUpdate();
//  647 }
??zha_project_HandleKeys_13:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
//  648 
//  649 
//  650 /*********************************************************************
//  651  * @fn      zha_project_DisplayLight
//  652  *
//  653  * @brief   Displays current state of light on LED and also on main display if supported.
//  654  *
//  655  * @param   none
//  656  *
//  657  * @return  none
//  658  */
//  659 static void zha_project_DisplayLight( void )
//  660 {
//  661   // set the LED1 based on light (on or off)
//  662   if ( zha_project_OnOff == LIGHT_ON )
//  663   {
//  664     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  665   }
//  666   else
//  667   {
//  668     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  669   }
//  670 
//  671 #ifdef LCD_SUPPORTED
//  672   if (giLightScreenMode == LIGHT_MAINMODE)
//  673   {
//  674 #ifdef ZCL_LEVEL_CTRL
//  675     // display current light level
//  676     if ( ( zha_project_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  677          ( zha_project_OnOff == LIGHT_OFF ) )
//  678     {
//  679       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  680     }
//  681     else if ( ( zha_project_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  682               ( zha_project_LevelCurrentLevel == zha_project_LevelOnLevel ) ||
//  683                ( ( zha_project_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  684                  ( zha_project_LevelCurrentLevel == zha_project_LevelLastLevel ) ) )
//  685     {
//  686       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  687     }
//  688     else    // "    LEVEL ###"
//  689     {
//  690       zclHA_uint8toa( zha_project_LevelCurrentLevel, &sLightLevel[10] );
//  691       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  692     }
//  693 #else
//  694     if ( zha_project_OnOff )
//  695     {
//  696       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  697     }
//  698     else
//  699     {
//  700       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  701     }
//  702 #endif // ZCL_LEVEL_CTRL
//  703   }
//  704 #endif // LCD_SUPPORTED
//  705 }
//  706 
//  707 /*********************************************************************
//  708  * @fn      zha_project_BasicResetCB
//  709  *
//  710  * @brief   Callback from the ZCL General Cluster Library
//  711  *          to set all the Basic Cluster attributes to default values.
//  712  *
//  713  * @param   none
//  714  *
//  715  * @return  none
//  716  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  717 static void zha_project_BasicResetCB( void )
zha_project_BasicResetCB:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zha_project_BasicResetCB
        CODE
//  718 {
        FUNCALL zha_project_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  719   NLME_LeaveReq_t leaveReq;
//  720   // Set every field to 0
//  721   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  722 
//  723   // This will enable the device to rejoin the network after reset.
//  724   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  725 
//  726   // Set the NV startup option to force a "new" join.
//  727   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  728 
//  729   // Leave the network, and reset afterwards
//  730   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zha_project_BasicResetCB_0
//  731   {
//  732     // Couldn't send out leave; prepare to reset anyway
//  733     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  734   }
//  735 }
??zha_project_BasicResetCB_0:
        MOV     A,#0x5
          CFI EndBlock cfiBlock25
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 5)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock26
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock27
//  736 
//  737 /*********************************************************************
//  738  * @fn      zha_project_IdentifyCB
//  739  *
//  740  * @brief   Callback from the ZCL General Cluster Library when
//  741  *          it received an Identity Command for this application.
//  742  *
//  743  * @param   srcAddr - source address and endpoint of the response message
//  744  * @param   identifyTime - the number of seconds to identify yourself
//  745  *
//  746  * @return  none
//  747  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  748 static void zha_project_IdentifyCB( zclIdentify_t *pCmd )
zha_project_IdentifyCB:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function zha_project_IdentifyCB
        CODE
//  749 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  750   zha_project_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     DPTR,#zha_project_IdentifyTime
        LCALL   ??Subroutine12_0 & 0xFFFF
//  751 //zha_project_ProcessIdentifyTimeChange();
//  752 }
??CrossCallReturnLabel_23:
        SJMP    ??Subroutine11_0
          CFI EndBlock cfiBlock28
//  753 
//  754 /*********************************************************************
//  755  * @fn      zha_project_IdentifyQueryRspCB
//  756  *
//  757  * @brief   Callback from the ZCL General Cluster Library when
//  758  *          it received an Identity Query Response Command for this application.
//  759  *
//  760  * @param   srcAddr - requestor's address
//  761  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  762  *
//  763  * @return  none
//  764  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  765 static void zha_project_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zha_project_IdentifyQueryRspCB:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function zha_project_IdentifyQueryRspCB
        CODE
//  766 {
        FUNCALL zha_project_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  767   (void)pRsp;
//  768 #ifdef ZCL_EZMODE
//  769   {
//  770     zclEZMode_ActionData_t data;
//  771     data.pIdentifyQueryRsp = pRsp;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  772     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  773   }
//  774 #endif
//  775 }
        MOV     A,#0x2
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock29
//  776 
//  777 /*********************************************************************
//  778  * @fn      zha_project_OnOffCB
//  779  *
//  780  * @brief   Callback from the ZCL General Cluster Library when
//  781  *          it received an On/Off Command for this application.
//  782  *
//  783  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  784  *
//  785  * @return  none
//  786  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  787 static void zha_project_OnOffCB( uint8 cmd )
zha_project_OnOffCB:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function zha_project_OnOffCB
        CODE
//  788 {
        FUNCALL zha_project_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  789   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  790 
//  791   zha_project_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     DPTR,#zha_project_DstAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
//  792 
//  793 
//  794   // Turn on the light
//  795   if ( cmd == COMMAND_ON )
??CrossCallReturnLabel_24:
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zha_project_OnOffCB_0
//  796   {
//  797     zha_project_OnOff = LIGHT_ON;
//  798   }
//  799   // Turn off the light
//  800   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zha_project_OnOffCB_1
//  801   {
//  802     zha_project_OnOff = LIGHT_OFF;
//  803   }
//  804   // Toggle the light
//  805   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zha_project_OnOffCB_2
//  806   {
//  807     if ( zha_project_OnOff == LIGHT_OFF )
        MOV     DPTR,#zha_project_OnOff
        MOVX    A,@DPTR
        JNZ     ??zha_project_OnOffCB_1
//  808     {
//  809       zha_project_OnOff = LIGHT_ON;
??zha_project_OnOffCB_0:
        MOV     DPTR,#zha_project_OnOff
        MOV     A,#0x1
        SJMP    ??zha_project_OnOffCB_3
//  810     }
//  811     else
//  812     {
//  813       zha_project_OnOff = LIGHT_OFF;
??zha_project_OnOffCB_1:
        MOV     DPTR,#zha_project_OnOff
        CLR     A
??zha_project_OnOffCB_3:
        MOVX    @DPTR,A
//  814     }
//  815   }
//  816 
//  817 #if ZCL_LEVEL_CTRL
//  818   zha_project_DefaultMove( );
//  819 #endif
//  820 
//  821   // update the display
//  822   //zha_project_LcdDisplayUpdate( );
//  823 }
??zha_project_OnOffCB_2:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock30
//  824 
//  825 
//  826 /******************************************************************************
//  827  *
//  828  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  829  *
//  830  *****************************************************************************/
//  831 
//  832 /*********************************************************************
//  833  * @fn      zha_project_ProcessIncomingMsg
//  834  *
//  835  * @brief   Process ZCL Foundation incoming message
//  836  *
//  837  * @param   pInMsg - pointer to the received message
//  838  *
//  839  * @return  none
//  840  */
//  841 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
//  842 {
//  843   switch ( pInMsg->zclHdr.commandID )
//  844   {
//  845 #ifdef ZCL_READ
//  846     case ZCL_CMD_READ_RSP:
//  847       zha_project_ProcessInReadRspCmd( pInMsg );
//  848       break;
//  849 #endif
//  850 #ifdef ZCL_WRITE
//  851     case ZCL_CMD_WRITE_RSP:
//  852       zha_project_ProcessInWriteRspCmd( pInMsg );
//  853       break;
//  854 #endif
//  855 #ifdef ZCL_REPORT
//  856     // Attribute Reporting implementation should be added here
//  857     case ZCL_CMD_CONFIG_REPORT:
//  858       // zha_project_ProcessInConfigReportCmd( pInMsg );
//  859       break;
//  860 
//  861     case ZCL_CMD_CONFIG_REPORT_RSP:
//  862       // zha_project_ProcessInConfigReportRspCmd( pInMsg );
//  863       break;
//  864 
//  865     case ZCL_CMD_READ_REPORT_CFG:
//  866       // zha_project_ProcessInReadReportCfgCmd( pInMsg );
//  867       break;
//  868 
//  869     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  870       // zha_project_ProcessInReadReportCfgRspCmd( pInMsg );
//  871       break;
//  872 
//  873     case ZCL_CMD_REPORT:
//  874       // zha_project_ProcessInReportCmd( pInMsg );
//  875       break;
//  876 #endif
//  877     case ZCL_CMD_DEFAULT_RSP:
//  878       zha_project_ProcessInDefaultRspCmd( pInMsg );
//  879       break;
//  880 #ifdef ZCL_DISCOVER
//  881     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  882       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
//  883       break;
//  884 
//  885     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  886       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
//  887       break;
//  888 
//  889     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  890       zha_project_ProcessInDiscAttrsRspCmd( pInMsg );
//  891       break;
//  892 
//  893     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  894       zha_project_ProcessInDiscAttrsExtRspCmd( pInMsg );
//  895       break;
//  896 #endif
//  897     default:
//  898       break;
//  899   }
//  900 
//  901   if ( pInMsg->attrCmd )
//  902     osal_mem_free( pInMsg->attrCmd );
//  903 }
//  904 
//  905 #ifdef ZCL_READ
//  906 /*********************************************************************
//  907  * @fn      zha_project_ProcessInReadRspCmd
//  908  *
//  909  * @brief   Process the "Profile" Read Response Command
//  910  *
//  911  * @param   pInMsg - incoming message to process
//  912  *
//  913  * @return  none
//  914  */
//  915 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  916 {
//  917   zclReadRspCmd_t *readRspCmd;
//  918     uint8 i,k;
//  919     uint8 *j;
//  920     uint16 *p;
//  921     readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd; 
//  922     switch(pInMsg->clusterId)
//  923     {
//  924       case ZCL_CLUSTER_ID_GEN_BASIC:
//  925         {
//  926           for (i = 0; i < readRspCmd->numAttr; i++)
//  927           {
//  928                 zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
//  929                 j=statusRec->data;
//  930                 switch(statusRec->attrID)
//  931                 {
//  932                     case ATTRID_BASIC_POWER_SOURCE:
//  933                         uint8 zclZHAtest_PowerSource=*j;
//  934                         break;
//  935 //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
//  936 //                        zclZHAtest_BatteryVoltage=*j;
//  937 //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_BatteryVoltage);
//  938 //                        break;
//  939                     case ATTRID_BASIC_ZCL_VERSION:
//  940                         break;
//  941                     case ATTRID_BASIC_MODEL_ID:
//  942                         break;
//  943                     case ATTRID_BASIC_MANUFACTURER_NAME:
//  944                         //SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
//  945                         break;
//  946                     case ATTRID_BASIC_HW_VERSION:
//  947                         uint8 zclZHAtest_HWRevision = *j;
//  948                         //SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_HWRevision);
//  949                         break;                        
//  950                     default:
//  951                       break;
//  952                 
//  953                 }
//  954 
//  955           }
//  956         }
//  957         //osal_set_event( zclZHAtest_TaskID,ZHAtest_ATTRIBUTE_POWER_EVT);
//  958         
//  959         break;
//  960         
//  961       case ZCL_CLUSTER_ID_GEN_POWER_CFG:
//  962         {
//  963           for (i = 0; i < readRspCmd->numAttr; i++)
//  964           {
//  965                 zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
//  966                 j=statusRec->data;
//  967                 switch(statusRec->attrID)
//  968                 {
//  969                     case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
//  970                         uint8 zclZHAtest_BatteryVoltage=*j;
//  971                         //SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_BatteryVoltage);
//  972                         break;
//  973                     default:
//  974                       break;
//  975                 
//  976                 }
//  977 
//  978           }
//  979       
//  980         }        
//  981         
//  982         
//  983         //osal_set_event( zclZHAtest_TaskID, ZHAtest_ACTIVE_EP_EVT );
//  984         break;
//  985 //      case ZCL_CLUSTER_ID_GEN_ON_OFF:
//  986 //        {
//  987 //          for (i = 0; i < readRspCmd->numAttr; i++)
//  988 //          {
//  989 //            zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
//  990 //            j=statusRec->data;
//  991 //            switch(statusRec->attrID)
//  992 //            {
//  993 //                case ATTRID_ON_OFF:
//  994 //                    uint16 buf[3];
//  995 //                    osal_memset(buf,0,sizeof(buf));
//  996 //                    zclZHAtest_OnOff=*j;
//  997 //                    NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0]=zclZHAtest_OnOff;
//  998 //                    Return_Message(1);
//  999 //                    buf[0] = zclZHAtest_OnOff;
// 1000 //                    UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1001 //                  break;
// 1002 //                default:
// 1003 //                  break;
// 1004 //            
// 1005 //            }
// 1006 //
// 1007 //          }
// 1008 //      
// 1009 //        }
// 1010 //        break;
// 1011 //        case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
// 1012 //            {
// 1013 //                for (i = 0; i < readRspCmd->numAttr; i++)
// 1014 //                {
// 1015 //                    zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1016 //                    p=(uint16 *)statusRec->data;
// 1017 //                    //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1018 //                    switch(statusRec->attrID)
// 1019 //                    {
// 1020 //                        case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
// 1021 //                            zclZHAtest_Light_Color_Status = *p;
// 1022 //                            uint16 buf[3];
// 1023 //                            osal_memset(buf,0,sizeof(buf));
// 1024 //                            buf[2] = zclZHAtest_Light_Color_Status;
// 1025 //                            UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
// 1026 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0]=zclZHAtest_Light_Color_Status&0x00FF;
// 1027 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[1]=(zclZHAtest_Light_Color_Status&0xFF00)>>8;
// 1028 //                            Return_Message(2);
// 1029 //                        break;
// 1030 //                        case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
// 1031 //                            zclZHAtest_HUE_Status = *p;
// 1032 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0]=zclZHAtest_HUE_Status&0x00FF;
// 1033 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[1]=(zclZHAtest_HUE_Status&0xFF00)>>8;
// 1034 //                            Return_Message(2); 
// 1035 //                          break;
// 1036 //                        case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
// 1037 //                            zclZHAtest_Saturation = *p;
// 1038 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0]=zclZHAtest_Saturation;
// 1039 //                            Return_Message(1);                           
// 1040 //                          break;
// 1041 //                        default:
// 1042 //                        break;
// 1043 //
// 1044 //                    }
// 1045 //
// 1046 //                }
// 1047 //
// 1048 //             }
// 1049 //    
// 1050 //        break;
// 1051 //        case ZCL_CLUSTER_ID_SS_IAS_ZONE:
// 1052 //       {        uint16 supportOD = 0;
// 1053 //                uint8 sensorType = 0;
// 1054 //                for (i = 0; i < readRspCmd->numAttr; i++)
// 1055 //                {
// 1056 //                    zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1057 //                    p=(uint16 *)statusRec->data;
// 1058 //                    //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1059 //                    switch(statusRec->attrID)
// 1060 //                    {
// 1061 //                        case ATTRID_SS_IAS_ZONE_STATUS:
// 1062 //                            zclZHAtest_Alarm_Status = *p;
// 1063 //                            uint16 buf[3];
// 1064 //                            osal_memset(buf,0,sizeof(buf));
// 1065 //                            buf[0] = zclZHAtest_Alarm_Status;
// 1066 //                            UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1067 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0]=zclZHAtest_Alarm_Status&0x00FF;
// 1068 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[1]=(zclZHAtest_Alarm_Status&0xFF00)>>8;
// 1069 //                            //NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0]=zclZHAtest_Alarm_Status;
// 1070 //                            //NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[1]=(zclZHAtest_Light_Color_Status&0xFF00)>>8;
// 1071 //                            Return_Message(2);
// 1072 //                        break;
// 1073 //                        case ATTRID_SS_IAS_ZONE_TYPE:
// 1074 //                            zAddrType_t addr;
// 1075 //                            uint8 address[8];
// 1076 //                            uint8 pValue[Z_EXTADDR_LEN];
// 1077 //                            addr.addrMode = Addr64Bit;
// 1078 //                            osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
// 1079 //                            //osal_memcpy(pValue,addr.addr.extAddr,8);
// 1080 //                            osal_memcpy(addr.addr.extAddr,pValue,8);
// 1081 //                            //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
// 1082 //                            APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
// 1083 //                            ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
// 1084 //                                                   1,
// 1085 //                                                   0x0020,
// 1086 //                                                   &addr,  pInMsg->endPoint,
// 1087 //                                                    FALSE );
// 1088 //                            zclZHAtest_Smoke_Type = *p;
// 1089 //                            //uint16 buf[3];
// 1090 //                            osal_memset(buf,0,sizeof(buf));
// 1091 //                            buf[1] = zclZHAtest_Smoke_Type;
// 1092 //                            UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
// 1093 //                            //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zclZHAtest_Smoke_Type,0,false,0);
// 1094 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0]=zclZHAtest_Smoke_Type&0x00FF;
// 1095 //                            NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[1]=(zclZHAtest_Smoke_Type&0xFF00)>>8;                                
// 1096 //                            //NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[0+i]=zclZHAtest_Smoke_Type;
// 1097 //                            //NWK_command.NWK_General_Frame.NWK_AppDev_Frame.NWKCA_Data[1]=(zclZHAtest_Light_Color_Status&0xFF00)>>8;
// 1098 //                            //Return_Message(2+i);  
// 1099 //                            SetTempDeviceOD(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_Smoke_Type);
// 1100 //                         break;
// 1101 //                      
// 1102 //                        default:
// 1103 //                        break;
// 1104 //
// 1105 //                    }
// 1106 //
// 1107 //                }
// 1108 //
// 1109 //             }
// 1110 //      
// 1111 //      break;
// 1112 //      case ZCL_CLUSTER_ID_SS_IAS_WD:
// 1113 //            {
// 1114 //                for (i = 0; i < readRspCmd->numAttr; i++)
// 1115 //                {
// 1116 //                    zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1117 //                    j=statusRec->data;
// 1118 //                    switch(statusRec->attrID)
// 1119 //                    {
// 1120 //                        case COMMAND_SS_IAS_WD_START_WARNING:
// 1121 //                            //zclZHAtest_Warning = *j;
// 1122 //                            uint16 buf[3];
// 1123 //                            osal_memset(buf,0,sizeof(buf));
// 1124 //                            //buf[0] = zclZHAtest_Warning;
// 1125 //                            //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1126 //                            break;
// 1127 //                        case COMMAND_SS_IAS_WD_SQUAWK:
// 1128 //                            //zclZHAtest_WD_SQUAWK = *j;
// 1129 //                            //uint16 buf[3];
// 1130 //                            osal_memset(buf,0,sizeof(buf));
// 1131 //                           // buf[1] = zclZHAtest_WD_SQUAWK;
// 1132 //                            //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
// 1133 //                            break;
// 1134 //
// 1135 //                        default:
// 1136 //                            break;
// 1137 //
// 1138 //                    }
// 1139 //
// 1140 //                }
// 1141 //
// 1142 //             }        
// 1143 //        
// 1144 //        break;
// 1145 //      
// 1146 //      case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
// 1147 //       {
// 1148 //                for (i = 0; i < readRspCmd->numAttr; i++)
// 1149 //                {
// 1150 //                    zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1151 //                    p=(uint16 *)statusRec->data;
// 1152 //                    switch(statusRec->attrID)
// 1153 //                    {
// 1154 //                        case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1155 //                            //zclZHAtest_Temperature_Value = *p;
// 1156 //                            uint16 buf[3];
// 1157 //                            osal_memset(buf,0,sizeof(buf));
// 1158 //                            //buf[0] = zclZHAtest_Temperature_Value;
// 1159 //                            //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1160 //                            
// 1161 //                        break;
// 1162 //                        default:
// 1163 //                        break;
// 1164 //
// 1165 //                    }
// 1166 //
// 1167 //                }
// 1168 //
// 1169 //             }
// 1170 //         break;
// 1171 //        case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1172 //           {
// 1173 //                for (i = 0; i < readRspCmd->numAttr; i++)
// 1174 //                {
// 1175 //                    zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1176 //                    j=statusRec->data;
// 1177 //                    //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1178 //                    switch(statusRec->attrID)
// 1179 //                    {
// 1180 //                        case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1181 //                            uint16 buf[3];
// 1182 //                            osal_memset(buf,0,sizeof(buf));
// 1183 //                            //zclZHAtest_Level_to_Level = *j;
// 1184 //                            buf[1] = zclZHAtest_Level_to_Level;
// 1185 //                           // UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
// 1186 //                        break;
// 1187 //                        default:
// 1188 //                        break;
// 1189 //
// 1190 //                    }
// 1191 //
// 1192 //                }
// 1193 //
// 1194 //             }
// 1195 //    
// 1196 //        break;
// 1197 //      case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
// 1198 //           {
// 1199 //                for (i = 0; i < readRspCmd->numAttr; i++)
// 1200 //                {
// 1201 //                    zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1202 //                    p=(uint16 *)statusRec->data;
// 1203 //                    //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1204 //                    switch(statusRec->attrID)
// 1205 //                    {
// 1206 //                        case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
// 1207 //                            //zclZHAtest_Humidity_Value = *p;
// 1208 //                            uint16 buf[3];
// 1209 //                            osal_memset(buf,0,sizeof(buf));
// 1210 //                           // buf[0] = zclZHAtest_Humidity_Value;
// 1211 //                            //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1212 //                            
// 1213 //                        break;
// 1214 //                        default:
// 1215 //                        break;
// 1216 //
// 1217 //                    }
// 1218 //
// 1219 //                }
// 1220 //
// 1221 //             }     
// 1222 //        
// 1223 //        
// 1224 //        break;   
// 1225 //      case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
// 1226 //           {
// 1227 //                for (i = 0; i < readRspCmd->numAttr; i++)
// 1228 //                {
// 1229 //                    zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1230 //                    p=(uint16 *)statusRec->data;
// 1231 //                    //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1232 //                    switch(statusRec->attrID)
// 1233 //                    {
// 1234 //                        case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
// 1235 //                            //zclZHAtest_Illumiance_Value = *p;
// 1236 //                            uint16 buf[3];
// 1237 //                            osal_memset(buf,0,sizeof(buf));
// 1238 //                            //buf[0] = zclZHAtest_Illumiance_Value;
// 1239 //                            //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1240 //                            
// 1241 //                        break;
// 1242 //                        default:
// 1243 //                        break;
// 1244 //
// 1245 //                    }
// 1246 //
// 1247 //                }
// 1248 //
// 1249 //             }          
// 1250 //        
// 1251 //        
// 1252 //        break;
// 1253       default:
// 1254         break;
// 1255     //ReadRspStatus.attrID = readRspCmd->attrList;
// 1256     // Notify the originator of the results of the original read attributes 
// 1257     // attempt and, for each successfull request, the value of the requested 
// 1258     // attribute
// 1259   }
// 1260 
// 1261   
// 1262   
// 1263   return TRUE; 
// 1264 }
// 1265 #endif // ZCL_READ
// 1266 
// 1267 #ifdef ZCL_WRITE
// 1268 /*********************************************************************
// 1269  * @fn      zha_project_ProcessInWriteRspCmd
// 1270  *
// 1271  * @brief   Process the "Profile" Write Response Command
// 1272  *
// 1273  * @param   pInMsg - incoming message to process
// 1274  *
// 1275  * @return  none
// 1276  */
// 1277 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1278 {
// 1279   zclWriteRspCmd_t *writeRspCmd;
// 1280   uint8 i;
// 1281 
// 1282   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1283   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1284   {
// 1285     // Notify the device of the results of the its original write attributes
// 1286     // command.
// 1287   }
// 1288 
// 1289   return ( TRUE );
// 1290 }
// 1291 #endif // ZCL_WRITE
// 1292 
// 1293 /*********************************************************************
// 1294  * @fn      zha_project_ProcessInDefaultRspCmd
// 1295  *
// 1296  * @brief   Process the "Profile" Default Response Command
// 1297  *
// 1298  * @param   pInMsg - incoming message to process
// 1299  *
// 1300  * @return  none
// 1301  */
// 1302 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1303 {
// 1304   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1305 
// 1306   // Device is notified of the Default Response command.
// 1307   (void)pInMsg;
// 1308 
// 1309   return ( TRUE );
// 1310 }
// 1311 
// 1312 #ifdef ZCL_DISCOVER
// 1313 /*********************************************************************
// 1314  * @fn      zha_project_ProcessInDiscCmdsRspCmd
// 1315  *
// 1316  * @brief   Process the Discover Commands Response Command
// 1317  *
// 1318  * @param   pInMsg - incoming message to process
// 1319  *
// 1320  * @return  none
// 1321  */
// 1322 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1323 {
// 1324   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1325   uint8 i;
// 1326 
// 1327   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1328   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1329   {
// 1330     // Device is notified of the result of its attribute discovery command.
// 1331   }
// 1332 
// 1333   return ( TRUE );
// 1334 }
// 1335 
// 1336 /*********************************************************************
// 1337  * @fn      zha_project_ProcessInDiscAttrsRspCmd
// 1338  *
// 1339  * @brief   Process the "Profile" Discover Attributes Response Command
// 1340  *
// 1341  * @param   pInMsg - incoming message to process
// 1342  *
// 1343  * @return  none
// 1344  */
// 1345 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1346 {
// 1347   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1348   uint8 i;
// 1349 
// 1350   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1351   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1352   {
// 1353     // Device is notified of the result of its attribute discovery command.
// 1354   }
// 1355 
// 1356   return ( TRUE );
// 1357 }
// 1358 
// 1359 /*********************************************************************
// 1360  * @fn      zha_project_ProcessInDiscAttrsExtRspCmd
// 1361  *
// 1362  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1363  *
// 1364  * @param   pInMsg - incoming message to process
// 1365  *
// 1366  * @return  none
// 1367  */
// 1368 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1369 {
// 1370   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1371   uint8 i;
// 1372 
// 1373   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1374   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1375   {
// 1376     // Device is notified of the result of its attribute discovery command.
// 1377   }
// 1378 
// 1379   return ( TRUE );
// 1380 }
// 1381 #endif // ZCL_DISCOVER
// 1382 
// 1383 #if ZCL_EZMODE
// 1384 /*********************************************************************
// 1385  * @fn      zha_project_ProcessZDOMsgs
// 1386  *
// 1387  * @brief   Called when this node receives a ZDO/ZDP response.
// 1388  *
// 1389  * @param   none
// 1390  *
// 1391  * @return  status
// 1392  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV     DPTR,#simpleDescReqAddr
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function zha_project_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_23
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zha_project_OnOffCB
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1393 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
zha_project_ProcessZDOMsgs:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
        CODE
// 1394 {
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseSimpleDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseMgmtBindRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V2,R2
        MOV     ?V3,R3
// 1395   zclEZMode_ActionData_t data;
// 1396   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1397 
// 1398   // Let EZ-Mode know of the Simple Descriptor Response
// 1399     ZDO_DeviceAnnce_t devAnnce;
// 1400     zAddrType_t addr;
// 1401     afAddrType_t destAddr;
// 1402     uint8 *pData;
// 1403     uint8 address[8];
// 1404     uint8 i;
// 1405     uint8 pValue[Z_EXTADDR_LEN];
// 1406     uint8 pValue1[Z_EXTADDR_LEN];
// 1407     switch ( pMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zha_project_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32772
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32773
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_6
        CODE
// 1408     {
// 1409         case End_Device_Bind_rsp:
// 1410         {
// 1411             if ( ZDO_ParseBindRsp( pMsg ) == ZSuccess )
??zha_project_ProcessZDOMsgs_4:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    A,@DPTR
        JNZ     ??zha_project_ProcessZDOMsgs_7
// 1412             {
// 1413 
// 1414             // Light LED
// 1415             //HalUARTWrite(HAL_UART_PORT_0,"Bind established",sizeof("Bind established"));
// 1416                 HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zha_project_ProcessZDOMsgs_8
// 1417             }
// 1418             #if defined( BLINK_LEDS )
// 1419             else
// 1420             {
// 1421             // Flash LED to show failure
// 1422                 HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??zha_project_ProcessZDOMsgs_7:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
??zha_project_ProcessZDOMsgs_8:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1423             }
// 1424             #endif
// 1425             break;
// 1426         }
// 1427         case Match_Desc_rsp:
// 1428         {
// 1429             ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
??zha_project_ProcessZDOMsgs_3:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1430             if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1431             {
// 1432                 if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??zha_project_ProcessZDOMsgs_9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??zha_project_ProcessZDOMsgs_9
// 1433                 {
// 1434                     zclZHAtest_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#zclZHAtest_DstAddr + 8
        LCALL   ?Subroutine3 & 0xFFFF
// 1435                     zclZHAtest_DstAddr.addr.shortAddr = pRsp->nwkAddr;
??CrossCallReturnLabel_3:
        MOV     DPTR,#zclZHAtest_DstAddr
        LCALL   ??Subroutine12_0 & 0xFFFF
// 1436                     // Take the first endpoint, Can be changed to search through endpoints
// 1437                     zclZHAtest_DstAddr.endPoint = pRsp->epList[0];
??CrossCallReturnLabel_25:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclZHAtest_DstAddr + 9
        MOVX    @DPTR,A
// 1438 
// 1439                     // Light LED
// 1440                     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1441                 }
// 1442                 osal_mem_free( pRsp );
??zha_project_ProcessZDOMsgs_9:
        ; Setup parameters for call to function osal_mem_free
        LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
// 1443             }
// 1444             break;
// 1445         }
// 1446         case Device_annce:
// 1447         { 
// 1448             uint8 k=0;
// 1449             ZDO_ParseDeviceAnnce( pMsg, &devAnnce );
??zha_project_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
// 1450             
// 1451             
// 1452             for(i=0;i<6;i++)
// 1453             {
// 1454 
// 1455                 if(AssociatedDevList[i].shortAddr!=devAnnce.nwkAddr)
// 1456                 {
// 1457                     //SetTempDeviceSA(devAnnce.nwkAddr,devAnnce.extAddr);
// 1458                 }
// 1459             }
// 1460             // set simple descriptor query event
// 1461             //DelayMS(50);
// 1462             simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#simpleDescReqAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1463             simpleDescReqAddr.addr.shortAddr = devAnnce.nwkAddr;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?Subroutine5 & 0xFFFF
// 1464             osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT ,100);
??CrossCallReturnLabel_27:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1465             //osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_EVT,200);
// 1466             osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_POWER_EVT,300);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_12c
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1467             osal_start_timerEx( zha_project_TaskID, ZHA_ACTIVE_EP_EVT,500);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1f4
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1468             osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT,1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1469             //osal_set_event( zclZHAtest_TaskID, SIMPLE_DESC_QUERY_EVT );
// 1470             break;
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1471         }
// 1472 
// 1473         case Active_EP_rsp:
// 1474         {
// 1475             ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
??zha_project_ProcessZDOMsgs_2:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1476             *zclZHAtest_ActiveEP = *pRsp;
        MOV     DPTR,#zclZHAtest_ActiveEP
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPH,R3
        MOV     DPL,R2
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1477             osal_memset(ep,0,sizeof(ep));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,A
        MOV     R1,A
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1478             osal_memcpy(ep,pRsp->epList,pRsp->cnt);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1479             simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#simpleDescReqAddr + 8
        LCALL   ?Subroutine3 & 0xFFFF
// 1480             simpleDescReqAddr.addr.shortAddr = pRsp->nwkAddr;
??CrossCallReturnLabel_4:
        LCALL   ?Subroutine5 & 0xFFFF
// 1481             //HalUARTWrite(HAL_UART_PORT_0,ep,pRsp->cnt);
// 1482             //zclZHAtest_ActiveEP.status = pRsp->status;
// 1483             //zclZHAtest_ActiveEP.nwkAddr= pRsp->nwkAddr;
// 1484             //osal_memcpy(zclZHAtest_ActiveEP.epList,pRsp->epList,sizeof(uint8));
// 1485             //zclZHAtest_ActiveEP.epList[] = pRsp->epList[];
// 1486             //DelayMS(50);
// 1487             //SetTempDeviceEP(pRsp->nwkAddr , ep );
// 1488             //osal_set_event( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT );
// 1489             osal_mem_free( pRsp ); 
??CrossCallReturnLabel_28:
        ; Setup parameters for call to function osal_mem_free
        LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
// 1490             break;
// 1491         }
// 1492         case Simple_Desc_rsp:
// 1493         {
// 1494             uint8 k=0;
// 1495             ZDO_SimpleDescRsp_t *pSimpleDescRsp;   // pointer to received simple desc response
// 1496             pSimpleDescRsp = (ZDO_SimpleDescRsp_t *)osal_mem_alloc( sizeof( ZDO_SimpleDescRsp_t ) );
??zha_project_ProcessZDOMsgs_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1497 
// 1498 
// 1499             if(pSimpleDescRsp)
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1500             {
// 1501                 pSimpleDescRsp->simpleDesc.pAppInClusterList = NULL;
        MOV     A,R6
        ADD     A,#0xa
        MOV     ?V4,A
        CLR     A
        ADDC    A,R7
        MOV     ?V5,A
        MOV     DPL,?V4
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1502                 pSimpleDescRsp->simpleDesc.pAppOutClusterList = NULL;
        MOV     A,R6
        ADD     A,#0xd
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     DPL,?V0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1503 
// 1504                 ZDO_ParseSimpleDescRsp( pMsg, pSimpleDescRsp );
        ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
// 1505                 if(pSimpleDescRsp->simpleDesc.AppDeviceId ==0x0402)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??zha_project_ProcessZDOMsgs_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4
??zha_project_ProcessZDOMsgs_11:
        JNZ     ??zha_project_ProcessZDOMsgs_12
// 1506                 {
// 1507                     afAddrType_t  dscReqAddr;
// 1508                     dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
// 1509                     dscReqAddr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
??CrossCallReturnLabel_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine12_0 & 0xFFFF
// 1510                     dscReqAddr.endPoint=1;
??CrossCallReturnLabel_26:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1511                     zclReadCmd_t BasicAttrsList;
// 1512                     BasicAttrsList.numAttr = 1;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1513                     BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine10 & 0xFFFF
// 1514                     zcl_SendRead( 1, &dscReqAddr,
// 1515                     ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
// 1516                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function zcl_SendRead
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 80)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 83)
        MOV     R4,#0x0
        MOV     R5,#0x5
        MOV     A,R5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1517                     osal_set_event( zha_project_TaskID, ZONE_TYPE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1518                     //DelayMS(100);
// 1519                     //zclSampleCIE_WriteIAS_CIE_Address(&destAddr); 
// 1520                 }
// 1521                 //else
// 1522                     //SetTempDeviceOD(pSimpleDescRsp->nwkAddr,pSimpleDescRsp->simpleDesc.AppDeviceId);
// 1523                 //osal_mem_free( pSimpleDescRsp );
// 1524                 // free memory for InClusterList
// 1525                 if (pSimpleDescRsp->simpleDesc.pAppInClusterList)
??zha_project_ProcessZDOMsgs_12:
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??zha_project_ProcessZDOMsgs_13
// 1526                 {
// 1527                     osal_mem_free(pSimpleDescRsp->simpleDesc.pAppInClusterList);
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1528                 }
// 1529 
// 1530                 // free memory for OutClusterList
// 1531                 if (pSimpleDescRsp->simpleDesc.pAppOutClusterList)
??zha_project_ProcessZDOMsgs_13:
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ      ??zha_project_ProcessZDOMsgs_10
// 1532                 {
// 1533                     osal_mem_free(pSimpleDescRsp->simpleDesc.pAppOutClusterList);
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1534                 }
// 1535 
// 1536                 osal_mem_free( pSimpleDescRsp );
??zha_project_ProcessZDOMsgs_10:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??zha_project_ProcessZDOMsgs_14
// 1537             }
// 1538             break;
// 1539         }
// 1540 
// 1541         case Bind_rsp:
// 1542             ZDO_MgmtBindRsp_t *Bind_pRsp =ZDO_ParseMgmtBindRsp( pMsg ) ;
??zha_project_ProcessZDOMsgs_5:
        ; Setup parameters for call to function ZDO_ParseMgmtBindRsp
        LCALL   `??ZDO_ParseMgmtBindRsp::?relay`; Banked call to: ZDO_ParseMgmtBindRsp
// 1543             afAddrType_t  dscReqAddr;
// 1544             dscReqAddr.addrMode=afAddr16Bit;
// 1545             if ( Bind_pRsp )
// 1546             {
// 1547               //osal_memcpy(dstAddr.addr.extAddr,NWK_command.NWK_General_Frame.NWKCG_TargetAddress,8);
// 1548               //dstAddr.addr.shortAddr=Node_Info.uiNwk_Addr;
// 1549               dscReqAddr.addr.shortAddr=AssociatedDevList[0].shortAddr;
// 1550               dscReqAddr.endPoint=0x01;
// 1551               //zclSampleCIE_WriteIAS_CIE_Address(&dscReqAddr);   
// 1552             }
// 1553             osal_mem_free( Bind_pRsp );
        ; Setup parameters for call to function osal_mem_free
??zha_project_ProcessZDOMsgs_14:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1554             break;
// 1555         default:
// 1556             break;
// 1557     }
// 1558 }
??zha_project_ProcessZDOMsgs_6:
        MOV     A,#0x40
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zha_project_event_loop
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function zha_project_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_29
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zha_project_OnOffCB
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zha_project_event_loop
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zha_project_event_loop
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 1
        DATA16
        DW zha_project_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_CmdCallbacks>`:
        DATA16
        DW `??zha_project_BasicResetCB::?relay`
        DW `??zha_project_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zha_project_IdentifyQueryRspCB::?relay`
        DW `??zha_project_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_12c:
        DD 300

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_ProcessZDOMsgs

        END
// 1559 
// 1560 /*********************************************************************
// 1561  * @fn      zha_project_EZModeCB
// 1562  *
// 1563  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1564 *           going on during EZ-Mode steering/finding/binding.
// 1565  *
// 1566  * @param   state - an
// 1567  *
// 1568  * @return  none
// 1569  */
// 1570 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 1571 {
// 1572 #ifdef LCD_SUPPORTED
// 1573   char *pStr;
// 1574   uint8 err;
// 1575 #endif
// 1576 
// 1577   // time to go into identify mode
// 1578   if ( state == EZMODE_STATE_IDENTIFYING )
// 1579   {
// 1580 #ifdef LCD_SUPPORTED
// 1581     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1582 #endif
// 1583 
// 1584     zha_project_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 1585     //zha_project_ProcessIdentifyTimeChange();
// 1586   }
// 1587 
// 1588   // autoclosing, show what happened (success, cancelled, etc...)
// 1589   if( state == EZMODE_STATE_AUTOCLOSE )
// 1590   {
// 1591 #ifdef LCD_SUPPORTED
// 1592     pStr = NULL;
// 1593     err = pData->sAutoClose.err;
// 1594     if ( err == EZMODE_ERR_SUCCESS )
// 1595     {
// 1596       pStr = "EZMode: Success";
// 1597     }
// 1598     else if ( err == EZMODE_ERR_NOMATCH )
// 1599     {
// 1600       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1601     }
// 1602     if ( pStr )
// 1603     {
// 1604       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1605       {
// 1606         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1607       }
// 1608     }
// 1609 #endif
// 1610   }
// 1611 
// 1612   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1613   if( state == EZMODE_STATE_FINISH )
// 1614   {
// 1615     // turn off identify mode
// 1616     zha_project_IdentifyTime = 0;
// 1617     //zha_project_ProcessIdentifyTimeChange();
// 1618 
// 1619 #ifdef LCD_SUPPORTED
// 1620     // if successful, inform user which nwkaddr/ep we bound to
// 1621     pStr = NULL;
// 1622     err = pData->sFinish.err;
// 1623     if( err == EZMODE_ERR_SUCCESS )
// 1624     {
// 1625       // already stated on autoclose
// 1626     }
// 1627     else if ( err == EZMODE_ERR_CANCELLED )
// 1628     {
// 1629       pStr = "EZMode: Cancel";
// 1630     }
// 1631     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1632     {
// 1633       pStr = "EZMode: BadParm";
// 1634     }
// 1635     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1636     {
// 1637       pStr = "EZMode: TimeOut";
// 1638     }
// 1639     if ( pStr )
// 1640     {
// 1641       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1642       {
// 1643         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1644       }
// 1645     }
// 1646 #endif
// 1647     // show main UI screen 3 seconds after binding
// 1648     //osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 1649   }
// 1650 }
// 1651 #endif // ZCL_EZMODE
// 1652 
// 1653 /****************************************************************************
// 1654 ****************************************************************************/
// 1655 
// 1656 
// 
// 2 090 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//    39 bytes in segment XDATA_I
//    39 bytes in segment XDATA_ID
//    16 bytes in segment XDATA_ROM_C
//    50 bytes in segment XDATA_Z
// 
// 2 177 bytes of CODE  memory
//     0 bytes of CONST memory (+ 16 bytes shared)
//    89 bytes of XDATA memory
//
//Errors: none
//Warnings: 26
