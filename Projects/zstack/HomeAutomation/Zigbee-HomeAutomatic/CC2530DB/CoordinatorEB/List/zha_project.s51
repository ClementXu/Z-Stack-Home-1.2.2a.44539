///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               29/Aug/2016  22:29:24
// Copyright 2004-2015 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    Command line       =  
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D HAL_UART=TRUE -D xZTOOL_P1 -D
//        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
//        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
//        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_COORDINATOR -lC "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zha_project.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zha_project

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zha_project_BasicResetCB::?relay`,0203H
        FUNCTION `??zha_project_HandleKeys::?relay`,0203H
        FUNCTION `??zha_project_IdentifyCB::?relay`,0203H
        FUNCTION `??zha_project_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zha_project_Init::?relay`
        FUNCTION `??zha_project_Init::?relay`,0203H
        FUNCTION `??zha_project_OnOffCB::?relay`,0203H
        FUNCTION `??zha_project_ProcessInReadRspCmd::?relay`,0203H
        FUNCTION `??zha_project_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??zha_project_event_loop::?relay`
        FUNCTION `??zha_project_event_loop::?relay`,0203H
        PUBWEAK __Constant_12c
        PUBWEAK __Constant_1f4
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_64
        PUBLIC dstAddr
        PUBLIC ep
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC netState
        PUBLIC zclZHAtest_ActiveEP
        PUBLIC zclZHAtest_DstAddr
        PUBLIC zclZHAtest_epDesc
        PUBLIC zha_projectSeqNum
        FUNCTION zha_project_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zha_project_DstAddr
        FUNCTION zha_project_HandleKeys,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zha_project_IdentifyCB,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zha_project_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zha_project_Init
        FUNCTION zha_project_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zha_project_NwkState
        FUNCTION zha_project_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zha_project_ProcessInReadRspCmd,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 71, STACK
        FUNCTION zha_project_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 83, STACK
        PUBLIC zha_project_TaskID
        PUBLIC zha_project_event_loop
        FUNCTION zha_project_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
`??APSME_LookupExtAddr::?relay` SYMBOL "?relay", APSME_LookupExtAddr
AT_Init             SYMBOL "AT_Init"
`??AT_Init::?relay` SYMBOL "?relay", AT_Init
Device_type_Init    SYMBOL "Device_type_Init"
`??Device_type_Init::?relay` SYMBOL "?relay", Device_type_Init
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
`??NLME_PermitJoiningRequest::?relay` SYMBOL "?relay", NLME_PermitJoiningRequest
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
SerialApp_Init      SYMBOL "SerialApp_Init"
`??SerialApp_Init::?relay` SYMBOL "?relay", SerialApp_Init
SetTempDeviceBAT    SYMBOL "SetTempDeviceBAT"
`??SetTempDeviceBAT::?relay` SYMBOL "?relay", SetTempDeviceBAT
SetTempDeviceEP     SYMBOL "SetTempDeviceEP"
`??SetTempDeviceEP::?relay` SYMBOL "?relay", SetTempDeviceEP
SetTempDeviceHW     SYMBOL "SetTempDeviceHW"
`??SetTempDeviceHW::?relay` SYMBOL "?relay", SetTempDeviceHW
SetTempDeviceManuName SYMBOL "SetTempDeviceManuName"
`??SetTempDeviceManuName::?relay` SYMBOL "?relay", SetTempDeviceManuName
SetTempDeviceSA     SYMBOL "SetTempDeviceSA"
`??SetTempDeviceSA::?relay` SYMBOL "?relay", SetTempDeviceSA
SetTempDeviceType   SYMBOL "SetTempDeviceType"
`??SetTempDeviceType::?relay` SYMBOL "?relay", SetTempDeviceType
UpdateDeviceStatus1 SYMBOL "UpdateDeviceStatus1"
`??UpdateDeviceStatus1::?relay` SYMBOL "?relay", UpdateDeviceStatus1
UpdateDeviceStatus2 SYMBOL "UpdateDeviceStatus2"
`??UpdateDeviceStatus2::?relay` SYMBOL "?relay", UpdateDeviceStatus2
UpdateDeviceStatus3 SYMBOL "UpdateDeviceStatus3"
`??UpdateDeviceStatus3::?relay` SYMBOL "?relay", UpdateDeviceStatus3
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_ParseMgmtBindRsp SYMBOL "ZDO_ParseMgmtBindRsp"
`??ZDO_ParseMgmtBindRsp::?relay` SYMBOL "?relay", ZDO_ParseMgmtBindRsp
ZDO_ParseSimpleDescRsp SYMBOL "ZDO_ParseSimpleDescRsp"
`??ZDO_ParseSimpleDescRsp::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 80>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 80>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
`??zcl_ProcessMessageMSG::?relay` SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_SendRead        SYMBOL "zcl_SendRead"
`??zcl_SendRead::?relay` SYMBOL "?relay", zcl_SendRead
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zha_project_Init    SYMBOL "zha_project_Init"
`??zha_project_Init::?relay` SYMBOL "?relay", zha_project_Init
zha_project_event_loop SYMBOL "zha_project_event_loop"
`??zha_project_event_loop::?relay` SYMBOL "?relay", zha_project_event_loop

        EXTERN `??APSME_LookupExtAddr::?relay`
        FUNCTION `??APSME_LookupExtAddr::?relay`,00H
        EXTERN `??AT_Init::?relay`
        FUNCTION `??AT_Init::?relay`,00H
        EXTERN `??Device_type_Init::?relay`
        FUNCTION `??Device_type_Init::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_PermitJoiningRequest::?relay`
        FUNCTION `??NLME_PermitJoiningRequest::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??SerialApp_Init::?relay`
        FUNCTION `??SerialApp_Init::?relay`,00H
        EXTERN `??SetTempDeviceBAT::?relay`
        FUNCTION `??SetTempDeviceBAT::?relay`,00H
        EXTERN `??SetTempDeviceEP::?relay`
        FUNCTION `??SetTempDeviceEP::?relay`,00H
        EXTERN `??SetTempDeviceHW::?relay`
        FUNCTION `??SetTempDeviceHW::?relay`,00H
        EXTERN `??SetTempDeviceManuName::?relay`
        FUNCTION `??SetTempDeviceManuName::?relay`,00H
        EXTERN `??SetTempDeviceSA::?relay`
        FUNCTION `??SetTempDeviceSA::?relay`,00H
        EXTERN `??SetTempDeviceType::?relay`
        FUNCTION `??SetTempDeviceType::?relay`,00H
        EXTERN `??UpdateDeviceStatus1::?relay`
        FUNCTION `??UpdateDeviceStatus1::?relay`,00H
        EXTERN `??UpdateDeviceStatus2::?relay`
        FUNCTION `??UpdateDeviceStatus2::?relay`,00H
        EXTERN `??UpdateDeviceStatus3::?relay`
        FUNCTION `??UpdateDeviceStatus3::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_ParseMgmtBindRsp::?relay`
        FUNCTION `??ZDO_ParseMgmtBindRsp::?relay`,00H
        EXTERN `??ZDO_ParseSimpleDescRsp::?relay`
        FUNCTION `??ZDO_ParseSimpleDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_ProcessMessageMSG::?relay`
        FUNCTION `??zcl_ProcessMessageMSG::?relay`,00H
        EXTERN `??zcl_SendRead::?relay`
        FUNCTION `??zcl_SendRead::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Init
        FUNCTION AT_Init,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssociatedDevList
        EXTERN Device_type_Init
        FUNCTION Device_type_Init,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SerialApp_Init
        FUNCTION SerialApp_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceBAT
        FUNCTION SetTempDeviceBAT,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceEP
        FUNCTION SetTempDeviceEP,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceHW
        FUNCTION SetTempDeviceHW,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceManuName
        FUNCTION SetTempDeviceManuName,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceSA
        FUNCTION SetTempDeviceSA,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SetTempDeviceType
        FUNCTION SetTempDeviceType,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UpdateDeviceStatus1
        FUNCTION UpdateDeviceStatus1,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UpdateDeviceStatus2
        FUNCTION UpdateDeviceStatus2,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UpdateDeviceStatus3
        FUNCTION UpdateDeviceStatus3,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseMgmtBindRsp
        FUNCTION ZDO_ParseMgmtBindRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescRsp
        FUNCTION ZDO_ParseSimpleDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendRead
        FUNCTION zcl_SendRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zha_project_Attrs
        EXTERN zha_project_IdentifyTime
        EXTERN zha_project_NumAttributes
        EXTERN zha_project_OnOff
        EXTERN zha_project_SimpleDesc

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\Source\zha_project.c
//    1 /**************************************************************************************************
//    2   Filename:       zha_project.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "ZDObject.h"
//   77 #include "ZDProfile.h"
//   78 #include "zcl.h"
//   79 #include "zcl_general.h"
//   80 #include "zcl_ha.h"
//   81 #include "zcl_ss.h"
//   82 #include "zcl_ms.h"
//   83 #include "zcl_ezmode.h"
//   84 #include "zcl_diagnostic.h"
//   85 #include "zcl_lighting.h"
//   86 #include "zha_project.h"
//   87 #include "SerialApp.h"
//   88 #include "at_command.h"   
//   89 #include "onboard.h"
//   90 
//   91 /* HAL */
//   92 #include "hal_lcd.h"
//   93 #include "hal_led.h"
//   94 #include "hal_key.h"
//   95 
//   96 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   97       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   98 #include "zgp_translationtable.h"
//   99   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//  100     #define ZGP_AUTO_TT
//  101   #endif
//  102 #endif
//  103 
//  104 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  105 #include "math.h"
//  106 #include "hal_timer.h"
//  107 #endif
//  108 
//  109 #include "NLMEDE.h"
//  110 
//  111 /*********************************************************************
//  112  * MACROS
//  113  */
//  114 
//  115 /*********************************************************************
//  116  * CONSTANTS
//  117  */
//  118 #if (defined HAL_BOARD_ZLIGHT)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       1000
//  123 #elif (defined HAL_PWM)
//  124 #define LEVEL_MAX                 0xFE
//  125 #define LEVEL_MIN                 0x0
//  126 #define GAMMA_VALUE               2
//  127 #define PWM_FULL_DUTY_CYCLE       100
//  128 #endif
//  129 
//  130 /*********************************************************************
//  131  * TYPEDEFS
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * GLOBAL VARIABLES
//  136  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 byte zha_project_TaskID;
zha_project_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 zha_projectSeqNum;
zha_projectSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  139 ZDO_ActiveEndpointRsp_t   *zclZHAtest_ActiveEP;
zclZHAtest_ActiveEP:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 endPointDesc_t zclZHAtest_epDesc;
zclZHAtest_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 afAddrType_t zclZHAtest_DstAddr;
zclZHAtest_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 static zAddrType_t simpleDescReqAddr;
simpleDescReqAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 ep[5];
ep:
        DS 5
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 uint8 netState = 0;
netState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 zAddrType_t dstAddr;
dstAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  146 
//  147 /*********************************************************************
//  148  * GLOBAL FUNCTIONS
//  149  */
//  150 
//  151 /*********************************************************************
//  152  * LOCAL VARIABLES
//  153  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 afAddrType_t zha_project_DstAddr;
zha_project_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  155 
//  156 #ifdef ZCL_EZMODE
//  157 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  158 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  159 
//  160 
//  161 // register EZ-Mode with task information (timeout events, callback, etc...)
//  162 //static const zclEZMode_RegisterData_t zha_project_RegisterEZModeData =
//  163 //{
//  164 //  &zha_project_TaskID,
//  165 //  SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  166 //  SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  167 //  &zha_projectSeqNum,
//  168 //  zha_project_EZModeCB
//  169 //};
//  170 
//  171 #else
//  172 uint16 bindingInClusters[] =
//  173 {
//  174   ZCL_CLUSTER_ID_GEN_ON_OFF
//  175 #ifdef ZCL_LEVEL_CTRL
//  176   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  177 #endif
//  178 };
//  179 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  180 
//  181 #endif  // ZCL_EZMODE
//  182 
//  183 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  184 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  185 {
//  186   SAMPLELIGHT_ENDPOINT,
//  187   &zha_project_TaskID,
//  188   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  189   (afNetworkLatencyReq_t)0            // No Network Latency req
//  190 };
//  191 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  193 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  195 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  196 devStates_t zha_project_NwkState = DEV_INIT;
zha_project_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zha_project_NwkState>`
        REQUIRE __INIT_XDATA_I
//  197 
//  198 #if ZCL_LEVEL_CTRL
//  199 uint8 zha_project_WithOnOff;       // set to TRUE if state machine should set light on/off
//  200 uint8 zha_project_NewLevel;        // new level when done moving
//  201 bool  zha_project_NewLevelUp;      // is direction to new level up or down?
//  202 int32 zha_project_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  203 int32 zha_project_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  204 uint8 zha_project_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  205 #endif
//  206 
//  207 /*********************************************************************
//  208  * LOCAL FUNCTIONS
//  209  */
//  210 
//  211 
//  212 
//  213 static void zha_project_HandleKeys( byte shift, byte keys );
//  214 static void zha_project_BasicResetCB( void );
//  215 static void zha_project_IdentifyCB( zclIdentify_t *pCmd );
//  216 static void zha_project_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  217 static void zha_project_OnOffCB( uint8 cmd );
//  218 #ifdef ZCL_LEVEL_CTRL
//  219 static void zha_project_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  220 static void zha_project_LevelControlMoveCB( zclLCMove_t *pCmd );
//  221 static void zha_project_LevelControlStepCB( zclLCStep_t *pCmd );
//  222 static void zha_project_LevelControlStopCB( void );
//  223 static void zha_project_DefaultMove( void );
//  224 static uint32 zha_project_TimeRateHelper( uint8 newLevel );
//  225 static uint16 zha_project_GetTime ( uint8 level, uint16 time );
//  226 static void zha_project_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  227 static void zha_project_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  228 static void zha_project_AdjustLightLevel( void );
//  229 #endif
//  230 
//  231 // app display functions
//  232 static void zha_project_DisplayLight( void );
//  233 
//  234 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  235 void zha_project_UpdateLampLevel( uint8 level );
//  236 #endif
//  237 
//  238 // Functions to process ZCL Foundation incoming Command/Response messages
//  239 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  240 #ifdef ZCL_READ
//  241 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  242 #endif
//  243 #ifdef ZCL_WRITE
//  244 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  245 #endif
//  246 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  247 #ifdef ZCL_DISCOVER
//  248 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  249 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  250 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  251 #endif
//  252 
//  253 /*********************************************************************
//  254  * STATUS STRINGS
//  255  */
//  256 
//  257 
//  258 /*********************************************************************
//  259  * ZCL General Profile Callback table
//  260  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  261 static zclGeneral_AppCallbacks_t zha_project_CmdCallbacks =
zha_project_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zha_project_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  262 {
//  263   zha_project_BasicResetCB,            // Basic Cluster Reset command
//  264   zha_project_IdentifyCB,              // Identify command
//  265 #ifdef ZCL_EZMODE
//  266   NULL,                                   // Identify EZ-Mode Invoke command
//  267   NULL,                                   // Identify Update Commission State command
//  268 #endif
//  269   NULL,                                   // Identify Trigger Effect command
//  270   zha_project_IdentifyQueryRspCB,      // Identify Query Response command
//  271   zha_project_OnOffCB,                 // On/Off cluster commands
//  272   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  273   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  274   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  275 #ifdef ZCL_LEVEL_CTRL
//  276   zha_project_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  277   zha_project_LevelControlMoveCB,        // Level Control Move command
//  278   zha_project_LevelControlStepCB,        // Level Control Step command
//  279   zha_project_LevelControlStopCB,        // Level Control Stop command
//  280 #endif
//  281 #ifdef ZCL_GROUPS
//  282   NULL,                                   // Group Response commands
//  283 #endif
//  284 #ifdef ZCL_SCENES
//  285   NULL,                                  // Scene Store Request command
//  286   NULL,                                  // Scene Recall Request command
//  287   NULL,                                  // Scene Response command
//  288 #endif
//  289 #ifdef ZCL_ALARMS
//  290   NULL,                                  // Alarm (Response) commands
//  291 #endif
//  292 #ifdef SE_UK_EXT
//  293   NULL,                                  // Get Event Log command
//  294   NULL,                                  // Publish Event Log command
//  295 #endif
//  296   NULL,                                  // RSSI Location command
//  297   NULL                                   // RSSI Location Response command
//  298 };
//  299 
//  300 /*********************************************************************
//  301  * @fn          zha_project_Init
//  302  *
//  303  * @brief       Initialization function for the zclGeneral layer.
//  304  *
//  305  * @param       none
//  306  *
//  307  * @return      none
//  308  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  309 void zha_project_Init( byte task_id )
zha_project_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zha_project_Init
        CODE
//  310 {
        FUNCALL zha_project_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, SerialApp_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, AT_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, Device_type_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  311   zha_project_TaskID = task_id;
        MOV     DPTR,#zha_project_TaskID
        MOVX    @DPTR,A
//  312 
//  313   // Set destination address to indirect
//  314   zha_project_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zha_project_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  315   zha_project_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  316   zha_project_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zha_project_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  317 
//  318   // This app is part of the Home Automation Profile
//  319   zclHA_Init( &zha_project_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zha_project_SimpleDesc & 0xff
        MOV     R3,#(zha_project_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  320   SerialApp_Init();
        ; Setup parameters for call to function SerialApp_Init
        LCALL   `??SerialApp_Init::?relay`; Banked call to: SerialApp_Init
//  321   AT_Init();
        ; Setup parameters for call to function AT_Init
        LCALL   `??AT_Init::?relay`  ; Banked call to: AT_Init
//  322 #if ZG_BUILD_ENDDEVICE_TYPE
//  323 
//  324     Device_type_Init();
        ; Setup parameters for call to function Device_type_Init
        LCALL   `??Device_type_Init::?relay`; Banked call to: Device_type_Init
//  325 #endif
//  326 
//  327   // Register the ZCL General Cluster Library callback functions
//  328   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zha_project_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zha_project_CmdCallbacks & 0xff
        MOV     R3,#(zha_project_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  329 
//  330   // Register the application's attribute list
//  331   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zha_project_NumAttributes, zha_project_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zha_project_Attrs & 0xff
        MOV     R5,#(zha_project_Attrs >> 8) & 0xff
        MOV     DPTR,#zha_project_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  332 
//  333   // Register the Application to receive the unprocessed Foundation command/response messages
//  334   zcl_registerForMsg( zha_project_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  335 
//  336 #ifdef ZCL_DISCOVER
//  337   // Register the application's command list
//  338   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zha_project_Cmds );
//  339 #endif
//  340 
//  341   // Register for all key events - This app will handle all key events
//  342   RegisterForKeys( zha_project_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  343 
//  344   // Register for a test endpoint
//  345   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  346 
//  347 #ifdef ZCL_EZMODE
//  348   // Register EZ-Mode
//  349   //zcl_RegisterEZMode( &zha_project_RegisterEZModeData );
//  350 
//  351   // Register with the ZDO to receive Match Descriptor Responses
//  352     ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  353     ZDO_RegisterForZDOMsg( task_id, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  354     ZDO_RegisterForZDOMsg( task_id, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  355     ZDO_RegisterForZDOMsg( task_id, Active_EP_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x5
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  356     ZDO_RegisterForZDOMsg( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x4
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  357     ZDO_RegisterForZDOMsg( task_id, Device_annce );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x13
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  358 #endif
//  359 
//  360 
//  361 #ifdef ZCL_DIAGNOSTIC
//  362   // Register the application's callback function to read/write attribute data.
//  363   // This is only required when the attribute data format is unknown to ZCL.
//  364   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  365 
//  366   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  367   {
//  368     // Here the user could start the timer to save Diagnostics to NV
//  369   }
//  370 #endif
//  371 
//  372 #ifdef LCD_SUPPORTED
//  373   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  374 #endif  // LCD_SUPPORTED
//  375 
//  376 #ifdef ZGP_AUTO_TT
//  377   zgpTranslationTable_RegisterEP ( &zha_project_SimpleDesc );
//  378 #endif
//  379 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  380 
//  381 /*********************************************************************
//  382  * @fn          zclSample_event_loop
//  383  *
//  384  * @brief       Event Loop Processor for zclGeneral.
//  385  *
//  386  * @param       none
//  387  *
//  388  * @return      none
//  389  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  390 uint16 zha_project_event_loop( uint8 task_id, uint16 events )
zha_project_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zha_project_event_loop
        CODE
//  391 {
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_ProcessInReadRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zha_project_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 53
        MOV     A,#-0x35
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  392   afIncomingMSGPacket_t *MSGpkt;
//  393 
//  394   (void)task_id;  // Intentionally unreferenced parameter
//  395 
//  396     if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??zha_project_event_loop_0 & 0xFFFF
//  397     {
//  398         while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zha_project_TaskID )) )
//  399         {
//  400             switch ( MSGpkt->hdr.event )
//  401             {
//  402                 #ifdef ZCL_EZMODE
//  403                 case ZDO_CB_MSG:
//  404                     zha_project_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  405                     break;
//  406                 #endif
//  407                 case ZCL_INCOMING_MSG:
//  408                 // Incoming ZCL Foundation command/response messages
//  409                     zha_project_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  410                     break;
//  411 
//  412                 case KEY_CHANGE:
//  413                     zha_project_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  414                     break;
//  415                 case AF_INCOMING_MSG_CMD:
//  416                     zcl_ProcessMessageMSG(MSGpkt);
//  417 
//  418                     //ZHAtest_MessageMSGCB( MSGpkt );
//  419                     break;    
//  420                 
//  421 
//  422                 case ZDO_STATE_CHANGE:
//  423                     zha_project_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  424          
//  425                     if(zha_project_NwkState == DEV_ZB_COORD)
//  426                     {
//  427                         netState = 1;
//  428                         NLME_PermitJoiningRequest(0);
//  429                     }
//  430                 break;
//  431 
//  432                 default:
//  433                     break;
//  434             }
//  435 
//  436           // Release the memory
//  437           osal_msg_deallocate( (uint8 *)MSGpkt );
//  438         }
//  439         return (events ^ SYS_EVENT_MSG);
//  440     }
//  441     if ( events & ZHA_ATTRIBUTE_REQ_EVT )
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??zha_project_event_loop_1
//  442     {
//  443         uint8 i=0;
//  444         afAddrType_t  dscReqAddr;
//  445         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  446         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  447         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  448         zclReadCmd_t BasicAttrsList;
//  449         BasicAttrsList.numAttr = 5;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        MOVX    @DPTR,A
//  450         BasicAttrsList.attrID[0] = ATTRID_BASIC_ZCL_VERSION;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  451         BasicAttrsList.attrID[1] = ATTRID_BASIC_HW_VERSION;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        LCALL   ?Subroutine16 & 0xFFFF
//  452         BasicAttrsList.attrID[2] = ATTRID_BASIC_MODEL_ID;
??CrossCallReturnLabel_43:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        LCALL   ?Subroutine16 & 0xFFFF
//  453         BasicAttrsList.attrID[3] = ATTRID_BASIC_MANUFACTURER_NAME;
??CrossCallReturnLabel_44:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        LCALL   ?Subroutine16 & 0xFFFF
//  454         //BasicAttrsList.attrID[5] = ATTRID_BASIC_DATE_CODE;
//  455         BasicAttrsList.attrID[4] = ATTRID_BASIC_POWER_SOURCE;
??CrossCallReturnLabel_45:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        LCALL   ?Subroutine4 & 0xFFFF
//  456         zcl_SendRead( 1, &dscReqAddr,ZCL_CLUSTER_ID_GEN_BASIC, &BasicAttrsList,
//  457                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
//  458         
//  459         //return ( events ^ ZHA_ATTRIBUTE_REQ_EVT );
//  460     }  
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  461   
//  462     if(events & ZHA_ATTRIBUTE_POWER_EVT)
??zha_project_event_loop_1:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??zha_project_event_loop_2
//  463     {
//  464         afAddrType_t  dscReqAddr;
//  465         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  466         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  467         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  468         zclReadCmd_t BasicAttrsList;
//  469         BasicAttrsList.numAttr = 2;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  470         BasicAttrsList.attrID[0] = ATTRID_POWER_CFG_BATTERY_VOLTAGE;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x20
        LCALL   ?Subroutine16 & 0xFFFF
//  471         BasicAttrsList.attrID[1] = 0x0021;
??CrossCallReturnLabel_46:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x21
        LCALL   ?Subroutine4 & 0xFFFF
//  472         zcl_SendRead( 1, &dscReqAddr,
//  473                     ZCL_CLUSTER_ID_GEN_POWER_CFG, &BasicAttrsList,
//  474                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0);
//  475         //return ( events ^ ZHA_ATTRIBUTE_POWER_EVT );    
//  476     }
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  477     if ( events & ZONE_TYPE_EVT )
??zha_project_event_loop_2:
        MOV     A,R6
        ANL     A,#0x20
        JNZ     $+5
        LJMP    ??zha_project_event_loop_3 & 0xFFFF
//  478     {
//  479         afAddrType_t  dscReqAddr;
//  480         dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  481         dscReqAddr.addr.shortAddr=simpleDescReqAddr.addr.shortAddr;
//  482         dscReqAddr.endPoint=1;
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  483         zclReadCmd_t BasicAttrsList;
//  484         BasicAttrsList.numAttr = 1;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  485         BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine4 & 0xFFFF
//  486         zcl_SendRead( 1, &dscReqAddr,
//  487                     ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
//  488                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 68)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 70)
        MOV     R4,#0x0
        MOV     R5,#0x5
        MOV     A,R5
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  489         return ( events ^ ZONE_TYPE_EVT );
        MOV     A,R6
        XRL     A,#0x20
        MOV     R2,A
        MOV     A,R7
        LJMP    ??zha_project_event_loop_4 & 0xFFFF
//  490     } 
??zha_project_event_loop_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zha_project_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JNZ     ??zha_project_event_loop_6
        MOV     DPTR,#netState
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
??zha_project_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zha_project_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zha_project_event_loop_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??zha_project_event_loop_8
        ADD     A,#-0x1a
        JZ      ??zha_project_event_loop_9
        ADD     A,#0x74
        JZ      ??zha_project_event_loop_10
        ADD     A,#-0x11
        JZ      ??zha_project_event_loop_5
        ADD     A,#-0x2
        JNZ     ??zha_project_event_loop_6
        ; Setup parameters for call to function zha_project_ProcessZDOMsgs
        LCALL   `??zha_project_ProcessZDOMsgs::?relay`; Banked call to: zha_project_ProcessZDOMsgs
        SJMP    ??zha_project_event_loop_6
??zha_project_event_loop_9:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zha_project_event_loop_11
        ADD     A,#-0x3
        JNZ     ??zha_project_event_loop_12
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
??zha_project_event_loop_13:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zha_project_event_loop_12
        INC     R0
        SJMP    ??zha_project_event_loop_13
??zha_project_event_loop_11:
        ; Setup parameters for call to function zha_project_ProcessInReadRspCmd
        LCALL   `??zha_project_ProcessInReadRspCmd::?relay`; Banked call to: zha_project_ProcessInReadRspCmd
??zha_project_event_loop_12:
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_38:
        JZ      ??zha_project_event_loop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zha_project_event_loop_6
??zha_project_event_loop_10:
        ; Setup parameters for call to function zha_project_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zha_project_HandleKeys::?relay`; Banked call to: zha_project_HandleKeys
        LJMP    ??zha_project_event_loop_6 & 0xFFFF
??zha_project_event_loop_8:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        LCALL   `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
        LJMP    ??zha_project_event_loop_6 & 0xFFFF
??zha_project_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??zha_project_event_loop_4 & 0xFFFF
//  491     if ( events & ZHA_ACTIVE_EP_EVT )
??zha_project_event_loop_3:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zha_project_event_loop_14
//  492     {
//  493         ZDP_ActiveEPReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr, 0);
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x5
        LCALL   ?Subroutine10 & 0xFFFF
//  494         //return ( events ^ ZHA_ACTIVE_EP_EVT );
//  495     }  
??CrossCallReturnLabel_30:
        LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  496   
//  497   // event to get simple descriptor of the newly joined device
//  498     if ( events & SIMPLE_DESC_QUERY_EVT )
??zha_project_event_loop_14:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??zha_project_event_loop_15
//  499     {
//  500         uint8 i;
//  501         for(i=0;i<=zclZHAtest_ActiveEP->cnt;i++)
        MOV     ?V0,#0x0
        SJMP    ??zha_project_event_loop_16
//  502         {
//  503             if(ep[i]!=0)
??zha_project_event_loop_17:
        MOV     R0,?V0
        MOV     A,#ep & 0xff
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,#(ep >> 8) & 0xff
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        JZ      ??zha_project_event_loop_18
//  504             {
//  505                   ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,
//  506                             ep[i], 0);
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V1,#0x0
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        LCALL   ?Subroutine10 & 0xFFFF
//  507             }
//  508         }
??CrossCallReturnLabel_31:
        LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
??zha_project_event_loop_18:
        INC     ?V0
??zha_project_event_loop_16:
        MOV     DPTR,#zclZHAtest_ActiveEP
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_35:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0
        JNC     ??zha_project_event_loop_17
//  509         osal_memset(ep,0,sizeof(ep));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  510         //return ( events ^ SIMPLE_DESC_QUERY_EVT );
//  511     }
//  512 
//  513   // handle processing of timeout event triggered by request fast polling command
//  514 
//  515     if ( events & SIMPLE_DESC_EVT )
??zha_project_event_loop_15:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??zha_project_event_loop_19
//  516     {
//  517         ZDP_SimpleDescReq( &simpleDescReqAddr, simpleDescReqAddr.addr.shortAddr,1, 0);
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x1
        LCALL   ?Subroutine10 & 0xFFFF
//  518         //return ( events ^ SIMPLE_DESC_QUERY_EVT );
//  519     }
??CrossCallReturnLabel_32:
        LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 65)
//  520     if ( events & RESET_EVT )
??zha_project_event_loop_19:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??zha_project_event_loop_20
//  521     {
//  522         Onboard_soft_reset();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  523         return ( events ^ RESET_EVT );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x2
??zha_project_event_loop_4:
        MOV     R3,A
        SJMP    ??zha_project_event_loop_21
//  524     }  
//  525  
//  526   // Discard unknown events
//  527   return 0;
??zha_project_event_loop_20:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zha_project_event_loop_21:
        MOV     A,#0x35
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  528 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zha_project_event_loop
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zha_project_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV     DPTR,#simpleDescReqAddr
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     R2,#simpleDescReqAddr & 0xff
        MOV     R3,#(simpleDescReqAddr >> 8) & 0xff
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zha_project_event_loop
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zha_project_event_loop
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_48:
        ; Setup parameters for call to function zcl_SendRead
        ; Setup parameters for call to function zcl_SendRead
        ; Setup parameters for call to function zcl_SendRead
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zha_project_event_loop
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zha_project_event_loop
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zha_project_event_loop
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zha_project_event_loop
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_3
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-4
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zha_project_event_loop
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_4
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zha_project_event_loop
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_5
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zha_project_event_loop
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zha_project_event_loop
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPTR,#simpleDescReqAddr
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x9
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  529 
//  530 
//  531 /*********************************************************************
//  532  * @fn      zha_project_HandleKeys
//  533  *
//  534  * @brief   Handles all key events for this device.
//  535  *
//  536  * @param   shift - true if in shift/alt.
//  537  * @param   keys - bit field for key events. Valid entries:
//  538  *                 HAL_KEY_SW_5
//  539  *                 HAL_KEY_SW_4
//  540  *                 HAL_KEY_SW_2
//  541  *                 HAL_KEY_SW_1
//  542  *
//  543  * @return  none
//  544  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  545 static void zha_project_HandleKeys( byte shift, byte keys )
zha_project_HandleKeys:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function zha_project_HandleKeys
        CODE
//  546 {
        FUNCALL zha_project_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_HandleKeys, zha_project_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  547   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zha_project_HandleKeys_0
//  548   {
//  549     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  550 
//  551     // toggle local light immediately
//  552     zha_project_OnOff = zha_project_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zha_project_OnOff
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_1
        CLR     A
        SJMP    ??zha_project_HandleKeys_2
??zha_project_HandleKeys_1:
        MOV     A,#0x1
??zha_project_HandleKeys_2:
        MOVX    @DPTR,A
//  553 #ifdef ZCL_LEVEL_CTRL
//  554     zha_project_LevelCurrentLevel = zha_project_OnOff ? zha_project_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  555 #endif
//  556   }
//  557 
//  558   if ( keys & HAL_KEY_SW_2 )
??zha_project_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zha_project_HandleKeys_3
//  559   {
//  560 #if (defined HAL_BOARD_ZLIGHT)
//  561 
//  562     zha_project_BasicResetCB();
//  563 
//  564 #else
//  565 
//  566     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  567 
//  568 #ifdef ZCL_EZMODE
//  569     {
//  570       // Invoke EZ-Mode
//  571       zclEZMode_InvokeData_t ezModeData;
//  572 
//  573       // Invoke EZ-Mode
//  574       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     A
        MOVX    @DPTR,A
//  575       if ( (zha_project_NwkState == DEV_ZB_COORD) ||
//  576           (zha_project_NwkState == DEV_ROUTER)   ||
//  577             (zha_project_NwkState == DEV_END_DEVICE) )
        MOV     DPTR,#zha_project_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zha_project_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zha_project_HandleKeys_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zha_project_HandleKeys_5
//  578       {
//  579         ezModeData.onNetwork = TRUE;      // node is already on the network
??zha_project_HandleKeys_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zha_project_HandleKeys_6
//  580       }
//  581       else
//  582       {
//  583         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zha_project_HandleKeys_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zha_project_HandleKeys_6:
        MOVX    @DPTR,A
//  584       }
//  585       ezModeData.initiator = FALSE;          // OnOffLight is a target
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  586       ezModeData.numActiveOutClusters = 0;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  587       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  588       ezModeData.numActiveInClusters = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  589       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  590       zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  591     }
//  592 
//  593 #else // NOT EZ-Mode
//  594     {
//  595       zAddrType_t dstAddr;
//  596       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  597 
//  598       // Initiate an End Device Bind Request, this bind request will
//  599       // only use a cluster list that is important to binding.
//  600       dstAddr.addrMode = afAddr16Bit;
//  601       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  602       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  603                            SAMPLELIGHT_ENDPOINT,
//  604                            ZCL_HA_PROFILE_ID,
//  605                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  606                            0, NULL,   // No Outgoing clusters to bind
//  607                            TRUE );
//  608     }
//  609 #endif // ZCL_EZMODE
//  610 #endif // HAL_BOARD_ZLIGHT
//  611   }
//  612 
//  613   if ( keys & HAL_KEY_SW_3 )
??zha_project_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zha_project_HandleKeys_7
//  614   {
//  615     NLME_SendNetworkStatus( zha_project_DstAddr.addr.shortAddr,
//  616                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zha_project_DstAddr
        LCALL   ??Subroutine29_0 & 0xFFFF
//  617   }
??CrossCallReturnLabel_78:
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  618 
//  619   if ( keys & HAL_KEY_SW_4 )
??zha_project_HandleKeys_7:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zha_project_HandleKeys_8
//  620   {
//  621     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  622 
//  623     if ( ( zha_project_NwkState == DEV_ZB_COORD ) ||
//  624           ( zha_project_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zha_project_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zha_project_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zha_project_HandleKeys_8
//  625     {
//  626       zAddrType_t tmpAddr;
//  627 
//  628       tmpAddr.addrMode = Addr16Bit;
??zha_project_HandleKeys_9:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  629       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  630 
//  631       // toggle permit join
//  632       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_10
        CLR     A
        SJMP    ??zha_project_HandleKeys_11
??zha_project_HandleKeys_10:
        MOV     A,#-0x1
??zha_project_HandleKeys_11:
        MOVX    @DPTR,A
//  633 
//  634       // Trust Center significance is always true
//  635       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  636     }
//  637   }
//  638 
//  639   // Shift F5 does a Basic Reset (factory defaults)
//  640   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zha_project_HandleKeys_8:
        MOV     A,R6
        JZ      ??zha_project_HandleKeys_12
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_13
//  641   {
//  642     zha_project_BasicResetCB();
        ; Setup parameters for call to function zha_project_BasicResetCB
        LCALL   `??zha_project_BasicResetCB::?relay`; Banked call to: zha_project_BasicResetCB
        SJMP    ??zha_project_HandleKeys_13
//  643   }
//  644   else if ( keys & HAL_KEY_SW_5 )
??zha_project_HandleKeys_12:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zha_project_HandleKeys_13
//  645   {
//  646     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zha_project_HandleKeys_14
        CLR     A
        SJMP    ??zha_project_HandleKeys_15
??zha_project_HandleKeys_14:
        MOV     A,#0x1
??zha_project_HandleKeys_15:
        MOVX    @DPTR,A
//  647   }
//  648 
//  649   // update the display, including the light
//  650   //zha_project_LcdDisplayUpdate();
//  651 }
??zha_project_HandleKeys_13:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
//  652 
//  653 
//  654 /*********************************************************************
//  655  * @fn      zha_project_DisplayLight
//  656  *
//  657  * @brief   Displays current state of light on LED and also on main display if supported.
//  658  *
//  659  * @param   none
//  660  *
//  661  * @return  none
//  662  */
//  663 static void zha_project_DisplayLight( void )
//  664 {
//  665   // set the LED1 based on light (on or off)
//  666   if ( zha_project_OnOff == LIGHT_ON )
//  667   {
//  668     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  669   }
//  670   else
//  671   {
//  672     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  673   }
//  674 
//  675 #ifdef LCD_SUPPORTED
//  676   if (giLightScreenMode == LIGHT_MAINMODE)
//  677   {
//  678 #ifdef ZCL_LEVEL_CTRL
//  679     // display current light level
//  680     if ( ( zha_project_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  681          ( zha_project_OnOff == LIGHT_OFF ) )
//  682     {
//  683       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  684     }
//  685     else if ( ( zha_project_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  686               ( zha_project_LevelCurrentLevel == zha_project_LevelOnLevel ) ||
//  687                ( ( zha_project_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  688                  ( zha_project_LevelCurrentLevel == zha_project_LevelLastLevel ) ) )
//  689     {
//  690       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  691     }
//  692     else    // "    LEVEL ###"
//  693     {
//  694       zclHA_uint8toa( zha_project_LevelCurrentLevel, &sLightLevel[10] );
//  695       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  696     }
//  697 #else
//  698     if ( zha_project_OnOff )
//  699     {
//  700       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  701     }
//  702     else
//  703     {
//  704       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  705     }
//  706 #endif // ZCL_LEVEL_CTRL
//  707   }
//  708 #endif // LCD_SUPPORTED
//  709 }
//  710 
//  711 /*********************************************************************
//  712  * @fn      zha_project_BasicResetCB
//  713  *
//  714  * @brief   Callback from the ZCL General Cluster Library
//  715  *          to set all the Basic Cluster attributes to default values.
//  716  *
//  717  * @param   none
//  718  *
//  719  * @return  none
//  720  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  721 static void zha_project_BasicResetCB( void )
zha_project_BasicResetCB:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function zha_project_BasicResetCB
        CODE
//  722 {
        FUNCALL zha_project_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  723   NLME_LeaveReq_t leaveReq;
//  724   // Set every field to 0
//  725   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  726 
//  727   // This will enable the device to rejoin the network after reset.
//  728   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  729 
//  730   // Set the NV startup option to force a "new" join.
//  731   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  732 
//  733   // Leave the network, and reset afterwards
//  734   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zha_project_BasicResetCB_0
//  735   {
//  736     // Couldn't send out leave; prepare to reset anyway
//  737     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  738   }
//  739 }
??zha_project_BasicResetCB_0:
        MOV     A,#0x5
          CFI EndBlock cfiBlock25
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 5)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock26
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock27
//  740 
//  741 /*********************************************************************
//  742  * @fn      zha_project_IdentifyCB
//  743  *
//  744  * @brief   Callback from the ZCL General Cluster Library when
//  745  *          it received an Identity Command for this application.
//  746  *
//  747  * @param   srcAddr - source address and endpoint of the response message
//  748  * @param   identifyTime - the number of seconds to identify yourself
//  749  *
//  750  * @return  none
//  751  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  752 static void zha_project_IdentifyCB( zclIdentify_t *pCmd )
zha_project_IdentifyCB:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function zha_project_IdentifyCB
        CODE
//  753 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  754   zha_project_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     DPTR,#zha_project_IdentifyTime
        LCALL   ?Subroutine5 & 0xFFFF
//  755 //zha_project_ProcessIdentifyTimeChange();
//  756 }
??CrossCallReturnLabel_6:
        SJMP    ??Subroutine23_0
          CFI EndBlock cfiBlock28
//  757 
//  758 /*********************************************************************
//  759  * @fn      zha_project_IdentifyQueryRspCB
//  760  *
//  761  * @brief   Callback from the ZCL General Cluster Library when
//  762  *          it received an Identity Query Response Command for this application.
//  763  *
//  764  * @param   srcAddr - requestor's address
//  765  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  766  *
//  767  * @return  none
//  768  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  769 static void zha_project_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zha_project_IdentifyQueryRspCB:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function zha_project_IdentifyQueryRspCB
        CODE
//  770 {
        FUNCALL zha_project_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  771   (void)pRsp;
//  772 #ifdef ZCL_EZMODE
//  773   {
//  774     zclEZMode_ActionData_t data;
//  775     data.pIdentifyQueryRsp = pRsp;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  776     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  777   }
//  778 #endif
//  779 }
        MOV     A,#0x2
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock29
//  780 
//  781 /*********************************************************************
//  782  * @fn      zha_project_OnOffCB
//  783  *
//  784  * @brief   Callback from the ZCL General Cluster Library when
//  785  *          it received an On/Off Command for this application.
//  786  *
//  787  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  788  *
//  789  * @return  none
//  790  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  791 static void zha_project_OnOffCB( uint8 cmd )
zha_project_OnOffCB:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function zha_project_OnOffCB
        CODE
//  792 {
        FUNCALL zha_project_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  793   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  794 
//  795   zha_project_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     DPTR,#zha_project_DstAddr
        LCALL   ?Subroutine5 & 0xFFFF
//  796 
//  797 
//  798   // Turn on the light
//  799   if ( cmd == COMMAND_ON )
??CrossCallReturnLabel_7:
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zha_project_OnOffCB_0
//  800   {
//  801     zha_project_OnOff = LIGHT_ON;
//  802   }
//  803   // Turn off the light
//  804   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zha_project_OnOffCB_1
//  805   {
//  806     zha_project_OnOff = LIGHT_OFF;
//  807   }
//  808   // Toggle the light
//  809   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zha_project_OnOffCB_2
//  810   {
//  811     if ( zha_project_OnOff == LIGHT_OFF )
        MOV     DPTR,#zha_project_OnOff
        MOVX    A,@DPTR
        JNZ     ??zha_project_OnOffCB_1
//  812     {
//  813       zha_project_OnOff = LIGHT_ON;
??zha_project_OnOffCB_0:
        MOV     DPTR,#zha_project_OnOff
        MOV     A,#0x1
        SJMP    ??zha_project_OnOffCB_3
//  814     }
//  815     else
//  816     {
//  817       zha_project_OnOff = LIGHT_OFF;
??zha_project_OnOffCB_1:
        MOV     DPTR,#zha_project_OnOff
        CLR     A
??zha_project_OnOffCB_3:
        MOVX    @DPTR,A
//  818     }
//  819   }
//  820 
//  821 #if ZCL_LEVEL_CTRL
//  822   zha_project_DefaultMove( );
//  823 #endif
//  824 
//  825   // update the display
//  826   //zha_project_LcdDisplayUpdate( );
//  827 }
??zha_project_OnOffCB_2:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock30
//  828 
//  829 
//  830 /******************************************************************************
//  831  *
//  832  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  833  *
//  834  *****************************************************************************/
//  835 
//  836 /*********************************************************************
//  837  * @fn      zha_project_ProcessIncomingMsg
//  838  *
//  839  * @brief   Process ZCL Foundation incoming message
//  840  *
//  841  * @param   pInMsg - pointer to the received message
//  842  *
//  843  * @return  none
//  844  */
//  845 static void zha_project_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
//  846 {
//  847   switch ( pInMsg->zclHdr.commandID )
//  848   {
//  849 #ifdef ZCL_READ
//  850     case ZCL_CMD_READ_RSP:
//  851       zha_project_ProcessInReadRspCmd( pInMsg );
//  852       break;
//  853 #endif
//  854 #ifdef ZCL_WRITE
//  855     case ZCL_CMD_WRITE_RSP:
//  856       zha_project_ProcessInWriteRspCmd( pInMsg );
//  857       break;
//  858 #endif
//  859 #ifdef ZCL_REPORT
//  860     // Attribute Reporting implementation should be added here
//  861     case ZCL_CMD_CONFIG_REPORT:
//  862       // zha_project_ProcessInConfigReportCmd( pInMsg );
//  863       break;
//  864 
//  865     case ZCL_CMD_CONFIG_REPORT_RSP:
//  866       // zha_project_ProcessInConfigReportRspCmd( pInMsg );
//  867       break;
//  868 
//  869     case ZCL_CMD_READ_REPORT_CFG:
//  870       // zha_project_ProcessInReadReportCfgCmd( pInMsg );
//  871       break;
//  872 
//  873     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  874       // zha_project_ProcessInReadReportCfgRspCmd( pInMsg );
//  875       break;
//  876 
//  877     case ZCL_CMD_REPORT:
//  878       // zha_project_ProcessInReportCmd( pInMsg );
//  879       break;
//  880 #endif
//  881     case ZCL_CMD_DEFAULT_RSP:
//  882       zha_project_ProcessInDefaultRspCmd( pInMsg );
//  883       break;
//  884 #ifdef ZCL_DISCOVER
//  885     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  886       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
//  887       break;
//  888 
//  889     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  890       zha_project_ProcessInDiscCmdsRspCmd( pInMsg );
//  891       break;
//  892 
//  893     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  894       zha_project_ProcessInDiscAttrsRspCmd( pInMsg );
//  895       break;
//  896 
//  897     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  898       zha_project_ProcessInDiscAttrsExtRspCmd( pInMsg );
//  899       break;
//  900 #endif
//  901     default:
//  902       break;
//  903   }
//  904 
//  905   if ( pInMsg->attrCmd )
//  906     osal_mem_free( pInMsg->attrCmd );
//  907 }
//  908 
//  909 #ifdef ZCL_READ
//  910 /*********************************************************************
//  911  * @fn      zha_project_ProcessInReadRspCmd
//  912  *
//  913  * @brief   Process the "Profile" Read Response Command
//  914  *
//  915  * @param   pInMsg - incoming message to process
//  916  *
//  917  * @return  none
//  918  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zha_project_IdentifyCB
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond36) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond36) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond36) CFA_SP SP+-7
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zha_project_OnOffCB
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  919 static uint8 zha_project_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
zha_project_ProcessInReadRspCmd:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
        CODE
//  920 {
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceHW
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceManuName
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceBAT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus3
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, SetTempDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessInReadRspCmd, UpdateDeviceStatus1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 63, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 63, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 43
        MOV     A,#-0x2b
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V10,R2
        MOV     ?V11,R3
//  921   zclReadRspCmd_t *readRspCmd;
//  922     uint8 i,k;
//  923     uint8 *j;
//  924     uint16 *p;
//  925     readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd; 
        MOV     A,R2
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,?V11
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  926     switch(pInMsg->clusterId)
        MOV     A,R2
        ADD     A,#0xa
        MOV     ?V8,A
        CLR     A
        ADDC    A,?V11
        MOV     ?V9,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zha_project_ProcessInReadRspCm_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        768
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1024
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1026
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1029
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1280
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1282
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_10
        CODE
//  927     {
//  928       case ZCL_CLUSTER_ID_GEN_BASIC:
//  929         {
//  930           for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_0:
        MOV     R6,#0x0
        SJMP    ??zha_project_ProcessInReadRspCmd_11
//  931           {
//  932                 zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
//  933                 j=statusRec->data;
//  934                 switch(statusRec->attrID)
//  935                 {
//  936                     case ATTRID_BASIC_POWER_SOURCE:
//  937                         uint8 zclZHAtest_PowerSource=*j;
//  938                         break;
//  939 //                    case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
//  940 //                        zclZHAtest_BatteryVoltage=*j;
//  941 //                        SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_BatteryVoltage);
//  942 //                        break;
//  943                     case ATTRID_BASIC_ZCL_VERSION:
//  944                         break;
//  945                     case ATTRID_BASIC_MODEL_ID:
//  946                         break;
//  947                     case ATTRID_BASIC_MANUFACTURER_NAME:
//  948                         SetTempDeviceManuName(pInMsg->srcAddr.addr.shortAddr,j);
//  949                         break;
//  950                     case ATTRID_BASIC_HW_VERSION:
//  951                         uint8 zclZHAtest_HWRevision = *j;
//  952                         SetTempDeviceHW(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_HWRevision);
??zha_project_ProcessInReadRspCmd_12:
        ; Setup parameters for call to function SetTempDeviceHW
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   `??SetTempDeviceHW::?relay`; Banked call to: SetTempDeviceHW
//  953                         break;                        
??zha_project_ProcessInReadRspCmd_13:
        INC     R6
??zha_project_ProcessInReadRspCmd_11:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_18:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReadRspCm_1`:
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_12
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_14
        CODE
??zha_project_ProcessInReadRspCmd_14:
        ; Setup parameters for call to function SetTempDeviceManuName
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL   `??SetTempDeviceManuName::?relay`; Banked call to: SetTempDeviceManuName
        SJMP    ??zha_project_ProcessInReadRspCmd_13
//  954                     default:
//  955                       break;
//  956                 
//  957                 }
//  958 
//  959           }
//  960         }
//  961         //osal_set_event( zclZHAtest_TaskID,ZHAtest_ATTRIBUTE_POWER_EVT);
//  962         
//  963         break;
//  964         
//  965       case ZCL_CLUSTER_ID_GEN_POWER_CFG:
//  966         {
//  967           for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_1:
        MOV     R6,#0x0
??zha_project_ProcessInReadRspCmd_15:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_19:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
//  968           {
//  969                 zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine15 & 0xFFFF
//  970                 j=statusRec->data;
//  971                 switch(statusRec->attrID)
??CrossCallReturnLabel_41:
        MOVX    A,@DPTR
        XRL     A,#0x20
        JNZ     ??zha_project_ProcessInReadRspCmd_16
        INC     DPTR
        MOVX    A,@DPTR
??zha_project_ProcessInReadRspCmd_16:
        JNZ     ??zha_project_ProcessInReadRspCmd_17
//  972                 {
//  973                     case ATTRID_POWER_CFG_BATTERY_VOLTAGE:
//  974                         uint8 zclZHAtest_BatteryVoltage=*j;
//  975                         SetTempDeviceBAT(pInMsg->srcAddr.addr.shortAddr,zclZHAtest_BatteryVoltage);
        ; Setup parameters for call to function SetTempDeviceBAT
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   `??SetTempDeviceBAT::?relay`; Banked call to: SetTempDeviceBAT
//  976                         break;
//  977                     default:
//  978                       break;
//  979                 
//  980                 }
//  981 
//  982           }
??zha_project_ProcessInReadRspCmd_17:
        INC     R6
        SJMP    ??zha_project_ProcessInReadRspCmd_15
//  983       
//  984         }        
//  985         
//  986         
//  987         //osal_set_event( zclZHAtest_TaskID, ZHAtest_ACTIVE_EP_EVT );
//  988         break;
//  989       case ZCL_CLUSTER_ID_GEN_ON_OFF:
//  990         {
//  991           for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_2:
        MOV     R6,#0x0
??zha_project_ProcessInReadRspCmd_18:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
//  992           {
//  993             zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine6 & 0xFFFF
//  994             j=statusRec->data;
//  995             switch(statusRec->attrID)
??CrossCallReturnLabel_13:
        JNZ     ??zha_project_ProcessInReadRspCmd_19
//  996             {
//  997                 case ATTRID_ON_OFF:
//  998                     uint16 buf[3];
//  999                     osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1000                     buf[0] = *j;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ??Subroutine27_0 & 0xFFFF
// 1001                     UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_76:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1002                   break;
// 1003                 default:
// 1004                   break;
// 1005             }
// 1006 
// 1007           }
??zha_project_ProcessInReadRspCmd_19:
        INC     R6
        SJMP    ??zha_project_ProcessInReadRspCmd_18
// 1008       
// 1009         }
// 1010         break;
// 1011         case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
// 1012             {
// 1013                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_4:
        MOV     R6,#0x0
??zha_project_ProcessInReadRspCmd_20:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_21:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
// 1014                 {
// 1015                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine15 & 0xFFFF
// 1016                     p=(uint16 *)statusRec->data;
??CrossCallReturnLabel_42:
        LCALL   ??Subroutine25_0 & 0xFFFF
// 1017                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1018                     switch(statusRec->attrID)
??CrossCallReturnLabel_71:
        XRL     A,#0x7
        JNZ     ??zha_project_ProcessInReadRspCmd_21
        INC     DPTR
        MOVX    A,@DPTR
??zha_project_ProcessInReadRspCmd_21:
        JNZ     ??zha_project_ProcessInReadRspCmd_22
// 1019                     {
// 1020                         case ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE:
// 1021                             uint16 buf[3];
// 1022                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1023                             buf[2] = *p;
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine26_0 & 0xFFFF
// 1024                             UpdateDeviceStatus3(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_75:
        LCALL   `??UpdateDeviceStatus3::?relay`; Banked call to: UpdateDeviceStatus3
// 1025                         break;
// 1026                         case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE:
// 1027                             //zclZHAtest_HUE_Status = *p;
// 1028                           break;
// 1029                         case ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION:
// 1030                             //zclZHAtest_Saturation = *p;                        
// 1031                           break;
// 1032                         default:
// 1033                         break;
// 1034 
// 1035                     }
// 1036 
// 1037                 }
??zha_project_ProcessInReadRspCmd_22:
        INC     R6
        SJMP    ??zha_project_ProcessInReadRspCmd_20
// 1038 
// 1039              }
// 1040     
// 1041         break;
// 1042         case ZCL_CLUSTER_ID_SS_IAS_ZONE:
// 1043        {        uint16 supportOD = 0;
// 1044                 uint8 sensorType = 0;
// 1045                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_8:
        MOV     R6,#0x0
        LJMP    ??zha_project_ProcessInReadRspCmd_23 & 0xFFFF
// 1046                 {
// 1047                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1048                     p=(uint16 *)statusRec->data;
// 1049                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1050                     switch(statusRec->attrID)
// 1051                     {
// 1052                         case ATTRID_SS_IAS_ZONE_STATUS:
// 1053                             uint16 buf[3];
// 1054                             osal_memset(buf,0,sizeof(buf));
// 1055                             buf[0] = *p;
// 1056                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1057                         break;
// 1058                         case ATTRID_SS_IAS_ZONE_TYPE:
// 1059                             zAddrType_t addr;
// 1060                             uint8 address[8];
// 1061                             uint8 pValue[Z_EXTADDR_LEN];
// 1062                             addr.addrMode = Addr64Bit;
??zha_project_ProcessInReadRspCmd_24:
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1063                             osal_nv_read(ZCD_NV_EXTADDR ,0, Z_EXTADDR_LEN, pValue);
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     ?V4,#0x8
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1064                             //osal_memcpy(pValue,addr.addr.extAddr,8);
// 1065                             osal_memcpy(addr.addr.extAddr,pValue,8);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 66)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1066                             //addr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
// 1067                             APSME_LookupExtAddr(pInMsg->srcAddr.addr.shortAddr,address);
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
// 1068                             ZDP_BindUnbindReq(Bind_req, &dstAddr, address,
// 1069                                                    1,
// 1070                                                    0x0020,
// 1071                                                    &addr,  pInMsg->endPoint,
// 1072                                                     FALSE );
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V4,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     A,?V10
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,?V11
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 65)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 67)
        MOV     ?V4,#0x20
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 69)
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 71)
        MOV     R1,#0x1
        MOV     R4,#dstAddr & 0xff
        MOV     R5,#(dstAddr >> 8) & 0xff
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 63)
// 1073                             //zclZHAtest_Smoke_Type = *p;
// 1074                             //uint16 buf[3];
// 1075                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1076                             buf[1] = *p;
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
// 1077                             UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function UpdateDeviceStatus2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
// 1078                             //zclSS_IAS_Send_ZoneStatusEnrollRequestCmd(0x01,&destAddr,zclZHAtest_Smoke_Type,0,false,0);
// 1079                             SetTempDeviceType(pInMsg->srcAddr.addr.shortAddr,*p);
        ; Setup parameters for call to function SetTempDeviceType
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
// 1080                          break;
??zha_project_ProcessInReadRspCmd_25:
        INC     R6
??zha_project_ProcessInReadRspCmd_23:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReadRspCm_2`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_25
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_24
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_26
        CODE
??zha_project_ProcessInReadRspCmd_26:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function UpdateDeviceStatus1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
        SJMP    ??zha_project_ProcessInReadRspCmd_25
// 1081                       
// 1082                         default:
// 1083                         break;
// 1084 
// 1085                     }
// 1086 
// 1087                 }
// 1088 
// 1089              }
// 1090       
// 1091       break;
// 1092       case ZCL_CLUSTER_ID_SS_IAS_WD:
// 1093             {
// 1094                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_9:
        MOV     R6,#0x0
        SJMP    ??zha_project_ProcessInReadRspCmd_27
// 1095                 {
// 1096                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1097                     j=statusRec->data;
// 1098                     switch(statusRec->attrID)
// 1099                     {
// 1100                         case COMMAND_SS_IAS_WD_START_WARNING:
// 1101                             //zclZHAtest_Warning = *j;
// 1102                             uint16 buf[3];
// 1103                             osal_memset(buf,0,sizeof(buf));
// 1104                             //buf[0] = zclZHAtest_Warning;
// 1105                             //UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
// 1106                             break;
// 1107                         case COMMAND_SS_IAS_WD_SQUAWK:
// 1108                             //zclZHAtest_WD_SQUAWK = *j;
// 1109                             //uint16 buf[3];
// 1110                             osal_memset(buf,0,sizeof(buf));
??zha_project_ProcessInReadRspCmd_28:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1111                            // buf[1] = zclZHAtest_WD_SQUAWK;
// 1112                             //UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf);
// 1113                             break;
// 1114 
// 1115                         default:
// 1116                             break;
// 1117 
// 1118                     }
??zha_project_ProcessInReadRspCmd_29:
        INC     R6
??zha_project_ProcessInReadRspCmd_27:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_23:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_55:
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zha_project_ProcessInReadRspCm_3`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_29
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_28
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessInReadRspCmd_28
        CODE
// 1119 
// 1120                 }
// 1121 
// 1122              }        
// 1123         
// 1124         break;
// 1125       
// 1126       case ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT:
// 1127        {
// 1128                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_6:
        MOV     R6,#0x0
??zha_project_ProcessInReadRspCmd_30:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_24:
        JC      $+5
        LJMP    ??zha_project_ProcessInReadRspCmd_10 & 0xFFFF
// 1129                 {
// 1130                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine6 & 0xFFFF
// 1131                     p=(uint16 *)statusRec->data;
// 1132                     switch(statusRec->attrID)
??CrossCallReturnLabel_14:
        JNZ     ??zha_project_ProcessInReadRspCmd_31
// 1133                     {
// 1134                         case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1135                             //zclZHAtest_Temperature_Value = *p;
// 1136                             uint16 buf[3];
// 1137                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1138                             buf[0] = *p;
        LCALL   ?Subroutine2 & 0xFFFF
// 1139                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_72:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1140                             
// 1141                         break;
// 1142                         default:
// 1143                         break;
// 1144 
// 1145                     }
// 1146 
// 1147                 }
??zha_project_ProcessInReadRspCmd_31:
        INC     R6
        SJMP    ??zha_project_ProcessInReadRspCmd_30
// 1148 
// 1149              }
// 1150          break;
// 1151         case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1152            {
// 1153                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_3:
        MOV     R6,#0x0
??zha_project_ProcessInReadRspCmd_32:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_25:
        JNC     ??zha_project_ProcessInReadRspCmd_10
// 1154                 {
// 1155                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine6 & 0xFFFF
// 1156                     j=statusRec->data;
// 1157                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1158                     switch(statusRec->attrID)
??CrossCallReturnLabel_15:
        JNZ     ??zha_project_ProcessInReadRspCmd_33
// 1159                     {
// 1160                         case ATTRID_MS_TEMPERATURE_MEASURED_VALUE:
// 1161                             uint16 buf[3];
// 1162                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1163                             //zclZHAtest_Level_to_Level = *j;
// 1164                             buf[1] = *j;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ??Subroutine27_0 & 0xFFFF
// 1165                             UpdateDeviceStatus2(pInMsg->srcAddr.addr.shortAddr,buf); 
??CrossCallReturnLabel_77:
        LCALL   `??UpdateDeviceStatus2::?relay`; Banked call to: UpdateDeviceStatus2
// 1166                         break;
// 1167                         default:
// 1168                         break;
// 1169 
// 1170                     }
// 1171 
// 1172                 }
??zha_project_ProcessInReadRspCmd_33:
        INC     R6
        SJMP    ??zha_project_ProcessInReadRspCmd_32
// 1173 
// 1174              }
// 1175     
// 1176         break;
// 1177       case ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY:
// 1178            {
// 1179                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_7:
        MOV     R6,#0x0
??zha_project_ProcessInReadRspCmd_34:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_26:
        JNC     ??zha_project_ProcessInReadRspCmd_10
// 1180                 {
// 1181                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
        LCALL   ?Subroutine6 & 0xFFFF
// 1182                     p=(uint16 *)statusRec->data;
// 1183                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1184                     switch(statusRec->attrID)
??CrossCallReturnLabel_16:
        JNZ     ??zha_project_ProcessInReadRspCmd_35
// 1185                     {
// 1186                         case ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE:
// 1187                             //zclZHAtest_Humidity_Value = *p;
// 1188                             uint16 buf[3];
// 1189                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1190                             buf[0] = *p;
        LCALL   ?Subroutine2 & 0xFFFF
// 1191                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_73:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1192                             
// 1193                         break;
// 1194                         default:
// 1195                         break;
// 1196 
// 1197                     }
// 1198 
// 1199                 }
??zha_project_ProcessInReadRspCmd_35:
        INC     R6
        SJMP    ??zha_project_ProcessInReadRspCmd_34
// 1200 
// 1201              }     
// 1202         
// 1203         
// 1204         break;   
// 1205       case ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT:
// 1206            {
// 1207                 for (i = 0; i < readRspCmd->numAttr; i++)
??zha_project_ProcessInReadRspCmd_5:
        MOV     R6,#0x0
        SJMP    ??zha_project_ProcessInReadRspCmd_36
// 1208                 {
// 1209                     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
??zha_project_ProcessInReadRspCmd_37:
        LCALL   ?Subroutine6 & 0xFFFF
// 1210                     p=(uint16 *)statusRec->data;
// 1211                     //j = zclSerializeData( statusRec->dataType, statusRec->data, j );
// 1212                     switch(statusRec->attrID)
??CrossCallReturnLabel_17:
        JNZ     ??zha_project_ProcessInReadRspCmd_38
// 1213                     {
// 1214                         case ATTRID_MS_ILLUMINANCE_MEASURED_VALUE:
// 1215                             //zclZHAtest_Illumiance_Value = *p;
// 1216                             uint16 buf[3];
// 1217                             osal_memset(buf,0,sizeof(buf));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1218                             buf[0] = *p;
        LCALL   ?Subroutine2 & 0xFFFF
// 1219                             UpdateDeviceStatus1(pInMsg->srcAddr.addr.shortAddr,buf);
??CrossCallReturnLabel_74:
        LCALL   `??UpdateDeviceStatus1::?relay`; Banked call to: UpdateDeviceStatus1
// 1220                             
// 1221                         break;
// 1222                         default:
// 1223                         break;
// 1224 
// 1225                     }
// 1226 
// 1227                 }
??zha_project_ProcessInReadRspCmd_38:
        INC     R6
??zha_project_ProcessInReadRspCmd_36:
        LCALL   ?Subroutine8 & 0xFFFF
// 1228 
// 1229              }          
// 1230         
// 1231         
// 1232         break;
// 1233       default:
// 1234         break;
// 1235     //ReadRspStatus.attrID = readRspCmd->attrList;
// 1236     // Notify the originator of the results of the original read attributes 
// 1237     // attempt and, for each successfull request, the value of the requested 
// 1238     // attribute
// 1239   }
??CrossCallReturnLabel_27:
        JC      ??zha_project_ProcessInReadRspCmd_37
// 1240 
// 1241   
// 1242   
// 1243   return TRUE; 
??zha_project_ProcessInReadRspCmd_10:
        MOV     R1,#0x1
        MOV     A,#0x2b
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
// 1244 }
          CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zha_project_event_loop
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_31
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zha_project_event_loop
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_32
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     R0,DPL
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-4
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_58:
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-6
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-6
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_28
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-6
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_29
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-6
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_13
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-6
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_14
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-6
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_15
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-6
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_16
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-6
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_17
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-6
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOV     A,R6
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V1
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker78 Using cfiCommon1
          CFI (cfiPicker78) NoFunction
          CFI (cfiPicker78) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_89:
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_29
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-4
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_13
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_14
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_15
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-4
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_16
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-4
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_17
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-4
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     R0,DPL
        MOV     R1,DPH
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiCond90 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_28
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-4
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_29
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-4
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_13
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-4
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_14
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_15
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_16
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_17
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function zha_project_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_6
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zha_project_OnOffCB
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_49:
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker132 Using cfiCommon1
          CFI (cfiPicker132) NoFunction
          CFI (cfiPicker132) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiPicker132
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus3
        ; Setup parameters for call to function UpdateDeviceStatus1
        ; Setup parameters for call to function UpdateDeviceStatus2
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_90:
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_34
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_72
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_73
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_74
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_75
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_76
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_77
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        MOV     DPL,?V8
        MOV     DPH,?V9
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_84
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_85
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_86
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-4
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_87
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-4
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zha_project_HandleKeys
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_78
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-4
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_79
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_80
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_81
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_82
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function zha_project_event_loop
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_38
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_39
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_40
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_33
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_34
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_72
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_73
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-4
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_74
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_75
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_76
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-4
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_77
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-4
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zha_project_event_loop
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-4
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function zha_project_event_loop
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_2
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-4
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_72
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-4
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_73
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_74
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177
// 1245 #endif // ZCL_READ
// 1246 
// 1247 #ifdef ZCL_WRITE
// 1248 /*********************************************************************
// 1249  * @fn      zha_project_ProcessInWriteRspCmd
// 1250  *
// 1251  * @brief   Process the "Profile" Write Response Command
// 1252  *
// 1253  * @param   pInMsg - incoming message to process
// 1254  *
// 1255  * @return  none
// 1256  */
// 1257 static uint8 zha_project_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1258 {
// 1259   zclWriteRspCmd_t *writeRspCmd;
// 1260   uint8 i;
// 1261 
// 1262   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1263   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1264   {
// 1265     // Notify the device of the results of the its original write attributes
// 1266     // command.
// 1267   }
// 1268 
// 1269   return ( TRUE );
// 1270 }
// 1271 #endif // ZCL_WRITE
// 1272 
// 1273 /*********************************************************************
// 1274  * @fn      zha_project_ProcessInDefaultRspCmd
// 1275  *
// 1276  * @brief   Process the "Profile" Default Response Command
// 1277  *
// 1278  * @param   pInMsg - incoming message to process
// 1279  *
// 1280  * @return  none
// 1281  */
// 1282 static uint8 zha_project_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1283 {
// 1284   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1285 
// 1286   // Device is notified of the Default Response command.
// 1287   (void)pInMsg;
// 1288 
// 1289   return ( TRUE );
// 1290 }
// 1291 
// 1292 #ifdef ZCL_DISCOVER
// 1293 /*********************************************************************
// 1294  * @fn      zha_project_ProcessInDiscCmdsRspCmd
// 1295  *
// 1296  * @brief   Process the Discover Commands Response Command
// 1297  *
// 1298  * @param   pInMsg - incoming message to process
// 1299  *
// 1300  * @return  none
// 1301  */
// 1302 static uint8 zha_project_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1303 {
// 1304   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1305   uint8 i;
// 1306 
// 1307   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1308   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1309   {
// 1310     // Device is notified of the result of its attribute discovery command.
// 1311   }
// 1312 
// 1313   return ( TRUE );
// 1314 }
// 1315 
// 1316 /*********************************************************************
// 1317  * @fn      zha_project_ProcessInDiscAttrsRspCmd
// 1318  *
// 1319  * @brief   Process the "Profile" Discover Attributes Response Command
// 1320  *
// 1321  * @param   pInMsg - incoming message to process
// 1322  *
// 1323  * @return  none
// 1324  */
// 1325 static uint8 zha_project_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1326 {
// 1327   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1328   uint8 i;
// 1329 
// 1330   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1331   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1332   {
// 1333     // Device is notified of the result of its attribute discovery command.
// 1334   }
// 1335 
// 1336   return ( TRUE );
// 1337 }
// 1338 
// 1339 /*********************************************************************
// 1340  * @fn      zha_project_ProcessInDiscAttrsExtRspCmd
// 1341  *
// 1342  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1343  *
// 1344  * @param   pInMsg - incoming message to process
// 1345  *
// 1346  * @return  none
// 1347  */
// 1348 static uint8 zha_project_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1349 {
// 1350   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1351   uint8 i;
// 1352 
// 1353   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1354   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1355   {
// 1356     // Device is notified of the result of its attribute discovery command.
// 1357   }
// 1358 
// 1359   return ( TRUE );
// 1360 }
// 1361 #endif // ZCL_DISCOVER
// 1362 
// 1363 #if ZCL_EZMODE
// 1364 /*********************************************************************
// 1365  * @fn      zha_project_ProcessZDOMsgs
// 1366  *
// 1367  * @brief   Called when this node receives a ZDO/ZDP response.
// 1368  *
// 1369  * @param   none
// 1370  *
// 1371  * @return  status
// 1372  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1373 static void zha_project_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
zha_project_ProcessZDOMsgs:
          CFI Block cfiBlock178 Using cfiCommon0
          CFI Function zha_project_ProcessZDOMsgs
        CODE
// 1374 {
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, SetTempDeviceSA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, SetTempDeviceEP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseSimpleDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, SetTempDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, ZDO_ParseMgmtBindRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zha_project_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        MOV     ?V2,R2
        MOV     ?V3,R3
// 1375   zclEZMode_ActionData_t data;
// 1376   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1377 
// 1378   // Let EZ-Mode know of the Simple Descriptor Response
// 1379     ZDO_DeviceAnnce_t devAnnce;
// 1380     zAddrType_t addr;
// 1381     afAddrType_t destAddr;
// 1382     uint8 *pData;
// 1383     uint8 address[8];
// 1384     uint8 i;
// 1385     uint8 pValue[Z_EXTADDR_LEN];
// 1386     uint8 pValue1[Z_EXTADDR_LEN];
// 1387     switch ( pMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zha_project_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32772
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32773
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zha_project_ProcessZDOMsgs_6
        CODE
// 1388     {
// 1389         case End_Device_Bind_rsp:
// 1390         {
// 1391             if ( ZDO_ParseBindRsp( pMsg ) == ZSuccess )
??zha_project_ProcessZDOMsgs_4:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX    A,@DPTR
        JNZ     ??zha_project_ProcessZDOMsgs_7
// 1392             {
// 1393 
// 1394             // Light LED
// 1395             //HalUARTWrite(HAL_UART_PORT_0,"Bind established",sizeof("Bind established"));
// 1396                 HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zha_project_ProcessZDOMsgs_8
// 1397             }
// 1398             #if defined( BLINK_LEDS )
// 1399             else
// 1400             {
// 1401             // Flash LED to show failure
// 1402                 HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??zha_project_ProcessZDOMsgs_7:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
??zha_project_ProcessZDOMsgs_8:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1403             }
// 1404             #endif
// 1405             break;
// 1406         }
// 1407         case Match_Desc_rsp:
// 1408         {
// 1409             ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
??zha_project_ProcessZDOMsgs_3:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1410             if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1411             {
// 1412                 if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??zha_project_ProcessZDOMsgs_9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??zha_project_ProcessZDOMsgs_9
// 1413                 {
// 1414                     zclZHAtest_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#zclZHAtest_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1415                     zclZHAtest_DstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     DPTR,#zclZHAtest_DstAddr
        LCALL   ?Subroutine5 & 0xFFFF
// 1416                     // Take the first endpoint, Can be changed to search through endpoints
// 1417                     zclZHAtest_DstAddr.endPoint = pRsp->epList[0];
??CrossCallReturnLabel_10:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclZHAtest_DstAddr + 9
        MOVX    @DPTR,A
// 1418 
// 1419                     // Light LED
// 1420                     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1421                 }
// 1422                 osal_mem_free( pRsp );
??zha_project_ProcessZDOMsgs_9:
        ; Setup parameters for call to function osal_mem_free
        LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
// 1423             }
// 1424             break;
// 1425         }
// 1426         case Device_annce:
// 1427         { 
// 1428             uint8 k=0;
// 1429             ZDO_ParseDeviceAnnce( pMsg, &devAnnce );
??zha_project_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
// 1430             
// 1431             
// 1432             for(i=0;i<6;i++)
        MOV     R6,#0x0
// 1433             {
// 1434 
// 1435                 if(AssociatedDevList[i].shortAddr!=devAnnce.nwkAddr)
??zha_project_ProcessZDOMsgs_11:
        MOV     A,R6
        MOV     B,#0x1c
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#AssociatedDevList & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(AssociatedDevList >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??zha_project_ProcessZDOMsgs_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??zha_project_ProcessZDOMsgs_12:
        JZ      ??zha_project_ProcessZDOMsgs_13
// 1436                 {
// 1437                     SetTempDeviceSA(devAnnce.nwkAddr,devAnnce.extAddr);
        ; Setup parameters for call to function SetTempDeviceSA
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine29_0 & 0xFFFF
// 1438                 }
// 1439             }
??CrossCallReturnLabel_79:
        LCALL   `??SetTempDeviceSA::?relay`; Banked call to: SetTempDeviceSA
??zha_project_ProcessZDOMsgs_13:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x6
        JC      ??zha_project_ProcessZDOMsgs_11
// 1440             // set simple descriptor query event
// 1441             //DelayMS(50);
// 1442             simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#simpleDescReqAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1443             simpleDescReqAddr.addr.shortAddr = devAnnce.nwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     DPTR,#simpleDescReqAddr
        LCALL   ?Subroutine5 & 0xFFFF
// 1444             osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_REQ_EVT ,100);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1445             //osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_EVT,200);
// 1446             osal_start_timerEx( zha_project_TaskID, ZHA_ATTRIBUTE_POWER_EVT,300);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_12c
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1447             osal_start_timerEx( zha_project_TaskID, ZHA_ACTIVE_EP_EVT,500);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1f4
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1448             osal_start_timerEx( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT,1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1449             //osal_set_event( zclZHAtest_TaskID, SIMPLE_DESC_QUERY_EVT );
// 1450             break;
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1451         }
// 1452 
// 1453         case Active_EP_rsp:
// 1454         {
// 1455             ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
??zha_project_ProcessZDOMsgs_2:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1456             *zclZHAtest_ActiveEP = *pRsp;
        MOV     DPTR,#zclZHAtest_ActiveEP
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     DPH,R3
        MOV     DPL,R2
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1457             osal_memset(ep,0,sizeof(ep));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,A
        MOV     R1,A
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1458             osal_memcpy(ep,pRsp->epList,pRsp->cnt);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#ep & 0xff
        MOV     R3,#(ep >> 8) & 0xff
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1459             simpleDescReqAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#simpleDescReqAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1460             simpleDescReqAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     DPTR,#simpleDescReqAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1461             //HalUARTWrite(HAL_UART_PORT_0,ep,pRsp->cnt);
// 1462             //zclZHAtest_ActiveEP.status = pRsp->status;
// 1463             //zclZHAtest_ActiveEP.nwkAddr= pRsp->nwkAddr;
// 1464             //osal_memcpy(zclZHAtest_ActiveEP.epList,pRsp->epList,sizeof(uint8));
// 1465             //zclZHAtest_ActiveEP.epList[] = pRsp->epList[];
// 1466             //DelayMS(50);
// 1467             SetTempDeviceEP(pRsp->nwkAddr , ep );
        ; Setup parameters for call to function SetTempDeviceEP
        MOV     R4,#ep & 0xff
        MOV     R5,#(ep >> 8) & 0xff
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL   `??SetTempDeviceEP::?relay`; Banked call to: SetTempDeviceEP
// 1468             //osal_set_event( zha_project_TaskID, SIMPLE_DESC_QUERY_EVT );
// 1469             osal_mem_free( pRsp ); 
        ; Setup parameters for call to function osal_mem_free
        LJMP    ??zha_project_ProcessZDOMsgs_10 & 0xFFFF
// 1470             break;
// 1471         }
// 1472         case Simple_Desc_rsp:
// 1473         {
// 1474             uint8 k=0;
// 1475             ZDO_SimpleDescRsp_t *pSimpleDescRsp;   // pointer to received simple desc response
// 1476             pSimpleDescRsp = (ZDO_SimpleDescRsp_t *)osal_mem_alloc( sizeof( ZDO_SimpleDescRsp_t ) );
??zha_project_ProcessZDOMsgs_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xf
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1477 
// 1478 
// 1479             if(pSimpleDescRsp)
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zha_project_ProcessZDOMsgs_6 & 0xFFFF
// 1480             {
// 1481                 pSimpleDescRsp->simpleDesc.pAppInClusterList = NULL;
        MOV     A,R6
        ADD     A,#0xa
        MOV     ?V4,A
        CLR     A
        ADDC    A,R7
        MOV     ?V5,A
        MOV     DPL,?V4
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1482                 pSimpleDescRsp->simpleDesc.pAppOutClusterList = NULL;
        MOV     A,R6
        ADD     A,#0xd
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     DPL,?V0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1483 
// 1484                 ZDO_ParseSimpleDescRsp( pMsg, pSimpleDescRsp );
        ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
// 1485                 if(pSimpleDescRsp->simpleDesc.AppDeviceId ==0x0402)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??zha_project_ProcessZDOMsgs_14
        MOV     A,#0x4
        XRL     A,R5
??zha_project_ProcessZDOMsgs_14:
        JNZ     ??zha_project_ProcessZDOMsgs_15
// 1486                 {
// 1487                     afAddrType_t  dscReqAddr;
// 1488                     dscReqAddr.addrMode=afAddr16Bit;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1489                     dscReqAddr.addr.shortAddr=pSimpleDescRsp->nwkAddr;
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
// 1490                     dscReqAddr.endPoint=1;
??CrossCallReturnLabel_12:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1491                     zclReadCmd_t BasicAttrsList;
// 1492                     BasicAttrsList.numAttr = 1;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1493                     BasicAttrsList.attrID[0] = ATTRID_SS_IAS_ZONE_TYPE;
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine16 & 0xFFFF
// 1494                     zcl_SendRead( 1, &dscReqAddr,
// 1495                     ZCL_CLUSTER_ID_SS_IAS_ZONE, &BasicAttrsList,
// 1496                     ZCL_FRAME_CLIENT_SERVER_DIR, 0, 0); 
??CrossCallReturnLabel_47:
        ; Setup parameters for call to function zcl_SendRead
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 80)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 83)
        MOV     R4,#0x0
        MOV     R5,#0x5
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,#0x1
        LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
// 1497                     osal_set_event( zha_project_TaskID, ZONE_TYPE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zha_project_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??zha_project_ProcessZDOMsgs_16
// 1498                     //DelayMS(100);
// 1499                     //zclSampleCIE_WriteIAS_CIE_Address(&destAddr); 
// 1500                 }
// 1501                 else
// 1502                     SetTempDeviceType(pSimpleDescRsp->nwkAddr,pSimpleDescRsp->simpleDesc.AppDeviceId);
??zha_project_ProcessZDOMsgs_15:
        ; Setup parameters for call to function SetTempDeviceType
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL   `??SetTempDeviceType::?relay`; Banked call to: SetTempDeviceType
// 1503                 //osal_mem_free( pSimpleDescRsp );
// 1504                 // free memory for InClusterList
// 1505                 if (pSimpleDescRsp->simpleDesc.pAppInClusterList)
??zha_project_ProcessZDOMsgs_16:
        MOV     DPL,?V4
        MOV     DPH,?V5
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_39:
        JZ      ??zha_project_ProcessZDOMsgs_17
// 1506                 {
// 1507                     osal_mem_free(pSimpleDescRsp->simpleDesc.pAppInClusterList);
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1508                 }
// 1509 
// 1510                 // free memory for OutClusterList
// 1511                 if (pSimpleDescRsp->simpleDesc.pAppOutClusterList)
??zha_project_ProcessZDOMsgs_17:
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_40:
        JZ      ??zha_project_ProcessZDOMsgs_10
// 1512                 {
// 1513                     osal_mem_free(pSimpleDescRsp->simpleDesc.pAppOutClusterList);
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1514                 }
// 1515 
// 1516                 osal_mem_free( pSimpleDescRsp );
??zha_project_ProcessZDOMsgs_10:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??zha_project_ProcessZDOMsgs_18
// 1517             }
// 1518             break;
// 1519         }
// 1520 
// 1521         case Bind_rsp:
// 1522             ZDO_MgmtBindRsp_t *Bind_pRsp =ZDO_ParseMgmtBindRsp( pMsg ) ;
??zha_project_ProcessZDOMsgs_5:
        ; Setup parameters for call to function ZDO_ParseMgmtBindRsp
        LCALL   `??ZDO_ParseMgmtBindRsp::?relay`; Banked call to: ZDO_ParseMgmtBindRsp
// 1523             afAddrType_t  dscReqAddr;
// 1524             dscReqAddr.addrMode=afAddr16Bit;
// 1525             if ( Bind_pRsp )
// 1526             {
// 1527               //osal_memcpy(dstAddr.addr.extAddr,NWK_command.NWK_General_Frame.NWKCG_TargetAddress,8);
// 1528               //dstAddr.addr.shortAddr=Node_Info.uiNwk_Addr;
// 1529               dscReqAddr.addr.shortAddr=AssociatedDevList[0].shortAddr;
// 1530               dscReqAddr.endPoint=0x01;
// 1531               //zclSampleCIE_WriteIAS_CIE_Address(&dscReqAddr);   
// 1532             }
// 1533             osal_mem_free( Bind_pRsp );
        ; Setup parameters for call to function osal_mem_free
??zha_project_ProcessZDOMsgs_18:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1534             break;
// 1535         default:
// 1536             break;
// 1537     }
// 1538 }
??zha_project_ProcessZDOMsgs_6:
        MOV     A,#0x40
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function zha_project_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        MOV     DPL,?V8
        MOV     DPH,?V9
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiCond185 Using cfiCommon0
          CFI Function zha_project_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zha_project_ProcessInReadRspCmd
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 63)
          CFI Block cfiPicker195 Using cfiCommon1
          CFI (cfiPicker195) NoFunction
          CFI (cfiPicker195) Picker
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_91:
        RET
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond196 Using cfiCommon0
          CFI Function zha_project_event_loop
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 65)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zha_project_ProcessZDOMsgs
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) Picker
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 1
        DATA16
        DW zha_project_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zha_project_CmdCallbacks>`:
        DATA16
        DW `??zha_project_BasicResetCB::?relay`
        DW `??zha_project_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zha_project_IdentifyQueryRspCB::?relay`
        DW `??zha_project_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_12c:
        DD 300

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_ProcessInReadRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_ProcessInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zha_project_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zha_project_ProcessZDOMsgs

        END
// 1539 
// 1540 /*********************************************************************
// 1541  * @fn      zha_project_EZModeCB
// 1542  *
// 1543  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1544 *           going on during EZ-Mode steering/finding/binding.
// 1545  *
// 1546  * @param   state - an
// 1547  *
// 1548  * @return  none
// 1549  */
// 1550 static void zha_project_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 1551 {
// 1552 #ifdef LCD_SUPPORTED
// 1553   char *pStr;
// 1554   uint8 err;
// 1555 #endif
// 1556 
// 1557   // time to go into identify mode
// 1558   if ( state == EZMODE_STATE_IDENTIFYING )
// 1559   {
// 1560 #ifdef LCD_SUPPORTED
// 1561     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1562 #endif
// 1563 
// 1564     zha_project_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 1565     //zha_project_ProcessIdentifyTimeChange();
// 1566   }
// 1567 
// 1568   // autoclosing, show what happened (success, cancelled, etc...)
// 1569   if( state == EZMODE_STATE_AUTOCLOSE )
// 1570   {
// 1571 #ifdef LCD_SUPPORTED
// 1572     pStr = NULL;
// 1573     err = pData->sAutoClose.err;
// 1574     if ( err == EZMODE_ERR_SUCCESS )
// 1575     {
// 1576       pStr = "EZMode: Success";
// 1577     }
// 1578     else if ( err == EZMODE_ERR_NOMATCH )
// 1579     {
// 1580       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1581     }
// 1582     if ( pStr )
// 1583     {
// 1584       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1585       {
// 1586         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1587       }
// 1588     }
// 1589 #endif
// 1590   }
// 1591 
// 1592   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1593   if( state == EZMODE_STATE_FINISH )
// 1594   {
// 1595     // turn off identify mode
// 1596     zha_project_IdentifyTime = 0;
// 1597     //zha_project_ProcessIdentifyTimeChange();
// 1598 
// 1599 #ifdef LCD_SUPPORTED
// 1600     // if successful, inform user which nwkaddr/ep we bound to
// 1601     pStr = NULL;
// 1602     err = pData->sFinish.err;
// 1603     if( err == EZMODE_ERR_SUCCESS )
// 1604     {
// 1605       // already stated on autoclose
// 1606     }
// 1607     else if ( err == EZMODE_ERR_CANCELLED )
// 1608     {
// 1609       pStr = "EZMode: Cancel";
// 1610     }
// 1611     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1612     {
// 1613       pStr = "EZMode: BadParm";
// 1614     }
// 1615     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1616     {
// 1617       pStr = "EZMode: TimeOut";
// 1618     }
// 1619     if ( pStr )
// 1620     {
// 1621       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1622       {
// 1623         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1624       }
// 1625     }
// 1626 #endif
// 1627     // show main UI screen 3 seconds after binding
// 1628     //osal_start_timerEx( zha_project_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 1629   }
// 1630 }
// 1631 #endif // ZCL_EZMODE
// 1632 
// 1633 /****************************************************************************
// 1634 ****************************************************************************/
// 1635 
// 1636 
// 
// 3 098 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//    39 bytes in segment XDATA_I
//    39 bytes in segment XDATA_ID
//    16 bytes in segment XDATA_ROM_C
//    60 bytes in segment XDATA_Z
// 
// 3 191 bytes of CODE  memory
//     0 bytes of CONST memory (+ 16 bytes shared)
//    99 bytes of XDATA memory
//
//Errors: none
//Warnings: 50
