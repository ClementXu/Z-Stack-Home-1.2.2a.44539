###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Aug/2016  23:13:47
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\af\AF.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\af\AF.c" -D SECURE=1 -D TC_LINKKEY_JOIN
#        -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK
#        -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG
#        -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40974 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           * @param   applFn - pointer to the Application callback function
    134           *
    135           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    136           *
    137           * @return  Pointer to epList_t on success, NULL otherwise.
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    141            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV     R2,#0xb
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    142          
    143            if (ep != NULL)
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6044         JZ      ??CrossCallReturnLabel_57
    144            {
    145              ep->nextDesc = epList;
   \   000018   90....       MOV     DPTR,#epList
   \   00001B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00001E   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    146              epList = ep;
   \                     ??CrossCallReturnLabel_56:
   \   000021   90....       MOV     DPTR,#epList
   \   000024   EA           MOV     A,R2
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine27 & 0xFFFF
    147              ep->epDesc = epDesc;
   \                     ??CrossCallReturnLabel_43:
   \   00002B   EE           MOV     A,R6
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   EF           MOV     A,R7
   \   00002F   12....       LCALL   ?Subroutine26 & 0xFFFF
    148              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_41:
   \   000032   E5..         MOV     A,?V0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E5..         MOV     A,?V1
   \   000038   12....       LCALL   ?Subroutine25 & 0xFFFF
    149              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_39:
   \   00003B   A3           INC     DPTR
   \   00003C   7432         MOV     A,#0x32
   \   00003E   12....       LCALL   ?Subroutine23 & 0xFFFF
    150              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_34:
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?Subroutine23 & 0xFFFF
    151              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_35:
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    152              ep->pfnApplCB = applFn;
   \   000048   740C         MOV     A,#0xc
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine12 & 0xFFFF
    153            }
   \                     ??CrossCallReturnLabel_16:
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    154          
    155            return ep;
   \                     ??CrossCallReturnLabel_57:
   \   00005C   02....       LJMP    ?Subroutine0 & 0xFFFF
    156          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    157          
    158          /*********************************************************************
    159           * @fn      afRegister
    160           *
    161           * @brief   Register an Application's EndPoint description.
    162           *
    163           * @param   epDesc - pointer to the Application's endpoint descriptor.
    164           *
    165           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    166           *
    167           * @return  afStatus_SUCCESS - Registered
    168           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    169           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    173            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8B..         MOV     ?V1,R3
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V1
   \   000017   6004         JZ      ??afRegister_0
    174            {
    175              return afStatus_INVALID_PARAMETER;
   \   000019   7902         MOV     R1,#0x2
   \   00001B   8027         SJMP    ??afRegister_1
    176            }
    177          
    178            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   E4           CLR     A
   \   00001E   F5..         MOV     ?V0,A
   \   000020   F5..         MOV     ?V1,A
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   8B..         MOV     ?V1,R3
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V1
   \   00003C   7004         JNZ     ??afRegister_2
   \   00003E   7910         MOV     R1,#0x10
   \   000040   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000042   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   000044   02....       LJMP    ?Subroutine1 & 0xFFFF
    179          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    180          
    181          /*********************************************************************
    182           * @fn      afDelete
    183           *
    184           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    185           *
    186           * @param   EndPoint - Application Endpoint to delete
    187           *
    188           * @return  afStatus_SUCCESS - endpoint deleted
    189           *          afStatus_INVALID_PARAMETER - endpoint not found
    190           *          afStatus_FAILED - endpoint list empty
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    193          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    194            epList_t *epCurrent;
    195            epList_t *epPrevious;
    196          
    197            if ( epList != NULL )
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000D   6036         JZ      ??afDelete_0
    198            {
    199              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV     DPTR,#epList
   \   000012   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000015   F9           MOV     R1,A
    200          
    201              // first element of the list matches
    202              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000016   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000019   7009         JNZ     ??afDelete_1
    203              {
    204                epList = epCurrent->nextDesc;
   \   00001B   90....       MOV     DPTR,#epList
   \   00001E   8015         SJMP    ??afDelete_2
    205                osal_mem_free( epCurrent );
    206          
    207                return ( afStatus_SUCCESS );
    208              }
    209              else
    210              {
    211                // search the list
    212                for ( epCurrent = epPrevious->nextDesc;
    213                      epCurrent != NULL;
    214                      epCurrent = epCurrent->nextDesc )
    215                {
    216                  if ( epCurrent->epDesc->endPoint == EndPoint )
    217                  {
    218                    epPrevious->nextDesc = epCurrent->nextDesc;
    219                    osal_mem_free( epCurrent );
    220          
    221                    // delete the entry and free the memory
    222                    return ( afStatus_SUCCESS );
    223                  }
    224                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   000020   EA           MOV     A,R2
   \   000021   F8           MOV     R0,A
   \   000022   EB           MOV     A,R3
   \   000023   F9           MOV     R1,A
   \                     ??afDelete_1:
   \   000024   EC           MOV     A,R4
   \   000025   FA           MOV     R2,A
   \   000026   ED           MOV     A,R5
   \   000027   FB           MOV     R3,A
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   6015         JZ      ??afDelete_4
   \   00002C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002F   70EF         JNZ     ??afDelete_3
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \                     ??afDelete_2:
   \   000035   EC           MOV     A,R4
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   ED           MOV     A,R5
   \   000039   F0           MOVX    @DPTR,A
   \   00003A                ; Setup parameters for call to function osal_mem_free
   \   00003A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   8006         SJMP    ??afDelete_5
    225                }
    226              }
    227          
    228              // no endpoint found
    229              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   000041   7902         MOV     R1,#0x2
   \   000043   8002         SJMP    ??afDelete_5
    230            }
    231            else
    232            {
    233              // epList is empty
    234              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   000045   7901         MOV     R1,#0x1
    235            }
   \                     ??afDelete_5:
   \   000047                REQUIRE ?Subroutine2
   \   000047                ; // Fall through to label ?Subroutine2
    236          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FD           MOV     R5,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8F82         MOV     DPL,R7
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6E           XRL     A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    237          
    238          /*********************************************************************
    239           * @fn          afDataConfirm
    240           *
    241           * @brief       This function will generate the Data Confirm back to
    242           *              the application.
    243           *
    244           * @param       endPoint - confirm end point
    245           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    246           * @param       status - status of APSDE_DATA_REQUEST
    247           *
    248           * @return      none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   8B..         MOV     ?V2,R3
    252            endPointDesc_t *epDesc;
    253            afDataConfirm_t *msgPtr;
    254          
    255            // Find the endpoint description
    256            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV     ?V4,R2
   \   000010   8B..         MOV     ?V5,R3
   \   000012   AE..         MOV     R6,?V4
   \   000014   AF..         MOV     R7,?V5
    257            if ( epDesc == NULL )
   \   000016   EE           MOV     A,R6
   \   000017   4F           ORL     A,R7
   \   000018   602B         JZ      ??afDataConfirm_0
    258              return;
    259          
    260            // Determine the incoming command type
    261            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7A04         MOV     R2,#0x4
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    262            if ( msgPtr )
   \   000021   EA           MOV     A,R2
   \   000022   4B           ORL     A,R3
   \   000023   6020         JZ      ??afDataConfirm_0
    263            {
    264              // Build the Data Confirm message
    265              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   74FD         MOV     A,#-0x3
   \   00002B   F0           MOVX    @DPTR,A
    266              msgPtr->hdr.status = status;
   \   00002C   A3           INC     DPTR
   \   00002D   E5..         MOV     A,?V2
   \   00002F   12....       LCALL   ?Subroutine27 & 0xFFFF
    267              msgPtr->endpoint = endPoint;
   \                     ??CrossCallReturnLabel_44:
   \   000032   E5..         MOV     A,?V0
   \   000034   12....       LCALL   ?Subroutine27 & 0xFFFF
    268              msgPtr->transID = transID;
   \                     ??CrossCallReturnLabel_45:
   \   000037   A3           INC     DPTR
   \   000038   E5..         MOV     A,?V1
   \   00003A   F0           MOVX    @DPTR,A
    269          
    270          #if defined ( MT_AF_CB_FUNC )
    271              /* If MT has subscribed for this callback, don't send as a message. */
    272              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    273              {
    274                /* Send callback if it's subscribed */
    275                MT_AfDataConfirm ((void *)msgPtr);
    276                /* Release the memory. */
    277                osal_msg_deallocate( (void *)msgPtr );
    278              }
    279              else
    280          #endif
    281              {
    282                /* send message through task message */
    283                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   00003B                ; Setup parameters for call to function osal_msg_send
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   12....       LCALL   ?Subroutine7 & 0xFFFF
    284              }
    285            }
   \                     ??CrossCallReturnLabel_5:
   \   000042   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    286          }
   \                     ??afDataConfirm_0:
   \   000045   7F06         MOV     R7,#0x6
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine39_0
   \   000004                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    287          
    288          /*********************************************************************
    289           * @fn          afReflectError
    290           *
    291           * @brief       This function will generate the Reflect Error message to
    292           *              the application.
    293           *
    294           * @param       srcEP - Source Endpoint
    295           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    296           * @param       dstAddr - intended destination
    297           * @param       dstEP - Destination Endpoint
    298           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    299           * @param       status - status of APSDE_DATA_REQUEST
    300           *
    301           * @return      none
    302           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
   \                     afReflectError:
    304                               uint8 transID, ZStatus_t status )
    305          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V3,R2
   \   000007   EC           MOV     A,R4
   \   000008   FE           MOV     R6,A
   \   000009   ED           MOV     A,R5
   \   00000A   FF           MOV     R7,A
   \   00000B   8B..         MOV     ?V4,R3
    306            endPointDesc_t *epDesc;
    307            afReflectError_t *msgPtr;
    308          
    309            // Find the endpoint description
    310            epDesc = afFindEndPointDesc( srcEP );
   \   00000D                ; Setup parameters for call to function afFindEndPointDesc
   \   00000D   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV     ?V0,R2
   \   000012   8B..         MOV     ?V1,R3
    311            if ( epDesc == NULL )
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V1
   \   000017   6045         JZ      ??afReflectError_0
    312              return;
    313          
    314            // Determine the incoming command type
    315            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A07         MOV     R2,#0x7
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    316            if ( msgPtr )
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   603A         JZ      ??afReflectError_0
    317            {
    318              // Build the Data Confirm message
    319              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   74FE         MOV     A,#-0x2
   \   00002A   F0           MOVX    @DPTR,A
    320              msgPtr->hdr.status = status;
   \   00002B   7411         MOV     A,#0x11
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine27 & 0xFFFF
    321              msgPtr->endpoint = dstEP;
   \                     ??CrossCallReturnLabel_46:
   \   000039   E5..         MOV     A,?V4
   \   00003B   F0           MOVX    @DPTR,A
    322              msgPtr->transID = transID;
   \   00003C   7410         MOV     A,#0x10
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E0           MOVX    A,@DPTR
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine26 & 0xFFFF
    323              msgPtr->dstAddrMode = dstAddrMode;
    324              msgPtr->dstAddr = dstAddr;
    325          
    326          #if defined ( MT_AF_CB_FUNC )
    327              /* If MT has subscribed for this callback, don't send as a message. */
    328              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    329              {
    330                /* Send callback if it's subscribed */
    331                MT_AfReflectError( (void *)msgPtr );
    332                /* Release the memory. */
    333                osal_msg_deallocate( (void *)msgPtr );
    334              }
    335              else
    336          #endif
    337              {
    338                /* send message through task message */
    339                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    340              }
    341            }
   \                     ??CrossCallReturnLabel_42:
   \   00004C   E5..         MOV     A,?V3
   \   00004E   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000051   EE           MOV     A,R6
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EF           MOV     A,R7
   \   000055   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000058   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00005B   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    342          }
   \                     ??afReflectError_0:
   \   00005E                REQUIRE ?Subroutine3
   \   00005E                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET
    343          
    344          /*********************************************************************
    345           * @fn          afIncomingData
    346           *
    347           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    348           *
    349           * @param       aff  - pointer to APS frame format
    350           * @param       SrcAddress  - Source address
    351           * @param       SrcPanId  - Source PAN ID
    352           * @param       sig - incoming message's link quality
    353           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    354           * @param       SecurityUse - Security enable/disable
    355           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    356           * @param       radius - incoming messages received radius
    357           *
    358           * @return      none
    359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    361                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    362                               uint32 timestamp, uint8 radius )
    363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V8,R2
   \   00001E   8B..         MOV     ?V9,R3
    364            endPointDesc_t *epDesc = NULL;
    365            epList_t *pList = epList;
   \   000020   90....       MOV     DPTR,#epList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V3,A
    366          #if !defined ( APS_NO_GROUPS )
    367            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   00002A   7EFE         MOV     R6,#-0x2
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   540C         ANL     A,#0xc
   \   000033   640C         XRL     A,#0xc
   \   000035   7021         JNZ     ??afIncomingData_0
    368          #endif
    369          
    370            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    371            {
    372          #if !defined ( APS_NO_GROUPS )
    373              // Find the first endpoint for this group
    374              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000037                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000037   79FE         MOV     R1,#-0x2
   \   000039   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00003C   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00003F   E9           MOV     A,R1
   \   000040   FE           MOV     R6,A
    375              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000041   74FE         MOV     A,#-0x2
   \   000043   6E           XRL     A,R6
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    376                return;   // No endpoint found
    377          
    378              epDesc = afFindEndPointDesc( grpEp );
   \   000049                ; Setup parameters for call to function afFindEndPointDesc
   \   000049   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00004C   8A..         MOV     ?V0,R2
   \   00004E   8B..         MOV     ?V1,R3
    379              if ( epDesc == NULL )
   \   000050   EA           MOV     A,R2
   \   000051   45..         ORL     A,?V1
   \   000053   703D         JNZ     ??afIncomingData_2
    380                return;   // Endpoint descriptor not found
   \   000055   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    381          
    382              pList = afFindEndPointDescList( epDesc->endPoint );
    383          #else
    384              return; // Not supported
    385          #endif
    386            }
    387            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   69           XRL     A,R1
   \   00005F   7024         JNZ     ??afIncomingData_3
    388            {
    389              // Set the list
    390              if ( pList != NULL )
   \   000061   E5..         MOV     A,?V2
   \   000063   45..         ORL     A,?V3
   \   000065   7003         JNZ     $+5
   \   000067   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    391              {
    392                epDesc = pList->epDesc;
   \   00006A   12....       LCALL   ?Subroutine11 & 0xFFFF
    393              }
    394            }
   \                     ??CrossCallReturnLabel_54:
   \   00006D   741B         MOV     A,#0x1b
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V14,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F5..         MOV     ?V15,A
   \   000079   7420         MOV     A,#0x20
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   78..         MOV     R0,#?V4
   \   000080   12....       LCALL   ?L_MOV_X
   \   000083   8021         SJMP    ??CrossCallReturnLabel_55
    395            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   000085                ; Setup parameters for call to function afFindEndPointDesc
   \   000085   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000088   8A..         MOV     ?V0,R2
   \   00008A   8B..         MOV     ?V1,R3
   \   00008C   A9..         MOV     R1,?V1
   \   00008E   EA           MOV     A,R2
   \   00008F   49           ORL     A,R1
   \   000090   60DB         JZ      ??CrossCallReturnLabel_54
    396            {
    397              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   000092                ; Setup parameters for call to function afFindEndPointDescList
   \   000092   85..82       MOV     DPL,?V0
   \   000095   85..83       MOV     DPH,?V1
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00009D   8A..         MOV     ?V2,R2
   \   00009F   8B..         MOV     ?V3,R3
   \   0000A1   80CA         SJMP    ??CrossCallReturnLabel_54
    398            }
    399          
    400            while ( epDesc )
    401            {
    402              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    403          
    404              if ( pList->pfnDescCB )
    405              {
    406                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    407                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    408                if ( pID )
    409                {
    410                  epProfileID = *pID;
    411                  osal_mem_free( pID );
    412                }
    413              }
    414              else if ( epDesc->simpleDesc )
    415              {
    416                epProfileID = epDesc->simpleDesc->AppProfId;
    417              }
    418          
    419              // First part of verification is to make sure that:
    420              // the local Endpoint ProfileID matches the received ProfileID OR
    421              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    422              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    423              if ( (aff->ProfileID == epProfileID) ||
    424                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    425                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    426              {
    427                // Save original endpoint
    428                uint8 endpoint = aff->DstEndPoint;
    429          
    430                // overwrite with descriptor's endpoint
    431                aff->DstEndPoint = epDesc->endPoint;
    432          
    433                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    434                                   nwkSeqNum, SecurityUse, timestamp, radius );
    435          
    436                // Restore with original endpoint
    437                aff->DstEndPoint = endpoint;
    438              }
    439          
    440              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    441              {
    442          #if !defined ( APS_NO_GROUPS )
    443                // Find the next endpoint for this group
    444                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    445                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    446                  return;   // No endpoint found
    447          
    448                epDesc = afFindEndPointDesc( grpEp );
    449                if ( epDesc == NULL )
    450                  return;   // Endpoint descriptor not found
    451          
    452                pList = afFindEndPointDescList( epDesc->endPoint );
    453          #else
    454                return;
    455          #endif
    456              }
    457              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    458              {
    459                pList = pList->nextDesc;
    460                if ( pList )
    461                  epDesc = pList->epDesc;
   \                     ??afIncomingData_4:
   \   0000A3   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000A6   E5..         MOV     A,?V0
   \   0000A8   45..         ORL     A,?V1
   \   0000AA   7003         JNZ     $+5
   \   0000AC   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000AF   800D         SJMP    ??afIncomingData_5
   \                     ??afIncomingData_6:
   \   0000B1                ; Setup parameters for call to function afFindEndPointDescList
   \   0000B1   8A82         MOV     DPL,R2
   \   0000B3   8B83         MOV     DPH,R3
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000BA   8A..         MOV     ?V2,R2
   \   0000BC   8B..         MOV     ?V3,R3
   \                     ??afIncomingData_5:
   \   0000BE   75..FE       MOV     ?V10,#-0x2
   \   0000C1   75..FF       MOV     ?V11,#-0x1
   \   0000C4   85..82       MOV     DPL,?V2
   \   0000C7   85..83       MOV     DPH,?V3
   \   0000CA   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000CD   85..82       MOV     DPL,?V0
   \   0000D0   85..83       MOV     DPH,?V1
   \   0000D3   601A         JZ      ??afIncomingData_7
   \   0000D5                ; Setup parameters for indirect call
   \   0000D5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000D8   12....       LCALL   ?CALL_IND
   \   0000DB   EA           MOV     A,R2
   \   0000DC   4B           ORL     A,R3
   \   0000DD   601D         JZ      ??afIncomingData_8
   \   0000DF   8A82         MOV     DPL,R2
   \   0000E1   8B83         MOV     DPH,R3
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F5..         MOV     ?V10,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F5..         MOV     ?V11,A
   \   0000EA                ; Setup parameters for call to function osal_mem_free
   \   0000EA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000ED   800D         SJMP    ??afIncomingData_8
   \                     ??afIncomingData_7:
   \   0000EF   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F2   6008         JZ      ??afIncomingData_8
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F5..         MOV     ?V10,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V11,A
   \                     ??afIncomingData_8:
   \   0000FC   85..82       MOV     DPL,?V8
   \   0000FF   85..83       MOV     DPH,?V9
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00010C   85..82       MOV     DPL,?V0
   \   00010F   85..83       MOV     DPH,?V1
   \   000112   E0           MOVX    A,@DPTR
   \   000113   FA           MOV     R2,A
   \   000114   E5..         MOV     A,?V10
   \   000116   68           XRL     A,R0
   \   000117   7003         JNZ     ??afIncomingData_9
   \   000119   E5..         MOV     A,?V11
   \   00011B   69           XRL     A,R1
   \                     ??afIncomingData_9:
   \   00011C   6013         JZ      ??afIncomingData_10
   \   00011E   EA           MOV     A,R2
   \   00011F   7006         JNZ     ??afIncomingData_11
   \   000121   E8           MOV     A,R0
   \   000122   49           ORL     A,R1
   \   000123   7075         JNZ     ??afIncomingData_12
   \   000125   800A         SJMP    ??afIncomingData_10
   \                     ??afIncomingData_11:
   \   000127   74FF         MOV     A,#-0x1
   \   000129   68           XRL     A,R0
   \   00012A   7003         JNZ     ??afIncomingData_13
   \   00012C   74FF         MOV     A,#-0x1
   \   00012E   69           XRL     A,R1
   \                     ??afIncomingData_13:
   \   00012F   7069         JNZ     ??afIncomingData_12
   \                     ??afIncomingData_10:
   \   000131   85..82       MOV     DPL,?V8
   \   000134   85..83       MOV     DPH,?V9
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   FF           MOV     R7,A
   \   00013B   EA           MOV     A,R2
   \   00013C   85..82       MOV     DPL,?V8
   \   00013F   85..83       MOV     DPH,?V9
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   F0           MOVX    @DPTR,A
   \   000145                ; Setup parameters for call to function afBuildMSGIncoming
   \   000145   7424         MOV     A,#0x24
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   F5..         MOV     ?V10,A
   \   00014D   78..         MOV     R0,#?V10
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000152   78..         MOV     R0,#?V4
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000157   7424         MOV     A,#0x24
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F5..         MOV     ?V10,A
   \   00015F   78..         MOV     R0,#?V10
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000164   7423         MOV     A,#0x23
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00016C   78..         MOV     R0,#?V14
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000171   740B         MOV     A,#0xb
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000179   740C         MOV     A,#0xc
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   F9           MOV     R1,A
   \   000180   AC..         MOV     R4,?V0
   \   000182   AD..         MOV     R5,?V1
   \   000184   AA..         MOV     R2,?V8
   \   000186   AB..         MOV     R3,?V9
   \   000188   12....       LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   00018B   740C         MOV     A,#0xc
   \   00018D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000190   EF           MOV     A,R7
   \   000191   85..82       MOV     DPL,?V8
   \   000194   85..83       MOV     DPH,?V9
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   F0           MOVX    @DPTR,A
   \                     ??afIncomingData_12:
   \   00019A   85..82       MOV     DPL,?V8
   \   00019D   85..83       MOV     DPH,?V9
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   540C         ANL     A,#0xc
   \   0001A3   640C         XRL     A,#0xc
   \   0001A5   7020         JNZ     ??afIncomingData_14
   \   0001A7                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001A7   EE           MOV     A,R6
   \   0001A8   F9           MOV     R1,A
   \   0001A9   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001AC   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0001AF   E9           MOV     A,R1
   \   0001B0   FE           MOV     R6,A
   \   0001B1   74FE         MOV     A,#-0x2
   \   0001B3   6E           XRL     A,R6
   \   0001B4   602D         JZ      ??afIncomingData_1
   \   0001B6                ; Setup parameters for call to function afFindEndPointDesc
   \   0001B6   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001B9   8A..         MOV     ?V0,R2
   \   0001BB   8B..         MOV     ?V1,R3
   \   0001BD   EA           MOV     A,R2
   \   0001BE   45..         ORL     A,?V1
   \   0001C0   6003         JZ      $+5
   \   0001C2   02....       LJMP    ??afIncomingData_6 & 0xFFFF
   \   0001C5   801C         SJMP    ??afIncomingData_1
   \                     ??afIncomingData_14:
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   F4           CPL     A
   \   0001CB   7016         JNZ     ??afIncomingData_1
   \   0001CD   85..82       MOV     DPL,?V2
   \   0001D0   85..83       MOV     DPH,?V3
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   F5..         MOV     ?V2,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V3,A
   \   0001DA   E5..         MOV     A,?V2
   \   0001DC   45..         ORL     A,?V3
   \   0001DE   6003         JZ      $+5
   \   0001E0   02....       LJMP    ??afIncomingData_4 & 0xFFFF
    462                else
    463                  epDesc = NULL;
    464              }
    465              else
    466                epDesc = NULL;
    467            }
    468          }
   \                     ??afIncomingData_1:
   \   0001E3   7403         MOV     A,#0x3
   \   0001E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E8   7F10         MOV     R7,#0x10
   \   0001EA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine33_0
   \   000008                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   E8           MOV     A,R0
   \   000004   FC           MOV     R4,A
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   \   000007   EC           MOV     A,R4
   \   000008   4D           ORL     A,R5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000006   E582         MOV     A,DPL
   \   000008   4583         ORL     A,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine35_0
   \   000001                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine36_0
   \   000001                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine37_0
   \   000002                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0
    469          
    470          /*********************************************************************
    471           * @fn          afBuildMSGIncoming
    472           *
    473           * @brief       Build the message for the app
    474           *
    475           * @param
    476           *
    477           * @return      pointer to next in data buffer
    478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    480                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    481                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    482          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V6,R1
    483            afIncomingMSGPacket_t *MSGpkt;
    484            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    485            uint8 *asdu = aff->asdu;
   \   00000F   EA           MOV     A,R2
   \   000010   240E         ADD     A,#0xe
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V8,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V9,A
    486            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000020   EA           MOV     A,R2
   \   000021   2410         ADD     A,#0x10
   \   000023   F5..         MOV     ?V2,A
   \   000025   E4           CLR     A
   \   000026   35..         ADDC    A,?V1
   \   000028   F5..         MOV     ?V3,A
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   85..82       MOV     DPL,?V2
   \   00002D   F583         MOV     DPH,A
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   2427         ADD     A,#0x27
   \   000032   FA           MOV     R2,A
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000038   8A..         MOV     ?V10,R2
   \   00003A   8B..         MOV     ?V11,R3
   \   00003C   AE..         MOV     R6,?V10
   \   00003E   AF..         MOV     R7,?V11
    487          
    488            if ( MSGpkt == NULL )
   \   000040   EE           MOV     A,R6
   \   000041   4F           ORL     A,R7
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    489            {
    490              return;
    491            }
    492          
    493            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   741A         MOV     A,#0x1a
   \   00004D   12....       LCALL   ?Subroutine24 & 0xFFFF
    494            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_37:
   \   000050   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000053   12....       LCALL   ?Subroutine21 & 0xFFFF
    495            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_32:
   \   000056   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    496            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_58:
   \   00005E                ; Setup parameters for call to function afCopyAddress
   \   00005E   7414         MOV     A,#0x14
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000066   EE           MOV     A,R6
   \   000067   2406         ADD     A,#0x6
   \   000069   FA           MOV     R2,A
   \   00006A   E4           CLR     A
   \   00006B   3F           ADDC    A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    497            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000070   85..82       MOV     DPL,?V0
   \   000073   85..83       MOV     DPH,?V1
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   C0E0         PUSH    A
   \   00007C   EE           MOV     A,R6
   \   00007D   240F         ADD     A,#0xf
   \   00007F   F582         MOV     DPL,A
   \   000081   E4           CLR     A
   \   000082   3F           ADDC    A,R7
   \   000083   F583         MOV     DPH,A
   \   000085   D0E0         POP     A
   \   000087   F0           MOVX    @DPTR,A
    498            MSGpkt->endPoint = epDesc->endPoint;
   \   000088   85..82       MOV     DPL,?V4
   \   00008B   85..83       MOV     DPH,?V5
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C0E0         PUSH    A
   \   000091   EE           MOV     A,R6
   \   000092   2414         ADD     A,#0x14
   \   000094   F582         MOV     DPL,A
   \   000096   E4           CLR     A
   \   000097   3F           ADDC    A,R7
   \   000098   F583         MOV     DPH,A
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    499            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   00009D   E5..         MOV     A,?V0
   \   00009F   240C         ADD     A,#0xc
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   35..         ADDC    A,?V1
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   C0E0         PUSH    A
   \   0000AB   EE           MOV     A,R6
   \   0000AC   2415         ADD     A,#0x15
   \   0000AE   F582         MOV     DPL,A
   \   0000B0   E4           CLR     A
   \   0000B1   3F           ADDC    A,R7
   \   0000B2   F583         MOV     DPH,A
   \   0000B4   D0E0         POP     A
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   7418         MOV     A,#0x18
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine15 & 0xFFFF
    500            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_19:
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   C0E0         PUSH    A
   \   0000C2   EE           MOV     A,R6
   \   0000C3   2416         ADD     A,#0x16
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   E4           CLR     A
   \   0000C8   3F           ADDC    A,R7
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
    501            MSGpkt->correlation = sig->correlation;
   \   0000CE   8882         MOV     DPL,R0
   \   0000D0   8983         MOV     DPH,R1
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   C0E0         PUSH    A
   \   0000D6   EE           MOV     A,R6
   \   0000D7   2417         ADD     A,#0x17
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E4           CLR     A
   \   0000DC   3F           ADDC    A,R7
   \   0000DD   F583         MOV     DPH,A
   \   0000DF   D0E0         POP     A
   \   0000E1   F0           MOVX    @DPTR,A
    502            MSGpkt->rssi = sig->rssi;
   \   0000E2   8882         MOV     DPL,R0
   \   0000E4   8983         MOV     DPH,R1
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C0E0         PUSH    A
   \   0000EB   EE           MOV     A,R6
   \   0000EC   2418         ADD     A,#0x18
   \   0000EE   F582         MOV     DPL,A
   \   0000F0   E4           CLR     A
   \   0000F1   3F           ADDC    A,R7
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   D0E0         POP     A
   \   0000F6   F0           MOVX    @DPTR,A
    503            MSGpkt->SecurityUse = SecurityUse;
   \   0000F7   741A         MOV     A,#0x1a
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   C0E0         PUSH    A
   \   0000FF   EE           MOV     A,R6
   \   000100   2419         ADD     A,#0x19
   \   000102   F582         MOV     DPL,A
   \   000104   E4           CLR     A
   \   000105   3F           ADDC    A,R7
   \   000106   F583         MOV     DPH,A
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
    504            MSGpkt->timestamp = timestamp;
   \   00010B   741B         MOV     A,#0x1b
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   12....       LCALL   ?XLOAD_R0123
   \   000113   EE           MOV     A,R6
   \   000114   241A         ADD     A,#0x1a
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   3F           ADDC    A,R7
   \   00011A   F583         MOV     DPH,A
   \   00011C   12....       LCALL   ?XSTORE_R0123
    505            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00011F   EE           MOV     A,R6
   \   000120   241E         ADD     A,#0x1e
   \   000122   F582         MOV     DPL,A
   \   000124   E4           CLR     A
   \   000125   3F           ADDC    A,R7
   \   000126   F583         MOV     DPH,A
   \   000128   E5..         MOV     A,?V6
   \   00012A   F0           MOVX    @DPTR,A
    506            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   00012B   E5..         MOV     A,?V0
   \   00012D   2415         ADD     A,#0x15
   \   00012F   F582         MOV     DPL,A
   \   000131   E4           CLR     A
   \   000132   35..         ADDC    A,?V1
   \   000134   F583         MOV     DPH,A
   \   000136   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000139   2424         ADD     A,#0x24
   \   00013B   F582         MOV     DPL,A
   \   00013D   E4           CLR     A
   \   00013E   3F           ADDC    A,R7
   \   00013F   F583         MOV     DPH,A
   \   000141   12....       LCALL   ?Subroutine21 & 0xFFFF
    507            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_33:
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00014F   2412         ADD     A,#0x12
   \   000151   12....       LCALL   ?Subroutine22 & 0xFFFF
    508            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_64:
   \   000154   7416         MOV     A,#0x16
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00015C   2410         ADD     A,#0x10
   \   00015E   12....       LCALL   ?Subroutine22 & 0xFFFF
    509            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_65:
   \   000161   EE           MOV     A,R6
   \   000162   241F         ADD     A,#0x1f
   \   000164   F582         MOV     DPL,A
   \   000166   E4           CLR     A
   \   000167   3F           ADDC    A,R7
   \   000168   F583         MOV     DPH,A
   \   00016A   E4           CLR     A
   \   00016B   F0           MOVX    @DPTR,A
    510            MSGpkt->cmd.DataLength = aff->asduLength;
   \   00016C   EE           MOV     A,R6
   \   00016D   2420         ADD     A,#0x20
   \   00016F   FC           MOV     R4,A
   \   000170   E4           CLR     A
   \   000171   3F           ADDC    A,R7
   \   000172   FD           MOV     R5,A
   \   000173   85..82       MOV     DPL,?V2
   \   000176   85..83       MOV     DPH,?V3
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   8C82         MOV     DPL,R4
   \   00017C   8D83         MOV     DPH,R5
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   A3           INC     DPTR
   \   000180   E4           CLR     A
   \   000181   F0           MOVX    @DPTR,A
    511            MSGpkt->radius = radius;
   \   000182   741F         MOV     A,#0x1f
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   E0           MOVX    A,@DPTR
   \   000188   C0E0         PUSH    A
   \   00018A   EE           MOV     A,R6
   \   00018B   2426         ADD     A,#0x26
   \   00018D   F582         MOV     DPL,A
   \   00018F   E4           CLR     A
   \   000190   3F           ADDC    A,R7
   \   000191   F583         MOV     DPH,A
   \   000193   D0E0         POP     A
   \   000195   F0           MOVX    @DPTR,A
    512          
    513            if ( MSGpkt->cmd.DataLength )
   \   000196   EE           MOV     A,R6
   \   000197   2422         ADD     A,#0x22
   \   000199   F8           MOV     R0,A
   \   00019A   E4           CLR     A
   \   00019B   3F           ADDC    A,R7
   \   00019C   F9           MOV     R1,A
   \   00019D   8C82         MOV     DPL,R4
   \   00019F   8D83         MOV     DPH,R5
   \   0001A1   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001A4   EA           MOV     A,R2
   \   0001A5   4B           ORL     A,R3
   \   0001A6   6029         JZ      ??afBuildMSGIncoming_1
    514            {
    515              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   0001A8   EE           MOV     A,R6
   \   0001A9   2427         ADD     A,#0x27
   \   0001AB   FA           MOV     R2,A
   \   0001AC   E4           CLR     A
   \   0001AD   3F           ADDC    A,R7
   \   0001AE   FB           MOV     R3,A
   \   0001AF   8882         MOV     DPL,R0
   \   0001B1   8983         MOV     DPH,R1
   \   0001B3   EA           MOV     A,R2
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   EB           MOV     A,R3
   \   0001B7   F0           MOVX    @DPTR,A
    516              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   0001B8                ; Setup parameters for call to function osal_memcpy
   \   0001B8   75..00       MOV     ?V10,#0x0
   \   0001BB   78..         MOV     R0,#?V8
   \   0001BD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001C0   8C82         MOV     DPL,R4
   \   0001C2   8D83         MOV     DPH,R5
   \   0001C4   12....       LCALL   ?Subroutine18 & 0xFFFF
    517            }
   \                     ??CrossCallReturnLabel_25:
   \   0001C7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001CA   7403         MOV     A,#0x3
   \   0001CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CF   8008         SJMP    ??afBuildMSGIncoming_2
    518            else
    519            {
    520              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001D1   8882         MOV     DPL,R0
   \   0001D3   8983         MOV     DPH,R1
   \   0001D5   E4           CLR     A
   \   0001D6   F0           MOVX    @DPTR,A
   \   0001D7   A3           INC     DPTR
   \   0001D8   F0           MOVX    @DPTR,A
    521            }
    522          
    523          #if defined ( MT_AF_CB_FUNC )
    524            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    525            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    526            {
    527              MT_AfIncomingMsg( (void *)MSGpkt );
    528              // Release the memory.
    529              osal_msg_deallocate( (void *)MSGpkt );
    530            }
    531            else
    532          #endif
    533            {
    534              // Send message through task message.
    535              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001D9                ; Setup parameters for call to function osal_msg_send
   \   0001D9   EE           MOV     A,R6
   \   0001DA   FA           MOV     R2,A
   \   0001DB   EF           MOV     A,R7
   \   0001DC   FB           MOV     R3,A
   \   0001DD   85..82       MOV     DPL,?V4
   \   0001E0   85..83       MOV     DPH,?V5
   \   0001E3   12....       LCALL   ?Subroutine7 & 0xFFFF
    536            }
   \                     ??CrossCallReturnLabel_7:
   \   0001E6   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    537          }
   \                     ??afBuildMSGIncoming_0:
   \   0001E9   7F0C         MOV     R7,#0xc
   \   0001EB   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?V0
   \   000008   85..83       MOV     DPH,?V1
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET
    538          
    539          /*********************************************************************
    540           * @fn      AF_DataRequest
    541           *
    542           * @brief   Common functionality for invoking APSDE_DataReq() for both
    543           *          SendMulti and MSG-Send.
    544           *
    545           * input parameters
    546           *
    547           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    548           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    549           * @param   cID - A valid cluster ID as specified by the Profile.
    550           * @param   len - Number of bytes of data pointed to by next param.
    551           * @param  *buf - A pointer to the data bytes to send.
    552           * @param  *transID - A pointer to a byte which can be modified and which will
    553           *                    be used as the transaction sequence number of the msg.
    554           * @param   options - Valid bit mask of Tx options.
    555           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    556           *
    557           * output parameters
    558           *
    559           * @param  *transID - Incremented by one if the return value is success.
    560           *
    561           * @return  afStatus_t - See previous definition of afStatus_... types.
    562           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    563          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    565                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    566                                     uint8 options, uint8 radius )
    567          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
    568            pDescCB pfnDescCB;
    569            ZStatus_t stat;
    570            APSDE_DataReq_t req;
    571            afDataReqMTU_t mtu;
    572            epList_t *pList;
    573          
    574            // Verify source end point
    575            if ( srcEP == NULL )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    576            {
    577              return afStatus_INVALID_PARAMETER;
    578            }
    579          
    580          #if !defined( REFLECTOR )
    581            if ( dstAddr->addrMode == afAddrNotPresent )
    582            {
    583              return afStatus_INVALID_PARAMETER;
    584            }
    585          #endif
    586          
    587            // Check if route is available before sending data
    588            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   00001B   EA           MOV     A,R2
   \   00001C   2408         ADD     A,#0x8
   \   00001E   F5..         MOV     ?V0,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V5
   \   000023   F5..         MOV     ?V1,A
   \   000025   E9           MOV     A,R1
   \   000026   A2E3         MOV     C,0xE0 /* A   */.3
   \   000028   5037         JNC     ??AF_DataRequest_1
    589            {
    590              if ( dstAddr->addrMode != afAddr16Bit )
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6402         XRL     A,#0x2
   \   000033   6003         JZ      $+5
   \   000035   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    591              {
    592                return ( afStatus_INVALID_PARAMETER );
    593              }
    594          
    595              // First, make sure the destination is not its self, then check for an existing route.
    596              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    597                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000038                ; Setup parameters for call to function NLME_GetShortAddr
   \   000038   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00003B   8A..         MOV     ?V6,R2
   \   00003D   8B..         MOV     ?V7,R3
   \   00003F   85..82       MOV     DPL,?V4
   \   000042   85..83       MOV     DPH,?V5
   \   000045   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000048   E5..         MOV     A,?V6
   \   00004A   6A           XRL     A,R2
   \   00004B   7003         JNZ     ??AF_DataRequest_2
   \   00004D   E5..         MOV     A,?V7
   \   00004F   6B           XRL     A,R3
   \                     ??AF_DataRequest_2:
   \   000050   600F         JZ      ??AF_DataRequest_1
   \   000052                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000052   7C03         MOV     R4,#0x3
   \   000054   7901         MOV     R1,#0x1
   \   000056   12....       LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000059   E9           MOV     A,R1
   \   00005A   6005         JZ      ??AF_DataRequest_1
    598              {
    599                // A valid route to a concentrator wasn't found
    600                return ( afStatus_NO_ROUTE );
   \   00005C   79CD         MOV     R1,#-0x33
   \   00005E   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    601              }
    602            }
    603          
    604            // Validate broadcasting
    605            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    606                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7402         MOV     A,#0x2
   \   00006B   68           XRL     A,R0
   \   00006C   6005         JZ      ??AF_DataRequest_4
   \   00006E   740F         MOV     A,#0xf
   \   000070   68           XRL     A,R0
   \   000071   703F         JNZ     ??AF_DataRequest_5
    607            {
    608              // Check for valid broadcast values
    609              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000073                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000073   85..82       MOV     DPL,?V4
   \   000076   85..83       MOV     DPH,?V5
   \   000079   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00007C   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00007F   E9           MOV     A,R1
   \   000080   85..82       MOV     DPL,?V0
   \   000083   85..83       MOV     DPH,?V1
   \   000086   6023         JZ      ??AF_DataRequest_6
    610              {
    611                // Force mode to broadcast
    612                dstAddr->addrMode = afAddrBroadcast;
   \   000088   740F         MOV     A,#0xf
   \   00008A   F0           MOVX    @DPTR,A
    613              }
    614              else
    615              {
    616                // Address is not a valid broadcast type
    617                if ( dstAddr->addrMode == afAddrBroadcast )
    618                {
    619                  return afStatus_INVALID_PARAMETER;
    620                }
    621              }
    622            }
    623            else if ( dstAddr->addrMode != afAddr64Bit &&
    624                      dstAddr->addrMode != afAddrGroup &&
    625                      dstAddr->addrMode != afAddrNotPresent )
    626            {
    627              return afStatus_INVALID_PARAMETER;
    628            }
    629          
    630            // Set destination address
    631            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C0E0         PUSH    A
   \   00008E   740A         MOV     A,#0xa
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   D0E0         POP     A
   \   000095   12....       LCALL   ?Subroutine24 & 0xFFFF
    632            if ( dstAddr->addrMode == afAddr64Bit )
   \                     ??CrossCallReturnLabel_38:
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6403         XRL     A,#0x3
   \   00009B   7027         JNZ     ??AF_DataRequest_8
    633            {
    634              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   00009D                ; Setup parameters for call to function sAddrExtCpy
   \   00009D   AC..         MOV     R4,?V4
   \   00009F   AD..         MOV     R5,?V5
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A6   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A9   802A         SJMP    ??CrossCallReturnLabel_59
    635            }
   \                     ??AF_DataRequest_6:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   640F         XRL     A,#0xf
   \   0000AE   70DB         JNZ     ??AF_DataRequest_7
   \   0000B0   800D         SJMP    ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   68           XRL     A,R0
   \   0000B5   60D4         JZ      ??AF_DataRequest_7
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   68           XRL     A,R0
   \   0000BA   60CF         JZ      ??AF_DataRequest_7
   \   0000BC   E8           MOV     A,R0
   \   0000BD   60CC         JZ      ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000BF   7902         MOV     R1,#0x2
   \   0000C1   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    636            else
    637            {
    638              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000C4   85..82       MOV     DPL,?V4
   \   0000C7   85..83       MOV     DPH,?V5
   \   0000CA   12....       LCALL   ??Subroutine40_0 & 0xFFFF
    639            }
   \                     ??CrossCallReturnLabel_81:
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    640          
    641            // This option is to use Wildcard ProfileID in outgoing packets
    642            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_59:
   \   0000D5   E5..         MOV     A,?V2
   \   0000D7   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000D9   7411         MOV     A,#0x11
   \   0000DB   5009         JNC     ??AF_DataRequest_9
    643            {
    644              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   74FF         MOV     A,#-0x1
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   805E         SJMP    ??AF_DataRequest_10
    645            }
    646            else
    647            {
    648              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E4           CLR     A
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   F0           MOVX    @DPTR,A
    649          
    650              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000ED   90....       MOV     DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   0000F0   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000F3   603A         JZ      ??AF_DataRequest_12
   \   0000F5   8882         MOV     DPL,R0
   \   0000F7   8983         MOV     DPH,R1
   \   0000F9   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000FC   EE           MOV     A,R6
   \   0000FD   6A           XRL     A,R2
   \   0000FE   7002         JNZ     ??AF_DataRequest_13
   \   000100   EF           MOV     A,R7
   \   000101   6B           XRL     A,R3
   \                     ??AF_DataRequest_13:
   \   000102   8882         MOV     DPL,R0
   \   000104   8983         MOV     DPH,R1
   \   000106   70E8         JNZ     ??AF_DataRequest_11
   \   000108   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00010B   6022         JZ      ??AF_DataRequest_12
    651              {
    652                uint16 *pID = (uint16 *)(pfnDescCB(
    653                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   00010D                ; Setup parameters for indirect call
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000114   12....       LCALL   ?CALL_IND
    654                if ( pID )
   \   000117   EA           MOV     A,R2
   \   000118   4B           ORL     A,R3
   \   000119   602A         JZ      ??AF_DataRequest_14
    655                {
    656                  req.profileID = *pID;
   \   00011B   8A82         MOV     DPL,R2
   \   00011D   8B83         MOV     DPH,R3
   \   00011F   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000122   7411         MOV     A,#0x11
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    657                  osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_60:
   \   00012A                ; Setup parameters for call to function osal_mem_free
   \   00012A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012D   8016         SJMP    ??AF_DataRequest_14
    658                }
    659              }
    660              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000136   600D         JZ      ??AF_DataRequest_14
    661              {
    662                req.profileID = srcEP->simpleDesc->AppProfId;
   \   000138   12....       LCALL   ?Subroutine17 & 0xFFFF
    663              }
    664            }
   \                     ??CrossCallReturnLabel_87:
   \   00013B   7411         MOV     A,#0x11
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   E8           MOV     A,R0
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   E9           MOV     A,R1
   \                     ??AF_DataRequest_10:
   \   000144   F0           MOVX    @DPTR,A
    665          
    666            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   000145   7417         MOV     A,#0x17
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   E4           CLR     A
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   A3           INC     DPTR
   \   00014D   F0           MOVX    @DPTR,A
    667          
    668            if ( ( options & AF_ACK_REQUEST              ) &&
    669                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    670                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00014E   E5..         MOV     A,?V2
   \   000150   A2E4         MOV     C,0xE0 /* A   */.4
   \   000152   501C         JNC     ??AF_DataRequest_15
   \   000154   740A         MOV     A,#0xa
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F8           MOV     R0,A
   \   00015B   740F         MOV     A,#0xf
   \   00015D   68           XRL     A,R0
   \   00015E   6010         JZ      ??AF_DataRequest_15
   \   000160   7401         MOV     A,#0x1
   \   000162   68           XRL     A,R0
   \   000163   600B         JZ      ??AF_DataRequest_15
    671            {
    672              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000165   7417         MOV     A,#0x17
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   7404         MOV     A,#0x4
   \   00016C   F0           MOVX    @DPTR,A
   \   00016D   A3           INC     DPTR
   \   00016E   E4           CLR     A
   \   00016F   F0           MOVX    @DPTR,A
    673            }
    674          
    675            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   000170   E5..         MOV     A,?V2
   \   000172   A2E7         MOV     C,0xE0 /* A   */.7
   \   000174   5009         JNC     ??AF_DataRequest_16
    676            {
    677              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000176   7417         MOV     A,#0x17
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   4410         ORL     A,#0x10
   \   00017E   F0           MOVX    @DPTR,A
    678            }
    679          
    680            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   00017F   E5..         MOV     A,?V2
   \   000181   A2E6         MOV     C,0xE0 /* A   */.6
   \   000183   5012         JNC     ??AF_DataRequest_17
    681            {
    682              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000185   7417         MOV     A,#0x17
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   4401         ORL     A,#0x1
   \   00018D   F0           MOVX    @DPTR,A
    683              mtu.aps.secure = TRUE;
   \   00018E   7401         MOV     A,#0x1
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   7401         MOV     A,#0x1
   \   000195   8006         SJMP    ??AF_DataRequest_18
    684            }
    685            else
    686            {
    687              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   000197   7401         MOV     A,#0x1
   \   000199   12....       LCALL   ?XSTACK_DISP0_8
   \   00019C   E4           CLR     A
   \                     ??AF_DataRequest_18:
   \   00019D   F0           MOVX    @DPTR,A
    688            }
    689          
    690            if ( options & AF_PREPROCESS )
   \   00019E   E5..         MOV     A,?V2
   \   0001A0   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001A2   5009         JNC     ??AF_DataRequest_19
    691            {
    692              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001A4   7417         MOV     A,#0x17
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   4440         ORL     A,#0x40
   \   0001AC   F0           MOVX    @DPTR,A
    693            }
    694          
    695            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001AD   85..82       MOV     DPL,?XSP + 0
   \   0001B0   85..83       MOV     DPH,?XSP + 1
   \   0001B3   E4           CLR     A
   \   0001B4   F0           MOVX    @DPTR,A
    696          
    697            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0001B5   E5..         MOV     A,?V2
   \   0001B7   A2E5         MOV     C,0xE0 /* A   */.5
   \   0001B9   5009         JNC     ??AF_DataRequest_20
    698            {
    699              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0001BB   741A         MOV     A,#0x1a
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   7404         MOV     A,#0x4
   \   0001C2   800D         SJMP    ??AF_DataRequest_21
    700            }
    701            else
    702            {
    703              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   0001C4   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   C0E0         PUSH    A
   \   0001CA   741A         MOV     A,#0x1a
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   D0E0         POP     A
   \                     ??AF_DataRequest_21:
   \   0001D1   F0           MOVX    @DPTR,A
   \   0001D2   7436         MOV     A,#0x36
   \   0001D4   12....       LCALL   ?XSTACK_DISP0_8
    704            }
   \   0001D7   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    705          
    706            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_53:
   \   0001DA   85..82       MOV     DPL,?V0
   \   0001DD   F583         MOV     DPH,A
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   C0E0         PUSH    A
   \   0001E2   7419         MOV     A,#0x19
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   D0E0         POP     A
   \   0001E9   F0           MOVX    @DPTR,A
    707            req.srcEP         = srcEP->endPoint;
   \   0001EA   8E82         MOV     DPL,R6
   \   0001EC   8F83         MOV     DPH,R7
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   C0E0         PUSH    A
   \   0001F1   740B         MOV     A,#0xb
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   D0E0         POP     A
   \   0001F8   F0           MOVX    @DPTR,A
    708            req.dstEP         = dstAddr->endPoint;
   \   0001F9   85..82       MOV     DPL,?V4
   \   0001FC   85..83       MOV     DPH,?V5
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   E0           MOVX    A,@DPTR
   \   000209   C0E0         PUSH    A
   \   00020B   740C         MOV     A,#0xc
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   D0E0         POP     A
   \   000212   F0           MOVX    @DPTR,A
    709            req.clusterID     = cID;
   \   000213   7430         MOV     A,#0x30
   \   000215   12....       LCALL   ?XSTACK_DISP0_8
   \   000218   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00021B   740F         MOV     A,#0xf
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000223   7432         MOV     A,#0x32
   \   000225   12....       LCALL   ?XSTACK_DISP0_8
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F5..         MOV     ?V4,A
   \   00022B   A3           INC     DPTR
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   F5..         MOV     ?V5,A
    710            req.asduLen       = len;
   \   00022F   7413         MOV     A,#0x13
   \   000231   12....       LCALL   ?XSTACK_DISP0_8
   \   000234   E5..         MOV     A,?V4
   \   000236   F0           MOVX    @DPTR,A
   \   000237   A3           INC     DPTR
   \   000238   E5..         MOV     A,?V5
   \   00023A   F0           MOVX    @DPTR,A
    711            req.asdu          = buf;
   \   00023B   7434         MOV     A,#0x34
   \   00023D   12....       LCALL   ?XSTACK_DISP0_8
   \   000240   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000243   7415         MOV     A,#0x15
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    712            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_62:
   \   00024B   7438         MOV     A,#0x38
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   E0           MOVX    A,@DPTR
   \   000251   C0E0         PUSH    A
   \   000253   741B         MOV     A,#0x1b
   \   000255   12....       LCALL   ?XSTACK_DISP0_8
   \   000258   D0E0         POP     A
   \   00025A   F0           MOVX    @DPTR,A
    713          #if defined ( INTER_PAN )
    714            req.dstPanId      = dstAddr->panId;
    715          #endif // INTER_PAN
    716          
    717            // Look if there is a Callback function registered for this endpoint
    718            // The callback is used to control the AF Transaction ID used when sending messages
    719            pList = afFindEndPointDescList( srcEP->endPoint );
   \   00025B                ; Setup parameters for call to function afFindEndPointDescList
   \   00025B   8E82         MOV     DPL,R6
   \   00025D   8F83         MOV     DPH,R7
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   F9           MOV     R1,A
   \   000261   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000264   8A82         MOV     DPL,R2
   \   000266   8B83         MOV     DPH,R3
    720          
    721            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   000268   E582         MOV     A,DPL
   \   00026A   4583         ORL     A,DPH
   \   00026C   6013         JZ      ??AF_DataRequest_22
   \   00026E   A3           INC     DPTR
   \   00026F   A3           INC     DPTR
   \   000270   A3           INC     DPTR
   \   000271   A3           INC     DPTR
   \   000272   A3           INC     DPTR
   \   000273   A3           INC     DPTR
   \   000274   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000277   6008         JZ      ??AF_DataRequest_22
    722            {
    723              pList->pfnApplCB( &req );
   \   000279                ; Setup parameters for indirect call
   \   000279   7402         MOV     A,#0x2
   \   00027B   12....       LCALL   ?XSTACK_DISP101_8
   \   00027E   12....       LCALL   ?CALL_IND
    724            }
    725          
    726          #if defined ( INTER_PAN )
    727            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    728            {
    729              if ( len > INTERP_DataReqMTU() )
    730              {
    731                stat = afStatus_INVALID_PARAMETER;
    732              }
    733              else
    734              {
    735                stat = INTERP_DataReq( &req );
    736              }
    737            }
    738            else
    739          #endif // INTER_PAN
    740            {
    741              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_22:
   \   000281                ; Setup parameters for call to function afDataReqMTU
   \   000281   AA..         MOV     R2,?XSP + 0
   \   000283   AB..         MOV     R3,?XSP + 1
   \   000285   12....       LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000288   E9           MOV     A,R1
   \   000289   C3           CLR     C
   \   00028A   95..         SUBB    A,?V4
   \   00028C   E4           CLR     A
   \   00028D   95..         SUBB    A,?V5
   \   00028F   501A         JNC     ??AF_DataRequest_23
    742              {
    743                if (apsfSendFragmented)
   \   000291   90....       MOV     DPTR,#apsfSendFragmented
   \   000294   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000297   600D         JZ      ??AF_DataRequest_24
    744                {
    745                  stat = (*apsfSendFragmented)( &req );
   \   000299                ; Setup parameters for indirect call
   \   000299   7402         MOV     A,#0x2
   \   00029B   12....       LCALL   ?XSTACK_DISP101_8
   \   00029E   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    746                }
   \                     ??CrossCallReturnLabel_77:
   \   0002A1   12....       LCALL   ?CALL_IND
   \   0002A4   800D         SJMP    ??AF_DataRequest_25
    747                else
    748                {
    749                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_24:
   \   0002A6   75..02       MOV     ?V3,#0x2
   \   0002A9   800B         SJMP    ??AF_DataRequest_26
    750                }
    751              }
    752              else
    753              {
    754                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   0002AB                ; Setup parameters for call to function APSDE_DataReq
   \   0002AB   7402         MOV     A,#0x2
   \   0002AD   12....       LCALL   ?XSTACK_DISP101_8
   \   0002B0   12....       LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_25:
   \   0002B3   E9           MOV     A,R1
   \   0002B4   F5..         MOV     ?V3,A
    755              }
    756            }
    757          
    758            /*
    759             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    760             * get added to the NWK databufs. So it will not go OTA and it will not get
    761             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    762             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    763             * message with the first in line TransSeqNumber, even on a multi message.
    764             * Also note that a reflected msg will not have its confirmation generated
    765             * here.
    766             */
    767            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    768                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_26:
   \   0002B6   740A         MOV     A,#0xa
   \   0002B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BB   E0           MOVX    A,@DPTR
   \   0002BC   6402         XRL     A,#0x2
   \   0002BE   702C         JNZ     ??AF_DataRequest_27
   \   0002C0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002C0   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0002C3   8A..         MOV     ?V4,R2
   \   0002C5   8B..         MOV     ?V5,R3
   \   0002C7   A8..         MOV     R0,?V4
   \   0002C9   A9..         MOV     R1,?V5
   \   0002CB   7402         MOV     A,#0x2
   \   0002CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D0   E0           MOVX    A,@DPTR
   \   0002D1   68           XRL     A,R0
   \   0002D2   7003         JNZ     ??AF_DataRequest_28
   \   0002D4   A3           INC     DPTR
   \   0002D5   E0           MOVX    A,@DPTR
   \   0002D6   69           XRL     A,R1
   \                     ??AF_DataRequest_28:
   \   0002D7   7013         JNZ     ??AF_DataRequest_27
    769            {
    770              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002D9                ; Setup parameters for call to function afDataConfirm
   \   0002D9   AB..         MOV     R3,?V3
   \   0002DB   85..82       MOV     DPL,?V0
   \   0002DE   85..83       MOV     DPH,?V1
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   FA           MOV     R2,A
   \   0002E3   8E82         MOV     DPL,R6
   \   0002E5   8F83         MOV     DPH,R7
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   F9           MOV     R1,A
   \   0002E9   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    771            }
    772          
    773            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_27:
   \   0002EC   E5..         MOV     A,?V3
   \   0002EE   7009         JNZ     ??AF_DataRequest_29
    774            {
    775              (*transID)++;
   \   0002F0   85..82       MOV     DPL,?V0
   \   0002F3   85..83       MOV     DPH,?V1
   \   0002F6   E0           MOVX    A,@DPTR
   \   0002F7   04           INC     A
   \   0002F8   F0           MOVX    @DPTR,A
    776            }
    777          
    778            return (afStatus_t)stat;
   \                     ??AF_DataRequest_29:
   \   0002F9   A9..         MOV     R1,?V3
   \                     ??AF_DataRequest_3:
   \   0002FB   7420         MOV     A,#0x20
   \   0002FD   12....       LCALL   ?DEALLOC_XSTACK8
   \   000300   02....       LJMP    ?Subroutine3 & 0xFFFF
    779          }
    780          
    781          #if defined ( ZIGBEEPRO )
    782          /*********************************************************************
    783           * @fn      AF_DataRequestSrcRtg
    784           *
    785           * @brief   Common functionality for invoking APSDE_DataReq() for both
    786           *          SendMulti and MSG-Send.
    787           *
    788           * input parameters
    789           *
    790           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    791           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    792           * @param   cID - A valid cluster ID as specified by the Profile.
    793           * @param   len - Number of bytes of data pointed to by next param.
    794           * @param  *buf - A pointer to the data bytes to send.
    795           * @param  *transID - A pointer to a byte which can be modified and which will
    796           *                    be used as the transaction sequence number of the msg.
    797           * @param   options - Valid bit mask of Tx options.
    798           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    799           * @param   relayCnt - Number of devices in the relay list
    800           * @param   pRelayList - Pointer to the relay list
    801           *
    802           * output parameters
    803           *
    804           * @param  *transID - Incremented by one if the return value is success.
    805           *
    806           * @return  afStatus_t - See previous definition of afStatus_... types.
    807           */
    808          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    809          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    810                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    811                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
    813            uint8 status;
    814          
    815            /* Add the source route to the source routing table */
    816            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    817                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000017   7415         MOV     A,#0x15
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000025   12....       LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000028   E9           MOV     A,R1
   \   000029   F9           MOV     R1,A
    818          
    819            if( status == RTG_SUCCESS)
   \   00002A   7043         JNZ     ??AF_DataRequestSrcRtg_0
    820            {
    821              /* Call AF_DataRequest to send the data */
    822              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00002C                ; Setup parameters for call to function AF_DataRequest
   \   00002C   7414         MOV     A,#0x14
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   7413         MOV     A,#0x13
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000041   7413         MOV     A,#0x13
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000049   7413         MOV     A,#0x13
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000051   7413         MOV     A,#0x13
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000059   A9..         MOV     R1,?V2
   \   00005B   AC..         MOV     R4,?V0
   \   00005D   AD..         MOV     R5,?V1
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000066   7409         MOV     A,#0x9
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   E9           MOV     A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   800B         SJMP    ??AF_DataRequestSrcRtg_1
    823            }
    824            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006F   7405         MOV     A,#0x5
   \   000071   69           XRL     A,R1
   \   000072   7004         JNZ     ??AF_DataRequestSrcRtg_2
    825            {
    826              /* The source route relay count is exceeding the network limit */
    827              status = afStatus_INVALID_PARAMETER;
   \   000074   7902         MOV     R1,#0x2
   \   000076   8002         SJMP    ??AF_DataRequestSrcRtg_1
    828            }
    829            else
    830            {
    831              /* The guaranteed adding entry fails due to memory failure */
    832              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000078   7910         MOV     R1,#0x10
    833            }
    834            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   00007A   02....       LJMP    ?Subroutine0 & 0xFFFF
    835          }
    836          
    837          #endif // ZIGBEEPRO
    838          
    839          /*********************************************************************
    840           * @fn      afFindEndPointDescList
    841           *
    842           * @brief   Find the endpoint description entry from the endpoint
    843           *          number.
    844           *
    845           * @param   EndPoint - Application Endpoint to look for
    846           *
    847           * @return  the address to the endpoint/interface description entry
    848           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    849          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    850          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    851            epList_t *epSearch;
    852          
    853            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8004         SJMP    ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   600A         JZ      ??afFindEndPointDescList_2
    854            {
    855              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   12....       LCALL   ?Subroutine19 & 0xFFFF
    856              {
    857                break;
    858              }
    859            }
   \                     ??CrossCallReturnLabel_28:
   \   00001B   69           XRL     A,R1
   \   00001C   70EB         JNZ     ??afFindEndPointDescList_1
    860          
    861            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   00001E                REQUIRE ?Subroutine4
   \   00001E                ; // Fall through to label ?Subroutine4
    862          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine38_0
   \   000001                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    863          
    864          /*********************************************************************
    865           * @fn      afFindEndPointDesc
    866           *
    867           * @brief   Find the endpoint description entry from the endpoint
    868           *          number.
    869           *
    870           * @param   EndPoint - Application Endpoint to look for
    871           *
    872           * @return  the address to the endpoint/interface description entry
    873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    874          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    875          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    876            epList_t *epSearch;
    877          
    878            // Look for the endpoint
    879            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
    880          
    881            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   6005         JZ      ??afFindEndPointDesc_0
    882              return ( epSearch->epDesc );
   \   000012   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000015   8004         SJMP    ??afFindEndPointDesc_1
    883            else
    884              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001B   02....       LJMP    ?Subroutine1 & 0xFFFF
    885          }
    886          
    887          /*********************************************************************
    888           * @fn      afFindSimpleDesc
    889           *
    890           * @brief   Find the Simple Descriptor from the endpoint number.
    891           *
    892           * @param   EP - Application Endpoint to look for.
    893           *
    894           * @return  Non-zero to indicate that the descriptor memory must be freed.
    895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    896          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    897          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    898            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AC..         MOV     R4,?V2
   \   000014   AD..         MOV     R5,?V3
    899            uint8 rtrn = FALSE;
   \   000016   7900         MOV     R1,#0x0
    900          
    901            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   4D           ORL     A,R5
   \   00001A   6038         JZ      ??afFindSimpleDesc_0
    902            {
    903              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000027   E582         MOV     A,DPL
   \   000029   4583         ORL     A,DPH
   \   00002B   6013         JZ      ??afFindSimpleDesc_1
    904              {
    905                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   AA..         MOV     R2,?V0
   \   00002F   09           INC     R1
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   EA           MOV     A,R2
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   EB           MOV     A,R3
   \   00003B   F0           MOVX    @DPTR,A
    906                rtrn = TRUE;
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   801C         SJMP    ??afFindSimpleDesc_2
    907              }
    908              else
    909              {
    910                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   12....       LCALL   ?Subroutine31 & 0xFFFF
    911              }
    912            }
   \                     ??CrossCallReturnLabel_79:
   \   000047   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   EA           MOV     A,R2
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   EB           MOV     A,R3
   \   000052   8007         SJMP    ??afFindSimpleDesc_3
    913            else
    914            {
    915              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \                     ??afFindSimpleDesc_3:
   \   00005B   F0           MOVX    @DPTR,A
    916            }
    917          
    918            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00005C   02....       LJMP    ?Subroutine0 & 0xFFFF
    919          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET
    920          
    921          /*********************************************************************
    922           * @fn      afGetDescCB
    923           *
    924           * @brief   Get the Descriptor callback function.
    925           *
    926           * @param   epDesc - pointer to the endpoint descriptor
    927           *
    928           * @return  function pointer or NULL
    929           */
    930          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    931          {
    932            epList_t *epSearch;
    933          
    934            // Start at the beginning
    935            epSearch = epList;
    936          
    937            // Look through the list until the end
    938            while ( epSearch )
    939            {
    940              // Is there a match?
    941              if ( epSearch->epDesc == epDesc )
    942              {
    943                return ( epSearch->pfnDescCB );
    944              }
    945              else
    946                epSearch = epSearch->nextDesc;  // Next entry
    947            }
    948          
    949            return ( (pDescCB)NULL );
    950          }
    951          
    952          /*********************************************************************
    953           * @fn      afDataReqMTU
    954           *
    955           * @brief   Get the Data Request MTU(Max Transport Unit).
    956           *
    957           * @param   fields - afDataReqMTU_t
    958           *
    959           * @return  uint8(MTU)
    960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    961          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    962          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    963            uint8 len;
    964            uint8 hdr;
    965          
    966            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    967            {
    968              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    969            }
    970            else
    971            {
    972              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    973            }
    974          
    975            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    976          
    977            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   02....       LJMP    ?Subroutine2 & 0xFFFF
    978          }
    979          
    980          /*********************************************************************
    981           * @fn      afGetMatch
    982           *
    983           * @brief   Set the allow response flag.
    984           *
    985           * @param   ep - Application Endpoint to look for
    986           * @param   action - true - allow response, false - no response
    987           *
    988           * @return  TRUE allow responses, FALSE no response
    989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    990          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    991          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    992            epList_t *epSearch;
    993          
    994            // Look for the endpoint
    995            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
    996          
    997            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   6011         JZ      ??afGetMatch_0
    998            {
    999              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001D   5004         JNC     ??afGetMatch_0
   1000                return ( TRUE );
   \   00001F   7901         MOV     R1,#0x1
   \   000021   8002         SJMP    ??afGetMatch_1
   1001              else
   1002                return ( FALSE );
   1003            }
   1004            else
   1005              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000023   7900         MOV     R1,#0x0
   \                     ??afGetMatch_1:
   \   000025                REQUIRE ?Subroutine1
   \   000025                ; // Fall through to label ?Subroutine1
   1006          }
   1007          
   1008          /*********************************************************************
   1009           * @fn      afSetMatch
   1010           *
   1011           * @brief   Set the allow response flag.
   1012           *
   1013           * @param   ep - Application Endpoint to look for
   1014           * @param   action - true - allow response, false - no response
   1015           *
   1016           * @return  TRUE if success, FALSE if endpoint not found
   1017           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1018          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1019          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FF           MOV     R7,A
   1020            epList_t *epSearch;
   1021          
   1022            // Look for the endpoint
   1023            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   A8..         MOV     R0,?V0
   \   000010   A9..         MOV     R1,?V1
   1024          
   1025            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   6019         JZ      ??afSetMatch_0
   1026            {
   1027              if ( action )
   \   000016   E8           MOV     A,R0
   \   000017   2408         ADD     A,#0x8
   \   000019   F582         MOV     DPL,A
   \   00001B   E4           CLR     A
   \   00001C   39           ADDC    A,R1
   \   00001D   F583         MOV     DPH,A
   \   00001F   EF           MOV     A,R7
   \   000020   6005         JZ      ??afSetMatch_1
   1028              {
   1029                epSearch->flags |= eEP_AllowMatch;
   \   000022   E0           MOVX    A,@DPTR
   \   000023   D2E0         SETB    0xE0 /* A   */.0
   \   000025   8003         SJMP    ??afSetMatch_2
   1030              }
   1031              else
   1032              {
   1033                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00002A   F0           MOVX    @DPTR,A
   1034              }
   1035              return ( TRUE );
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   8002         SJMP    ??afSetMatch_3
   1036            }
   1037            else
   1038              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002F   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   000031   80..         SJMP    ?Subroutine1
   1039          }
   1040          
   1041          /*********************************************************************
   1042           * @fn      afNumEndPoints
   1043           *
   1044           * @brief   Returns the number of endpoints defined (including 0)
   1045           *
   1046           * @param   none
   1047           *
   1048           * @return  number of endpoints
   1049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1050          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1051          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1052            epList_t *epSearch;
   1053            uint8 endpoints;
   1054          
   1055            // Start at the beginning
   1056            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ?Subroutine15 & 0xFFFF
   1057            endpoints = 0;
   \                     ??CrossCallReturnLabel_20:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   8004         SJMP    ??CrossCallReturnLabel_18
   1058          
   1059            while ( epSearch )
   1060            {
   1061              endpoints++;
   \                     ??afNumEndPoints_0:
   \   00000E   09           INC     R1
   1062              epSearch = epSearch->nextDesc;
   \   00000F   12....       LCALL   ?Subroutine13 & 0xFFFF
   1063            }
   \                     ??CrossCallReturnLabel_18:
   \   000012   E582         MOV     A,DPL
   \   000014   4583         ORL     A,DPH
   \   000016   70F6         JNZ     ??afNumEndPoints_0
   1064          
   1065            return ( endpoints );
   \   000018   02....       LJMP    ?Subroutine4 & 0xFFFF
   1066          }
   1067          
   1068          /*********************************************************************
   1069           * @fn      afEndPoints
   1070           *
   1071           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1072           *          Use afNumEndPoints to find out how big a buffer to supply.
   1073           *
   1074           * @param   epBuf - pointer to mem used
   1075           *
   1076           * @return  void
   1077           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1079          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1080            epList_t *epSearch;
   1081            uint8 endPoint;
   1082          
   1083            // Start at the beginning
   1084            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   801D         SJMP    ??afEndPoints_0
   1085          
   1086            while ( epSearch )
   1087            {
   1088              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000010   F8           MOV     R0,A
   1089          
   1090              if ( !skipZDO || endPoint != 0 )
   \   000011   E9           MOV     A,R1
   \   000012   6003         JZ      ??afEndPoints_2
   \   000014   E8           MOV     A,R0
   \   000015   600B         JZ      ??afEndPoints_3
   1091                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000017   E8           MOV     A,R0
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   1092          
   1093              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   1094            }
   \                     ??afEndPoints_0:
   \   000026   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000029   EC           MOV     A,R4
   \   00002A   4D           ORL     A,R5
   \   00002B   70DC         JNZ     ??afEndPoints_1
   1095          }
   \   00002D   02....       LJMP    ?Subroutine4 & 0xFFFF
   1096          
   1097          /*********************************************************************
   1098           * @fn      afCopyAddress
   1099           *
   1100           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1101           *          from the zAddrType_t parameter.
   1102           *
   1103           * @param   epBuf - pointer to mem used
   1104           *
   1105           * @return  void
   1106           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1107          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1108          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1109            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV     A,R4
   \   00000A   2408         ADD     A,#0x8
   \   00000C   F8           MOV     R0,A
   \   00000D   E4           CLR     A
   \   00000E   3D           ADDC    A,R5
   \   00000F   F9           MOV     R1,A
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
   1110            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6403         XRL     A,#0x3
   \   000029   7005         JNZ     ??afCopyAddress_0
   1111            {
   1112              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   800E         SJMP    ??CrossCallReturnLabel_63
   1113            }
   1114            else
   1115            {
   1116              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   1117            }
   \                     ??CrossCallReturnLabel_85:
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   1118          
   1119            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1120            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_63:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
   1121          }
   \   000050   02....       LJMP    ?Subroutine2 & 0xFFFF
   1122          
   1123          /**************************************************************************************************
   1124           * @fn          afAPSF_ConfigGet
   1125           *
   1126           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1127           *              the specified EndPoint.
   1128           *
   1129           * input parameters
   1130           *
   1131           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1132           *
   1133           * output parameters
   1134           *
   1135           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1136           *
   1137           * @return      None.
   1138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1139          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1141            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   A8..         MOV     R0,?V0
   \   000012   A9..         MOV     R1,?V1
   1142          
   1143            if (pList == NULL)
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   700D         JNZ     ??afAPSF_ConfigGet_0
   1144            {
   1145              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   7432         MOV     A,#0x32
   \   00001E   F0           MOVX    @DPTR,A
   1146              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001F   A3           INC     DPTR
   \   000020   7401         MOV     A,#0x1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8021         SJMP    ??afAPSF_ConfigGet_1
   1147            }
   1148            else
   1149            {
   1150              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000025                ; Setup parameters for call to function osal_memcpy
   \   000025   E8           MOV     A,R0
   \   000026   2406         ADD     A,#0x6
   \   000028   F5..         MOV     ?V0,A
   \   00002A   E4           CLR     A
   \   00002B   39           ADDC    A,R1
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   75..00       MOV     ?V2,#0x0
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   7C02         MOV     R4,#0x2
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   1151            }
   1152          }
   \                     ??afAPSF_ConfigGet_1:
   \   000046                REQUIRE ?Subroutine0
   \   000046                ; // Fall through to label ?Subroutine0
   1153          
   1154          /**************************************************************************************************
   1155           * @fn          afAPSF_ConfigSet
   1156           *
   1157           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1158           *              the specified EndPoint.
   1159           *
   1160           * input parameters
   1161           *
   1162           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1163           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1164           *
   1165           * output parameters
   1166           *
   1167           * None.
   1168           *
   1169           * @return      afStatus_SUCCESS for success.
   1170           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1171           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1172          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1173          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1174            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1175          
   1176            if (pList == NULL)
   \   00000C   EA           MOV     A,R2
   \   00000D   4B           ORL     A,R3
   \   00000E   7004         JNZ     ??afAPSF_ConfigSet_0
   1177            {
   1178              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV     R1,#0x2
   \   000012   8021         SJMP    ??afAPSF_ConfigSet_1
   1179            }
   1180          
   1181            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV     ?V0,R6
   \   000016   8F..         MOV     ?V1,R7
   \   000018   75..00       MOV     ?V2,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV     R4,#0x2
   \   000022   7D00         MOV     R5,#0x0
   \   000024   EA           MOV     A,R2
   \   000025   2406         ADD     A,#0x6
   \   000027   FA           MOV     R2,A
   \   000028   5001         JNC     ??afAPSF_ConfigSet_2
   \   00002A   0B           INC     R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   1182            return afStatus_SUCCESS;
   \   000033   7900         MOV     R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   80..         SJMP    ?Subroutine0
   1183          }
   1184          
   1185          /**************************************************************************************************
   1186           * @fn          afSetApplCB
   1187           *
   1188           * @brief       Sets the pointer to the Application Callback function for a
   1189           *              specific EndPoint.
   1190           *
   1191           * input parameters
   1192           *
   1193           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1194           * @param       pApplFn - A pointer to the Application Callback function.
   1195           *
   1196           * output parameters
   1197           *
   1198           * None.
   1199           *
   1200           * @return      TRUE if success, FALSE if endpoint not found
   1201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1202          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1203          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1204            if ( pApplFn != NULL )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   601F         JZ      ??afSetApplCB_0
   1205            {
   1206              epList_t *epSearch;
   1207          
   1208              // Look for the endpoint
   1209              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   1210          
   1211              if ( epSearch )
   \   000014   E582         MOV     A,DPL
   \   000016   4583         ORL     A,DPH
   \   000018   6012         JZ      ??afSetApplCB_0
   1212              {
   1213                epSearch->pfnApplCB = pApplFn;
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   1214          
   1215                return ( TRUE );
   \   000028   7901         MOV     R1,#0x1
   \   00002A   8002         SJMP    ??afSetApplCB_1
   1216              }
   1217            }
   1218          
   1219            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00002C   7900         MOV     R1,#0x0
   \                     ??afSetApplCB_1:
   \   00002E   80..         SJMP    ?Subroutine0
   1220          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1221          
   1222          /**************************************************************************************************
   1223          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     69   AF_DataRequest
        0     48   -> APSDE_DataReq
        0     48   -> NLME_GetShortAddr
        0     48   -> NLME_IsAddressBroadcast
        0     48   -> RTG_CheckRtStatus
        0     48   -> afDataConfirm
        0     48   -> afDataReqMTU
        0     48   -> afFindEndPointDescList
        0     48   -> osal_mem_free
        0     48   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     20   -> afCopyAddress
        0     23   -> osal_memcpy
        0     20   -> osal_msg_allocate
        0     20   -> osal_msg_send
      1     29   afCopyAddress
        0      9   -> sAddrExtCpy
      1     62   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     57   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     37   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     48   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     49   afIncomingData
        0     39   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afNumEndPoints
      1     18   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      0     24   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       8  ??Subroutine33_0
       6  ??Subroutine34_0
       1  ??Subroutine35_0
       2  ??Subroutine36_0
       6  ??Subroutine37_0
       4  ??Subroutine38_0
       6  ??Subroutine39_0
       4  ??Subroutine40_0
       6  ??Subroutine41_0
       5  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine10
       8  ?Subroutine11
       8  ?Subroutine12
      10  ?Subroutine13
       1  ?Subroutine14
       4  ?Subroutine15
       5  ?Subroutine16
       1  ?Subroutine17
       6  ?Subroutine18
       5  ?Subroutine19
       5  ?Subroutine2
       9  ?Subroutine20
      14  ?Subroutine21
       6  ?Subroutine22
       6  ?Subroutine23
       8  ?Subroutine24
       4  ?Subroutine25
       4  ?Subroutine26
       8  ?Subroutine27
       5  ?Subroutine28
      10  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
       1  ?Subroutine31
      10  ?Subroutine32
       7  ?Subroutine4
      11  ?Subroutine5
      26  ?Subroutine6
       6  ?Subroutine7
       6  ?Subroutine8
      10  ?Subroutine9
     771  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     125  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      70  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      55  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     494  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      83  afCopyAddress
       6  afCopyAddress::?relay
      74  afDataConfirm
       6  afDataConfirm::?relay
      35  afDataReqMTU
       6  afDataReqMTU::?relay
      71  afDelete
       6  afDelete::?relay
      48  afEndPoints
       6  afEndPoints::?relay
      30  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      30  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      95  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      37  afGetMatch
       6  afGetMatch::?relay
     493  afIncomingData
       6  afIncomingData::?relay
      27  afNumEndPoints
       6  afNumEndPoints::?relay
      94  afReflectError
       6  afReflectError::?relay
      71  afRegister
       6  afRegister::?relay
      95  afRegisterExtended
       6  afRegisterExtended::?relay
      48  afSetApplCB
       6  afSetApplCB::?relay
      51  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 3 173 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 3 300 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
