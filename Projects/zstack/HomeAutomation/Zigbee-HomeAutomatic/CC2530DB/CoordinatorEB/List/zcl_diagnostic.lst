###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Aug/2016  23:14:08
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_diagnostic.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_diagnostic.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\zcl_diagnostic.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\zcl_diagnostic.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_diagnostic.c
      1          /**************************************************************************************************
      2            Filename:       zcl_diagnostic.c
      3            Revised:        $Date: 2014-03-13 15:57:20 -0700 (Thu, 13 Mar 2014) $
      4            Revision:       $Revision: 37682 $
      5          
      6            Description:    Zigbee Cluster Library - Diagnostics.
      7          
      8          
      9            Copyright 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef ZCL_DIAGNOSTIC
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          #include "zcl_diagnostic.h"
     46          #include "ZDiags.h"
     47          
     48          #if !defined ( FEATURE_SYSTEM_STATS )
     49          #error "ERROR: FEATURE_SYSTEM_STATS shall be defined if ZCL_DIAGNOSTICS is defined."
     50          #endif
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          // Attribute record
     64          typedef struct
     65          {
     66            uint16  zclAttrId;        // Attribute ID as defined by ZCL Diagnostics Cluster
     67            uint8   dataType;         // Data Type - defined in AF.h
     68            uint16  ZDiagsAttrId;     // Attribute ID as defined by ZDiags module
     69          } zclDiagnosticAttr_t;
     70          
     71          
     72          
     73          /*********************************************************************
     74           * GLOBAL VARIABLES
     75           */

   \                                 In  segment CODE_C, align 1
     76          CONST zclDiagnosticAttr_t zclDiagsAttrTable[] =
   \                     zclDiagsAttrTable:
   \   000000   0000         DW 0
   \   000002   21           DB 33
   \   000003   0100         DW 1
   \   000005   0100         DW 1
   \   000007   21           DB 33
   \   000008   0200         DW 2
   \   00000A   0001         DW 256
   \   00000C   23           DB 35
   \   00000D   6600         DW 102
   \   00000F   0101         DW 257
   \   000011   23           DB 35
   \   000012   6700         DW 103
   \   000014   0201         DW 258
   \   000016   23           DB 35
   \   000017   6800         DW 104
   \   000019   0301         DW 259
   \   00001B   23           DB 35
   \   00001C   6900         DW 105
   \   00001E   0401         DW 260
   \   000020   21           DB 33
   \   000021   6A00         DW 106
   \   000023   0501         DW 261
   \   000025   21           DB 33
   \   000026   6B00         DW 107
   \   000028   0601         DW 262
   \   00002A   21           DB 33
   \   00002B   2C01         DW 300
   \   00002D   0701         DW 263
   \   00002F   21           DB 33
   \   000030   2D01         DW 301
   \   000032   0801         DW 264
   \   000034   21           DB 33
   \   000035   2E01         DW 302
   \   000037   0901         DW 265
   \   000039   21           DB 33
   \   00003A   2F01         DW 303
   \   00003C   0A01         DW 266
   \   00003E   21           DB 33
   \   00003F   3001         DW 304
   \   000041   0B01         DW 267
   \   000043   21           DB 33
   \   000044   3101         DW 305
   \   000046   0C01         DW 268
   \   000048   21           DB 33
   \   000049   C800         DW 200
   \   00004B   0D01         DW 269
   \   00004D   21           DB 33
   \   00004E   C900         DW 201
   \   000050   0E01         DW 270
   \   000052   21           DB 33
   \   000053   CA00         DW 202
   \   000055   0F01         DW 271
   \   000057   21           DB 33
   \   000058   CB00         DW 203
   \   00005A   1001         DW 272
   \   00005C   21           DB 33
   \   00005D   CC00         DW 204
   \   00005F   1101         DW 273
   \   000061   21           DB 33
   \   000062   CD00         DW 205
   \   000064   1201         DW 274
   \   000066   21           DB 33
   \   000067   CE00         DW 206
   \   000069   1301         DW 275
   \   00006B   21           DB 33
   \   00006C   3201         DW 306
   \   00006E   1401         DW 276
   \   000070   21           DB 33
   \   000071   3301         DW 307
   \   000073   1501         DW 277
   \   000075   21           DB 33
   \   000076   CF00         DW 207
   \   000078   1601         DW 278
   \   00007A   21           DB 33
   \   00007B   3401         DW 308
   \   00007D   1701         DW 279
   \   00007F   21           DB 33
   \   000080   D000         DW 208
   \   000082   1801         DW 280
   \   000084   21           DB 33
   \   000085   D100         DW 209
   \   000087   1901         DW 281
   \   000089   21           DB 33
   \   00008A   D200         DW 210
   \   00008C   1A01         DW 282
   \   00008E   21           DB 33
   \   00008F   D300         DW 211
     77          {
     78            {
     79              ATTRID_DIAGNOSTIC_NUMBER_OF_RESETS,
     80              ZCL_DATATYPE_UINT16,
     81              ZDIAGS_NUMBER_OF_RESETS
     82            },
     83            {
     84              ATTRID_DIAGNOSTIC_PERSISTENT_MEMORY_WRITES,
     85              ZCL_DATATYPE_UINT16,
     86              ZDIAGS_PERSISTENT_MEMORY_WRITES
     87            },
     88            {
     89              ATTRID_DIAGNOSTIC_MAC_RX_BCAST,
     90              ZCL_DATATYPE_UINT32,
     91              ZDIAGS_MAC_RX_BCAST
     92            },
     93            {
     94              ATTRID_DIAGNOSTIC_MAC_TX_BCAST,
     95              ZCL_DATATYPE_UINT32,
     96              ZDIAGS_MAC_TX_BCAST
     97            },
     98            {
     99              ATTRID_DIAGNOSTIC_MAC_RX_UCAST,
    100              ZCL_DATATYPE_UINT32,
    101              ZDIAGS_MAC_RX_UCAST
    102            },
    103            {
    104              ATTRID_DIAGNOSTIC_MAC_TX_UCAST,
    105              ZCL_DATATYPE_UINT32,
    106              ZDIAGS_MAC_TX_UCAST
    107            },
    108            {
    109              ATTRID_DIAGNOSTIC_MAC_TX_UCAST_RETRY,
    110              ZCL_DATATYPE_UINT16,
    111              ZDIAGS_MAC_TX_UCAST_RETRY
    112            },
    113            {
    114              ATTRID_DIAGNOSTIC_MAC_TX_UCAST_FAIL,
    115              ZCL_DATATYPE_UINT16,
    116              ZDIAGS_MAC_TX_UCAST_FAIL
    117            },
    118            {
    119              ATTRID_DIAGNOSTIC_APS_RX_BCAST,
    120              ZCL_DATATYPE_UINT16,
    121              ZDIAGS_APS_RX_BCAST
    122            },
    123            {
    124              ATTRID_DIAGNOSTIC_APS_TX_BCAST,
    125              ZCL_DATATYPE_UINT16,
    126              ZDIAGS_APS_TX_BCAST
    127            },
    128            {
    129              ATTRID_DIAGNOSTIC_APS_RX_UCAST,
    130              ZCL_DATATYPE_UINT16,
    131              ZDIAGS_APS_RX_UCAST
    132            },
    133            {
    134              ATTRID_DIAGNOSTIC_APS_TX_UCAST_SUCCESS,
    135              ZCL_DATATYPE_UINT16,
    136              ZDIAGS_APS_TX_UCAST_SUCCESS
    137            },
    138            {
    139              ATTRID_DIAGNOSTIC_APS_TX_UCAST_RETRY,
    140              ZCL_DATATYPE_UINT16,
    141              ZDIAGS_APS_TX_UCAST_RETRY
    142            },
    143            {
    144              ATTRID_DIAGNOSTIC_APS_TX_UCAST_FAIL,
    145              ZCL_DATATYPE_UINT16,
    146              ZDIAGS_APS_TX_UCAST_FAIL
    147            },
    148            {
    149              ATTRID_DIAGNOSTIC_ROUTE_DISC_INITIATED,
    150              ZCL_DATATYPE_UINT16,
    151              ZDIAGS_ROUTE_DISC_INITIATED
    152            },
    153            {
    154              ATTRID_DIAGNOSTIC_NEIGHBOR_ADDED,
    155              ZCL_DATATYPE_UINT16,
    156              ZDIAGS_NEIGHBOR_ADDED
    157            },
    158            {
    159              ATTRID_DIAGNOSTIC_NEIGHBOR_REMOVED,
    160              ZCL_DATATYPE_UINT16,
    161              ZDIAGS_NEIGHBOR_REMOVED
    162            },
    163            {
    164              ATTRID_DIAGNOSTIC_NEIGHBOR_STALE,
    165              ZCL_DATATYPE_UINT16,
    166              ZDIAGS_NEIGHBOR_STALE
    167            },
    168            {
    169              ATTRID_DIAGNOSTIC_JOIN_INDICATION,
    170              ZCL_DATATYPE_UINT16,
    171              ZDIAGS_JOIN_INDICATION
    172            },
    173            {
    174              ATTRID_DIAGNOSTIC_CHILD_MOVED,
    175              ZCL_DATATYPE_UINT16,
    176              ZDIAGS_CHILD_MOVED
    177            },
    178            {
    179              ATTRID_DIAGNOSTIC_NWK_FC_FAILURE,
    180              ZCL_DATATYPE_UINT16,
    181              ZDIAGS_NWK_FC_FAILURE
    182            },
    183            {
    184              ATTRID_DIAGNOSTIC_APS_FC_FAILURE,
    185              ZCL_DATATYPE_UINT16,
    186              ZDIAGS_APS_FC_FAILURE
    187            },
    188            {
    189              ATTRID_DIAGNOSTIC_APS_UNAUTHORIZED_KEY,
    190              ZCL_DATATYPE_UINT16,
    191              ZDIAGS_APS_UNAUTHORIZED_KEY
    192            },
    193            {
    194              ATTRID_DIAGNOSTIC_NWK_DECRYPT_FAILURES,
    195              ZCL_DATATYPE_UINT16,
    196              ZDIAGS_NWK_DECRYPT_FAILURES
    197            },
    198            {
    199              ATTRID_DIAGNOSTIC_APS_DECRYPT_FAILURES,
    200              ZCL_DATATYPE_UINT16,
    201              ZDIAGS_APS_DECRYPT_FAILURES
    202            },
    203            {
    204              ATTRID_DIAGNOSTIC_PACKET_BUFFER_ALLOCATE_FAILURES,
    205              ZCL_DATATYPE_UINT16,
    206              ZDIAGS_PACKET_BUFFER_ALLOCATE_FAILURES
    207            },
    208            {
    209              ATTRID_DIAGNOSTIC_RELAYED_UCAST,
    210              ZCL_DATATYPE_UINT16,
    211              ZDIAGS_RELAYED_UCAST
    212            },
    213            {
    214              ATTRID_DIAGNOSTIC_PHY_TO_MAC_QUEUE_LIMIT_REACHED,
    215              ZCL_DATATYPE_UINT16,
    216              ZDIAGS_PHY_TO_MAC_QUEUE_LIMIT_REACHED
    217            },
    218            {
    219              ATTRID_DIAGNOSTIC_PACKET_VALIDATE_DROP_COUNT,
    220              ZCL_DATATYPE_UINT16,
    221              ZDIAGS_PACKET_VALIDATE_DROP_COUNT
    222            },
    223          };
    224          
    225          /*********************************************************************
    226           * LOCAL VARIABLES
    227           */
    228          
    229          /*********************************************************************
    230           * LOCAL FUNCTIONS
    231           */
    232          static ZStatus_t zclDiagnostic_GetAttribData( uint16 zclAttrId, uint16 *zdiagsAttrId, uint16 *dataLen );
    233          
    234          /****************************************************************************
    235           * @fn          zclDiagnostic_GetAttribData()
    236           *
    237           * @brief       Gets the Z-Stack attribute data for a specific ZCL Diagnostics
    238           *              AttributeID.
    239           *
    240           * @param       none.
    241           *
    242           * @return      none.
    243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          static ZStatus_t zclDiagnostic_GetAttribData( uint16 zclAttrId, uint16 *zdiagsAttrId, uint16 *dataLen )
   \                     zclDiagnostic_GetAttribData:
    245          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    246            uint8 i;
    247            uint8 attrTableSize = sizeof(zclDiagsAttrTable);
    248          
    249            for ( i = 0; i < attrTableSize; i++ )
   \   000005   75..00       MOV     ?V0,#0x0
    250            {
    251              if ( zclDiagsAttrTable[i].zclAttrId == zclAttrId )
   \                     ??zclDiagnostic_GetAttribData_0:
   \   000008   E5..         MOV     A,?V0
   \   00000A   75F005       MOV     B,#0x5
   \   00000D   A4           MUL     AB
   \   00000E   F8           MOV     R0,A
   \   00000F   A9F0         MOV     R1,B
   \   000011   74..         MOV     A,#zclDiagsAttrTable & 0xff
   \   000013   28           ADD     A,R0
   \   000014   F8           MOV     R0,A
   \   000015   74..         MOV     A,#(zclDiagsAttrTable >> 8) & 0xff
   \   000017   39           ADDC    A,R1
   \   000018   F9           MOV     R1,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   E4           CLR     A
   \   00001E   93           MOVC    A,@A+DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   7401         MOV     A,#0x1
   \   000022   93           MOVC    A,@A+DPTR
   \   000023   FF           MOV     R7,A
   \   000024   EA           MOV     A,R2
   \   000025   6E           XRL     A,R6
   \   000026   7002         JNZ     ??zclDiagnostic_GetAttribData_1
   \   000028   EB           MOV     A,R3
   \   000029   6F           XRL     A,R7
   \                     ??zclDiagnostic_GetAttribData_1:
   \   00002A   7036         JNZ     ??zclDiagnostic_GetAttribData_2
    252              {
    253                *zdiagsAttrId = zclDiagsAttrTable[i].ZDiagsAttrId;
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E4           CLR     A
   \   000030   93           MOVC    A,@A+DPTR
   \   000031   FA           MOV     R2,A
   \   000032   7401         MOV     A,#0x1
   \   000034   93           MOVC    A,@A+DPTR
   \   000035   FB           MOV     R3,A
   \   000036   8C82         MOV     DPL,R4
   \   000038   8D83         MOV     DPH,R5
   \   00003A   EA           MOV     A,R2
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   EB           MOV     A,R3
   \   00003E   F0           MOVX    @DPTR,A
    254                *dataLen = (uint16)zclGetDataTypeLength( zclDiagsAttrTable[i].dataType );
   \   00003F                ; Setup parameters for call to function zclGetDataTypeLength
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E4           CLR     A
   \   000046   93           MOVC    A,@A+DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   00004B   E9           MOV     A,R1
   \   00004C   F8           MOV     R0,A
   \   00004D   7409         MOV     A,#0x9
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F583         MOV     DPH,A
   \   000058   8A82         MOV     DPL,R2
   \   00005A   E8           MOV     A,R0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    255          
    256                return ( ZSuccess );
   \   00005F   F9           MOV     R1,A
   \   000060   800B         SJMP    ??zclDiagnostic_GetAttribData_3
    257              }
    258            }
   \                     ??zclDiagnostic_GetAttribData_2:
   \   000062   05..         INC     ?V0
   \   000064   E5..         MOV     A,?V0
   \   000066   C3           CLR     C
   \   000067   9491         SUBB    A,#-0x6f
   \   000069   409D         JC      ??zclDiagnostic_GetAttribData_0
    259          
    260            return ( ZFailure );
   \   00006B   7901         MOV     R1,#0x1
   \                     ??zclDiagnostic_GetAttribData_3:
   \   00006D                REQUIRE ?Subroutine0
   \   00006D                ; // Fall through to label ?Subroutine0
    261          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    262          
    263          /****************************************************************************
    264           * @fn          zclDiagnostic_InitStats()
    265           *
    266           * @brief       Initialize the statistics table.
    267           *
    268           * @param       none.
    269           *
    270           * @return      ZSuccess - if NV data was initialized successfully.
    271           *              ZFailure - Otherwise
    272           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    273          uint8 zclDiagnostic_InitStats( void )
   \                     zclDiagnostic_InitStats:
    274          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    275            // Initialize the Diagnostics table in the Lower layer
    276            return ( ZDiagsInitStats() );
   \   000004                ; Setup parameters for call to function ZDiagsInitStats
   \   000004   12....       LCALL   `??ZDiagsInitStats::?relay`; Banked call to: ZDiagsInitStats
   \   000007                REQUIRE ?Subroutine1
   \   000007                ; // Fall through to label ?Subroutine1
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    278          
    279          /****************************************************************************
    280           * @fn          zclDiagnostic_ClearStats
    281           *
    282           * @brief       Clears the statistics table in RAM and NV if option flag set.
    283           *
    284           * @param       clearNV   - Option flag to clear NV data.
    285           *
    286           * @return      System Clock.
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          uint32 zclDiagnostic_ClearStats( bool clearNV )
   \                     zclDiagnostic_ClearStats:
    289          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    290            // calls the diagnostics function to clear statistics and returns the system clock
    291            return ZDiagsClearStats( clearNV );
   \   000005                ; Setup parameters for call to function ZDiagsClearStats
   \   000005   12....       LCALL   `??ZDiagsClearStats::?relay`; Banked call to: ZDiagsClearStats
   \   000008   80..         SJMP    ?Subroutine0
    292          }
    293          
    294          /****************************************************************************
    295           * @fn          zclDiagnostic_GetStatsAttr
    296           *
    297           * @brief       Reads Diagnostic values based on specific ZCL Diagnostics
    298           *              attribute ID
    299           *
    300           * @param       attributeId  input  - ZCL identifier for the required attribute
    301           * @param       value       output - value of the specific item
    302           *
    303           * NOTE:  the user of this function will have to cast the value
    304           *        based on the type of the attributeId, the returned value
    305           *        will allways be uint32
    306           *
    307           * @return      ZStatus_t
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          ZStatus_t zclDiagnostic_GetStatsAttr( uint16 attributeId, uint32 *attrValue, uint16 *dataLen )
   \                     zclDiagnostic_GetStatsAttr:
    310          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
    311            uint8 status = ZSuccess;
   \   000015   7E00         MOV     R6,#0x0
   \   000017   741C         MOV     A,#0x1c
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V1,A
    312            uint16 ZDiagsAttrId;
    313          
    314            // this atribute is a calculated value
    315            if ( attributeId == ATTRID_DIAGNOSTIC_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT )
   \   000023   741B         MOV     A,#0x1b
   \   000025   6A           XRL     A,R2
   \   000026   7003         JNZ     ??zclDiagnostic_GetStatsAttr_0
   \   000028   7401         MOV     A,#0x1
   \   00002A   6B           XRL     A,R3
   \                     ??zclDiagnostic_GetStatsAttr_0:
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??zclDiagnostic_GetStatsAttr_1 & 0xFFFF
    316            {
    317              uint32 macRetriesPerApsTx;
    318              uint32 apsTxUcastSuccess;
    319              uint32 apsTxUcastFailure;
    320          
    321              // retrieve each attribute to calculate the requested value
    322              macRetriesPerApsTx = ZDiagsGetStatsAttr( ZDIAGS_MAC_RETRIES_PER_APS_TX_SUCCESS );
   \   000030                ; Setup parameters for call to function ZDiagsGetStatsAttr
   \   000030   7A36         MOV     R2,#0x36
   \   000032   7B01         MOV     R3,#0x1
   \   000034   12....       LCALL   `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
   \   000037   8A..         MOV     ?V12,R2
   \   000039   8B..         MOV     ?V13,R3
   \   00003B   8C..         MOV     ?V14,R4
   \   00003D   8D..         MOV     ?V15,R5
    323          
    324              apsTxUcastSuccess = ZDiagsGetStatsAttr( ZDIAGS_APS_TX_UCAST_SUCCESS );
   \   00003F                ; Setup parameters for call to function ZDiagsGetStatsAttr
   \   00003F   7A2F         MOV     R2,#0x2f
   \   000041   7B01         MOV     R3,#0x1
   \   000043   12....       LCALL   `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
   \   000046   8A..         MOV     ?V4,R2
   \   000048   8B..         MOV     ?V5,R3
   \   00004A   8C..         MOV     ?V6,R4
   \   00004C   8D..         MOV     ?V7,R5
    325          
    326              apsTxUcastFailure = ZDiagsGetStatsAttr( ZDIAGS_APS_TX_UCAST_FAIL );
   \   00004E                ; Setup parameters for call to function ZDiagsGetStatsAttr
   \   00004E   7A31         MOV     R2,#0x31
   \   000050   7B01         MOV     R3,#0x1
   \   000052   12....       LCALL   `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
   \   000055   8A..         MOV     ?V8,R2
   \   000057   8B..         MOV     ?V9,R3
   \   000059   8C..         MOV     ?V10,R4
   \   00005B   8D..         MOV     ?V11,R5
    327          
    328              *dataLen = 2;  // this is the lenght of ATTRID_DIAGNOSTIC_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT
   \   00005D   85..82       MOV     DPL,?V0
   \   000060   85..83       MOV     DPH,?V1
   \   000063   7402         MOV     A,#0x2
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
    329          
    330              if ( ( apsTxUcastSuccess != 0 ) || ( apsTxUcastFailure != 0 ) )
   \   000069   E5..         MOV     A,?V4
   \   00006B   45..         ORL     A,?V5
   \   00006D   45..         ORL     A,?V6
   \   00006F   45..         ORL     A,?V7
   \   000071   7009         JNZ     ??zclDiagnostic_GetStatsAttr_2
   \   000073   EA           MOV     A,R2
   \   000074   45..         ORL     A,?V9
   \   000076   45..         ORL     A,?V10
   \   000078   45..         ORL     A,?V11
   \   00007A   602E         JZ      ??zclDiagnostic_GetStatsAttr_3
    331              {
    332                // This formula considers the total MAC Failures per APS transmitted packet.
    333                // If MAC PIB element maxFrameRetries is changed from the default value 3, this formula
    334                // shall be updated and replace 4 with (MAC PIB maxFrameRetries+1) value
    335                *attrValue = ( macRetriesPerApsTx + ( apsTxUcastFailure * 4 ) ) / ( apsTxUcastSuccess + apsTxUcastFailure );
   \                     ??zclDiagnostic_GetStatsAttr_2:
   \   00007C   8A..         MOV     ?V0,R2
   \   00007E   8B..         MOV     ?V1,R3
   \   000080   8C..         MOV     ?V2,R4
   \   000082   8D..         MOV     ?V3,R5
   \   000084   7402         MOV     A,#0x2
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?L_SHL
   \   00008B   78..         MOV     R0,#?V12
   \   00008D   79..         MOV     R1,#?V0
   \   00008F   12....       LCALL   ?L_ADD
   \   000092   78..         MOV     R0,#?V4
   \   000094   79..         MOV     R1,#?V8
   \   000096   12....       LCALL   ?L_ADD
   \   000099   78..         MOV     R0,#?V12
   \   00009B   79..         MOV     R1,#?V4
   \   00009D   12....       LCALL   ?UL_DIV_MOD
   \   0000A0   12....       LCALL   ?Subroutine3 & 0xFFFF
    336              }
   \                     ??CrossCallReturnLabel_0:
   \   0000A3   78..         MOV     R0,#?V12
   \   0000A5   12....       LCALL   ?L_MOV_TO_X
   \   0000A8   804C         SJMP    ??zclDiagnostic_GetStatsAttr_4
    337              else
    338              {
    339                *attrValue = 0;
   \                     ??zclDiagnostic_GetStatsAttr_3:
   \   0000AA   12....       LCALL   ?Subroutine3 & 0xFFFF
    340              }
    341            }
   \                     ??CrossCallReturnLabel_1:
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   803F         SJMP    ??zclDiagnostic_GetStatsAttr_4
    342            // look-up for ZDiags attribute ID, based on the ZCL Diagnostics cluster attribute ID
    343            else if ( zclDiagnostic_GetAttribData( attributeId, &ZDiagsAttrId, dataLen ) == ZSuccess )
   \                     ??zclDiagnostic_GetStatsAttr_1:
   \   0000B7                ; Setup parameters for call to function zclDiagnostic_GetAttribData
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?XSTACK_DISP102_8
   \   0000C1   12....       LCALL   `??zclDiagnostic_GetAttribData::?relay`; Banked call to: zclDiagnostic_GetAttribData
   \   0000C4   7402         MOV     A,#0x2
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   E9           MOV     A,R1
   \   0000CA   7028         JNZ     ??zclDiagnostic_GetStatsAttr_5
    344            {
    345              *attrValue = ZDiagsGetStatsAttr( ZDiagsAttrId );
   \   0000CC                ; Setup parameters for call to function ZDiagsGetStatsAttr
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   FA           MOV     R2,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FB           MOV     R3,A
   \   0000D6   12....       LCALL   `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
   \   0000D9   EA           MOV     A,R2
   \   0000DA   F8           MOV     R0,A
   \   0000DB   EB           MOV     A,R3
   \   0000DC   F9           MOV     R1,A
   \   0000DD   EC           MOV     A,R4
   \   0000DE   FA           MOV     R2,A
   \   0000DF   ED           MOV     A,R5
   \   0000E0   FB           MOV     R3,A
   \   0000E1   85..82       MOV     DPL,?XSP + 0
   \   0000E4   85..83       MOV     DPH,?XSP + 1
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   FC           MOV     R4,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   8C82         MOV     DPL,R4
   \   0000EF   12....       LCALL   ?XSTORE_R0123
   \   0000F2   8002         SJMP    ??zclDiagnostic_GetStatsAttr_4
    346            }
    347            else
    348            {
    349              status = ZFailure;
   \                     ??zclDiagnostic_GetStatsAttr_5:
   \   0000F4   7E01         MOV     R6,#0x1
    350            }
    351          
    352            return ( status );
   \                     ??zclDiagnostic_GetStatsAttr_4:
   \   0000F6   EE           MOV     A,R6
   \   0000F7   F9           MOV     R1,A
   \   0000F8   7404         MOV     A,#0x4
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FD   7F10         MOV     R7,#0x10
   \   0000FF   02....       LJMP    ?BANKED_LEAVE_XDATA
    353          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   22           RET
    354          
    355          /*********************************************************************
    356           * @fn      zclDiagnostic_ReadWriteAttrCB
    357           *
    358           * @brief   Handle Diagnostics attributes.
    359           *
    360           * @param   clusterId - cluster that attribute belongs to
    361           * @param   attrId - attribute to be read or written
    362           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    363           * @param   pValue - pointer to attribute value, OTA endian
    364           * @param   pLen - length of attribute value read, native endian
    365           *
    366           * @return  status
    367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          ZStatus_t zclDiagnostic_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclDiagnostic_ReadWriteAttrCB:
    369                                                   uint8 *pValue, uint16 *pLen )
    370          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V2,R4
   \   00000C   8D..         MOV     ?V3,R5
   \   00000E   89..         MOV     ?V5,R1
    371            ZStatus_t status = ZSuccess;
   \   000010   75..00       MOV     ?V4,#0x0
    372            uint16 tempAttr;
    373            uint32 attrValue;
    374            afIncomingMSGPacket_t *origPkt;
    375          
    376            origPkt = zcl_getRawAFMsg();
   \   000013                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000013   12....       LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   000016   8A..         MOV     ?V0,R2
   \   000018   8B..         MOV     ?V1,R3
   \   00001A   A8..         MOV     R0,?V0
   \   00001C   A9..         MOV     R1,?V1
   \   00001E   741C         MOV     A,#0x1c
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V1,A
    377          
    378            switch ( oper )
   \   00002A   E5..         MOV     A,?V5
   \   00002C   600C         JZ      ??zclDiagnostic_ReadWriteAttrCB_0
   \   00002E   14           DEC     A
   \   00002F   606E         JZ      ??zclDiagnostic_ReadWriteAttrCB_1
   \   000031   14           DEC     A
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??zclDiagnostic_ReadWriteAttrCB_2 & 0xFFFF
   \   000037   02....       LJMP    ??zclDiagnostic_ReadWriteAttrCB_3 & 0xFFFF
    379            {
    380              case ZCL_OPER_LEN:
    381                if ( ( attrId == ATTRID_DIAGNOSTIC_LAST_MESSAGE_LQI ) ||
    382                     ( attrId == ATTRID_DIAGNOSTIC_LAST_MESSAGE_RSSI ) )
   \                     ??zclDiagnostic_ReadWriteAttrCB_0:
   \   00003A   741C         MOV     A,#0x1c
   \   00003C   65..         XRL     A,?V2
   \   00003E   7004         JNZ     ??zclDiagnostic_ReadWriteAttrCB_4
   \   000040   7401         MOV     A,#0x1
   \   000042   65..         XRL     A,?V3
   \                     ??zclDiagnostic_ReadWriteAttrCB_4:
   \   000044   600C         JZ      ??zclDiagnostic_ReadWriteAttrCB_5
   \   000046   741D         MOV     A,#0x1d
   \   000048   65..         XRL     A,?V2
   \   00004A   7004         JNZ     ??zclDiagnostic_ReadWriteAttrCB_6
   \   00004C   7401         MOV     A,#0x1
   \   00004E   65..         XRL     A,?V3
   \                     ??zclDiagnostic_ReadWriteAttrCB_6:
   \   000050   700A         JNZ     ??zclDiagnostic_ReadWriteAttrCB_7
    383                {
    384                  *pLen = 1;
   \                     ??zclDiagnostic_ReadWriteAttrCB_5:
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   7401         MOV     A,#0x1
   \   00005A   8014         SJMP    ??zclDiagnostic_ReadWriteAttrCB_8
    385                }
    386                else if ( attrId == ATTRID_DIAGNOSTIC_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT )
   \                     ??zclDiagnostic_ReadWriteAttrCB_7:
   \   00005C   741B         MOV     A,#0x1b
   \   00005E   65..         XRL     A,?V2
   \   000060   7004         JNZ     ??zclDiagnostic_ReadWriteAttrCB_9
   \   000062   7401         MOV     A,#0x1
   \   000064   65..         XRL     A,?V3
   \                     ??zclDiagnostic_ReadWriteAttrCB_9:
   \   000066   700E         JNZ     ??zclDiagnostic_ReadWriteAttrCB_10
    387                {
    388                  *pLen = 2;
   \   000068   85..82       MOV     DPL,?V0
   \   00006B   85..83       MOV     DPH,?V1
   \   00006E   7402         MOV     A,#0x2
   \                     ??zclDiagnostic_ReadWriteAttrCB_8:
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E4           CLR     A
   \   000073   02....       LJMP    ??zclDiagnostic_ReadWriteAttrCB_11 & 0xFFFF
    389                }
    390                // The next function call only returns the length for attributes that are defined
    391                // in lower layers
    392                else if ( zclDiagnostic_GetAttribData( attrId, &tempAttr, pLen ) != ZSuccess )
   \                     ??zclDiagnostic_ReadWriteAttrCB_10:
   \   000076                ; Setup parameters for call to function zclDiagnostic_GetAttribData
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7406         MOV     A,#0x6
   \   00007D   12....       LCALL   ?XSTACK_DISP102_8
   \   000080   AA..         MOV     R2,?V2
   \   000082   AB..         MOV     R3,?V3
   \   000084   12....       LCALL   `??zclDiagnostic_GetAttribData::?relay`; Banked call to: zclDiagnostic_GetAttribData
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zclDiagnostic_ReadWriteAttrCB_3 & 0xFFFF
    393                {
    394                  *pLen = 0;
    395                  status = ZFailure;  // invalid length
    396                }
    397                break;
    398          
    399              case ZCL_OPER_READ:
    400                // Identify if incoming msg is LQI or RSSI attribute
    401                // and return the LQI and RSSI of the incoming values
    402                if ( attrId == ATTRID_DIAGNOSTIC_LAST_MESSAGE_LQI )
    403                {
    404                  *pLen = 1;
    405                  attrValue = origPkt->LinkQuality;
    406                }
    407                else if ( attrId == ATTRID_DIAGNOSTIC_LAST_MESSAGE_RSSI )
    408                {
    409                  //origPkt = zcl_getRawAFMsg();
    410                  *pLen = 1;
    411                  attrValue = origPkt->rssi;
    412                }
    413                else if ( zclDiagnostic_GetStatsAttr( attrId, &attrValue, pLen ) == ZSuccess )
    414                {
    415                  if ( ( attrId == ATTRID_DIAGNOSTIC_MAC_TX_UCAST_RETRY ) ||
    416                       ( attrId == ATTRID_DIAGNOSTIC_MAC_TX_UCAST_FAIL  ) )
    417                  {
    418                    // The lower layer counter is a 32 bit counter, report the higher 16 bit value
    419                    // util the lower layer counter wraps-up
    420                    if ( attrValue > 0x0000FFFF )
    421                    {
    422                      attrValue = 0x0000FFFF;
    423                    }
    424                  }
    425                }
    426                else
    427                {
    428                  *pLen = 0;
   \                     ??zclDiagnostic_ReadWriteAttrCB_12:
   \   000092   85..82       MOV     DPL,?V0
   \   000095   85..83       MOV     DPH,?V1
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   F0           MOVX    @DPTR,A
    429                  status = ZFailure;  // invalid attribute
   \   00009C   02....       LJMP    ??zclDiagnostic_ReadWriteAttrCB_2 & 0xFFFF
    430                }
   \                     ??zclDiagnostic_ReadWriteAttrCB_1:
   \   00009F   741A         MOV     A,#0x1a
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FE           MOV     R6,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FF           MOV     R7,A
   \   0000A9   741C         MOV     A,#0x1c
   \   0000AB   65..         XRL     A,?V2
   \   0000AD   7004         JNZ     ??zclDiagnostic_ReadWriteAttrCB_13
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   65..         XRL     A,?V3
   \                     ??zclDiagnostic_ReadWriteAttrCB_13:
   \   0000B3   7021         JNZ     ??zclDiagnostic_ReadWriteAttrCB_14
   \   0000B5   85..82       MOV     DPL,?V0
   \   0000B8   85..83       MOV     DPH,?V1
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E4           CLR     A
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   E8           MOV     A,R0
   \   0000C2   2416         ADD     A,#0x16
   \   0000C4   F582         MOV     DPL,A
   \   0000C6   E4           CLR     A
   \   0000C7   39           ADDC    A,R1
   \   0000C8   F583         MOV     DPH,A
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E4           CLR     A
   \   0000D4   8031         SJMP    ??zclDiagnostic_ReadWriteAttrCB_15
   \                     ??zclDiagnostic_ReadWriteAttrCB_14:
   \   0000D6   741D         MOV     A,#0x1d
   \   0000D8   65..         XRL     A,?V2
   \   0000DA   7004         JNZ     ??zclDiagnostic_ReadWriteAttrCB_16
   \   0000DC   7401         MOV     A,#0x1
   \   0000DE   65..         XRL     A,?V3
   \                     ??zclDiagnostic_ReadWriteAttrCB_16:
   \   0000E0   702C         JNZ     ??zclDiagnostic_ReadWriteAttrCB_17
   \   0000E2   85..82       MOV     DPL,?V0
   \   0000E5   85..83       MOV     DPH,?V1
   \   0000E8   7401         MOV     A,#0x1
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E4           CLR     A
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   E8           MOV     A,R0
   \   0000EF   2418         ADD     A,#0x18
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   E4           CLR     A
   \   0000F4   39           ADDC    A,R1
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   FA           MOV     R2,A
   \   0000F9   33           RLC     A
   \   0000FA   95E0         SUBB    A,0xE0 /* A   */
   \   0000FC   FB           MOV     R3,A
   \   0000FD   85..82       MOV     DPL,?XSP + 0
   \   000100   85..83       MOV     DPH,?XSP + 1
   \   000103   EA           MOV     A,R2
   \   000104   F0           MOVX    @DPTR,A
   \   000105   A3           INC     DPTR
   \   000106   EB           MOV     A,R3
   \                     ??zclDiagnostic_ReadWriteAttrCB_15:
   \   000107   F0           MOVX    @DPTR,A
   \   000108   A3           INC     DPTR
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   A3           INC     DPTR
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   806A         SJMP    ??zclDiagnostic_ReadWriteAttrCB_18
   \                     ??zclDiagnostic_ReadWriteAttrCB_17:
   \   00010E                ; Setup parameters for call to function zclDiagnostic_GetStatsAttr
   \   00010E   78..         MOV     R0,#?V0
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   7402         MOV     A,#0x2
   \   000115   12....       LCALL   ?XSTACK_DISP102_8
   \   000118   AA..         MOV     R2,?V2
   \   00011A   AB..         MOV     R3,?V3
   \   00011C   12....       LCALL   `??zclDiagnostic_GetStatsAttr::?relay`; Banked call to: zclDiagnostic_GetStatsAttr
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   \   000124   E9           MOV     A,R1
   \   000125   6003         JZ      $+5
   \   000127   02....       LJMP    ??zclDiagnostic_ReadWriteAttrCB_12 & 0xFFFF
   \   00012A   7404         MOV     A,#0x4
   \   00012C   65..         XRL     A,?V2
   \   00012E   7004         JNZ     ??zclDiagnostic_ReadWriteAttrCB_19
   \   000130   7401         MOV     A,#0x1
   \   000132   65..         XRL     A,?V3
   \                     ??zclDiagnostic_ReadWriteAttrCB_19:
   \   000134   600C         JZ      ??zclDiagnostic_ReadWriteAttrCB_20
   \   000136   7405         MOV     A,#0x5
   \   000138   65..         XRL     A,?V2
   \   00013A   7004         JNZ     ??zclDiagnostic_ReadWriteAttrCB_21
   \   00013C   7401         MOV     A,#0x1
   \   00013E   65..         XRL     A,?V3
   \                     ??zclDiagnostic_ReadWriteAttrCB_21:
   \   000140   7025         JNZ     ??zclDiagnostic_ReadWriteAttrCB_22
   \                     ??zclDiagnostic_ReadWriteAttrCB_20:
   \   000142   90....       MOV     DPTR,#__Constant_10000
   \   000145   78..         MOV     R0,#?V8
   \   000147   12....       LCALL   ?L_MOV_X
   \   00014A   85..82       MOV     DPL,?XSP + 0
   \   00014D   85..83       MOV     DPH,?XSP + 1
   \   000150   78..         MOV     R0,#?V8
   \   000152   12....       LCALL   ?UL_GT_X
   \   000155   4010         JC      ??zclDiagnostic_ReadWriteAttrCB_22
   \   000157   85..82       MOV     DPL,?XSP + 0
   \   00015A   85..83       MOV     DPH,?XSP + 1
   \   00015D   74FF         MOV     A,#-0x1
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   A3           INC     DPTR
   \   000161   F0           MOVX    @DPTR,A
   \   000162   A3           INC     DPTR
   \   000163   E4           CLR     A
   \   000164   F0           MOVX    @DPTR,A
   \   000165   A3           INC     DPTR
   \   000166   F0           MOVX    @DPTR,A
    431          
    432                if ( *pLen == 1 )
   \                     ??zclDiagnostic_ReadWriteAttrCB_22:
   \   000167   85..82       MOV     DPL,?V0
   \   00016A   85..83       MOV     DPH,?V1
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   F8           MOV     R0,A
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F9           MOV     R1,A
   \   000172   7401         MOV     A,#0x1
   \   000174   68           XRL     A,R0
   \   000175   49           ORL     A,R1
   \   000176   7011         JNZ     ??zclDiagnostic_ReadWriteAttrCB_23
    433                {
    434                  pValue[0] = BREAK_UINT32( attrValue, 0 );
   \                     ??zclDiagnostic_ReadWriteAttrCB_18:
   \   000178   85..82       MOV     DPL,?XSP + 0
   \   00017B   85..83       MOV     DPH,?XSP + 1
   \   00017E   78..         MOV     R0,#?V0
   \   000180   12....       LCALL   ?L_MOV_X
   \   000183   8E82         MOV     DPL,R6
   \   000185   8F83         MOV     DPH,R7
   \   000187   806C         SJMP    ??zclDiagnostic_ReadWriteAttrCB_24
    435                }
    436                else if ( *pLen == 2 )
   \                     ??zclDiagnostic_ReadWriteAttrCB_23:
   \   000189   8E82         MOV     DPL,R6
   \   00018B   8F83         MOV     DPH,R7
   \   00018D   A3           INC     DPTR
   \   00018E   AA82         MOV     R2,DPL
   \   000190   AB83         MOV     R3,DPH
   \   000192   7402         MOV     A,#0x2
   \   000194   68           XRL     A,R0
   \   000195   49           ORL     A,R1
   \   000196   7019         JNZ     ??zclDiagnostic_ReadWriteAttrCB_25
    437                {
    438                  pValue[0] = LO_UINT16( attrValue );
   \   000198   85..82       MOV     DPL,?XSP + 0
   \   00019B   85..83       MOV     DPH,?XSP + 1
   \   00019E   78..         MOV     R0,#?V0
   \   0001A0   12....       LCALL   ?L_MOV_X
   \   0001A3   12....       LCALL   ?Subroutine2 & 0xFFFF
    439                  pValue[1] = HI_UINT16( attrValue );
    440                }
   \                     ??CrossCallReturnLabel_2:
   \   0001A6   12....       LCALL   ?L_MOV_X
   \   0001A9   E5..         MOV     A,?V1
   \   0001AB   8A82         MOV     DPL,R2
   \   0001AD   8B83         MOV     DPH,R3
   \   0001AF   8046         SJMP    ??zclDiagnostic_ReadWriteAttrCB_11
    441                else if ( *pLen == 4 )
   \                     ??zclDiagnostic_ReadWriteAttrCB_25:
   \   0001B1   7404         MOV     A,#0x4
   \   0001B3   68           XRL     A,R0
   \   0001B4   49           ORL     A,R1
   \   0001B5   7046         JNZ     ??zclDiagnostic_ReadWriteAttrCB_3
    442                {
    443                  pValue[0] = BREAK_UINT32( attrValue, 0 );
   \   0001B7   85..82       MOV     DPL,?XSP + 0
   \   0001BA   85..83       MOV     DPH,?XSP + 1
   \   0001BD   78..         MOV     R0,#?V0
   \   0001BF   12....       LCALL   ?L_MOV_X
   \   0001C2   12....       LCALL   ?Subroutine2 & 0xFFFF
    444                  pValue[1] = BREAK_UINT32( attrValue, 1 );
    445                  pValue[2] = BREAK_UINT32( attrValue, 2 );
    446                  pValue[3] = BREAK_UINT32( attrValue, 3 );
    447                }
   \                     ??CrossCallReturnLabel_3:
   \   0001C5   12....       LCALL   ?L_MOV_X
   \   0001C8   E5..         MOV     A,?V1
   \   0001CA   8A82         MOV     DPL,R2
   \   0001CC   8B83         MOV     DPH,R3
   \   0001CE   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001D1   12....       LCALL   ?L_MOV_X
   \   0001D4   7410         MOV     A,#0x10
   \   0001D6   78..         MOV     R0,#?V0
   \   0001D8   12....       LCALL   ?UL_SHR
   \   0001DB   8E82         MOV     DPL,R6
   \   0001DD   8F83         MOV     DPH,R7
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001E4   12....       LCALL   ?L_MOV_X
   \   0001E7   7418         MOV     A,#0x18
   \   0001E9   78..         MOV     R0,#?V0
   \   0001EB   12....       LCALL   ?UL_SHR
   \   0001EE   8E82         MOV     DPL,R6
   \   0001F0   8F83         MOV     DPH,R7
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \                     ??zclDiagnostic_ReadWriteAttrCB_24:
   \   0001F5   E5..         MOV     A,?V0
   \                     ??zclDiagnostic_ReadWriteAttrCB_11:
   \   0001F7   F0           MOVX    @DPTR,A
   \   0001F8   8003         SJMP    ??zclDiagnostic_ReadWriteAttrCB_3
    448          
    449                break;
    450          
    451              case ZCL_OPER_WRITE:
    452                status = ZFailure;  // All attributes in Diagnostics cluster are READ ONLY
   \                     ??zclDiagnostic_ReadWriteAttrCB_2:
   \   0001FA   75..01       MOV     ?V4,#0x1
    453                break;
    454            }
    455          
    456            return ( status );
   \                     ??zclDiagnostic_ReadWriteAttrCB_3:
   \   0001FD   A9..         MOV     R1,?V4
   \   0001FF   7406         MOV     A,#0x6
   \   000201   12....       LCALL   ?DEALLOC_XSTACK8
   \   000204   7F0C         MOV     R7,#0xc
   \   000206   02....       LJMP    ?BANKED_LEAVE_XDATA
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine4_0
   \   000004                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E5..         MOV     A,?V0
   \   000002                REQUIRE ??Subroutine5_0
   \   000002                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET
    458          
    459          /****************************************************************************
    460           * @fn          zclDiagnostic_RestoreStatsFromNV
    461           *
    462           * @brief       Restores the statistics table from NV into the RAM table.
    463           *
    464           * @param       none.
    465           *
    466           * @return      ZSuccess - if NV data was restored from NV.
    467           *              ZFailure - Otherwise, NV_OPER_FAILED for failure.
    468           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    469          uint8 zclDiagnostic_RestoreStatsFromNV( void )
   \                     zclDiagnostic_RestoreStatsFromNV:
    470          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    471            return ( ZDiagsRestoreStatsFromNV() );
   \   000004                ; Setup parameters for call to function ZDiagsRestoreStatsFromNV
   \   000004   12....       LCALL   `??ZDiagsRestoreStatsFromNV::?relay`; Banked call to: ZDiagsRestoreStatsFromNV
   \   000007   02....       LJMP    ?Subroutine1 & 0xFFFF
    472          }
    473          
    474             /****************************************************************************
    475           * @fn          zclDiagnostic_SaveStatsToNV
    476           *
    477           * @brief       Saves the statistics table from RAM to NV.
    478           *
    479           * @param       none.
    480           *
    481           * @return      System Time.
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          uint32 zclDiagnostic_SaveStatsToNV( void )
   \                     zclDiagnostic_SaveStatsToNV:
    484          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    485             return( ZDiagsSaveStatsToNV() );
   \   000004                ; Setup parameters for call to function ZDiagsSaveStatsToNV
   \   000004   12....       LCALL   `??ZDiagsSaveStatsToNV::?relay`; Banked call to: ZDiagsSaveStatsToNV
   \   000007   02....       LJMP    ?Subroutine1 & 0xFFFF
    486          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclDiagnostic_GetAttribData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclDiagnostic_GetAttribData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclDiagnostic_InitStats::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclDiagnostic_InitStats

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclDiagnostic_ClearStats::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclDiagnostic_ClearStats

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclDiagnostic_GetStatsAttr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclDiagnostic_GetStatsAttr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclDiagnostic_ReadWriteAttrCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclDiagnostic_ReadWriteAttrCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclDiagnostic_RestoreStatsFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclDiagnostic_RestoreStatsFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclDiagnostic_SaveStatsToNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclDiagnostic_SaveStatsToNV
    487          
    488          
    489          #endif // ZCL_DIAGNOSTIC
    490          /********************************************************************************************
    491          *********************************************************************************************/
    492          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   zclDiagnostic_ClearStats
        0      9   -> ZDiagsClearStats
      0     39   zclDiagnostic_GetAttribData
        0      9   -> zclGetDataTypeLength
      0     58   zclDiagnostic_GetStatsAttr
        0     28   -> ZDiagsGetStatsAttr
        0     30   -> zclDiagnostic_GetAttribData
      2      0   zclDiagnostic_InitStats
        2      0   -> ZDiagsInitStats
      1     32   zclDiagnostic_ReadWriteAttrCB
        0     28   -> zclDiagnostic_GetAttribData
        0     28   -> zclDiagnostic_GetStatsAttr
        0     26   -> zcl_getRawAFMsg
      2      0   zclDiagnostic_RestoreStatsFromNV
        2      0   -> ZDiagsRestoreStatsFromNV
      2      0   zclDiagnostic_SaveStatsToNV
        2      0   -> ZDiagsSaveStatsToNV


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??Subroutine4_0
      10  ??Subroutine5_0
       5  ?Subroutine0
       7  ?Subroutine1
       4  ?Subroutine2
      15  ?Subroutine3
       4  __Constant_10000
      10  zclDiagnostic_ClearStats
       6  zclDiagnostic_ClearStats::?relay
     109  zclDiagnostic_GetAttribData
       6  zclDiagnostic_GetAttribData::?relay
     258  zclDiagnostic_GetStatsAttr
       6  zclDiagnostic_GetStatsAttr::?relay
       7  zclDiagnostic_InitStats
       6  zclDiagnostic_InitStats::?relay
     521  zclDiagnostic_ReadWriteAttrCB
       6  zclDiagnostic_ReadWriteAttrCB::?relay
      10  zclDiagnostic_RestoreStatsFromNV
       6  zclDiagnostic_RestoreStatsFromNV::?relay
      10  zclDiagnostic_SaveStatsToNV
       6  zclDiagnostic_SaveStatsToNV::?relay
     145  zclDiagsAttrTable

 
 968 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
 145 bytes in segment CODE_C
   4 bytes in segment XDATA_ROM_C
 
 1 155 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)

Errors: none
Warnings: none
