###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Aug/2016  23:14:24
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\sys\ZGlobals.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\ZGlobals.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\ZGlobals.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2015-10-05 14:56:09 -0700 (Mon, 05 Oct 2015) $
      4            Revision:       $Revision: 44517 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          /*********************************************************************
     60           * TYPEDEFS
     61           */
     62          
     63          typedef struct zgItem
     64          {
     65            uint16 id;
     66            uint16 len;
     67            void *buf;
     68          } zgItem_t;
     69          
     70          /*********************************************************************
     71           * NWK GLOBAL VARIABLES
     72           */
     73          
     74          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     75          uint32 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     76          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     79          
     80          // Rejoin backoff (silent period ) duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     81          uint32 zgDefaultRejoinBackoff = REJOIN_BACKOFF;
   \                     zgDefaultRejoinBackoff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultRejoinBackoff>`
   \   000004                REQUIRE __INIT_XDATA_I
     82          
     83          // Rejoin scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     84          uint32 zgDefaultRejoinScan = REJOIN_SCAN ;
   \                     zgDefaultRejoinScan:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultRejoinScan>`
   \   000004                REQUIRE __INIT_XDATA_I
     85          
     86          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     87          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     88          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     89          
     90          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     91          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     92          
     93          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     94          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     95          
     96          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     98          
     99          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
    101          
    102          // Security mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurityMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    104          
    105          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          uint8 zgSecurePermitJoin = TRUE;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          
    108          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
   \                     zgApsTrustCenterAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    110          
    111          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    112          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    113          
    114          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    115          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    116          
    117          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    119          
    120          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    122          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    123          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    124          
    125          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    127          
    128          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    131          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    133          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    134          
    135          // Cleanup Child Table according to routing traffic

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 zgRouterOffAssocCleanup = FALSE;
   \                     zgRouterOffAssocCleanup:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          
    138          // Determines whether or not a remote NWK leave request command frame received
    139          // by the local device is accepted .

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          uint8 zgNwkLeaveRequestAllowed = TRUE;
   \                     zgNwkLeaveRequestAllowed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          
    142          //=======    Child Aging PARENT ROUTER (ZR/ZC) configuration   ========
    143          // You can setup a router to support Child Table Aging in 1 of 2 modes of
    144          // operation.  The first mode is NWK_PARENT_INFO_ORPHAN_NOTIFICATION and it
    145          // expects end devices to use orphan scan periodically as a means of a keep-alive
    146          // notification to the parent.  The other mode is NWK_PARENT_INFO_MAC_DATA_POLL
    147          // which uses the end device's MAC POLL request as the keep-alive notification.
    148          // The first method is preferred for new devices, where the end devices provide
    149          // support for it (which will be manditory in future Zigbee Home Automation
    150          // Specifications).
    151          // The second method is compatible with older end devices without the need for
    152          // specific child aging support.
    153          //
    154          // The method supported by the router (or coordinator) is determined at build time
    155          // by setting zgNwkParentInformation to either NWK_PARENT_INFO_ORPHAN_NOTIFICATION
    156          // or NWK_PARENT_INFO_MAC_DATA_POLL.
    157          //
    158          // End device built with Child Table Aging support both methods, the method is
    159          // determined by the parent and communicated at run-time.
    160          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    161          uint8 zgNwkParentInformation = NWK_PARENT_INFO_UNDEFINED;
    162          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          uint8 zgNwkParentInformation = NWK_PARENT_INFO_ORPHAN_NOTIFICATION;
   \                     zgNwkParentInformation:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkParentInformation>`
   \   000001                REQUIRE __INIT_XDATA_I
    164          #endif
    165          
    166          // This is an index into table Requested Timeout Enumerated Values.
    167          // It is used by the parent router, it indicates the default timeout value
    168          // for any end device that does not negotiate a different timeout value

   \                                 In  segment XDATA_I, align 1, keep-with-next
    169          uint8 zgNwkEndDeviceTimeoutDefault = NWK_END_DEV_TIMEOUT_DEFAULT;
   \                     zgNwkEndDeviceTimeoutDefault:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkEndDeviceTimeoutDefault`
   \   000001                REQUIRE __INIT_XDATA_I
    170          //=====================================================================
    171          
    172          //==========    Child Aging END DEVICE configuration    ===============
    173          // Values used by End Device when sending End Device Timeout Request

   \                                 In  segment XDATA_I, align 1, keep-with-next
    174          uint8 zgEndDeviceTimeoutValue  = END_DEV_TIMEOUT_VALUE;
   \                     zgEndDeviceTimeoutValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgEndDeviceTimeoutValue>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zgEndDeviceConfiguration = END_DEV_CONFIGURATION;
   \                     zgEndDeviceConfiguration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint32 zgEndDeviceKAInterval = 0;
   \                     zgEndDeviceKAInterval:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    178          //=====================================================================
    179          
    180          // Determines if the Child Aging Table Management process is active or not.
    181          // This feature is optional and it is disabled by default.
    182          //
    183          // NOTICE:  Before enabling Child Aging make sure to review all the related
    184          // definitions in this file, especially zgNwkParentInformation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 zgChildAgingEnable = FALSE;
   \                     zgChildAgingEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    186          
    187          /*********************************************************************
    188           * APS GLOBAL VARIABLES
    189           */
    190          
    191          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    192          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    193          
    194          // The maximum number of seconds (milliseconds) to wait for an
    195          // acknowledgement to a transmitted frame.
    196          
    197          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    198          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    199          
    200          // This number is used by non-polled devices in the following formula:
    201          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    202          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    203          
    204          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    205          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    206          
    207          // The 64-big identifier of the network to join or form.
    208          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    210          
    211          // A boolean flag that indicates whether it is OK to use insecure join
    212          // on startup. Default set to TRUE

   \                                 In  segment XDATA_I, align 1, keep-with-next
    213          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    214          
    215          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    216          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    217          
    218          // Commissioned Network Address

   \                                 In  segment XDATA_I, align 1, keep-with-next
    219          uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
   \                     zgNwkCommissionedNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
   \   000002                REQUIRE __INIT_XDATA_I
    220          
    221          // APS Duplication Rejection table variables

   \                                 In  segment XDATA_I, align 1, keep-with-next
    222          uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
   \                     zgApscDupRejTimeoutInc:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    223          uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
   \                     zgApscDupRejTimeoutCount:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    224          uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
   \                     zgApsMinDupRejTableSize:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
   \   000002                REQUIRE __INIT_XDATA_I
    225          
    226          
    227          
    228          /*********************************************************************
    229           * SECURITY GLOBAL VARIABLES
    230           */
    231          
    232          // If TRUE, preConfigKey should be configured on all devices on the network
    233          // If false, it is configured only on the coordinator and sent to other
    234          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    235          uint8 zgPreConfigKeys = FALSE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    236          
    237          // The type of link key in use.  This will determine the security
    238          // policies associated with sending and receiving APS messages.
    239          // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
    240          // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

   \                                 In  segment XDATA_I, align 1, keep-with-next
    241          uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
   \                     zgApsLinkKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsLinkKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    242          
    243          // With changes introduced in R20 of the ZigBee specification,
    244          // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
    245          //
    246          // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
    247          // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
    248          // different value:
    249          //      ZC should have             zgUseDefaultTCLK = FALSE
    250          //      Other devices should have  zgUseDefaultTCLK = TRUE
    251          // This is initialized in zgInitItems()
    252          // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
    253          // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    254          uint8 zgUseDefaultTCLK;
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    255          
    256          #if defined ( APP_TP2_TEST_MODE )
    257          uint8 guTxApsSecON = FALSE;
    258          uint8 guEnforceRxApsSec = TP_GU_ALL;
    259          #endif
    260          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    261          uint8 zgApsAllowR19Sec = FALSE;
   \                     zgApsAllowR19Sec:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    262          
    263          /*********************************************************************
    264           * ZDO GLOBAL VARIABLES
    265           */
    266          
    267          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    268          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    269          
    270          // Device Logical Type

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    271          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    272          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    273          uint8 zgDeviceType;
   \                     zgDeviceType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    274          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    275          uint8 zgDeviceNum;
   \                     zgDeviceNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    276          
    277          #ifdef COORDINATOR
    278          extern NODE_INFO_t AssoList[];
    279          #endif
    280          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    281          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    282          
    283          #if !defined MT_TASK
    284          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().
    285          uint8 zgZdoDirectCB = FALSE;
    286          #endif
    287          
    288          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    289          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    290          
    291          /*********************************************************************
    292           * APPLICATION GLOBAL VARIABLES
    293           */
    294          
    295          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    296          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    297          
    298          /*********************************************************************
    299           * NON-STANDARD GLOBAL VARIABLES
    300           */
    301          
    302          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    303          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    304          
    305          /*********************************************************************
    306           * LOCAL VARIABLES
    307           */
    308          
    309          /*********************************************************************
    310           * ZGlobal Item Table
    311           */

   \                                 In  segment CODE_C, align 1
    312          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   8700         DW 135
   \   000002   0100         DW 1
   \   000004   ....         DW zgDeviceLogicalType
   \   000006   8A00         DW 138
   \   000008   0100         DW 1
   \   00000A   ....         DW zgDeviceType
   \   00000C   3500         DW 53
   \   00000E   0400         DW 4
   \   000010   ....         DW zgPollRate
   \   000012   2500         DW 37
   \   000014   0200         DW 2
   \   000016   ....         DW zgQueuedPollRate
   \   000018   2600         DW 38
   \   00001A   0200         DW 2
   \   00001C   ....         DW zgResponsePollRate
   \   00001E   2700         DW 39
   \   000020   0200         DW 2
   \   000022   ....         DW zgRejoinPollRate
   \   000024   2800         DW 40
   \   000026   0100         DW 1
   \   000028   ....         DW zgMaxDataRetries
   \   00002A   2900         DW 41
   \   00002C   0100         DW 1
   \   00002E   ....         DW zgMaxPollFailureRetries
   \   000030   8400         DW 132
   \   000032   0400         DW 4
   \   000034   ....         DW zgDefaultChannelList
   \   000036   8600         DW 134
   \   000038   0100         DW 1
   \   00003A   ....         DW zgDefaultStartingScanDuration
   \   00003C   2A00         DW 42
   \   00003E   0100         DW 1
   \   000040   ....         DW zgStackProfile
   \   000042   2B00         DW 43
   \   000044   0100         DW 1
   \   000046   ....         DW zgIndirectMsgTimeout
   \   000048   2C00         DW 44
   \   00004A   0100         DW 1
   \   00004C   ....         DW zgRouteExpiryTime
   \   00004E   2D00         DW 45
   \   000050   0800         DW 8
   \   000052   ....         DW zgExtendedPANID
   \   000054   2E00         DW 46
   \   000056   0100         DW 1
   \   000058   ....         DW zgMaxBcastRetires
   \   00005A   2F00         DW 47
   \   00005C   0100         DW 1
   \   00005E   ....         DW zgPassiveAckTimeout
   \   000060   3000         DW 48
   \   000062   0100         DW 1
   \   000064   ....         DW zgBcastDeliveryTime
   \   000066   3100         DW 49
   \   000068   0100         DW 1
   \   00006A   ....         DW zgNwkMode
   \   00006C   3200         DW 50
   \   00006E   0100         DW 1
   \   000070   ....         DW zgConcentratorEnable
   \   000072   3300         DW 51
   \   000074   0100         DW 1
   \   000076   ....         DW zgConcentratorDiscoveryTime
   \   000078   3400         DW 52
   \   00007A   0100         DW 1
   \   00007C   ....         DW zgConcentratorRadius
   \   00007E   3600         DW 54
   \   000080   0100         DW 1
   \   000082   ....         DW zgConcentratorRC
   \   000084   3800         DW 56
   \   000086   0100         DW 1
   \   000088   ....         DW zgNwkSrcRtgExpiryTime
   \   00008A   3900         DW 57
   \   00008C   0100         DW 1
   \   00008E   ....         DW zgRouteDiscoveryTime
   \   000090   8300         DW 131
   \   000092   0200         DW 2
   \   000094   ....         DW zgConfigPANID
   \   000096   6300         DW 99
   \   000098   0100         DW 1
   \   00009A   ....         DW zgPreConfigKeys
   \   00009C   6400         DW 100
   \   00009E   0100         DW 1
   \   0000A0   ....         DW zgSecurityMode
   \   0000A2   6500         DW 101
   \   0000A4   0100         DW 1
   \   0000A6   ....         DW zgSecurePermitJoin
   \   0000A8   6D00         DW 109
   \   0000AA   0100         DW 1
   \   0000AC   ....         DW zgUseDefaultTCLK
   \   0000AE   7100         DW 113
   \   0000B0   0800         DW 8
   \   0000B2   ....         DW zgApsTrustCenterAddr
   \   0000B4   6600         DW 102
   \   0000B6   0100         DW 1
   \   0000B8   ....         DW zgApsLinkKeyType
   \   0000BA   4300         DW 67
   \   0000BC   0100         DW 1
   \   0000BE   ....         DW zgApscMaxFrameRetries
   \   0000C0   4400         DW 68
   \   0000C2   0200         DW 2
   \   0000C4   ....         DW zgApscAckWaitDurationPolled
   \   0000C6   4500         DW 69
   \   0000C8   0100         DW 1
   \   0000CA   ....         DW zgApsAckWaitMultiplier
   \   0000CC   4600         DW 70
   \   0000CE   0200         DW 2
   \   0000D0   ....         DW zgApsDefaultMaxBindingTime
   \   0000D2   4700         DW 71
   \   0000D4   0800         DW 8
   \   0000D6   ....         DW zgApsUseExtendedPANID
   \   0000D8   4800         DW 72
   \   0000DA   0100         DW 1
   \   0000DC   ....         DW zgApsUseInsecureJoin
   \   0000DE   4B00         DW 75
   \   0000E0   0100         DW 1
   \   0000E2   ....         DW zgApsNonMemberRadius
   \   0000E4   0400         DW 4
   \   0000E6   0100         DW 1
   \   0000E8   ....         DW zgStartDelay
   \   0000EA   A100         DW 161
   \   0000EC   0100         DW 1
   \   0000EE   ....         DW zgSapiEndpoint
   \   0000F0   3700         DW 55
   \   0000F2   0100         DW 1
   \   0000F4   ....         DW zgNwkMgrMode
   \   0000F6   8800         DW 136
   \   0000F8   0100         DW 1
   \   0000FA   ....         DW zgNwkMgrMinTransmissions
   \   0000FC   3C00         DW 60
   \   0000FE   0100         DW 1
   \   000100   ....         DW zgRouterOffAssocCleanup
   \   000102   3D00         DW 61
   \   000104   0100         DW 1
   \   000106   ....         DW zgNwkLeaveRequestAllowed
   \   000108   4900         DW 73
   \   00010A   0200         DW 2
   \   00010C   ....         DW zgNwkCommissionedNwkAddr
   \   00010E   6700         DW 103
   \   000110   0100         DW 1
   \   000112   ....         DW zgApsAllowR19Sec
   \   000114   4D00         DW 77
   \   000116   0200         DW 2
   \   000118   ....         DW zgApscDupRejTimeoutInc
   \   00011A   4E00         DW 78
   \   00011C   0100         DW 1
   \   00011E   ....         DW zgApscDupRejTimeoutCount
   \   000120   4F00         DW 79
   \   000122   0200         DW 2
   \   000124   ....         DW zgApsMinDupRejTableSize
   \   000126   3E00         DW 62
   \   000128   0100         DW 1
   \   00012A   ....         DW zgChildAgingEnable
   \   00012C   5100         DW 81
   \   00012E   0100         DW 1
   \   000130   ....         DW zgNwkParentInformation
   \   000132   5200         DW 82
   \   000134   0100         DW 1
   \   000136   ....         DW zgNwkEndDeviceTimeoutDefault
   \   000138   5300         DW 83
   \   00013A   0100         DW 1
   \   00013C   ....         DW zgEndDeviceTimeoutValue
   \   00013E   5400         DW 84
   \   000140   0100         DW 1
   \   000142   ....         DW zgEndDeviceConfiguration
   \   000144   0000         DW 0
   \   000146   0000         DW 0
   \   000148   0000         DW 0H
    313          {
    314          #if defined ( NV_INIT )
    315          #if !defined MT_TASK
    316            {
    317              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    318            },
    319          #endif
    320            {
    321              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    322            },
    323            {
    324              ZCD_NV_DEVICE_TYPE, sizeof(zgDeviceType), &zgDeviceType
    325            },
    326          #ifdef COORDINATOR
    327            {
    328              ZCD_NV_DEVICE_TABLE, sizeof(NODE_INFO_t)*7, &AssoList
    329            },
    330          #endif
    331            {
    332              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    333            },
    334            {
    335              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    336            },
    337            {
    338              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    339            },
    340            {
    341              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    342            },
    343            {
    344              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    345            },
    346            {
    347              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    348            },
    349            {
    350              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    351            },
    352            {
    353              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    354            },
    355            {
    356              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    357            },
    358            {
    359              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    360            },
    361            {
    362              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    363            },
    364            {
    365              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    366            },
    367            {
    368              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    369            },
    370            {
    371              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    372            },
    373            {
    374              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    375            },
    376            {
    377              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    378            },
    379            {
    380              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    381            },
    382            {
    383              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    384            },
    385            {
    386              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    387            },
    388            {
    389              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    390            },
    391            {
    392              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    393            },
    394            {
    395              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    396            },
    397          #ifndef NONWK
    398            {
    399              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    400            },
    401            {
    402              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    403            },
    404            {
    405              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    406            },
    407            {
    408              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    409            },
    410            {
    411              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    412            },
    413            {
    414              ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
    415            },
    416            {
    417              ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
    418            },
    419          #endif // NONWK
    420            {
    421              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    422            },
    423            {
    424              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    425            },
    426            {
    427              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    428            },
    429            {
    430              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    431            },
    432            {
    433              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    434            },
    435            {
    436              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    437            },
    438            {
    439              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    440            },
    441            {
    442              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    443            },
    444            {
    445              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    446            },
    447            {
    448              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    449            },
    450            {
    451              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    452            },
    453            {
    454              ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
    455            },
    456            {
    457              ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
    458            },
    459            {
    460              ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
    461            },
    462            {
    463              ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
    464            },
    465            {
    466              ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
    467            },
    468            {
    469              ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
    470            },
    471            {
    472              ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
    473            },
    474            {
    475              ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
    476            },
    477            {
    478              ZCD_NV_NWK_PARENT_INFO, sizeof(zgNwkParentInformation), &zgNwkParentInformation
    479            },
    480            {
    481              ZCD_NV_NWK_ENDDEV_TIMEOUT_DEF, sizeof(zgNwkEndDeviceTimeoutDefault), &zgNwkEndDeviceTimeoutDefault
    482            },
    483            {
    484              ZCD_NV_END_DEV_TIMEOUT_VALUE, sizeof(zgEndDeviceTimeoutValue), &zgEndDeviceTimeoutValue
    485            },
    486            {
    487              ZCD_NV_END_DEV_CONFIGURATION, sizeof(zgEndDeviceConfiguration), &zgEndDeviceConfiguration
    488            },
    489          #endif // NV_INIT
    490            // Last item -- DO NOT MOVE IT!
    491            {
    492              0x00, 0, NULL
    493            }
    494          };
    495          
    496          /*********************************************************************
    497           * LOCAL FUNCTIONS
    498           */
    499          
    500          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    501          
    502          static void zgUpgradeNVItems( void );
    503          
    504          #ifndef NONWK
    505          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    506          #endif
    507          
    508          /*********************************************************************
    509           * @fn       zgItemInit()
    510           *
    511           * @brief
    512           *
    513           *   Initialize a global item. If the item doesn't exist in NV memory,
    514           *   write the system default (value passed in) into NV memory. But if
    515           *   it exists, set the item to the value stored in NV memory.
    516           *
    517           *   Also, if setDefault is TRUE and the item exists, we will write
    518           *   the default value to NV space.
    519           *
    520           * @param   id - item id
    521           * @param   len - item len
    522           * @param   buf - pointer to the item
    523           * @param   setDefault - TRUE to set default, not read
    524           *
    525           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    526           *          exist in NV, NV_OPER_FAILED if failure.
    527           */
    528          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    529          {
    530            uint8 status;
    531          
    532            // If the item doesn't exist in NV memory, create and initialize
    533            // it with the value passed in.
    534            status = osal_nv_item_init( id, len, buf );
    535            if ( status == ZSUCCESS )
    536            {
    537              if ( setDefault )
    538              {
    539                // Write the default value back to NV
    540                status = osal_nv_write( id, 0, len, buf );
    541              }
    542              else
    543              {
    544                // The item exists in NV memory, read it from NV memory
    545                status = osal_nv_read( id, 0, len, buf );
    546              }
    547            }
    548          
    549            return (status);
    550          }
    551          
    552          /*********************************************************************
    553           * API FUNCTIONS
    554           */
    555          
    556          /*********************************************************************
    557           * @fn          zgInit
    558           *
    559           * @brief
    560           *
    561           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    562           *   NV memory, write the system default into NV memory. But if
    563           *   it exists, set the item to the value stored in NV memory.
    564           *
    565           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    566           *       that the Config state items (zgItemTable) need to be
    567           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    568           *
    569           * @param       none
    570           *
    571           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    572           *              exist in NV, NV_OPER_FAILED if failure.
    573           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    574          uint8 zgInit( void )
   \                     zgInit:
    575          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    576            uint8  setDefault = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
    577          
    578            // Do we want to default the Config state values
    579            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   00000C                ; Setup parameters for call to function zgReadStartupOptions
   \   00000C   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000F   E9           MOV     A,R1
   \   000010   F8           MOV     R0,A
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5002         JNC     ??zgInit_0
    580            {
    581              setDefault = TRUE;
   \   000015   7E01         MOV     R6,#0x1
    582            }
    583          
    584          #if defined ( FEATURE_SYSTEM_STATS )
    585            {
    586              // This sections tracks the number of resets
    587              uint16 bootCnt = 0;
   \                     ??zgInit_0:
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   12....       LCALL   ??Subroutine2_0 & 0xFFFF
    588          
    589              // Update the Boot Counter
    590              if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7C02         MOV     R4,#0x2
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A02         MOV     R2,#0x2
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   E9           MOV     A,R1
   \   000037   7020         JNZ     ??zgInit_1
    591              {
    592                // Get the old value from NV memory
    593                osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
   \   000039                ; Setup parameters for call to function osal_nv_read
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..02       MOV     ?V0,#0x2
   \   000041   75..00       MOV     ?V1,#0x0
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7C00         MOV     R4,#0x0
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   7A02         MOV     R2,#0x2
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
    594              }
    595          
    596              // Increment the Boot Counter and store it into NV memory
    597              if ( setDefault )
   \                     ??zgInit_1:
   \   000059   EE           MOV     A,R6
   \   00005A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   5005         JNC     ??zgInit_2
    598              {
    599                bootCnt = 0;
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   8008         SJMP    ??zgInit_3
    600              }
    601              else
    602              {
    603                bootCnt++;
   \                     ??zgInit_2:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   2401         ADD     A,#0x1
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   3400         ADDC    A,#0x0
    604              }
    605          
    606              osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    607            }
   \                     ??zgInit_3:
   \   000071   12....       LCALL   ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..02       MOV     ?V0,#0x2
   \   00007A   75..00       MOV     ?V1,#0x0
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7C00         MOV     R4,#0x0
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7A02         MOV     R2,#0x2
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00008D   7404         MOV     A,#0x4
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    608          #endif  // FEATURE_SYSTEM_STATS
    609          
    610            zgUpgradeNVItems();
   \   000092                ; Setup parameters for call to function osal_nv_item_len
   \   000092   7A24         MOV     R2,#0x24
   \   000094   7B00         MOV     R3,#0x0
   \   000096   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000099   8A..         MOV     ?V0,R2
   \   00009B   8B..         MOV     ?V1,R3
   \   00009D                ; Setup parameters for call to function osal_nv_item_len
   \   00009D   7A35         MOV     R2,#0x35
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000A4   8B..         MOV     ?V3,R3
   \   0000A6   EA           MOV     A,R2
   \   0000A7   45..         ORL     A,?V3
   \   0000A9   7072         JNZ     ??zgInit_4
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   65..         XRL     A,?V0
   \   0000AF   45..         ORL     A,?V1
   \   0000B1   706A         JNZ     ??zgInit_4
   \   0000B3                ; Setup parameters for call to function osal_nv_read
   \   0000B3   A8..         MOV     R0,?XSP + 0
   \   0000B5   A9..         MOV     R1,?XSP + 1
   \   0000B7   88..         MOV     ?V0,R0
   \   0000B9   89..         MOV     ?V1,R1
   \   0000BB   78..         MOV     R0,#?V0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   75..02       MOV     ?V0,#0x2
   \   0000C3   75..00       MOV     ?V1,#0x0
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   7C00         MOV     R4,#0x0
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   7A24         MOV     R2,#0x24
   \   0000D1   7B00         MOV     R3,#0x0
   \   0000D3   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000D6   7404         MOV     A,#0x4
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   85..82       MOV     DPL,?XSP + 0
   \   0000DE   85..83       MOV     DPH,?XSP + 1
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F8           MOV     R0,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F9           MOV     R1,A
   \   0000E6   E8           MOV     A,R0
   \   0000E7   FA           MOV     R2,A
   \   0000E8   E9           MOV     A,R1
   \   0000E9   FB           MOV     R3,A
   \   0000EA   90....       MOV     DPTR,#zgPollRate
   \   0000ED   EA           MOV     A,R2
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   EB           MOV     A,R3
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E4           CLR     A
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7                ; Setup parameters for call to function osal_nv_item_init
   \   0000F7   75....       MOV     ?V0,#zgPollRate & 0xff
   \   0000FA   75....       MOV     ?V1,#(zgPollRate >> 8) & 0xff
   \   0000FD   78..         MOV     R0,#?V0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   7C04         MOV     R4,#0x4
   \   000104   7D00         MOV     R5,#0x0
   \   000106   7A35         MOV     R2,#0x35
   \   000108   7B00         MOV     R3,#0x0
   \   00010A   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112                ; Setup parameters for call to function osal_nv_delete
   \   000112   7C02         MOV     R4,#0x2
   \   000114   7D00         MOV     R5,#0x0
   \   000116   7A24         MOV     R2,#0x24
   \   000118   7B00         MOV     R3,#0x0
   \   00011A   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
    611          
    612            // Initialize the Extended PAN ID as my own extended address
    613            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_4:
   \   00011D                ; Setup parameters for call to function ZMacGetReq
   \   00011D   7A..         MOV     R2,#zgExtendedPANID & 0xff
   \   00011F   7B..         MOV     R3,#(zgExtendedPANID >> 8) & 0xff
   \   000121   79E2         MOV     R1,#-0x1e
   \   000123   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    614          
    615            // Initialize the items table
    616            zgInitItems( setDefault );
   \   000126                ; Setup parameters for call to function zgInitItems
   \   000126   EE           MOV     A,R6
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    617          
    618          #ifndef NONWK
    619            if ( ZG_SECURE_ENABLED )
    620            {
    621              // Initialize the Pre-Configured Key to the default key
    622              zgPreconfigKeyInit( setDefault );
   \   00012B                ; Setup parameters for call to function osal_memcpy
   \   00012B   75....       MOV     ?V0,#defaultKey & 0xff
   \   00012E   75....       MOV     ?V1,#(defaultKey >> 8) & 0xff
   \   000131   75..80       MOV     ?V2,#-0x80
   \   000134   78..         MOV     R0,#?V0
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000139   7C10         MOV     R4,#0x10
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   7405         MOV     A,#0x5
   \   00013F   12....       LCALL   ?XSTACK_DISP101_8
   \   000142   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000145   7403         MOV     A,#0x3
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014A                ; Setup parameters for call to function osal_nv_item_init
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?XSTACK_DISP100_8
   \   00014F   88..         MOV     ?V0,R0
   \   000151   89..         MOV     ?V1,R1
   \   000153   78..         MOV     R0,#?V0
   \   000155   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000158   7C10         MOV     R4,#0x10
   \   00015A   7D00         MOV     R5,#0x0
   \   00015C   7A62         MOV     R2,#0x62
   \   00015E   7B00         MOV     R3,#0x0
   \   000160   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?DEALLOC_XSTACK8
   \   000168   E9           MOV     A,R1
   \   000169   7025         JNZ     ??zgInit_5
   \   00016B   EE           MOV     A,R6
   \   00016C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00016E   5020         JNC     ??zgInit_5
   \   000170                ; Setup parameters for call to function osal_nv_write
   \   000170   78..         MOV     R0,#?V0
   \   000172   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000175   75..10       MOV     ?V0,#0x10
   \   000178   75..00       MOV     ?V1,#0x0
   \   00017B   78..         MOV     R0,#?V0
   \   00017D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000180   7C00         MOV     R4,#0x0
   \   000182   7D00         MOV     R5,#0x0
   \   000184   7A62         MOV     R2,#0x62
   \   000186   7B00         MOV     R3,#0x0
   \   000188   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00018B   7404         MOV     A,#0x4
   \   00018D   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zgInit_5:
   \   000190                ; Setup parameters for call to function osal_memset
   \   000190   7C10         MOV     R4,#0x10
   \   000192   7D00         MOV     R5,#0x0
   \   000194   7900         MOV     R1,#0x0
   \   000196   7402         MOV     A,#0x2
   \   000198   12....       LCALL   ?XSTACK_DISP101_8
   \   00019B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    623          
    624              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    625              ZDSecMgrInitNVKeyTables( setDefault );
   \   00019E                ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
   \   00019E   EE           MOV     A,R6
   \   00019F   F9           MOV     R1,A
   \   0001A0   12....       LCALL   `??ZDSecMgrInitNVKeyTables::?relay`; Banked call to: ZDSecMgrInitNVKeyTables
    626            }
    627          #endif // NONWK
    628          
    629            // Clear the Config State default
    630            if ( setDefault )
   \   0001A3   EE           MOV     A,R6
   \   0001A4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001A6   5007         JNC     ??zgInit_6
    631            {
    632              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   0001A8                ; Setup parameters for call to function zgWriteStartupOptions
   \   0001A8   7A01         MOV     R2,#0x1
   \   0001AA   7900         MOV     R1,#0x0
   \   0001AC   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    633            }
    634          
    635            return ( ZSUCCESS );
   \                     ??zgInit_6:
   \   0001AF   7900         MOV     R1,#0x0
   \   0001B1   7412         MOV     A,#0x12
   \   0001B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B6   7F04         MOV     R7,#0x4
   \   0001B8   02....       LJMP    ?BANKED_LEAVE_XDATA
    636          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET
    637          
    638          /*********************************************************************
    639           * @fn          zgInitItems
    640           *
    641           * @brief       Initializes RAM variables from NV.  If NV items don't
    642           *              exist, then the NV is initialize with what is in RAM
    643           *              variables.
    644           *
    645           * @param       none
    646           *
    647           * @return      none
    648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    649          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    650          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
    651            uint8  i = 0;
   \   000007   75..00       MOV     ?V4,#0x0
    652          
    653            if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
   \   00000A   90....       MOV     DPTR,#zgApsLinkKeyType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000011   7003         JNZ     ??zgInitItems_0
    654            {
    655              zgUseDefaultTCLK = FALSE;
   \   000013   E4           CLR     A
   \   000014   8002         SJMP    ??zgInitItems_1
    656            }
    657            else
    658            {
    659              // Most of the time default TCLK will be used
    660              zgUseDefaultTCLK = TRUE;
   \                     ??zgInitItems_0:
   \   000016   7401         MOV     A,#0x1
   \                     ??zgInitItems_1:
   \   000018   F0           MOVX    @DPTR,A
   \   000019   801A         SJMP    ??zgInitItems_2
    661            }
    662          
    663            while ( zgItemTable[i].id != 0x00 )
    664            {
   \                     ??zgInitItems_3:
   \   00001B                ; Setup parameters for call to function osal_nv_read
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \                     ??zgInitItems_4:
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
    665              // Initialize the item
    666              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    667          
    668              // Move on to the next item
    669              i++;
   \                     ??zgInitItems_5:
   \   000033   05..         INC     ?V4
   \                     ??zgInitItems_2:
   \   000035   E5..         MOV     A,?V4
   \   000037   75F006       MOV     B,#0x6
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   74..         MOV     A,#zgItemTable & 0xff
   \   000040   28           ADD     A,R0
   \   000041   F8           MOV     R0,A
   \   000042   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   000044   39           ADDC    A,R1
   \   000045   F9           MOV     R1,A
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   E4           CLR     A
   \   00004B   93           MOVC    A,@A+DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   7401         MOV     A,#0x1
   \   00004F   93           MOVC    A,@A+DPTR
   \   000050   FB           MOV     R3,A
   \   000051   EA           MOV     A,R2
   \   000052   4B           ORL     A,R3
   \   000053   606E         JZ      ??zgInitItems_6
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E4           CLR     A
   \   00005A   93           MOVC    A,@A+DPTR
   \   00005B   F5..         MOV     ?V2,A
   \   00005D   7401         MOV     A,#0x1
   \   00005F   93           MOVC    A,@A+DPTR
   \   000060   F5..         MOV     ?V3,A
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E4           CLR     A
   \   000069   93           MOVC    A,@A+DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   7401         MOV     A,#0x1
   \   00006E   93           MOVC    A,@A+DPTR
   \   00006F   F583         MOV     DPH,A
   \   000071   D082         POP     DPL
   \   000073   8582..       MOV     ?V0,DPL
   \   000076   8583..       MOV     ?V1,DPH
   \   000079   8882         MOV     DPL,R0
   \   00007B   8983         MOV     DPH,R1
   \   00007D   E4           CLR     A
   \   00007E   93           MOVC    A,@A+DPTR
   \   00007F   C0E0         PUSH    A
   \   000081   7401         MOV     A,#0x1
   \   000083   93           MOVC    A,@A+DPTR
   \   000084   F583         MOV     DPH,A
   \   000086   D082         POP     DPL
   \   000088   AE82         MOV     R6,DPL
   \   00008A   AF83         MOV     R7,DPH
   \   00008C                ; Setup parameters for call to function osal_nv_item_init
   \   00008C   78..         MOV     R0,#?V2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   AC..         MOV     R4,?V0
   \   000093   AD..         MOV     R5,?V1
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   E9           MOV     A,R1
   \   0000A2   708F         JNZ     ??zgInitItems_5
   \   0000A4   E5..         MOV     A,?V5
   \   0000A6   78..         MOV     R0,#?V2
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??zgInitItems_3 & 0xFFFF
   \   0000AD                ; Setup parameters for call to function osal_nv_write
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   78..         MOV     R0,#?V0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   7C00         MOV     R4,#0x0
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   EE           MOV     A,R6
   \   0000BA   FA           MOV     R2,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   FB           MOV     R3,A
   \   0000BD   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000C0   02....       LJMP    ??zgInitItems_4 & 0xFFFF
    670            }
    671          }
   \                     ??zgInitItems_6:
   \   0000C3   7F06         MOV     R7,#0x6
   \   0000C5   02....       LJMP    ?BANKED_LEAVE_XDATA
    672          
    673          /*********************************************************************
    674           * @fn          zgReadStartupOptions
    675           *
    676           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    677           *
    678           * @param       none
    679           *
    680           * @return      the ZCD_NV_STARTUP_OPTION NV item
    681           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    682          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    683          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    684            // Default to Use Config State and Use Network State
    685            uint8 startupOption = 0;
   \   00000A   12....       LCALL   ?Subroutine1 & 0xFFFF
    686          
    687            // This should have been done in ZMain.c, but just in case.
    688            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    689                                        sizeof(startupOption),
    690                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A03         MOV     R2,#0x3
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   E9           MOV     A,R1
   \   000021   7020         JNZ     ??zgReadStartupOptions_0
    691            {
    692              // Read saved startup control
    693              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    694                            0,
    695                            sizeof( startupOption ),
    696                            &startupOption);
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..01       MOV     ?V0,#0x1
   \   00002B   75..00       MOV     ?V1,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV     R4,#0x0
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7A03         MOV     R2,#0x3
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    697            }
    698            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0
    699          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine2_0
   \   000007                ; // Fall through to label ??Subroutine2_0
    700          
    701          /*********************************************************************
    702           * @fn          zgWriteStartupOptions
    703           *
    704           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    705           *
    706           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    707           *               clear bit. The set bit is an OR operation, and the
    708           *               clear bit is an AND ~(bitOptions) operation.
    709           *
    710           * @param       bitOptions - which bits to perform action on:
    711           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    712           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    713           *
    714           * @return      ZSUCCESS if successful
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    718            uint8 status;
    719            uint8 startupOptions = 0;
   \   00000E   12....       LCALL   ?Subroutine1 & 0xFFFF
    720          
    721            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    722                          0,
    723                          sizeof( startupOptions ),
    724                          &startupOptions );
   \                     ??CrossCallReturnLabel_1:
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV     ?V0,#0x1
   \   000017   75..00       MOV     ?V1,#0x0
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV     R4,#0x0
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A03         MOV     R2,#0x3
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
   \   000030   F9           MOV     R1,A
    725          
    726            if ( status == ZSUCCESS )
   \   000031   703E         JNZ     ??zgWriteStartupOptions_0
    727            {
    728              if ( action == ZG_STARTUP_SET )
   \   000033   74FF         MOV     A,#-0x1
   \   000035   6E           XRL     A,R6
   \   000036   700A         JNZ     ??zgWriteStartupOptions_1
    729              {
    730                // Set bits
    731                startupOptions |= bitOptions;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   4F           ORL     A,R7
   \   000040   800C         SJMP    ??zgWriteStartupOptions_2
    732              }
    733              else
    734              {
    735                // Clear bits
    736                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000042   74FF         MOV     A,#-0x1
   \   000044   6F           XRL     A,R7
   \   000045   F8           MOV     R0,A
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   58           ANL     A,R0
    737              }
    738          
    739              // Changed?
    740              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    741                           0,
    742                           sizeof( startupOptions ),
    743                           &startupOptions );
    744            }
   \                     ??zgWriteStartupOptions_2:
   \   00004E   12....       LCALL   ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..01       MOV     ?V0,#0x1
   \   000057   75..00       MOV     ?V1,#0x0
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7C00         MOV     R4,#0x0
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7A03         MOV     R2,#0x3
   \   000065   7B00         MOV     R3,#0x0
   \   000067   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   E9           MOV     A,R1
   \   000070   F9           MOV     R1,A
    745          
    746            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   000071   80..         SJMP    ?Subroutine0
    747          }
    748          
    749          /*********************************************************************
    750           * @fn          zgSetItem
    751           *
    752           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    753           *
    754           * @param       id - NV ID
    755           *              len - NV item length
    756           *              buf - pointer to the input buffer
    757           *
    758           * @return      none
    759           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    760          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    761          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    762          
    763            uint8  i = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   8002         SJMP    ??zgSetItem_0
    764          
    765            // Look up the NV item table
    766            while ( zgItemTable[i].id != 0x00 )
    767            {
    768              if( zgItemTable[i].id == id )
    769              {
    770                if ( zgItemTable[i].len == len )
    771                {
    772                  osal_memcpy( zgItemTable[i].buf, buf, len );
    773                }
    774                break;
    775              }
    776              // Move on to the next item
    777              i++;
   \                     ??zgSetItem_1:
   \   00000A   05..         INC     ?V0
   \                     ??zgSetItem_0:
   \   00000C   E5..         MOV     A,?V0
   \   00000E   75F006       MOV     B,#0x6
   \   000011   A4           MUL     AB
   \   000012   F8           MOV     R0,A
   \   000013   A9F0         MOV     R1,B
   \   000015   74..         MOV     A,#zgItemTable & 0xff
   \   000017   28           ADD     A,R0
   \   000018   F8           MOV     R0,A
   \   000019   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00001B   39           ADDC    A,R1
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E4           CLR     A
   \   000026   93           MOVC    A,@A+DPTR
   \   000027   C0E0         PUSH    A
   \   000029   7401         MOV     A,#0x1
   \   00002B   93           MOVC    A,@A+DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   D082         POP     DPL
   \   000030   A882         MOV     R0,DPL
   \   000032   A983         MOV     R1,DPH
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   6048         JZ      ??zgSetItem_2
   \   000038   EA           MOV     A,R2
   \   000039   68           XRL     A,R0
   \   00003A   7002         JNZ     ??zgSetItem_3
   \   00003C   EB           MOV     A,R3
   \   00003D   69           XRL     A,R1
   \                     ??zgSetItem_3:
   \   00003E   70CA         JNZ     ??zgSetItem_1
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E4           CLR     A
   \   000047   93           MOVC    A,@A+DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7401         MOV     A,#0x1
   \   00004B   93           MOVC    A,@A+DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   EC           MOV     A,R4
   \   00004E   68           XRL     A,R0
   \   00004F   7002         JNZ     ??zgSetItem_4
   \   000051   ED           MOV     A,R5
   \   000052   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   000053   702B         JNZ     ??zgSetItem_2
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   740B         MOV     A,#0xb
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V1,A
   \   000061   75..00       MOV     ?V2,#0x0
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   93           MOVC    A,@A+DPTR
   \   000073   FA           MOV     R2,A
   \   000074   7401         MOV     A,#0x1
   \   000076   93           MOVC    A,@A+DPTR
   \   000077   FB           MOV     R3,A
   \   000078   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
    778            }
    779          }
   \                     ??zgSetItem_2:
   \   000080   7F03         MOV     R7,#0x3
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultRejoinBackoff>`:
   \   000000   A0BB0D00     DD 900000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultRejoinScan>`:
   \   000000   A0BB0D00     DD 900000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurityMode>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkLeaveRequestAllowed>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkParentInformation>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkEndDeviceTimeoutDefault`:
   \   000000   08           DB 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgEndDeviceTimeoutValue>`:
   \   000000   08           DB 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkCommissionedNwkAddr>`:
   \   000000   FEFF         DW 65534

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutInc>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutCount>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsMinDupRejTableSize>`:
   \   000000   0500         DW 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsLinkKeyType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   FFFF         DW 65535

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInitItems::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgReadStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgWriteStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgSetItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    780          
    781          #ifndef NONWK
    782          /*********************************************************************
    783           * @fn       zgPreconfigKeyInit()
    784           *
    785           * @brief
    786           *
    787           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    788           *   write the system default (value passed in) into NV memory. But if
    789           *   it exists do not overwrite it.
    790           *
    791           *   Also, if setDefault is TRUE and the item exists, we will write
    792           *   the default value to NV space.
    793           *
    794           * @param   setDefault - TRUE to set default
    795           *
    796           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    797           *          exist in NV, NV_OPER_FAILED if failure.
    798           */
    799          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    800          {
    801            uint8 zgPreConfigKey[SEC_KEY_LEN];
    802            uint8 status;
    803          
    804            // Initialize the Pre-Configured Key to the default key
    805            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    806          
    807            // If the item doesn't exist in NV memory, create and initialize it
    808            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    809            if ( status == ZSUCCESS )
    810            {
    811              if ( setDefault )
    812              {
    813                // Write the default value back to NV
    814                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    815              }
    816            }
    817          
    818            // clear local copy of default key
    819            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    820          
    821            return (status);
    822          }
    823          #endif
    824          
    825          /*********************************************************************
    826           * @fn       zgUpgradeNVItems()
    827           *
    828           * @brief
    829           *
    830           *   Function that upgrades NV Items that have changed.
    831           *
    832           * @param   none
    833           *
    834           * @return  none
    835           */
    836          static void zgUpgradeNVItems( void )
    837          {
    838          #if defined ( ZCD_NV_POLL_RATE_OLD16 )
    839            {
    840              // This conversion will only happen if the old poll rate exists and
    841              // the new poll rate doesn't exist.  It will read the old poll rate,
    842              // convert it to the new poll rate, create the new poll rate NV item,
    843              // then delete the old poll rate NV item.
    844              uint16 oldNvLen;
    845              uint16 newNvLen;
    846          
    847              // Use the length of the NV items to determine if they exist
    848              oldNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE_OLD16 );
    849              newNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE );
    850              if ( (newNvLen == 0) && (oldNvLen == sizeof ( uint16 )) )
    851              {
    852                // The old poll rate exists, so read it and convert to the new 32 bit poll rate
    853                uint16 oldPollRate;
    854                osal_nv_read( ZCD_NV_POLL_RATE_OLD16, 0, sizeof(uint16), &oldPollRate );
    855                zgPollRate = (uint32)oldPollRate;
    856                osal_nv_item_init( ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate );
    857                osal_nv_delete( ZCD_NV_POLL_RATE_OLD16, oldNvLen );
    858              }
    859            }
    860          #endif // ZCD_NV_POLL_RATE_OLD16
    861          }
    862          
    863          /*********************************************************************
    864          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
     34   zgInit
       30   -> ZDSecMgrInitNVKeyTables
       30   -> ZMacGetReq
       33   -> osal_memcpy
       30   -> osal_memset
       30   -> osal_nv_delete
       32   -> osal_nv_item_init
       30   -> osal_nv_item_len
       34   -> osal_nv_read
       34   -> osal_nv_write
       30   -> zgInitItems
       30   -> zgReadStartupOptions
       30   -> zgWriteStartupOptions
     48   zgInitItems
       16   -> osal_nv_item_init
       18   -> osal_nv_read
       18   -> osal_nv_write
     45   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     16   zgSetItem
       14   -> osal_memcpy
     45   zgWriteStartupOptions
       15   -> osal_nv_read
       15   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsLinkKeyType>
       2  ?<Initializer for zgApsMinDupRejTableSize>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscDupRejTimeoutCount>
       2  ?<Initializer for zgApscDupRejTimeoutInc>
       1  ?<Initializer for zgApscMaxFrameRetries>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultChannelList>
       4  ?<Initializer for zgDefaultRejoinBackoff>
       4  ?<Initializer for zgDefaultRejoinScan>
       1  ?<Initializer for zgDefaultStartingScanDuratio
       1  ?<Initializer for zgEndDeviceTimeoutValue>
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       2  ?<Initializer for zgNwkCommissionedNwkAddr>
       1  ?<Initializer for zgNwkEndDeviceTimeoutDefault
       1  ?<Initializer for zgNwkLeaveRequestAllowed>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkParentInformation>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       4  ?<Initializer for zgPollRate>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgSecurityMode>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
      12  ??Subroutine2_0
      10  ?Subroutine0
       7  ?Subroutine1
       1  zgApsAckWaitMultiplier
       1  zgApsAllowR19Sec
       2  zgApsDefaultMaxBindingTime
       1  zgApsLinkKeyType
       2  zgApsMinDupRejTableSize
       1  zgApsNonMemberRadius
       8  zgApsTrustCenterAddr
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscDupRejTimeoutCount
       2  zgApscDupRejTimeoutInc
       1  zgApscMaxFrameRetries
       1  zgBcastDeliveryTime
       1  zgChildAgingEnable
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
       4  zgDefaultChannelList
       4  zgDefaultRejoinBackoff
       4  zgDefaultRejoinScan
       1  zgDefaultStartingScanDuration
       1  zgDeviceLogicalType
       1  zgDeviceNum
       1  zgDeviceType
       1  zgEndDeviceConfiguration
       4  zgEndDeviceKAInterval
       1  zgEndDeviceTimeoutValue
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
     443  zgInit
       6  zgInit::?relay
     200  zgInitItems
       6  zgInitItems::?relay
     330  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       2  zgNwkCommissionedNwkAddr
       1  zgNwkEndDeviceTimeoutDefault
       1  zgNwkLeaveRequestAllowed
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkParentInformation
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       4  zgPollRate
       1  zgPreConfigKeys
       2  zgQueuedPollRate
      75  zgReadStartupOptions
       6  zgReadStartupOptions::?relay
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgRouterOffAssocCleanup
       1  zgSapiEndpoint
       1  zgSecurePermitJoin
       1  zgSecurityMode
     133  zgSetItem
       6  zgSetItem::?relay
       1  zgStackProfile
       1  zgStartDelay
       1  zgUseDefaultTCLK
     115  zgWriteStartupOptions
       6  zgWriteStartupOptions::?relay

 
 995 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 330 bytes in segment CODE_C
  63 bytes in segment XDATA_I
  63 bytes in segment XDATA_ID
  40 bytes in segment XDATA_Z
 
 1 418 bytes of CODE  memory
   103 bytes of XDATA memory

Errors: none
Warnings: none
