###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                28/Aug/2016  10:30:45
# Copyright 2004-2015 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT.c" -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D
#        ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\List\MT.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\Zigbee-HomeAutomatic\CC2530DB\CoordinatorEB\Obj\MT.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2015-01-18 19:44:10 -0800 (Sun, 18 Jan 2015) $
      4            Revision:       $Revision: 41896 $
      5          
      6            Description:    MonitorTest Event Loop functions.
      7                            Everything in the MonitorTest Task (except the serial driver).
      8          
      9          
     10            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40           **************************************************************************************************/
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          
     46          #include "ZComDef.h"
     47          #include "MT.h"
     48          #include "MT_APP.h"
     49          #include "MT_DEBUG.h"
     50          #include "MT_UTIL.h"
     51          #include "MT_SYS.h"
     52          
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Memory.h"
     56          #include "OSAL_Nv.h"
     57          
     58          #include "DebugTrace.h"
     59          #include "ZMAC.h"
     60          
     61          #if !defined ( NONWK )
     62            #include "NLMEDE.h"
     63            #include "nwk_bufs.h"
     64            #include "ZDObject.h"
     65            #include "ssp.h"
     66            #include "nwk_util.h"
     67            #include "AF.h"
     68            #include "MT_SAPI.h"
     69          #endif
     70          
     71          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     72            #include "MT_MAC.h"
     73          #endif
     74          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     75            #include "MT_NWK.h"
     76            #include "nwk.h"
     77            #include "nwk_bufs.h"
     78          #endif
     79          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     80            #include "MT_AF.h"
     81          #endif
     82          #if defined( MT_USER_TEST_FUNC )
     83            #include "AF.h"
     84          #endif
     85          #if defined( MT_ZDO_FUNC )
     86            #include "MT_ZDO.h"
     87          #endif
     88          #if defined (MT_SAPI_FUNC)
     89          	#include "MT_SAPI.h"
     90          #endif
     91          #if defined (MT_OTA_FUNC)
     92            #include "MT_OTA.h"
     93          #endif
     94          
     95          #if defined( APP_TP )
     96           #include "TestProfile.h"
     97          #endif
     98          #if defined( APP_TP2 )
     99           #include "TestProfile2.h"
    100          #endif
    101          
    102          #if defined(APP_TGEN)
    103            #include "TrafficGenApp.h"
    104          #endif
    105          #if defined(APP_DEBUG)
    106          	#include "DebugApp.h"
    107          #endif
    108          #if defined (NWK_TEST)
    109          	#include "HWTTApp.h"
    110          #endif
    111          #if defined (MT_UBL_FUNC)
    112            extern uint8 MT_UblCommandProcessing(uint8 *pBuf);
    113          #endif
    114          #if defined (MT_ZNP_FUNC)
    115            #include "MT_ZNP.h"
    116          #endif
    117          #if defined (MT_MAC_PROTOBUF_FUNC)
    118            #include "mtmacpb.h"
    119          #endif
    120          #if defined (MT_GP_FUNC)
    121            #include "MT_GP.h"
    122          #endif
    123          
    124          #include "hal_uart.h"
    125          #include "hal_led.h"
    126          #include "hal_key.h"
    127          #include "MT_UART.h"
    128          
    129          #if defined (FEATURE_DUAL_MAC)
    130            #include "dmmgr.h"
    131          #endif 
    132          
    133          /**************************************************************************************************
    134           * CONSTANTS
    135           **************************************************************************************************/
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 44
   \   00002C                REQUIRE __INIT_XDATA_Z
    138          {
    139            NULL,                               // MT_RPC_SYS_RES0
    140          
    141          #if defined (MT_SYS_FUNC)
    142            MT_SysCommandProcessing,            // MT_RPC_SYS_SYS
    143          #else
    144            NULL,
    145          #endif
    146          
    147          #if defined (MT_MAC_FUNC)
    148            MT_MacCommandProcessing,            // MT_RPC_SYS_MAC
    149          #else
    150            NULL,
    151          #endif
    152          
    153          #if defined (MT_NWK_FUNC)
    154            MT_NwkCommandProcessing,            // MT_RPC_SYS_NWK
    155          #else
    156            NULL,
    157          #endif
    158          
    159          #if defined (MT_AF_FUNC)
    160            MT_AfCommandProcessing,             // MT_RPC_SYS_AF
    161          #else
    162            NULL,
    163          #endif
    164          
    165          #if defined (MT_ZDO_FUNC)
    166            MT_ZdoCommandProcessing,            // MT_RPC_SYS_ZDO
    167          #else
    168            NULL,
    169          #endif
    170          
    171          #if defined (MT_SAPI_FUNC)
    172            MT_SapiCommandProcessing,           // MT_RPC_SYS_SAPI
    173          #else
    174            NULL,
    175          #endif
    176          
    177          #if defined (MT_UTIL_FUNC)
    178            MT_UtilCommandProcessing,           // MT_RPC_SYS_UTIL
    179          #else
    180            NULL,
    181          #endif
    182          
    183          #if defined (MT_DEBUG_FUNC)
    184            MT_DebugCommandProcessing,          // MT_RPC_SYS_DBG
    185          #else
    186            NULL,
    187          #endif
    188          
    189          #if defined (MT_APP_FUNC)
    190            MT_AppCommandProcessing,            // MT_RPC_SYS_APP
    191          #else
    192            NULL,
    193          #endif
    194          
    195          #if defined (MT_OTA_FUNC)
    196            MT_OtaCommandProcessing,            // MT_RPC_SYS_OTA
    197          #else
    198            NULL,
    199          #endif
    200          
    201          #if defined (MT_ZNP_FUNC)
    202            MT_ZnpCommandProcessing,
    203          #else
    204            NULL,
    205          #endif
    206          
    207            NULL,  // Spare sub-system 12.
    208          
    209          #if defined (MT_UBL_FUNC)
    210            MT_UblCommandProcessing,
    211          #else
    212            NULL,
    213          #endif
    214          
    215            NULL,                               // MT_RPC_SYS_RESERVED14
    216            NULL,                               // MT_RPC_SYS_RESERVED15
    217            NULL,                               // MT_RPC_SYS_RESERVED16
    218          #if defined (MT_MAC_PROTOBUF_FUNC)
    219            MT_MacPBCmdProc,                    // MT_RPC_SYS_PROTOBUF
    220          #else
    221            NULL,
    222          #endif
    223            NULL,                               // MT_RPC_SYS_RES18
    224            NULL,                               // MT_RPC_SYS_RES19
    225            NULL,                               // MT_RPC_SYS_RES20
    226          #if defined (MT_GP_FUNC)
    227            MT_GpCommandProcessing,
    228          #else
    229            NULL,
    230          #endif
    231          };
    232          
    233          /**************************************************************************************************
    234           * GLOBAL VARIABLES
    235           **************************************************************************************************/
    236          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    237          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    238          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    239          
    240          /**************************************************************************************************
    241           * LOCAL FUNCTIONS
    242           **************************************************************************************************/
    243          
    244          void MT_MsgQueueInit( void );
    245          void MT_ResetMsgQueue( void );
    246          byte MT_QueueMsg( byte *msg , byte len );
    247          void MT_ProcessQueue( void );
    248          
    249          #if defined ( MT_USER_TEST_FUNC )
    250          void MT_ProcessAppUserCmd( byte *pData );
    251          #endif
    252          
    253          /**************************************************************************************************
    254           * @fn         MT_Init
    255           *
    256           * @brief      This function is the secondary initialization that resolves conflicts during
    257           *             osalInitTasks(). For example, since MT is the highest priority task, and
    258           *             specifically because the MT task is initialized before the ZDApp task, if MT_Init()
    259           *             registers anything with ZDO_RegisterForZdoCB(), it is wiped out when ZDApp task
    260           *             initialization invokes ZDApp_InitZdoCBFunc().
    261           *             There may be other existing or future such races, so try to do all possible
    262           *             MT initialization here vice in MT_TaskInit().
    263           *
    264           * input parameters
    265           *
    266           * None.
    267           *
    268           * output parameters
    269           *
    270           * None.
    271           *
    272           * @return      None.
    273           **************************************************************************************************
    274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void MT_Init(uint8 taskID)
   \                     MT_Init:
    276          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    277            MT_TaskID = taskID;
   \   000006   90....       MOV     DPTR,#MT_TaskID
   \   000009   F0           MOVX    @DPTR,A
    278            debugThreshold = 0;
   \   00000A   90....       MOV     DPTR,#debugThreshold
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    279            debugCompId = 0;
   \   00000F   90....       MOV     DPTR,#debugCompId
   \   000012   F0           MOVX    @DPTR,A
    280          
    281          #if defined (MT_ZDO_FUNC)
    282            MT_ZdoInit();
    283          #endif
    284          #ifndef ZBIT
    285            MT_SysResetInd();
   \   000013                ; Setup parameters for call to function MT_SysResetInd
   \   000013   12....       LCALL   `??MT_SysResetInd::?relay`; Banked call to: MT_SysResetInd
    286          #endif /* !ZBIT */
    287          }
   \   000016                REQUIRE ?Subroutine0
   \   000016                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    288          
    289          /***************************************************************************************************
    290           * @fn      MT_BuildAndSendZToolResponse
    291           *
    292           * @brief   Build and send a ZTOOL msg
    293           * @param   uint8 cmdType - include type and subsystem
    294           *          uint8 cmdId - command ID
    295           *          byte dataLen
    296           *          byte *pData
    297           *
    298           * @return  void
    299           ***************************************************************************************************/
    300          #if !defined(NPI)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    303            uint8 *msg_ptr;
    304          
    305          #ifdef FEATURE_DUAL_MAC
    306            msg_ptr = DMMGR_BuildRspMsg( cmdType, cmdId, dataLen, pData );
    307          
    308            if ( msg_ptr )
    309            {
    310              MT_TransportSend(msg_ptr);
    311            }
    312          #else
    313            if ((msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen)) != NULL)
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   AA..         MOV     R2,?V7
   \   000011   74E0         MOV     A,#-0x20
   \   000013   55..         ANL     A,?V2
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000019   8A..         MOV     ?V0,R2
   \   00001B   8B..         MOV     ?V1,R3
   \   00001D   EA           MOV     A,R2
   \   00001E   45..         ORL     A,?V1
   \   000020   603B         JZ      ??MT_BuildAndSendZToolResponse_0
    314            {
    315              msg_ptr[MT_RPC_POS_LEN] = dataLen;
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   E5..         MOV     A,?V7
   \   000028   F0           MOVX    @DPTR,A
    316              msg_ptr[MT_RPC_POS_CMD0] = cmdType;
   \   000029   A3           INC     DPTR
   \   00002A   E5..         MOV     A,?V2
   \   00002C   F0           MOVX    @DPTR,A
    317              msg_ptr[MT_RPC_POS_CMD1] = cmdId;
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E5..         MOV     A,?V3
   \   000035   F0           MOVX    @DPTR,A
    318              (void)osal_memcpy(msg_ptr+MT_RPC_POS_DAT0, pData, dataLen);
   \   000036                ; Setup parameters for call to function osal_memcpy
   \   000036   8E..         MOV     ?V4,R6
   \   000038   8F..         MOV     ?V5,R7
   \   00003A   75..00       MOV     ?V6,#0x0
   \   00003D   78..         MOV     R0,#?V4
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000042   AC..         MOV     R4,?V7
   \   000044   7D00         MOV     R5,#0x0
   \   000046   EA           MOV     A,R2
   \   000047   2403         ADD     A,#0x3
   \   000049   FA           MOV     R2,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V1
   \   00004D   FB           MOV     R3,A
   \   00004E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    319          
    320              MT_TransportSend(msg_ptr);
   \   000056                ; Setup parameters for call to function MT_TransportSend
   \   000056   AA..         MOV     R2,?V0
   \   000058   AB..         MOV     R3,?V1
   \   00005A   12....       LCALL   `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    321            }
    322          #endif /* FEATURE_DUAL_MAC */
    323          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   00005D   7F08         MOV     R7,#0x8
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
    324          #endif /* NPI */
    325          /***************************************************************************************************
    326           * @fn      MT_ProcessIncoming
    327           *
    328           * @brief  Process Incoming Message.
    329           *
    330           * @param   byte *pBuf - pointer to event message
    331           *
    332           * @return  void
    333           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    335          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    336            mtProcessMsg_t func;
    337            uint8 rsp[MT_RPC_FRAME_HDR_SZ];
    338          
    339            /* pre-build response message:  | status | cmd0 | cmd1 | */
    340            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   7401         MOV     A,#0x1
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
    341            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C0E0         PUSH    A
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
    342          
    343            /* check length */
    344            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C3           CLR     C
   \   00002E   94FB         SUBB    A,#-0x5
   \   000030   400A         JC      ??MT_ProcessIncoming_0
    345            {
    346              rsp[0] = MT_RPC_ERR_LENGTH;
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   7404         MOV     A,#0x4
   \   00003A   803C         SJMP    ??MT_ProcessIncoming_1
    347            }
    348            /* check subsystem range */
    349            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   00003C   E8           MOV     A,R0
   \   00003D   541F         ANL     A,#0x1f
   \   00003F   F8           MOV     R0,A
   \   000040   C3           CLR     C
   \   000041   9416         SUBB    A,#0x16
   \   000043   95E0         SUBB    A,0xE0 /* A   */
   \   000045   C3           CLR     C
   \   000046   65D0         XRL     A,PSW
   \   000048   33           RLC     A
   \   000049   5025         JNC     ??MT_ProcessIncoming_2
    350            {
    351              /* look up processing function */
    352              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   00004B   E8           MOV     A,R0
   \   00004C   28           ADD     A,R0
   \   00004D   F8           MOV     R0,A
   \   00004E   74..         MOV     A,#mtProcessIncoming & 0xff
   \   000050   28           ADD     A,R0
   \   000051   F582         MOV     DPL,A
   \   000053   E4           CLR     A
   \   000054   34..         ADDC    A,#(mtProcessIncoming >> 8) & 0xff
   \   000056   F583         MOV     DPH,A
   \   000058   12....       LCALL   ?Subroutine9 & 0xFFFF
    353              if (func)
   \                     ??CrossCallReturnLabel_16:
   \   00005B   E582         MOV     A,DPL
   \   00005D   4583         ORL     A,DPH
   \   00005F   600F         JZ      ??MT_ProcessIncoming_2
    354              {
    355                /* execute processing function */
    356                rsp[0] = (*func)(pBuf);
   \   000061                ; Setup parameters for indirect call
   \   000061   12....       LCALL   ?CALL_IND
   \   000064   E9           MOV     A,R1
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   F0           MOVX    @DPTR,A
    357              }
    358              else
    359              {
    360                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    361              }
    362            }
    363            else
    364            {
    365              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    366            }
    367          
    368            /* if error and this was an SREQ, send error message */
    369            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \   00006C   700B         JNZ     ??MT_ProcessIncoming_3
   \   00006E   8022         SJMP    ??MT_ProcessIncoming_4
   \                     ??MT_ProcessIncoming_2:
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   7401         MOV     A,#0x1
   \                     ??MT_ProcessIncoming_1:
   \   000078   F0           MOVX    @DPTR,A
   \                     ??MT_ProcessIncoming_3:
   \   000079   7401         MOV     A,#0x1
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   54E0         ANL     A,#0xe0
   \   000081   6420         XRL     A,#0x20
   \   000083   700D         JNZ     ??MT_ProcessIncoming_4
    370            {
    371              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0,
    372                                                                            MT_RPC_FRAME_HDR_SZ, rsp);
   \   000085                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000085   AC..         MOV     R4,?XSP + 0
   \   000087   AD..         MOV     R5,?XSP + 1
   \   000089   7B03         MOV     R3,#0x3
   \   00008B   7A00         MOV     R2,#0x0
   \   00008D   7960         MOV     R1,#0x60
   \   00008F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    373            }
    374          }
   \                     ??MT_ProcessIncoming_4:
   \   000092   7403         MOV     A,#0x3
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   \   000097   D083         POP     DPH
   \   000099   D082         POP     DPL
   \   00009B   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET
    375          
    376          /***************************************************************************************************
    377           * @fn      MTProcessAppRspMsg
    378           *
    379           * @brief   Process the User App Response Message
    380           *
    381           * @param   data - output serial buffer.  The first byte must be the
    382           *          endpoint that send this message.
    383           * @param   len - data length
    384           *
    385           * @return  none
    386           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    388          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008   FD           MOV     R5,A
   \   000009   E9           MOV     A,R1
    389            /* Send out Reset Response message */
    390            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000A   FB           MOV     R3,A
   \   00000B   7A80         MOV     R2,#-0x80
   \   00000D   7969         MOV     R1,#0x69
   \   00000F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    391          }
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF
    392          
    393          
    394          /***************************************************************************************************
    395           * @fn      MT_ReverseBytes
    396           *
    397           * @brief
    398           *
    399           *   Reverses bytes within an array
    400           *
    401           * @param   data - ptr to data buffer to reverse
    402           * @param    len - number of bytes in buffer
    403           *
    404           * @return  void
    405           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    408            byte i,j;
    409            byte temp;
    410          
    411            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   29           ADD     A,R1
   \   00000D   FF           MOV     R7,A
   \   00000E   8031         SJMP    ??MT_ReverseBytes_0
    412            {
    413              temp = pData[i];
   \                     ??MT_ReverseBytes_1:
   \   000010   A8..         MOV     R0,?V0
   \   000012   EA           MOV     A,R2
   \   000013   28           ADD     A,R0
   \   000014   F8           MOV     R0,A
   \   000015   E4           CLR     A
   \   000016   3B           ADDC    A,R3
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   FC           MOV     R4,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FD           MOV     R5,A
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V1,A
    414              pData[i++] = pData[j];
   \   000023   EF           MOV     A,R7
   \   000024   F8           MOV     R0,A
   \   000025   EA           MOV     A,R2
   \   000026   28           ADD     A,R0
   \   000027   F8           MOV     R0,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F9           MOV     R1,A
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   F0           MOVX    @DPTR,A
   \   000035   05..         INC     ?V0
    415              pData[j--] = temp;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E5..         MOV     A,?V1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   1F           DEC     R7
    416            }
   \   00003F   1E           DEC     R6
   \   000040   1E           DEC     R6
   \                     ??MT_ReverseBytes_0:
   \   000041   EE           MOV     A,R6
   \   000042   C3           CLR     C
   \   000043   9402         SUBB    A,#0x2
   \   000045   50C9         JNC     ??MT_ReverseBytes_1
    417          }
   \   000047   7F03         MOV     R7,#0x3
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
    418          
    419          
    420          /***************************************************************************************************
    421           * @fn      MT_Word2Buf
    422           *
    423           * @brief   Copy a uint16 array to a byte array, little endian.
    424           *
    425           * @param   pBuf - byte array
    426           * @param   pWord - uint16 array
    427           * @param   len - length of uint16 array
    428           *
    429           * @return  pointer to end of byte array
    430           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    432          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8024         SJMP    ??MT_Word2Buf_0
    433            while ( len-- > 0 )
    434            {
    435              *pBuf++ = LO_UINT16( *pWord );
   \                     ??MT_Word2Buf_1:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   F0           MOVX    @DPTR,A
    436              *pBuf++ = HI_UINT16( *pWord );
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2402         ADD     A,#0x2
   \   000020   FA           MOV     R2,A
   \   000021   5001         JNC     ??MT_Word2Buf_2
   \   000023   0B           INC     R3
    437              pWord++;
   \                     ??MT_Word2Buf_2:
   \   000024   EC           MOV     A,R4
   \   000025   2402         ADD     A,#0x2
   \   000027   FC           MOV     R4,A
   \   000028   5001         JNC     ??MT_Word2Buf_0
   \   00002A   0D           INC     R5
    438            }
   \                     ??MT_Word2Buf_0:
   \   00002B   E9           MOV     A,R1
   \   00002C   F8           MOV     R0,A
   \   00002D   74FF         MOV     A,#-0x1
   \   00002F   28           ADD     A,R0
   \   000030   F9           MOV     R1,A
   \   000031   04           INC     A
   \   000032   70D3         JNZ     ??MT_Word2Buf_1
    439          
    440            return pBuf;
   \   000034   02....       LJMP    ?Subroutine0 & 0xFFFF
    441          }
    442          #if !defined(NONWK)
    443          /***************************************************************************************************
    444           * @fn      MT_BuildEndpointDesc
    445           *
    446           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    447           *
    448           * @param   pBuf - byte array
    449           *
    450           * @return  epDesc - pointer to the endpoint descriptor
    451           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    452          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    453          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    454            uint8 i;
    455            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV     ?V0,#0x0
    456            endPointDesc_t *epDesc;
    457          
    458            epDesc = (endPointDesc_t *)param;
    459            /* check if this endpoint is already registered */
    460            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000010                ; Setup parameters for call to function afFindEndPointDesc
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000019   8B..         MOV     ?V5,R3
   \   00001B   EA           MOV     A,R2
   \   00001C   45..         ORL     A,?V5
   \   00001E   6006         JZ      ??MT_BuildEndpointDesc_0
    461            {
    462              ret = ZApsDuplicateEntry;
   \   000020   75..B8       MOV     ?V0,#-0x48
   \   000023   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    463            }
    464            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   000026   E5..         MOV     A,?V2
   \   000028   45..         ORL     A,?V3
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    465            {
    466              epDesc->endPoint = *pBuf;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   85..82       MOV     DPL,?V2
   \   000037   85..83       MOV     DPH,?V3
   \   00003A   F0           MOVX    @DPTR,A
    467          
    468              /* Ignore the latency reqs */
    469              epDesc->latencyReq = noLatencyReqs;
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
    470          
    471              /* allocate memory for the simple descriptor */
    472              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   7A0C         MOV     R2,#0xc
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   A8..         MOV     R0,?V4
   \   00004E   A9..         MOV     R1,?V5
   \   000050   E5..         MOV     A,?V2
   \   000052   2403         ADD     A,#0x3
   \   000054   F5..         MOV     ?V2,A
   \   000056   5002         JNC     ??MT_BuildEndpointDesc_2
   \   000058   05..         INC     ?V3
   \                     ??MT_BuildEndpointDesc_2:
   \   00005A   F582         MOV     DPL,A
   \   00005C   85..83       MOV     DPH,?V3
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    473              if (epDesc->simpleDesc)
   \   000064   E8           MOV     A,R0
   \   000065   49           ORL     A,R1
   \   000066   7003         JNZ     $+5
   \   000068   02....       LJMP    ??MT_BuildEndpointDesc_3 & 0xFFFF
    474              {
    475                /* Endpoint */
    476                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   12....       LCALL   ?Subroutine2 & 0xFFFF
    477          
    478                /* AppProfId */
    479                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_2:
   \   000077   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \   00007E   F0           MOVX    @DPTR,A
    480                pBuf += sizeof(uint16);
   \   00007F   EE           MOV     A,R6
   \   000080   2402         ADD     A,#0x2
   \   000082   FE           MOV     R6,A
   \   000083   5001         JNC     ??MT_BuildEndpointDesc_4
   \   000085   0F           INC     R7
    481          
    482                /* AppDeviceId */
    483                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??MT_BuildEndpointDesc_4:
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E8           MOV     A,R0
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   E9           MOV     A,R1
   \   000093   12....       LCALL   ?Subroutine11 & 0xFFFF
    484                pBuf += sizeof(uint16);
    485          
    486                /* AppDevVer */
    487                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??CrossCallReturnLabel_20:
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   540F         ANL     A,#0xf
   \   00009A   FA           MOV     R2,A
   \   00009B   85..82       MOV     DPL,?V2
   \   00009E   85..83       MOV     DPH,?V3
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   2405         ADD     A,#0x5
   \   0000A4   F8           MOV     R0,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   3400         ADDC    A,#0x0
   \   0000A9   F9           MOV     R1,A
   \   0000AA   8882         MOV     DPL,R0
   \   0000AC   8983         MOV     DPH,R1
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   54F0         ANL     A,#0xf0
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   4A           ORL     A,R2
   \   0000B3   12....       LCALL   ?Subroutine11 & 0xFFFF
    488          
    489                /* LatencyReq */
    490                pBuf++;
    491          
    492                /* AppNumInClusters */
    493                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_21:
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000BF   D0E0         POP     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   EE           MOV     A,R6
   \   0000C3   2405         ADD     A,#0x5
   \   0000C5   FE           MOV     R6,A
   \   0000C6   5001         JNC     ??MT_BuildEndpointDesc_5
   \   0000C8   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_5:
   \   0000C9   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FA           MOV     R2,A
   \   0000CE   6034         JZ      ??MT_BuildEndpointDesc_6
    494                if (epDesc->simpleDesc->AppNumInClusters)
    495                {
    496                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    497                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0000D0                ; Setup parameters for call to function osal_mem_alloc
   \   0000D0   25E0         ADD     A,0xE0 /* A   */
   \   0000D2   FA           MOV     R2,A
   \   0000D3   E4           CLR     A
   \   0000D4   33           RLC     A
   \   0000D5   FB           MOV     R3,A
   \   0000D6   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D9   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000DC   CA           XCH     A,R2
   \   0000DD   2407         ADD     A,#0x7
   \   0000DF   12....       LCALL   ?Subroutine1 & 0xFFFF
    498                  if ( epDesc->simpleDesc->pAppInClusterList )
   \                     ??CrossCallReturnLabel_0:
   \   0000E2   2407         ADD     A,#0x7
   \   0000E4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000E7   6018         JZ      ??MT_BuildEndpointDesc_7
    499                  {
    500                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   0000E9   7A00         MOV     R2,#0x0
   \                     ??MT_BuildEndpointDesc_8:
   \   0000EB   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F8           MOV     R0,A
   \   0000F0   EA           MOV     A,R2
   \   0000F1   C3           CLR     C
   \   0000F2   98           SUBB    A,R0
   \   0000F3   500F         JNC     ??MT_BuildEndpointDesc_6
    501                    {
    502                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   0000F5   12....       LCALL   ?Subroutine4 & 0xFFFF
    503                      pBuf += 2;
    504                    }
   \                     ??CrossCallReturnLabel_6:
   \   0000F8   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000FB   5001         JNC     ??MT_BuildEndpointDesc_9
   \   0000FD   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_9:
   \   0000FE   0A           INC     R2
   \   0000FF   80EA         SJMP    ??MT_BuildEndpointDesc_8
    505                  }
    506                  else
    507                  {
    508                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_7:
   \   000101   75..10       MOV     ?V0,#0x10
    509                  }
    510                }
    511          
    512                /* AppNumOutClusters */
    513                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_6:
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   E0           MOVX    A,@DPTR
   \   000109   C0E0         PUSH    A
   \   00010B   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00010E   D0E0         POP     A
   \   000110   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000113   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000116   E0           MOVX    A,@DPTR
   \   000117   FA           MOV     R2,A
   \   000118   603C         JZ      ??MT_BuildEndpointDesc_10
    514                if (epDesc->simpleDesc->AppNumOutClusters)
    515                {
    516                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    517                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   00011A                ; Setup parameters for call to function osal_mem_alloc
   \   00011A   25E0         ADD     A,0xE0 /* A   */
   \   00011C   FA           MOV     R2,A
   \   00011D   E4           CLR     A
   \   00011E   33           RLC     A
   \   00011F   FB           MOV     R3,A
   \   000120   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000123   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000126   CA           XCH     A,R2
   \   000127   240A         ADD     A,#0xa
   \   000129   12....       LCALL   ?Subroutine1 & 0xFFFF
    518                  if (epDesc->simpleDesc->pAppOutClusterList)
   \                     ??CrossCallReturnLabel_1:
   \   00012C   240A         ADD     A,#0xa
   \   00012E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000131   601E         JZ      ??MT_BuildEndpointDesc_11
    519                  {
    520                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   000133   7A00         MOV     R2,#0x0
   \                     ??MT_BuildEndpointDesc_12:
   \   000135   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   EA           MOV     A,R2
   \   00013E   C3           CLR     C
   \   00013F   98           SUBB    A,R0
   \   000140   5014         JNC     ??MT_BuildEndpointDesc_10
    521                    {
    522                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000142   12....       LCALL   ?Subroutine4 & 0xFFFF
    523                      pBuf += 2;
    524                    }
   \                     ??CrossCallReturnLabel_7:
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00014B   5001         JNC     ??MT_BuildEndpointDesc_13
   \   00014D   0F           INC     R7
   \                     ??MT_BuildEndpointDesc_13:
   \   00014E   0A           INC     R2
   \   00014F   80E4         SJMP    ??MT_BuildEndpointDesc_12
    525                  }
    526                  else
    527                  {
    528                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_11:
   \   000151   75..10       MOV     ?V0,#0x10
   \   000154   8006         SJMP    ??MT_BuildEndpointDesc_14
    529                  }
    530                }
    531          
    532                /* if any list cannot be allocated...free all */
    533                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_10:
   \   000156   7410         MOV     A,#0x10
   \   000158   65..         XRL     A,?V0
   \   00015A   704C         JNZ     ??MT_BuildEndpointDesc_1
   \                     ??MT_BuildEndpointDesc_14:
   \   00015C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00015F   2407         ADD     A,#0x7
   \   000161   F582         MOV     DPL,A
   \   000163   E4           CLR     A
   \   000164   38           ADDC    A,R0
   \   000165   F583         MOV     DPH,A
   \   000167   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00016A   FB           MOV     R3,A
   \   00016B   EA           MOV     A,R2
   \   00016C   4B           ORL     A,R3
   \   00016D   6003         JZ      ??MT_BuildEndpointDesc_15
    534                {
    535                  if (epDesc->simpleDesc->pAppInClusterList)
    536                  {
    537                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   00016F                ; Setup parameters for call to function osal_mem_free
   \   00016F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    538                  }
    539          
    540                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??MT_BuildEndpointDesc_15:
   \   000172   85..82       MOV     DPL,?V2
   \   000175   85..83       MOV     DPH,?V3
   \   000178   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   E0           MOVX    A,@DPTR
   \   000185   6015         JZ      ??MT_BuildEndpointDesc_16
    541                  {
    542                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   000187                ; Setup parameters for call to function osal_mem_free
   \   000187   8882         MOV     DPL,R0
   \   000189   8983         MOV     DPH,R1
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   12....       LCALL   ??Subroutine15_0 & 0xFFFF
    543                  }
   \                     ??CrossCallReturnLabel_28:
   \   000198   FB           MOV     R3,A
   \   000199   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    544          
    545                  osal_mem_free(epDesc->simpleDesc);
   \                     ??MT_BuildEndpointDesc_16:
   \   00019C                ; Setup parameters for call to function osal_mem_free
   \   00019C   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    546                }
    547              }
   \                     ??CrossCallReturnLabel_30:
   \   00019F   FB           MOV     R3,A
   \   0001A0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001A3   8003         SJMP    ??MT_BuildEndpointDesc_1
    548              else
    549              {
    550                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_3:
   \   0001A5   75..10       MOV     ?V0,#0x10
    551              }
    552            }
    553          
    554            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   0001A8   A9..         MOV     R1,?V0
   \   0001AA   7F06         MOV     R7,#0x6
   \   0001AC   02....       LJMP    ?BANKED_LEAVE_XDATA
    555          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   49           ORL     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   2409         ADD     A,#0x9
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   2406         ADD     A,#0x6
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   FC           MOV     R4,A
   \   00000D   E9           MOV     A,R1
   \   00000E   FD           MOV     R5,A
   \   00000F   8C82         MOV     DPL,R4
   \   000011   8D83         MOV     DPH,R5
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000009   F583         MOV     DPH,A
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A..         MOV     ?V4,R2
   \   000002                REQUIRE ??Subroutine14_0
   \   000002                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine15_0
   \   000006                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   E4           CLR     A
   \   00000B   C8           XCH     A,R0
   \   00000C   F9           MOV     R1,A
   \   00000D   E5..         MOV     A,?V4
   \   00000F   28           ADD     A,R0
   \   000010   E4           CLR     A
   \   000011   39           ADDC    A,R1
   \   000012   F5..         MOV     ?V5,A
   \   000014   EA           MOV     A,R2
   \   000015   25E0         ADD     A,0xE0 /* A   */
   \   000017   F8           MOV     R0,A
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   F9           MOV     R1,A
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   E5..         MOV     A,?V4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V5
   \   000017   F0           MOVX    @DPTR,A
   \   000018   EE           MOV     A,R6
   \   000019   2402         ADD     A,#0x2
   \   00001B   FE           MOV     R6,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E5..         MOV     A,?V4
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   C8           XCH     A,R0
   \   00000B   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildAndSendZToolResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildAndSendZToolResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MTProcessAppRspMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MTProcessAppRspMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ReverseBytes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ReverseBytes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Word2Buf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Word2Buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildEndpointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildEndpointDesc
    556          #endif
    557          /***************************************************************************************************
    558          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MTProcessAppRspMsg
        0      9   -> MT_BuildAndSendZToolResponse
      1     28   MT_BuildAndSendZToolResponse
        0     16   -> MT_TransportAlloc
        0     16   -> MT_TransportSend
        0     19   -> osal_memcpy
      1     14   MT_BuildEndpointDesc
        0     14   -> afFindEndPointDesc
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      0      9   MT_Init
        0      9   -> MT_SysResetInd
      3      3   MT_ProcessIncoming
        2      3   -> MT_BuildAndSendZToolResponse
      1     11   MT_ReverseBytes
      1      9   MT_Word2Buf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine14_0
       5  ??Subroutine15_0
       5  ?Subroutine0
      16  ?Subroutine1
      14  ?Subroutine10
       7  ?Subroutine11
      12  ?Subroutine12
       2  ?Subroutine13
       8  ?Subroutine2
      29  ?Subroutine3
      32  ?Subroutine4
      15  ?Subroutine5
      26  ?Subroutine6
      12  ?Subroutine7
      12  ?Subroutine8
      10  ?Subroutine9
      21  MTProcessAppRspMsg
       6  MTProcessAppRspMsg::?relay
      98  MT_BuildAndSendZToolResponse
       6  MT_BuildAndSendZToolResponse::?relay
     431  MT_BuildEndpointDesc
       6  MT_BuildEndpointDesc::?relay
      22  MT_Init
       6  MT_Init::?relay
     158  MT_ProcessIncoming
       6  MT_ProcessIncoming::?relay
      76  MT_ReverseBytes
       6  MT_ReverseBytes::?relay
      55  MT_Word2Buf
       6  MT_Word2Buf::?relay
       1  debugCompId
       1  debugThreshold
      44  mtProcessIncoming

 
 1 072 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    46 bytes in segment XDATA_Z
 
 1 114 bytes of CODE  memory
    46 bytes of XDATA memory

Errors: none
Warnings: none
